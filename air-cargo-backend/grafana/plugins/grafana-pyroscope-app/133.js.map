{"version":3,"file":"133.js?_cache=ef65dc39dd8f3ff27845","mappings":"oMAEO,MAAMA,EAAc,I,QAAIC,GAAY,CACzCC,eAAgB,CACdC,QAAS,CACPC,YAAa,SACbC,OAAO,EACPC,sBAAsB,M,6ECLfC,EAAmBC,EAAAA,GAEnBC,EAAkB,MAAMF,IAE9B,eAAKG,G,+IAAAA,C,CAAL,C,ICNA,MAAMC,EAAa,MCEpBC,EAAgE,CACpE,CACEC,OAAQ,YACRC,YAAa,SAEf,CACED,OAAQ,mBACRC,YAAa,OAEf,CACED,OAAQ,mBACRC,YAAa,OAEf,CACED,OAAQ,eACRC,YAAa,SAIV,SAASC,I,IACTC,EAAAA,EAAL,KAAKA,QAAAA,EAAAA,cAAAA,IAAAA,GAAgB,QAAhBA,EAAAA,EAAQC,gBAARD,IAAAA,OAAAA,EAAAA,EAAkBE,MACrB,OAAO,KAGT,MAAMC,EAAQP,EAASQ,MAAK,EAAGP,YAAaA,EAAOQ,KAAKL,OAAOC,SAASC,QAExE,OAAOC,EAAQA,EAAML,YAAc,IACrC,CC1BO,MAAMQ,EAAoB,IAAIC,IAAkC,CAWrE,CACE,MACA,CACET,YAAa,MACbU,QAAS,wBACTC,QAAS,mGAGb,CACE,MACA,CACEX,YAAa,MACbU,QAAS,wBACTC,QAAS,mGAGb,CACE,OACA,CACEX,YAAa,OACbU,QAAS,yBACTC,QAAS,qGC5Bf,IAAIC,EAAoB,KAEjB,MAAMC,EAAU,IAAMD,E,4jBCD3B,cAMA,yBAAaE,EAAmEC,G,MAEpD,S,oDAAtBC,K,IAAK,E,SACPC,QAAQH,MAAeC,EAE3B,CAwDK,MAAMG,EAAS,IApEf,MAcLC,KAAAA,G,IAGEN,EAFA,EAAAG,KAAK,UAALA,KAAkB,QAAS,IAEpBH,QAAPA,EAAAA,WAAAA,IAAAA,GAAAA,EAAWO,IAAIC,QAAQ,GAAI,CACzBC,MAAOC,EAAAA,GAASC,OAEpB,CAEAC,KAAAA,IAASV,G,IAGPF,EAFA,EAAAG,KAAK,UAALA,KAAkB,QAASD,GAEpBF,QAAPA,EAAAA,WAAAA,IAAAA,GAAAA,EAAWO,IAAIC,QAAQN,EAAM,CAC3BO,MAAOC,EAAAA,GAASG,OAEpB,CAEAC,IAAAA,IAAQZ,G,IAGNF,EAFA,EAAAG,KAAK,UAALA,KAAkB,OAAQD,GAEnBF,QAAPA,EAAAA,WAAAA,IAAAA,GAAAA,EAAWO,IAAIC,QAAQN,EAAM,CAC3BO,MAAOC,EAAAA,GAASK,MAEpB,CAEAC,GAAAA,IAAOd,G,IAGLF,EAFA,EAAAG,KAAK,UAALA,KAAkB,MAAOD,GAElBF,QAAPA,EAAAA,WAAAA,IAAAA,GAAAA,EAAWO,IAAIC,QAAQN,EAAM,CAC3BO,MAAOC,EAAAA,GAASO,KAEpB,CAEAC,IAAAA,IAAQhB,G,IAGNF,EAFA,EAAAG,KAAK,UAALA,KAAkB,OAAQD,GAEnBF,QAAPA,EAAAA,WAAAA,IAAAA,GAAAA,EAAWO,IAAIC,QAAQN,EAAM,CAC3BO,MAAOC,EAAAA,GAASS,MAEpB,CAEAC,KAAAA,CAAMA,EAAcC,G,IAQlBrB,EAPA,EAAAG,KAAK,UAALA,KAAkB,QAAS,CAACiB,IAExBC,GACF,EAAAlB,KAAK,UAALA,KAAkB,QAAS,CAAC,gBAAiBkB,IAIxCrB,QAAPA,EAAAA,WAAAA,IAAAA,GAAAA,EAAWO,IAAIe,UAAUF,EAAO,CAC9BC,WAEJ,CA9DAE,WAAAA,G,YAIA,K,EAAA,G,2CANA,S,uBAAA,I,OAGO,EAAenC,IACtB,G,6WCPA,cAkCK,MAAMoC,EAAc,IAnC3B,MASEC,GAAAA,CAAIC,GACF,OAAO,EAAAvB,KAAK,GAASwB,eAAeD,EACtC,CAEAE,GAAAA,CAAIF,GACF,IAAKvB,KAAKsB,IAAIC,GACZ,OAAO,KAGT,IACE,OAAOG,KAAKC,MAAM,EAAA3B,KAAK,GAAS4B,QAAQL,GAC1C,CAAE,MAAON,GAEP,OADAf,EAAOe,MAAMA,EAAgB,CAAEN,KAAM,wCAAwCY,QACtE,IACT,CACF,CAEAM,GAAAA,CAAIN,EAAkBO,GACpB,IACE,EAAA9B,KAAK,GAAS+B,QAAQR,EAAUG,KAAKM,UAAUF,GACjD,CAAE,MAAOb,GACPf,EAAOe,MAAMA,EAAgB,CAAEN,KAAM,+BAA+BY,OACtE,CACF,C,wBA/BA,U,kBAAoBrC,OAAO+C,e,EAE3BC,K,EAAAA,O,EAAO,CACLC,SAAU,GAAGzD,EAAAA,kBACb0D,mBAAoB,GAAG1D,EAAAA,uBACvB2D,kBAAmB,GAAG3D,EAAAA,uB,+FCVb4D,EAAO,O,wHCAb,MAAMC,UAAwBC,MAInCpB,WAAAA,CAAYqB,EAAoBC,GAC9B,IAAIC,EAAU,QAAQF,EAASG,WAAWH,EAASI,YAAc,QAE7DH,aAAAA,EAAAA,EAAcC,WAChBA,EAAU,GAAGA,OAAaD,EAAaC,WAGzCG,MAAMH,GAVRF,EAAAA,KAAAA,gBAAAA,GACAM,EAAAA,KAAAA,cAAAA,GAWE/C,KAAKyC,SAAWA,CAClB,E,igCCVK,MAAMO,EAULC,KAAAA,CAAMC,EAAkBC,G,sBAA9B,YACE,EAAKC,gBAAkB,IAAIC,gBAC3B,MAAM,OAAEC,GAAW,EAAKF,gBAElBG,EAAU,GAAG,EAAKC,UAAUN,IAC5BO,EAAU,KAAK,EAAKC,eAAmBP,aAAAA,EAAAA,EAASM,SAChDE,EAAc,KAClBL,UACGH,GAAAA,CACHM,YAGF,IAAIhB,EAEJ,IAGE,GAFAA,QAAiBQ,MAAMM,EAASI,IAE3BlB,EAASmB,GACZ,MAAM,IAAIrB,EAAgBE,QAAgBA,EAASoB,OAAOC,MAAMxB,GAEpE,CAAE,MAAOrB,G,IAEmBkC,EAG1B,MAJI,EAAKY,aAAa9C,KACnBA,EAAc8B,QAASI,SAAe,QAAfA,EAAAA,EAASG,cAATH,IAAAA,OAAAA,EAAAA,EAAiBJ,SAAUO,EAAOP,QAGtD9B,CACR,CAAE,QACA,EAAKmC,gBAAkB,IACzB,CAEA,OAAOX,CACT,E,iLAEAuB,KAAAA,CAAMjB,GACA/C,KAAKoD,iBACPpD,KAAKoD,gBAAgBY,MAAMjB,EAE/B,CAEAgB,YAAAA,CAAa9C,GACX,OAAOA,aAAiBgD,cAA+B,eAAfhD,EAAMiD,IAChD,CA9CA9C,WAAAA,CAAYoC,EAAiBE,EAAyC,CAAC,GAJvEF,EAAAA,KAAAA,UAAU,IACVE,EAAAA,KAAAA,iBAAiB,CAAC,GAClBN,EAAAA,KAAAA,kBAA2C,MAGzCpD,KAAKwD,QAAUA,EACfxD,KAAK0D,eAAiBS,OAAOC,OAAOV,EACtC,ECIK,MAAMW,UAAkBrB,EAC7B,8BAAOsB,GACL,OAAOH,OAAOI,OAAOC,EAAAA,OAAOC,aAAaC,QAAQC,GAXjB,iCAWwBA,EAAGC,MAC7D,CAEA,8BAAOC,G,IAIuBxD,EAH5B,MAAMyD,EAAuBT,EAAUC,0BAEjCS,EAAa,IAAIC,IAAI9F,OAAOC,SAAS8F,MAAMC,aAAazD,IAhB1B,kBAiB9B0D,EAAwE,QAAlD9D,EAAAA,EAAYI,IAAIJ,EAAYa,KAAKG,0BAAjChB,IAAAA,OAAAA,EAAAA,EAAqD+D,WAE3EC,EACJP,EAAqBxF,MAAMqF,GAAOA,EAAGW,MAAQP,KAC7CD,EAAqBxF,MAAMqF,GAAOA,EAAGW,MAAQH,KAC7CL,EAAqBxF,MAAMqF,GAAOA,EAAGY,SAASC,oBAC9CV,EAAqBxF,MAAMqF,GAAOA,EAAGc,aACrCX,EAAqB,GAEvB,OAAKO,IACHnF,EAAOa,KACL,qHAKK,CAAEuE,IAAK,6BAIlB,CAEA,iBAAOI,GACL,MAAMC,EAAsBtB,EAAUQ,0BAEtC,IAAIe,EAAYpB,EAAAA,OAAOoB,WAAa,GAMpC,MALyB,MAArBA,EAAUC,IAAI,KAEhBD,GAAa,KAGR,GAAGA,8BAAsCD,EAAoBL,KACtE,CAEAlE,WAAAA,G,IAG+BoD,EAAAA,EAF7B1B,MAAMuB,EAAUqB,aAAaI,WAAY,CACvC,eAAgB,mBAChB,mBAAoBC,QAAsB,QAAfvB,EAAAA,EAAAA,OAAOwB,gBAAPxB,IAAAA,GAAqB,QAArBA,EAAAA,EAAiByB,YAAjBzB,IAAAA,OAAAA,EAAAA,EAAuB0B,QAAS,KAE/D,E,uICvCK,MAAMC,EAAiB,IAjB9B,cAA6B9B,EACrB5C,GAAAA,G,sBAAN,YACE,MAAMgB,QAAiB,EAAKQ,MAAM,6CAA8C,CAC9EmD,OAAQ,OACRC,KAAM3E,KAAKM,UAAU,CAAC,KAGlB6B,QAAapB,EAASoB,OAE5B,MAAO,CACLyC,gBAAiBzC,EAAK0C,aACtBC,kBAAmBC,OAAO5C,EAAK2C,mBAC/BE,kBAAmBD,OAAO5C,EAAK6C,mBAEnC,E,mLChBK,SAASC,IACd,MAAOC,EAAeC,IAAoBC,EAAAA,EAAAA,WAAS,GAE7CC,EAA4B1C,EAAUC,0BAA0B0C,QAChE,WAAEC,EAAU,MAAEhG,EAAK,MAAEiG,GCCtB,UAA6B,QAAEC,IACpC,MAAM,WAAEF,EAAU,MAAEhG,EAAK,KAAEmG,EAAI,QAAEC,IAAYC,EAAAA,EAAAA,GAAS,CACpDH,UACAI,gBAAiB,KAAO,CAAEjB,iBAAiB,EAAME,kBAAmB,EAAGE,kBAAmB,IAC1Fc,SAAU,CAAC,gBACXC,QAAS,KACPtB,EAAenC,QAERmC,EAAe1E,SAI1B,MAAO,CACLwF,aACAhG,MAAOkF,EAAepC,aAAa9C,GAAS,KAAOA,EACnDiG,MAAOE,EACPC,UAEJ,CDnBuCK,CAAoB,CAAEP,QAASJ,EAA4B,IAC1FY,GAAiBV,KAAeC,aAAAA,EAAAA,EAAOZ,iBAE7C,MAAO,CACLc,KAAM,CACJQ,uBAAwB3G,GAASgG,EACjCY,0BAA2B5G,IAAU8F,GAA6BY,KAAmBf,EACrFkB,8BAA+Bf,GAEjCgB,QAAS,CACPC,UAAAA,GACEnB,GAAiB,EACnB,GAGN,CElBA,MAAMoB,EAAaC,IAA0B,CAC3CC,KAAKC,EAAAA,EAAAA,KAAI,CACPC,QAAS,OACTC,cAAe,MACfC,eAAgB,gBAChBC,WAAY,eAEdC,cAAcL,EAAAA,EAAAA,KAAI,CAChBC,QAAS,OACTC,cAAe,SACfI,SAAU,QACVF,WAAY,UAEdG,QAAQP,EAAAA,EAAAA,KAAI,CACVC,QAAS,OACTC,cAAe,SACfI,SAAU,QACVF,WAAY,QAEdI,SAASR,EAAAA,EAAAA,KAAI,CACXC,QAAS,OACTQ,MAAOX,EAAMY,OAAOC,KAAKC,UACzBC,SAAUf,EAAMgB,WAAWC,UAAUF,WAEvCG,iBAAiBhB,EAAAA,EAAAA,KAAI,CACnBC,QAAS,OAET,CAAC,UAAUgB,EAAAA,YAAYC,QAAQpB,EAAMqB,GAAGC,YAAYC,OAAQ,CAC1DpB,QAAS,aASTqB,EAAcC,IAAiBC,EAAAA,EAAAA,yBAAuBC,EAAAA,EAAAA,gBAAe,WAAfA,CAA2BF,IAEjFG,EAAeC,IAAkBH,EAAAA,EAAAA,yBAAuBC,EAAAA,EAAAA,gBAAe,QAAfA,CAAwBE,IAE/E,SAASC,EAAqBC,GACnC,MAAMC,GAASC,EAAAA,EAAAA,YAAWlC,IACpB,KAAEb,GAAS6C,EACXG,EAAwBV,EAAWtC,EAAKiD,YAAYD,uBAEpDE,GAAuBC,EAAAA,EAAAA,UAAQ,IAEjC,kBAACC,MAAAA,CAAIC,cAAY,uBACf,kBAACD,MAAAA,CAAIE,UAAWR,EAAO/B,KACrB,kBAACqC,MAAAA,CAAIE,UAAWR,EAAOzB,cAAc,sBACrC,kBAAC+B,MAAAA,CAAIE,UAAWR,EAAOvB,QAASyB,GAChC,kBAACI,MAAAA,CAAIE,UAAWR,EAAOvB,QAAQ,WAEQgC,IAAxCvD,EAAKiD,YAAYO,oBAChB,kBAACJ,MAAAA,CAAIE,UAAWR,EAAO/B,KACrB,kBAACqC,MAAAA,CAAIE,UAAWR,EAAOzB,cAAc,mBACrC,kBAAC+B,MAAAA,CAAIE,UAAWR,EAAOvB,QAASmB,EAAY1C,EAAKiD,YAAYO,qBAC7D,kBAACJ,MAAAA,CAAIE,UAAWR,EAAOvB,QAAQ,MAGnC,kBAAC6B,MAAAA,CAAIE,UAAWR,EAAO/B,KACrB,kBAACqC,MAAAA,CAAIE,UAAWR,EAAOzB,cAAc,iBACrC,kBAAC+B,MAAAA,CAAIE,UAAWR,EAAOvB,QAASvB,EAAKiD,YAAYQ,oBAAsB,MAAQ,MAC/E,kBAACL,MAAAA,CAAIE,UAAWR,EAAOvB,QAAQ,MAEjC,kBAACmC,EAAAA,QAAOA,MACR,kBAACN,MAAAA,CAAIE,UAAWR,EAAO/B,KACrB,kBAACqC,MAAAA,CAAIE,UAAWR,EAAOzB,cAAc,KACpCrB,EAAK2D,YAAYC,KAAI,CAACC,EAAGC,IACxB,kBAACV,MAAAA,CAAIW,IAAKD,EAAGR,UAAWR,EAAOvB,QAC7B,kBAACyC,SAAAA,KAAQH,EAAEI,mBAIjB,kBAACb,MAAAA,CAAIE,UAAWR,EAAO/B,KACrB,kBAACqC,MAAAA,CAAIE,UAAWR,EAAOzB,cAAc,YACpCrB,EAAK2D,YAAYC,KAAI,CAACC,EAAGC,IACxB,kBAACV,MAAAA,CAAIW,IAAKD,EAAGR,UAAWR,EAAOvB,QAC5BsC,EAAEK,gBAAkB,QAI3B,kBAACd,MAAAA,CAAIE,UAAWR,EAAO/B,KACrB,kBAACqC,MAAAA,CAAIE,UAAWR,EAAOzB,cAAc,UACpCrB,EAAK2D,YAAYC,KAAI,CAACC,EAAGC,IACxB,kBAACV,MAAAA,CAAIW,IAAKD,EAAGR,UAAWR,EAAOvB,QAC5BmB,EAAYmB,EAAEM,aAAe,QAIpC,kBAACf,MAAAA,CAAIE,UAAWR,EAAO/B,KACrB,kBAACqC,MAAAA,CAAIE,UAAWR,EAAOzB,cAAc,UACpCrB,EAAK2D,YAAYC,KAAI,CAACC,EAAGC,IACxB,kBAACV,MAAAA,CAAIW,IAAKD,EAAGR,UAAWR,EAAOvB,QAC5BmB,EAAYmB,EAAEO,cAAgB,QAIrC,kBAAChB,MAAAA,CAAIE,UAAWR,EAAO/B,KACrB,kBAACqC,MAAAA,CAAIE,UAAWR,EAAOzB,cAAc,YACpCrB,EAAK2D,YAAYC,KAAI,CAACC,EAAGC,IACxB,kBAACV,MAAAA,CAAIW,IAAKD,EAAGR,UAAWR,EAAOvB,QAC5BmB,EAAYmB,EAAEQ,eAAiB,QAItC,kBAACjB,MAAAA,CAAIE,UAAWR,EAAO/B,KACrB,kBAACqC,MAAAA,CAAIE,UAAWR,EAAOzB,cAAc,WACpCrB,EAAK2D,YAAYC,KAAI,CAACC,EAAGC,IACxB,kBAACV,MAAAA,CAAIW,IAAKD,EAAGR,UAAWR,EAAOvB,QAC5BmB,EAAYmB,EAAES,cAAgB,QAIrC,kBAAClB,MAAAA,CAAIE,UAAWR,EAAO/B,KACrB,kBAACqC,MAAAA,CAAIE,UAAWR,EAAOzB,cAAc,KACrC,kBAAC+B,MAAAA,CAAIE,UAAWR,EAAOvB,QAAQ,KAC/B,kBAAC6B,MAAAA,CAAIE,UAAWR,EAAOvB,QAAQ,MAEjC,kBAAC6B,MAAAA,CAAIE,UAAWR,EAAO/B,KACrB,kBAACqC,MAAAA,CAAIE,UAAWR,EAAOzB,cAAc,eACpCrB,EAAK2D,YAAYC,KAAI,CAACC,EAAGC,IACxB,kBAACV,MAAAA,CAAIW,IAAKD,EAAGR,UAAWR,EAAOvB,QAC5Be,EAAWuB,EAAEU,aAAe,QAInC,kBAACnB,MAAAA,CAAIE,UAAWR,EAAO/B,KACrB,kBAACqC,MAAAA,CAAIE,UAAWR,EAAOzB,cAAc,kBACpCrB,EAAK2D,YAAYC,KAAI,CAACC,EAAGC,IACxB,kBAACV,MAAAA,CAAIW,IAAKD,EAAGR,UAAWR,EAAOvB,QAC5Be,EAAWuB,EAAEW,eAAiB,QAIrC,kBAACpB,MAAAA,CAAIE,UAAWR,EAAO/B,KACrB,kBAACqC,MAAAA,CAAIE,UAAWR,EAAOzB,cAAc,iBACpCrB,EAAK2D,YAAYC,KAAI,CAACC,EAAGC,IACxB,kBAACV,MAAAA,CAAIW,IAAKD,EAAGR,UAAWR,EAAOvB,QAC5Be,EAAWuB,EAAEY,cAAgB,UAMvC,CAACzE,EAAM8C,EAAQE,IAElB,OACE,yCAC8CO,IAA3CvD,EAAKiD,YAAYD,sBAChB,kBAAC0B,EAAAA,UAASA,CAACC,QAASzB,EAAsB0B,YAAY,GACpD,kBAACxB,MAAAA,CAAIE,UAAWR,EAAOtB,QAAS6B,cAAY,yBAC1C,kBAACwB,OAAAA,CAAKvB,UAAWR,EAAOd,iBAAiB,8BAA4BgB,GAA6B,IAElG,kBAAC8B,EAAAA,WAAUA,CAAChI,KAAK,WAAWiI,aAAW,iBAGzC,KAGV,C,cChKA,SAASC,IAAuB,KAAEzC,IAChC,MAAMO,GAASC,EAAAA,EAAAA,YAAWlC,IAC1B,OAAO,kBAACoE,MAAAA,CAAI3B,WAAW4B,EAAAA,EAAAA,IAAGpC,EAAOqC,KAAM5C,GAAO6C,IAAI,qDACpD,CAEO,MAAMC,GAAgBC,IAAAA,KAAWN,IAElCnE,GAAY,KAAO,CACvBsE,KAAMnE,EAAAA,GAAG;;;;;;;;;;;;;MCPLuE,GAA0B9N,EAC1B+N,GAAkB,wDAAwDD,MAExEE,UAAWC,IAAqBtI,EAAAA,OAExC,SAASuI,KACP,MAAM7C,GAASC,EAAAA,EAAAA,YAAWlC,KAGxB+E,MACErM,MAAM,QAAEsM,EAAO,QAAEC,MAEjBC,EAAAA,EAAAA,qBAAsB,CAAEH,KAAM,CAAErM,KAAM,CAAEsM,QAAS,QAASC,QAAS,OAEvE,OACE,kBAAC1C,MAAAA,CAAIE,UAAWR,EAAOkD,YACrB,kBAACC,KAAAA,KACC,kBAACZ,GAAaA,CAAC9C,KAAK,UAAU,+BACDsD,GAE/B,kBAACzC,MAAAA,CAAIE,UAAWR,EAAOoD,UAAU,gBAAcJ,GAGrD,CAEA,SAASK,KACP,MAAMC,EAA4B,QAApBb,GACRc,EAAiBD,EAAQb,GAAkBA,GAAgBe,MAAM,EAAG,GAE1E,OACE,kBAACC,EAAAA,KAAIA,CAACC,OAAQ,kBAACb,GAAAA,OACb,kBAACY,EAAAA,KAAKE,KAAI,CACRC,MAAO,eAAeL,IACtBM,KAAK,SACLC,QAAS,IAAM9O,OAAO+O,KAAKrB,IAC3BsB,SAAUV,IAEZ,kBAACG,EAAAA,KAAKE,KAAI,CACRC,MAAM,YACNC,KAAK,UACLC,QAAS,IAAM9O,OAAO+O,KAAK,0EAE7B,kBAACN,EAAAA,KAAKE,KAAI,CACRC,MAAM,aACNC,KAAK,oBACLC,QAAS,IAAM9O,OAAO+O,KAAK,kFAE7B,kBAACN,EAAAA,KAAKE,KAAI,CACRC,MAAM,gBACNC,KAAK,gBACLC,QAAS,IAAM9O,OAAO+O,KAAK,qFAE7B,kBAACN,EAAAA,KAAKE,KAAI,CACRC,MAAM,kBACNC,KAAK,MACLC,QAAS,IAAM9O,OAAO+O,KAAK,qFAE7B,kBAACN,EAAAA,KAAK7C,QAAO,MACb,kBAAC6C,EAAAA,KAAKE,KAAI,CACRC,MAAO,WAAWhB,GAAiBqB,YAAYrB,GAAiBG,YAAYH,GAAiBsB,OAC7FL,KAAK,SACLC,QAAS,IAAM9O,OAAO+O,KAAK,6CAA6CnB,GAAiBuB,YAIjG,CAEO,SAASC,KACd,OACE,kBAACC,EAAAA,SAAQA,CAACC,QAAS,IAAM,kBAACjB,GAAAA,MAAakB,UAAU,cAC/C,kBAACvC,EAAAA,WAAUA,CAAChI,KAAK,cAAciI,aAAW,cAAcuC,MAAM,gBAGpE,CAEA,MAAMzG,GAAaC,IAA0B,CAC3CkF,WAAYhF,EAAAA,GAAG;eACFF,EAAMyG,QAAQ,GAAK;;IAGhCrB,SAAUlF,EAAAA,GAAG;aACFF,EAAMY,OAAOC,KAAKC;iBACdd,EAAMgB,WAAWC,UAAUF;MC3E5C,SAAS2F,IAAmB,MAAEF,EAAK,cAAEG,IACnC,MAAM3E,GAASC,EAAAA,EAAAA,YAAWlC,IACpB6G,EAA6B,iBAAVJ,EAAqB,GAAGA,gBAAsB,YAEvE,OACE,oCACE,kBAACK,EAAAA,EAAMA,KACL,kBAACL,QAAAA,KAAOI,IAEV,kBAACtE,MAAAA,CAAIE,UAAWR,EAAO8E,gBACrB,kBAACC,EAAAA,MAAKA,CAAC1G,eAAe,iBACpB,kBAACiC,MAAAA,KACC,kBAACiC,GAAaA,CAAC9C,KAAK,UACpB,kBAACuF,KAAAA,CAAGxE,UAAWR,EAAOwE,MAAOjE,cAAY,cACtCiE,IAGL,kBAAClE,MAAAA,CAAIE,UAAWR,EAAOiF,UACrB,kBAACb,GAAUA,MACVO,EAAgB,kBAAC7E,EAAoBA,CAAC5C,KAAMyH,IAAoB,QAM7E,CAEA,MAAM5G,GAAaC,IAA0B,CAC3C8G,eAAgB5G,EAAAA,GAAG;cACPF,EAAMyG,QAAQ;mBACTzG,EAAMyG,QAAQ;qBACZzG,EAAMyG,QAAQ;IAEjCD,MAAOtG,EAAAA,GAAG;iBACKF,EAAMgB,WAAWkG,GAAGnG;;;;;YAKzBf,EAAMyG,QAAQ;IAExBQ,SAAU/G,EAAAA,GAAG;;;;;MAQFiH,IAAYC,EAAAA,EAAAA,MAAKV,IC3DvB,SAASW,KACd,OACE,kBAACC,EAAAA,WAAUA,CAACC,OAAQC,EAAAA,eAAeC,QACjC,kBAACN,GAASA,CACRX,MACE,kBAACzC,OAAAA,KAAK,cACO,kBAAC2D,EAAAA,KAAIA,CAAC1L,KAAK,qBAMlC,CCbA,MAAM+D,GAAaC,IAA0B,CAC3C2H,KAAMzH,EAAAA,GAAG;aACEF,EAAMY,OAAOC,KAAK8G;;;;MAOxB,SAASC,IAAW,KAAE7K,EAAI,SAAE8K,IACjC,MAAM7F,GAASC,EAAAA,EAAAA,YAAWlC,IAE1B,OACE,kBAAC+H,IAAAA,CAAEtF,UAAWR,EAAO2F,KAAM5K,KAAMA,EAAMgL,OAAO,SAASC,IAAI,cACxDH,EAAS,IAAE,kBAACH,EAAAA,KAAIA,CAAC1L,KAAK,sBAG7B,CCdO,SAASiM,KACd,OACE,kBAACX,EAAAA,WAAUA,CAACC,OAAQC,EAAAA,eAAeC,QACjC,kBAACN,GAASA,CAACX,MAAM,+BAEjB,kBAAC0B,EAAAA,MAAKA,CAACC,SAAS,QAAQ3B,MAAM,kCAAiC,uDACR,IACrD,kBAACoB,GAAUA,CAAC7K,KAAK,gCAA+B,6CAAsD,8BAK9G,C,kSCfO,SAASqL,KACd,MAAM,UAAEC,GCJH,WACL,MAAM,WAAEtJ,EAAU,MAAEhG,EAAK,KAAEmG,IAASE,EAAAA,EAAAA,GAAS,CAC3CE,SAAU,CAAC,aACXC,QAAS,IACPxE,MAAM,6DAA6DuN,MAAM/N,GAAaA,EAASoB,WAGnG,MAAO,CACLoD,aACAhG,QACAsP,UAAWnJ,EAEf,CDRwBqJ,IAEfC,EAAaC,IAAkB7J,EAAAA,EAAAA,UAAS,qCACzC8J,EAAU,2BAA2BrR,KAAKL,OAAOC,SAASC,MAEhE,GAAImR,GAAaA,EAAUM,SAAWN,EAAUO,aAAc,CAC5D,MAAMC,EAAiB,4BAA4BR,EAAUM,2BAA2BN,EAAUO,eAE9FJ,IAAgBK,GAClBJ,EAAeI,EAEnB,CAEA,MAAO,CACL3J,KAAM,CACJsJ,cACAE,WAEF7I,QAAS,CAAC,EAEd,CEZA,MAAME,GAAaC,IAA0B,CAC3C8I,cAAe5I,EAAAA,GAAG;kBACFF,EAAMY,OAAOmI,WAAWjI;;;;;;IAOxCkI,oBAAqB9I,EAAAA,GAAG;;;;;;IAOxB+I,gBAAiB/I,EAAAA,GAAG;;;;;;;;IASpBgJ,sBAAuBhJ,EAAAA,GAAG;;;IAI1BiJ,qBAAsBjJ,EAAAA,GAAG;;;IAIzBkJ,KAAMlJ,EAAAA,GAAG;;;IAITmJ,WAAYnJ,EAAAA,GAAG;;IAGfoJ,UAAWpJ,EAAAA,GAAG;;;;;;IAOdqJ,sBAAuBrJ,EAAAA,GAAG;;;;;;;;;;;;IAc1BsJ,OAAQtJ,EAAAA,GAAG;;IAIXuJ,OAAQvJ,EAAAA,GAAG;;IAIXwJ,0BAA2BxJ,EAAAA,GAAG;;IAG9ByJ,2BAA4BzJ,EAAAA,GAAG;;;;;IAM/BsG,MAAOtG,EAAAA,GAAG;;;IAIV0J,SAAU1J,EAAAA,GAAG;;;;MAOR,SAAS2J,KACd,MAAM7H,GAASC,EAAAA,EAAAA,YAAWlC,KACpB,KAAEb,GAASkJ,KAEjB,OACE,kBAAC9F,MAAAA,CAAIC,cAAY,oBACf,kBAACD,MAAAA,CAAIE,UAAWR,EAAOoH,KAAM7G,cAAY,QACvC,kBAACD,MAAAA,CAAIE,UAAWR,EAAOqH,YACrB,kBAACrC,KAAAA,CAAGxE,UAAWR,EAAOwE,OAAO,yCAC7B,kBAACU,KAAAA,CAAG1E,UAAWR,EAAO4H,UAAU,2FAKlC,kBAACzF,MAAAA,CAAIG,IAAKwF,GAAWtH,UAAWR,EAAOsH,aAGzC,kBAAChH,MAAAA,CAAIC,cAAY,mBACf,kBAACwH,KAAAA,KAAG,mBACJ,kBAACzH,MAAAA,CAAIE,UAAWR,EAAO8G,eACrB,kBAACxG,MAAAA,CAAIE,UAAWR,EAAOiH,iBACrB,kBAAC9E,MAAAA,CAAI3B,UAAWR,EAAOmH,qBAAsB7E,IAAK0F,KAClD,kBAACD,KAAAA,CAAGvH,UAAWR,EAAOkH,uBAAuB,gBAC7C,kBAACe,IAAAA,CAAEzH,UAAWR,EAAO2H,4BAA4B,+KAKnD,kBAACrH,MAAAA,CAAIE,UAAWR,EAAOiH,iBACrB,kBAAC9E,MAAAA,CAAI3B,UAAWR,EAAOmH,qBAAsB7E,IAAK4F,KAClD,kBAACH,KAAAA,CAAGvH,UAAWR,EAAOkH,uBAAuB,oBAC7C,kBAACe,IAAAA,CAAEzH,UAAWR,EAAO2H,4BAA4B,iKAKnD,kBAACrH,MAAAA,CAAIE,UAAWR,EAAOiH,iBACrB,kBAAC9E,MAAAA,CAAI3B,UAAWR,EAAOmH,qBAAsB7E,IAAK6F,KAClD,kBAACJ,KAAAA,CAAGvH,UAAWR,EAAOkH,uBAAuB,4BAC7C,kBAACe,IAAAA,CAAEzH,UAAWR,EAAO2H,4BAA4B,2KAQvD,kBAACrH,MAAAA,CAAIC,cAAY,sBACf,kBAACwH,KAAAA,KAAG,sBACJ,kBAACzH,MAAAA,CAAIE,UAAWR,EAAO8G,eACpB5J,EAAKwJ,QACJ,oCACE,kBAACpG,MAAAA,CAAIE,UAAWR,EAAOiH,iBACrB,kBAAC3G,MAAAA,CAAIE,UAAWR,EAAOuH,uBACrB,kBAACxF,OAAAA,CAAKvB,UAAWR,EAAO0H,2BAA2B,MAErD,kBAACK,KAAAA,CAAGvH,UAAWR,EAAOkH,uBAAuB,qCAC7C,kBAACe,IAAAA,CAAEzH,UAAWR,EAAO2H,4BAA4B,MAC3C,IACJ,kBAAC/B,GAAUA,CAAC7K,KAAK,6EAA4E,iBAE/E,IAAI,KACf,IACH,kBAAC6K,GAAUA,CAAC7K,KAAK,2EAA0E,kBAE7E,IAAI,8DAItB,kBAACuF,MAAAA,CAAIE,UAAWR,EAAOiH,iBACrB,kBAAC3G,MAAAA,CAAIE,WAAW4B,EAAAA,EAAAA,IAAGpC,EAAOuH,sBAAuBvH,EAAOwH,SACtD,kBAACzF,OAAAA,CAAKvB,UAAWR,EAAO0H,2BAA2B,MAErD,kBAACK,KAAAA,CAAGvH,UAAWR,EAAOkH,uBAAuB,+BAC7C,kBAACe,IAAAA,CAAEzH,UAAWR,EAAO2H,4BAA4B,SACzC,kBAAC/B,GAAUA,CAAC7K,KAAMmC,EAAKsJ,aAAa,gCAAyC,6CAIvF,kBAAClG,MAAAA,CAAIE,UAAWR,EAAOiH,iBACrB,kBAAC3G,MAAAA,CAAIE,WAAW4B,EAAAA,EAAAA,IAAGpC,EAAOuH,sBAAuBvH,EAAOyH,SACtD,kBAAC1F,OAAAA,CAAKvB,UAAWR,EAAO0H,2BAA2B,MAErD,kBAACK,KAAAA,CAAGvH,UAAWR,EAAOkH,uBAAuB,sCAC7C,kBAACe,IAAAA,CAAEzH,UAAWR,EAAO2H,4BAA4B,wFAMrD,oCACE,kBAACrH,MAAAA,CAAIE,UAAWR,EAAOiH,iBACrB,kBAAC3G,MAAAA,CAAIE,UAAWR,EAAOuH,uBACrB,kBAACxF,OAAAA,CAAKvB,UAAWR,EAAO0H,2BAA2B,MAErD,kBAACK,KAAAA,CAAGvH,UAAWR,EAAOkH,uBAAuB,gCAC7C,kBAACe,IAAAA,CAAEzH,UAAWR,EAAO2H,4BAA4B,WACvC,kBAAC/B,GAAUA,CAAC7K,KAAK,8CAA6C,oBAA6B,yEAChC,IACnE,kBAAC6K,GAAUA,CAAC7K,KAAMmC,EAAKsJ,aAAa,gCAAyC,6CAIjF,kBAAClG,MAAAA,CAAIE,UAAWR,EAAOiH,iBACrB,kBAAC3G,MAAAA,CAAIE,WAAW4B,EAAAA,EAAAA,IAAGpC,EAAOuH,sBAAuBvH,EAAOwH,SACtD,kBAACzF,OAAAA,CAAKvB,UAAWR,EAAO0H,2BAA2B,MAErD,kBAACK,KAAAA,CAAGvH,UAAWR,EAAOkH,uBAAuB,qBAC7C,kBAACe,IAAAA,CAAEzH,UAAWR,EAAO2H,4BAA4B,aACrC,kBAAC/B,GAAUA,CAAC7K,KAAK,gCAA+B,wBAAiC,4GAI/F,kBAACuF,MAAAA,CAAIE,UAAWR,EAAOiH,iBACrB,kBAAC3G,MAAAA,CAAIE,WAAW4B,EAAAA,EAAAA,IAAGpC,EAAOuH,sBAAuBvH,EAAOyH,SACtD,kBAAC1F,OAAAA,CAAKvB,UAAWR,EAAO0H,2BAA2B,MAErD,kBAACK,KAAAA,CAAGvH,UAAWR,EAAOkH,uBAAuB,qCAC7C,kBAACe,IAAAA,CAAEzH,UAAWR,EAAO2H,4BAA4B,MAC3C,IACJ,kBAAC/B,GAAUA,CAAC7K,KAAK,6EAA4E,iBAE/E,IAAI,KACf,IACH,kBAAC6K,GAAUA,CAAC7K,KAAK,2EAA0E,kBAE7E,IAAI,iEAS7BmC,EAAKwJ,SACJ,kBAACpG,MAAAA,CAAIC,cAAY,qBACf,kBAACwH,KAAAA,KAAG,qBACJ,kBAACzH,MAAAA,CAAIE,UAAWR,EAAO8G,eACrB,kBAACmB,IAAAA,CAAEzH,UAAWR,EAAOgH,qBAAqB,gDACM,IAC9C,kBAACpB,GAAUA,CAAC7K,KAAK,gCAA+B,yBAAkC,iBAClF,kBAACqN,KAAAA,MAAQ,qDAET,kBAACxC,GAAUA,CAAC7K,KAAK,wFAAuF,aAE3F,OAQ3B,CCnPA,MAAMgD,GAAaC,IAA0B,CAC3CqK,eAAgBnK,EAAAA,GAAG;;;;wBAIGF,EAAMY,OAAOmI,WAAWuB;IAE9CC,YAAarK,EAAAA,GAAG;;;;;;;;;;;;;;MAiBZsK,GAAU,CAAE3J,KAAM,cAEjB,SAAS4J,IAAe,aAAEC,IAC/B,MAAM1I,GAASC,EAAAA,EAAAA,YAAWlC,IAE1B,OAGE,kBAACuH,EAAAA,WAAUA,CAACkD,QAASA,GAASjD,OAAQC,EAAAA,eAAemD,QACnD,kBAACrI,MAAAA,CAAIE,UAAWR,EAAOqI,gBACrB,kBAACO,SAAAA,CACCpI,UAAWR,EAAOuI,YAClBzE,QAAS4E,EACTlE,MAAM,QACNjE,cAAY,0BACb,KAGD,kBAACsH,GAAeA,OAIxB,CC9CO,SAASgB,IAAW,SAAEhD,IAC3B,MAAM,KAAE3I,EAAI,QAAEW,GAAYpB,IAE1B,OAAIS,EAAKQ,sBACA,kBAAC2H,GAAgBA,MAGtBnI,EAAKS,yBACA,kBAAC8K,GAAcA,CAACC,aAAc7K,EAAQC,aAG3CZ,EAAKU,6BACA,kBAACqI,GAAgBA,MAGnB,oCAAGJ,EACZ,C,eC3BO,SAASiD,IAAW,QAAEhF,IAC3B,MAAMiF,EAAWjF,GAAoB,KAAMkF,QAAQC,QACnD,OACE,kBAACC,EAAAA,OAAMA,CAACC,QAAQ,YAAYrF,QAASiF,EAAU9G,aAAW,8BAA6B,6BAI3F,CCkEA,MAAMmH,GAA8B1U,EAAO2U,QAAQ7F,MAAM,GAEzD,SAAS8F,KACP,MAAM,SAAEtQ,GAAa,IAAI8B,IAAI9F,OAAOC,SAAS2G,YAC7C,OAAO5C,EAASuQ,MAAM,KAAKC,OAAS,EACtC,CAEA,SAASC,KACP,MAAM3G,EAA4B,CAEhC4G,WAAYpP,EAAAA,OAAOqP,KAAKpV,GAAkBwO,QAC1C6G,WAAYjV,EACZkV,KAAMP,MAQR,OALIxG,EAAK+G,OAAST,KAEhBtG,EAAKgH,KAAO,IAAIC,gBAAgB/U,OAAOC,SAAS+U,QAAQzS,IAAI,oBAAsB,IAG7EuL,CACT,CAEO,SAASmH,GACdC,EACAnK,IAEAoK,EAAAA,EAAAA,mBAAyBD,EAAiB,CACxCnK,QACA+C,KAAM2G,MAEV,CCxGO,SAASW,GAAyBP,GACvC,MAAOQ,EAAaC,IAAkB1N,EAAAA,EAAAA,WAAS,IAC/C2N,EAAAA,EAAAA,YAAU,KACHF,IACHC,GAAe,GACfL,GAAkB,mCAAoC,CAAEJ,SAC1D,GACC,CAACA,EAAMQ,GACZ,CCNA,MAAMtM,GAAaC,IAA0B,CAC3CwM,UAAWtM,EAAAA,GAAG;;;;WAILF,EAAMyG,QAAQ;;IAGvBhG,OAAQP,EAAAA,GAAG;;MAUN,SAASuM,IAAa,KAAEC,EAAI,MAAEC,IACnC,MAAM3K,GAASC,EAAAA,EAAAA,YAAWlC,IAE1B,OACE,kBAACuC,MAAAA,CAAIE,UAAWR,EAAOwK,WACrB,kBAAClK,MAAAA,CAAIE,UAAWR,EAAOvB,QAASiM,GAChC,kBAACpK,MAAAA,CAAIE,UAAWR,EAAOvB,QAASkM,GAGtC,C,kkBC5BO,SAASC,GAAa7T,EAAc8T,GACzC,MAAM7T,EAAU6T,EAAKC,QAAO,CAACC,EAAKC,EAAKhK,IAAO,G,uUAAA,IAAK+J,GAAAA,CAAK,CAAC,OAAO/J,EAAI,KAAMgK,KAAQ,CAAEC,WAAY,iBAEhGjV,EAAOe,MAAMA,EAAOC,IAEpBkU,EAAAA,EAAAA,gBAAeC,QAAQ,CACrBzQ,KAAM0Q,EAAAA,UAAUC,WAAWrR,KAC3BsR,QAAST,GAEb,CAEO,SAASU,GAAeV,GAC7B7U,EAAOa,KAAKgU,IAEZK,EAAAA,EAAAA,gBAAeC,QAAQ,CACrBzQ,KAAM0Q,EAAAA,UAAUI,aAAaxR,KAC7BsR,QAAST,GAEb,CAEO,SAASY,GAAeZ,IAC7BK,EAAAA,EAAAA,gBAAeC,QAAQ,CACrBzQ,KAAM0Q,EAAAA,UAAUM,aAAa1R,KAC7BsR,QAAST,GAEb,C,gUCmDO,MAAMc,GAAqB,IA3ElC,cAAiCxR,EACzB5C,GAAAA,CAAIqU,EAAmBC,G,kBAA7B,gBACE,MAAMtT,QAAiB,EAAKQ,MAAM,4CAA6C,CAC7EmD,OAAQ,OACRC,KAAM3E,KAAKM,UAAU,CACnBgU,GAAIF,EACJG,aAAcF,MAIZlS,QAAapB,EAASoB,OAE5B,MAAO,CACLmS,GAAInS,EAAKmS,GACT9R,KAAML,EAAKK,KACXgS,aAAcrS,EAAKqS,aACnBC,QAASzU,KAAKC,MAAMkC,EAAKuS,oBAE7B,GAjBA,E,CAmBMC,YAAAA,CAAaC,G,kBAAnB,gBACE,MAAMH,QAAgB,EAAKI,iBAAiBD,GAEtC7T,QAAiB,EAAKQ,MAAM,+CAAgD,CAChFmD,OAAQ,OACRC,KAAM3E,KAAKM,UAAU,CACnBkC,KAAMoS,EAAKpS,KACXiS,cAIEtS,QAAapB,EAASoB,OAE5B,MAAO,CACLmS,GAAInS,EAAKmS,GACT9R,KAAMoS,EAAKpS,KACXgS,aAAcrS,EAAKqS,aAEnBC,QAASzU,KAAKC,MAAMkC,EAAKuS,oBAE7B,GApBA,E,CAuBMI,UAAAA,G,OAAN,gBACE,MAAO,CACLR,GAAI,IACJ9R,KAAM,KACNgS,aAAc,GACdC,QAAS,KAEb,GAPA,E,CASMI,gBAAAA,CAAiBD,G,OAAvB,gBACE,OAAO,IAAIG,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAa,IAAIC,WAEvBD,EAAWE,iBAAiB,QAAQ,KAClC,IACEJ,EC/DH,SAA2BK,GAChC,MAAO,CAAEC,GAAiBD,EAAYtD,MAAM,YAE5C,IAAKuD,EACH,MAAM,IAAIxU,MAAM,iDAGlB,GAAIuU,IAAgBC,EAClB,MAAM,IAAIxU,MAAM,sBAGlB,OAAOwU,CACT,CDmDkBC,CAAkBL,EAAWM,QACvC,CAAE,MAAOjW,GACP0V,EAAO1V,EACT,KAGF2V,EAAWE,iBAAiB,SAAS,KAGnCH,EAAO,IAAInU,MAAM,6BAA6B8T,EAAKpS,UAAQ,IAG7D0S,EAAWO,cAAcb,EAAK,GAElC,GApBA,E,+sCElDF,MAAMc,GAAqC,CACzCpB,GAAI,GACJ9R,KAAM,GACNgS,aAAc,GACdC,QAAS,MAGJ,SAASkB,KACd,MAAOC,EAAWC,IAAgBzQ,EAAAA,EAAAA,WAAS,IACpC0Q,EAAaC,IAAkB3Q,EAAAA,EAAAA,UAASsQ,KAE/C3C,EAAAA,EAAAA,YAAU,IACD,KACLoB,GAAmB7R,OAAO,GAE3B,IAEH,MAAM0T,GAAaC,EAAAA,EAAAA,cAAY,KAC7B9B,GAAmB7R,QAEnBuT,GAAa,GACbE,EAAeL,GAAqB,GACnC,IAEGQ,GAAcD,EAAAA,EAAAA,aAAWA,W,MAC7B,cAAOrB,GACLoB,IAEA,IACEH,GAAa,GAEb,MAAMnQ,QAAayO,GAAmBQ,aAAaC,GAEnDmB,EAAerQ,EACjB,CAAE,MAAOnG,GACPwW,EAAeL,IAEVvB,GAAmB9R,aAAa9C,IACnC6T,GAAa7T,EAAgB,CAAC,iCAAmCA,EAAgB0B,SAErF,CAEA4U,GAAa,EACf,I,gBAlBOjB,G,gCADsBqB,GAoB7B,CAACD,IAUGG,GAAoBF,EAAAA,EAAAA,aAAWA,W,MACnC,cAAOG,GACL,MAAM/B,EAAc+B,EAAOhW,MAE3B,GAAKiU,GAAgByB,EAAYxB,IAAOwB,EAAYtB,aAAa6B,SAAShC,GAA1E,CAVFF,GAAmB7R,QAEnBuT,GAAa,GACbE,GAAgBO,GAAc,SAAKA,GAAAA,CAAU7B,QAAS,SAapDoB,GAAa,GAEb,IACE,MAAMnQ,QAAayO,GAAmBpU,IAAI+V,EAAYxB,GAAID,GAE1D0B,GAAgBO,GAAc,SACzBA,GAAAA,CACH7B,QAAS/O,EAAK+O,WAElB,CAAE,MAAOlV,GACF4U,GAAmB9R,aAAa9C,IACnC6T,GAAa7T,EAAgB,CAAC,gCAAkCA,EAAgB0B,SAEpF,CAEA4U,GAAa,EAnBb,CAoBF,I,gBAzBOO,G,gCAD4BH,GA2BnC,CAACH,EAAYxB,GAAIwB,EAAYtB,eAG/B,MAAO,CACL0B,cACA1B,aAAcsB,EAAYtB,aAC1B2B,oBACA1B,QAASqB,EAAYrB,QACrBuB,aACAJ,YAEJ,C,44BC7FA,MAAMnU,GAAU,CACd8U,OCPiC,CACjC,mBAAoB,CAAC,OACrB,mBAAoB,CAAC,SACrB,oBAAqB,CAAC,MAAO,WDK7BC,UAAU,EAEVC,OAAAA,CAAQlX,GACN6T,GAAa7T,EAAO,CAAC,8BAA+BA,EAAM6E,YAC5D,GAQK,SAASsS,IAAkB,cAAEC,EAAa,aAAEC,IACjD,MAAMC,GAAiBZ,EAAAA,EAAAA,cACrB,SAAUa,GACRH,EAAcG,EAAM,GACtB,GACA,CAACH,IAGH,OACE,kBAACI,EAAAA,aAAYA,CACXtV,QAAS,SACJA,IAAAA,CACHoV,mBAEFD,aAAcA,GAGpB,C,wKEDO,MAAMI,GAA4B,IA3BzC,cAAwC1V,EAOhC2V,MAAAA,CAAOzU,EAAciS,G,sBAA3B,YACE,MAAM1T,QAAiB,EAAKQ,MAAM,aAAc,CAC9CmD,OAAQ,OACRC,KAAM3E,KAAKM,UAAU,CACnBkC,OACAiS,QAASyC,KAAKlX,KAAKM,UAAUmU,IAC7B0C,aAAc,CACZC,MAAO3C,EAAQ4C,SAASD,MACxBE,QAAS7C,EAAQ4C,SAASC,SAE5BpU,KAAM,WAMV,aAFmBnC,EAASoB,MAG9B,E,mLAvBAzC,WAAAA,GACE0B,MAAM,6BAA8B,CAClC,eAAgB,oBAEpB,GCdK,gBAAKmW,G,uDAAAA,C,CAAL,C,ICaP,MAAMC,GAAqB,IAAIC,KAAKC,eAAe,QAAS,CAC1DC,KAAM,UACNC,MAAO,UACPC,IAAK,UACLC,QAAQ,EACRC,KAAM,UACNC,OAAQ,UACRC,OAAQ,YAGV,SAASC,GAAOC,GACd,MAAMC,EAAQZ,GAAmBa,cAAcF,GAAM7E,QAAO,CAACC,GAAOrQ,OAAM9C,YACxEmT,EAAIrQ,GAA2B9C,EACxBmT,IACN,CAAC,GAEJ,MAAO,GAAG6E,EAAMT,QAAQS,EAAMR,SAASQ,EAAMP,OAAOO,EAAML,OAAOK,EAAMJ,QACzE,CAEA,SAASM,GAAsBC,GAC7B,MAAMC,EAAO,IAAIC,KAAKC,KAAKC,MAA8B,IAAxBJ,EAAUC,KAAKI,SAC1CC,EAAK,IAAIJ,KAAKC,KAAKC,MAA4B,IAAtBJ,EAAUM,GAAGD,SAE5C,MAAO,GAAGV,GAAOM,SAAYN,GAAOW,IACtC,CAEA,SAASC,GAAavK,GACpB,MAAOwK,EAASC,GAASzK,IAAWgJ,GAAc0B,SAAW,CAAC,WAAY,UAAY,CAAC,aAAc,YAE/FzV,EAAe,IAAI+O,gBAAgB/U,OAAOC,SAAS+U,QACnDgG,EAAOhV,EAAazD,IAAIgZ,GACxBF,EAAKrV,EAAazD,IAAIiZ,GAE5B,MAAO,CACLE,IAAK,CAAEV,OAAMK,MACbL,MAAMW,EAAAA,EAAAA,eAAcX,GACpBK,IAAIM,EAAAA,EAAAA,eAAcN,GAEtB,CAEO,SAASO,GAAkBpb,GAChC,MAAMqb,EAAa,CACjB,WACAf,GAAsBQ,GAAavB,GAAc0B,WACjD,aACAX,GAAsBQ,GAAavB,GAAc+B,cAGnD,OAAOtb,EAAU,CAACA,KAAYqb,GAAYE,KAAK,KAAO,CAAC,gBAAiBF,GAAYE,KAAK,IAC3F,C,0HCpDO,SAASC,IAAc,QAAE/E,EAAO,6BAAEgF,IACvC,MAmCMC,EAAAA,W,WAA2B,YAC/BjH,GAAkB,iCAAkC,CAAEyF,OAAQ,mBAE9D,MAAMyB,EAAmBP,GAAkB3E,EAAQ4C,SAASrZ,SAE5D,IAAI+C,EAEJ,IACEA,QAAiBiW,GAA0BC,OAAO0C,EAAkBlF,EACtE,CAAE,MAAOlV,GAEP,YADA6T,GAAa7T,EAAgB,CAAC,sCAAwCA,EAAgB0B,SAExF,CAEA,MAAM2Y,EAASC,SAASC,cAAc,KACtCF,EAAOrL,OAAS,SAChBqL,EAAOrW,KAAOxC,EAASgZ,IACvBF,SAASlV,KAAKqV,YAAYJ,GAC1BA,EAAOK,QACPJ,SAASlV,KAAKuV,YAAYN,EAC5B,E,mOApBMF,GAsBN,MAAO,CACLhU,KAAM,CACJyU,8BAA+BC,QAAQX,IAEzCpT,QAAS,CACPgU,YA9DgB,KAClB5H,GAAkB,iCAAkC,CAAEyF,OAAQ,QAE9D,MACMoC,EAAW,GADQlB,GAAkB3E,EAAQ4C,SAASrZ,eAItC6b,SAASU,cAAc,oCAE/BC,QAAQC,IACpB,GAAKA,EAMLC,KAAOD,EAAMH,OANb,CACE,MAAM/a,EAAQ,IAAIuB,MAAM,yCACxBsS,GAAa7T,EAAO,CAAC,2BAA4BA,EAAM0B,SAEzD,CAEsB,GACrB,YAAY,EA8Cb0Z,aA3CiB,KACnBlI,GAAkB,iCAAkC,CAAEyF,OAAQ,SAE9D,MACMoC,EAAW,GADQlB,GAAkB3E,EAAQ4C,SAASrZ,gBAEtD4c,EAAU,gCAAgCC,mBAAmB7a,KAAKM,UAAUmU,MAElF,IACEiG,KAAOE,EAASN,EAClB,CAAE,MAAO/a,GAEP,YADA6T,GAAa7T,EAAgB,CAAC,4BAA8BA,EAAgB0B,SAE9E,GAgCEyY,4BAGN,CCxEO,SAASoB,GAAWvS,GACzB,MAAM,QAAElC,GAAYmT,GAAcjR,GAElC,OACE,kBAAC0D,EAAAA,KAAIA,KACH,kBAACA,EAAAA,KAAKE,KAAI,CAACC,MAAM,MAAME,QAASjG,EAAQgU,cACxC,kBAACpO,EAAAA,KAAKE,KAAI,CAACC,MAAM,OAAOE,QAASjG,EAAQsU,eAG/C,CCJA,SAASI,GAAoBxS,GAC3B,MAAM,QAAEkM,EAAO,6BAAEgF,GAAiClR,EAElD,OACE,kBAACsE,EAAAA,SAAQA,CAACC,QAAS,kBAACgO,GAAUA,CAACrG,QAASA,EAASgF,6BAA8BA,KAC7E,kBAAC/H,EAAAA,OAAMA,CACLrF,KAAK,eACLpE,KAAK,KACL0J,QAAQ,YACRqJ,KAAK,UACLvQ,aAAW,sBACXvD,QAAQ,wBAIhB,CAEO,MAAM+T,IAAarN,EAAAA,EAAAA,MAAKmN,ICzB/B,SAASG,GAAStc,EAAiBuc,EAAiBC,GAClD,MAAMC,EAAQ,GACRC,EAAaF,EAAO,EAAI,EAE9B,IAAK,IAAI5R,EAAI,EAAGA,EAAI5K,EAAM0G,OAAQkE,GAAK8R,EACrCD,EAAME,KAAK,CACT3c,MAAO,EACPwN,MAAOgP,EAAOD,EAAMvc,EAAM4K,EAAI,IAAM2R,EAAMvc,EAAM4K,EAAI,IACpDgS,OAAQ5c,EAAM4K,GACdiS,IAAK7c,EAAM4K,EAAI,GACfkS,KAAM9c,EAAM4K,EAAI,GAChBmS,UAAWP,EAAOxc,EAAM4K,EAAI,GAAK,EACjCoS,SAAUR,EAAOxc,EAAM4K,EAAI,GAAK,EAChCqS,SAAUT,EAAOxc,EAAM4K,EAAI,GAAK5K,EAAM4K,EAAI,GAAK5K,EAAM4K,EAAI,GACzDsS,YAAaV,EAAOxc,EAAM4K,EAAI,GAAK,EACnCuS,YAAaX,EAAOxc,EAAM4K,GAAK5K,EAAM4K,EAAI,GAAK5K,EAAM4K,GACpD6E,SAAU,KAId,OAAOgN,CACT,CCLA,SAASW,IAAoB,QAC3BvH,EAAO,KACP2G,EAAI,SACJa,EAAQ,6BACRxC,EAA4B,qBAC5ByC,EAAoB,2BACpBC,EAA0B,yBAC1BC,IAEA,MAAM,QAAEC,IAAYC,EAAAA,EAAAA,aAGdC,GAAY1T,EAAAA,EAAAA,UAChB,IDLG,SAAmC2T,EAAoBrB,EAAiBsB,EAAcrB,GAC3F,IAAKoB,EAAOlX,OACV,OAGF,MAAMoX,EAAsB,GAE5B,IAAK,IAAIlT,EAAI,EAAGA,EAAIgT,EAAOlX,OAAQkE,IAAK,CACtCkT,EAAWlT,GAAK,GAEhB,IAAK,MAAMmT,KAAQzB,GAASsB,EAAOhT,GAAI2R,EAAOC,GAI5C,GAHAuB,EAAK/d,MAAQ4K,EACbkT,EAAWlT,GAAG+R,KAAKoB,GAEfnT,EAAI,EAAG,CACT,MACMoT,EADmBF,EAAWlT,GAAGwC,MAAM,GAAI,GAE9BsH,QAAO,CAACC,EAAKsJ,IAAMA,EAAEd,YAAcc,EAAEhB,SAAWtI,GAAK,GAAKoJ,EAAKZ,YAE5Ee,EAAYJ,EAAWlT,EAAI,GACjC,IAAIuT,EAAkB,EAEtB,IAAK,MAAMC,KAAiBF,EAAW,CACrC,MAAMG,EAAkBF,EAAkBC,EAAcjB,YAClDmB,EAAgBD,EAAkBD,EAAcnB,SAEtD,GAAIoB,GAAmBL,GAAoBM,EAAgBN,EAAkB,CAC3EI,EAAc3O,SAASkN,KAAKoB,GAC5B,KACF,CACEI,GAAmBC,EAAcjB,YAAciB,EAAcnB,QAEjE,CACF,CAEJ,CAEA,MACMsB,EAAQ,CADDT,EAAW,GAAG,IAGrBU,EAAc,GACdC,EAAc,GACdC,EAAa,GACbC,EAAc,GACdC,EAAkB,GAClBC,EAAmB,GAEzB,KAAON,EAAM7X,QAAQ,CACnB,MAAMqX,EAAOQ,EAAMO,QACnBN,EAAY7B,KAAKoB,EAAKvQ,OACtBiR,EAAY9B,KAAKoB,EAAK/d,OACtB0e,EAAW/B,KAAKoB,EAAKjB,MACrB6B,EAAYhC,KAAKoB,EAAKlB,KACtB+B,EAAgBjC,KAAKoB,EAAKhB,WAC1B8B,EAAiBlC,KAAKoB,EAAKf,UAC3BuB,EAAMQ,WAAWhB,EAAKtO,SACxB,CAEA,IAAIuP,EAAY,QAGhB,OAAQnB,GACN,IAAK,UACL,IAAK,gBACL,IAAK,mBACL,IAAK,cACHmB,EAAY,KACZ,MACF,IAAK,QACHA,EAAY,QAIhB,MAAMC,EAAS,CACb,CAAErb,KAAM,QAASK,OAAQwa,GACzB,CAAE7a,KAAM,QAASK,OAAQua,EAAala,KAAM4a,EAAAA,UAAUC,QACtD,CAAEvb,KAAM,OAAQK,OAAQya,EAAYxa,OAAQ,CAAE2Z,KAAMmB,IACpD,CAAEpb,KAAM,QAASK,OAAQ0a,EAAaza,OAAQ,CAAE2Z,KAAMmB,KAGpDxC,GACFyC,EAAOtC,KAEH,CACE/Y,KAAM,YACNK,OAAQ2a,EACR1a,OAAQ,CAAE2Z,KAAMmB,IAElB,CACEpb,KAAM,aACNK,OAAQ4a,EACR3a,OAAQ,CAAE2Z,KAAMmB,KAMxB,MAAMI,EAAsB,CAC1Bxb,KAAM,WACN8I,KAAM,CAAE2S,2BAA4B,cACpCJ,UAGF,OAAOK,EAAAA,EAAAA,iBAAgBF,EACzB,CClGMG,CACE1J,EAAQ2J,YAAY5B,OACpB/H,EAAQ2J,YAAYjD,MACpB1G,EAAQ4C,SAASD,MACjBgD,QAAQgB,KAEZ,CAAC3G,EAAS2G,IAGZ,OACE,kBAACiD,GAAAA,GAAiBA,CAChB3Y,KAAM6W,EACN+B,mBAAoBpC,EACpBqC,oBAAqB,kBAACtD,GAAUA,CAACxG,QAASA,EAASgF,6BAA8BA,IACjFwC,SAAUA,EACVuC,SAnBa,KAAMC,EAAAA,EAAAA,aAAY,CAAErX,OAAQ,CAAEsX,KAAMrC,EAAU,QAAU,UAoBrEF,2BAA4BA,EAC5BwC,uBAAAA,EACAvC,yBAA0BA,GAGhC,CAEO,MAAMwC,IAAahR,EAAAA,EAAAA,MAAKoO,ICjDzBzV,GAAaC,IAA0B,CAC3CqY,WAAYnY,EAAAA,GAAG;kBACCF,EAAMyG,QAAQ;MAIzB,SAAS6R,IAAgB,QAAErK,EAAO,KAAE2G,IACzC,MAAM5S,GAASC,EAAAA,EAAAA,YAAWlC,IAE1B,OACE,kBAACuC,MAAAA,CAAIE,UAAWR,EAAOqW,WAAY9V,cAAY,cAC7C,kBAAC6V,GAAUA,CAACnK,QAASA,EAAS2G,KAAMA,IAG1C,CCXA,MAAM7U,GAAaC,IAA0B,CAC3CuY,kBAAmBrY,EAAAA,GAAG;;;qBAGHF,EAAMyG,QAAQ;MAI5B,SAAS+R,IAAyB,aAAExK,EAAY,SAAEyK,IACvD,MAAMzW,GAASC,EAAAA,EAAAA,YAAWlC,IAEpB9E,GAAUoH,EAAAA,EAAAA,UAAQ,IAAM2L,EAAalL,KAAKpG,IAAU,CAAE9C,MAAO8C,EAAMkJ,MAAOlJ,OAAU,CAACsR,KACpF4B,EAAQ8I,IAAa9Z,EAAAA,EAAAA,YAEtB+Z,GAAYlJ,EAAAA,EAAAA,cACfmJ,IACCF,EAAUE,GACVH,EAASG,EAAE,GAEb,CAACH,IASH,OANAlM,EAAAA,EAAAA,YAAU,KAGRmM,EAAUzd,EAAQ,GAAG,GACpB,CAACA,IAGF,kBAACqH,MAAAA,CAAIE,UAAWR,EAAOuW,mBACrB,kBAACM,EAAAA,eAAcA,KACb,kBAACC,EAAAA,YAAWA,CAAClT,MAAM,UAAUI,UAAW/K,EAAQ6D,OAAQyD,cAAY,0BAElE,kBAACwW,EAAAA,OAAMA,CAAC9V,IAAK2M,aAAAA,EAAAA,EAAQhW,MAAOA,MAAOgW,EAAQ3U,QAASA,EAASwd,SAAUE,EAAWK,MAAO,OAKnG,CC3CA,MAAMjZ,GAAaC,IAA0B,CAC3CiZ,QAAS/Y,EAAAA,GAAG;;kBAEIF,EAAMyG,QAAQ;MAIzB,SAASyS,KACd,MAAMlX,GAASC,EAAAA,EAAAA,YAAWlC,IAE1B,OACE,kBAACuC,MAAAA,CAAIE,UAAWR,EAAOiX,SACrB,kBAACE,EAAAA,QAAOA,CAAC1X,KAAM,KAGrB,CCVA,SAAS2X,KACP,MAAM,YAAE1J,EAAW,aAAE1B,EAAY,kBAAE2B,EAAiB,QAAE1B,EAAO,WAAEuB,EAAU,UAAEJ,GAAcD,KAiBzF,OACE,kBAAC7M,MAAAA,KACC,kBAACkW,GAAwBA,CAACxK,aAAcA,EAAcyK,SAjB7Bxd,IAC3BgR,GAAkB,kDAClB0D,EAAkB1U,EAAQ,IAgBxB,kBAACiV,GAAiBA,CAACC,cAbA/B,IACrBnC,GAAkB,sCAAuC,CAAEoN,SAAUjL,EAAK1R,OAC1EgT,EAAYtB,EAAK,EAWkCgC,aAR/B,KACpBnE,GAAkB,uCAClBuD,GAAY,IAOTJ,IAAcnB,EAAU,kBAACiL,GAAYA,MAAM,KAC3CjL,GAAW,kBAACqK,GAAeA,CAACrK,QAASA,IAG5C,CAEO,MAAMqL,IAAclS,EAAAA,EAAAA,MAAKgS,ICjCzB,SAASG,KACd,OAAO,kBAAC9M,GAAYA,CAACC,KAAM,kBAAC4M,GAAWA,MAAK3M,MAAO,kBAAC2M,GAAWA,OACjE,CCGA,MAAMvZ,GAAaC,IAA0B,CAC3CwZ,WAAYtZ,EAAAA,GAAG;eACFF,EAAMyG,QAAQ;cACfzG,EAAMyG,QAAQ;MAIrB,SAASgT,KACd,MAAMzX,GAASC,EAAAA,EAAAA,YAAWlC,KACnB2Z,EAAgBC,IAAqB/a,EAAAA,EAAAA,UAAS,GAErD,OACE,kBAAC0D,MAAAA,KACC,kBAACsX,EAAAA,QAAOA,KACN,kBAACC,EAAAA,IAAGA,CAACjU,MAAM,eAAekU,OAA2B,IAAnBJ,EAAsBK,YAAa,IAAMJ,EAAkB,KAC7F,kBAACE,EAAAA,IAAGA,CAACjU,MAAM,mBAAmBkU,OAA2B,IAAnBJ,EAAsBK,YAAa,IAAMJ,EAAkB,MAOnG,kBAACK,EAAAA,WAAUA,CAACxX,UAAWR,EAAOwX,YACR,IAAnBE,GAAwB,kBAACJ,GAAWA,MACjB,IAAnBI,GAAwB,kBAACH,GAAeA,OAKjD,CChCe,SAASU,KAEtB,OADA7N,GAAyB,UAEvB,oCACE,kBAACjF,GAASA,CAACX,MAAM,gBACjB,kBAACiT,GAASA,MACV,kBAAC3O,GAAUA,MAGjB,CCXA,MAAM/K,GAAaC,IAA0B,CAC3Cka,YAAaha,EAAAA,GAAG;aACLF,EAAMY,OAAO0J,QAAQ6P;;qBAEbna,EAAMyG,QAAQ;;;IAIjC2T,eAAgBla,EAAAA,GAAG;;iBAEJF,EAAMgB,WAAWqZ,GAAGtZ;qBAChBf,EAAMyG,QAAQ;IAEjC6T,gBAAiBpa,EAAAA,GAAG;;;;;;;;;;MAaP,SAASqa,KACtB,MAAMvY,GAASC,EAAAA,EAAAA,YAAWlC,KACnBya,EAAaC,IAAkB7b,EAAAA,EAAAA,WAAS,GAO/C,OACE,kBAAC8b,EAAAA,MAAKA,CACJlU,MAAM,eACNmU,OAAQH,EACRI,UATkB,KACpBH,GAAe,GACfzjB,OAAO6jB,OAAO,EAQZC,eAAe,EACfC,sBAAsB,EACtBvY,UAAWR,EAAOsY,iBAElB,kBAAChY,MAAAA,CAAIE,UAAWR,EAAOoY,gBACrB,kBAAC9X,MAAAA,CAAIE,UAAWR,EAAOkY,aACrB,kBAACf,EAAAA,QAAOA,CAAC1X,KAAK,QAEhB,kBAACwI,IAAAA,KAAE,4BAIX,C,eClDO,SAAS+Q,KACdhQ,QAAQiQ,UAAU,KAAM,GAC1B,C,wBCHO,MAAMC,WAAoCC,EAAAA,qB,GAC1B,4B,GAAPze,U,GADHwe,I,4FCJN,gBAAKE,G,iIAAAA,C,CAAL,C,IAMA,YAAKC,G,iHAAAA,C,CAAL,C,IAkCA,YAAKC,G,qEAAAA,C,CAAL,C,IAcA,YAAKC,G,qEAAAA,C,CAAL,C,oDCrDA,MAAMC,WAA8B1gB,EAGzC5B,WAAAA,CAAY+B,G,IAWmB6C,EAV7B,MAAM,cAAE2d,GAAkBxgB,EAE1B,IAAI,UAAEyC,EAAY,GAAE,SAAEI,GAAaxB,EAAAA,OACT,OAAtBoB,aAAAA,EAAAA,EAAWC,IAAI,MAEjBD,GAAa,KAGf9C,MAAM,GAAG8C,8BAAsC+d,IAAiB,CAC9D,eAAgB,mBAChB,mBAAoB5d,QAAOC,SAAc,QAAdA,EAAAA,EAAUC,YAAVD,IAAAA,OAAAA,EAAAA,EAAgBE,QAAS,M,6GAbxDyd,CAAAA,KAAAA,qBAAAA,GAgBE3jB,KAAK2jB,cAAgBxgB,EAAQwgB,aAC/B,E,gUCnBK,MAAMC,WAAwBF,GACnC,sBAAOG,CAAgBC,GACrB,MAAMC,EAAcD,EAAME,QAAQ,KAElC,GAAID,EAAc,EAAG,CAEnB,MAAO,CAAC,sBADcD,EAAMG,UAAU,EAAGF,QACUD,EAAMG,UAAUF,EAAc,EAAGD,EAAM9c,UAC5F,CAEA,OAAoB,IAAhB+c,EACK,CAACD,GAGH,CAAC,sBAAuBA,MACjC,CAMMI,WAAAA,CAAYJ,EAAe5J,EAAcK,G,kBAA/C,gBACE,OAAO,EAAK4J,MAAM,wCAAyC,CACzDC,SAAUR,GAAgBC,gBAAgBC,GAC1CO,MAAOnK,EACPoK,IAAK/J,IACJ/J,MAAM/N,GAAaA,EAASoB,QACjC,GANA,E,CAQM0gB,gBAAAA,CAAiBC,EAAiBV,EAAe5J,EAAcK,G,kBAArE,gBACE,OAAO,EAAK4J,MAAM,yCAA0C,CAC1DjgB,KAAMsgB,EACNJ,SAAUR,GAAgBC,gBAAgBC,GAC1CO,MAAOnK,EACPoK,IAAK/J,IACJ/J,MAAM/N,GAAaA,EAASoB,QACjC,GAPA,E,CASAsgB,KAAAA,CAAMjhB,EAAkBmD,GACtB,OAAOvD,MAAMG,MAAMC,EAAU,CAC3BkD,OAAQ,OACRC,KAAM3E,KAAKM,UAAUqE,IAEzB,CA1BAjF,WAAAA,CAAY+B,GACVL,MAAMK,EACR,EClBK,MAAMshB,GAGX,oBAAOC,CAAc3kB,GACnB,IAAIoL,EAAM,GACV,IAAK,MAAMwZ,KAAO5kB,EAChBoL,GAAOpF,OAAO4e,GAEhB,OAAOxZ,CACT,CAEA1J,GAAAA,CAAI1B,GACF,OAAOC,KAAK4kB,MAAMnjB,IAAIgjB,GAAkBC,cAAc3kB,GACxD,CAGA8B,GAAAA,CAAI9B,EAAsBqH,GACxBpH,KAAK4kB,MAAM/iB,IAAI4iB,GAAkBC,cAAc3kB,GAAOqH,EACxD,CAEAyd,OAAO9kB,GACLC,KAAK4kB,MAAMC,OAAOJ,GAAkBC,cAAc3kB,GACpD,C,4HArBA6kB,CAAAA,KAAAA,QAAQ,IAAInlB,I,ECHP,SAASqlB,GAAUC,EAAgBpiB,GACxC,IAAKoiB,EACH,MAAM,IAAIviB,MAAMG,EAEpB,C,yHCFO,MAAeqiB,GASpBC,YAAAA,CAAaC,GACXllB,KAAKklB,UAAYA,CACnB,CAEAC,cAAAA,CAAeC,GACbplB,KAAKolB,YAAcA,CACrB,CAEAC,MAAAA,CAAOtiB,GACL/C,KAAKklB,UAAWlhB,MAAMjB,EACxB,CAfA3B,WAAAA,CAAY+B,GAHZ+hB,GAAAA,KAAAA,iBAAAA,GACAE,GAAAA,KAAAA,mBAAAA,GAGEplB,KAAKklB,UAAY/hB,EAAQ+hB,UACzBllB,KAAKolB,YAAcjiB,aAAAA,EAAAA,EAASiiB,WAC9B,E,gUCPK,MAAMxB,WAAwBvf,EACnC,sBAAOwf,CAAgBC,GACrB,MAAMC,EAAcD,EAAME,QAAQ,KAElC,GAAID,EAAc,EAAG,CAEnB,MAAO,CAAC,sBADcD,EAAMG,UAAU,EAAGF,QACUD,EAAMG,UAAUF,EAAc,EAAGD,EAAM9c,UAC5F,CAEA,OAAoB,IAAhB+c,EACK,CAACD,GAGH,CAAC,sBAAuBA,MACjC,CAEMI,WAAAA,CAAYJ,EAAe5J,EAAcK,G,kBAA/C,gBAEE,OAAO,EAAK4J,MAAM,wCAAyC,CACzDC,SAAUR,GAAgBC,gBAAgBC,GAC1CO,MAAOnK,EACPoK,IAAK/J,IACJ/J,MAAM/N,GAAaA,EAASoB,QACjC,GAPA,E,CASM0gB,gBAAAA,CAAiBC,EAAiBV,EAAe5J,EAAcK,G,kBAArE,gBAEE,OAAO,EAAK4J,MAAM,yCAA0C,CAC1DjgB,KAAMsgB,EACNJ,SAAUR,GAAgBC,gBAAgBC,GAC1CO,MAAOnK,EACPoK,IAAK/J,IACJ/J,MAAM/N,GAAaA,EAASoB,QACjC,GARA,E,CAUAsgB,KAAAA,CAAMjhB,EAAkBmD,GACtB,OAAOvD,MAAMG,MAAMC,EAAU,CAC3BkD,OAAQ,OACRC,KAAM3E,KAAKM,UAAUqE,IAEzB,E,ybCzBF,MAAMif,WAAyBN,GAK7B,0BAAOO,CAAoB1hB,GACzB,IAAK2hB,MAAMC,QAAQ5hB,EAAKgZ,OACtB,MAAO,GAKT,OAF+B2I,MAAMtL,KAAK,IAAIwL,IAAI7hB,EAAKgZ,MAAMnY,OAAO4gB,GAAiBK,+BAEjE3a,KAAK8C,IAAW,CAAEhM,MAAOgM,EAAOA,WACtD,CAEA,+BAAO8X,CAAyB/hB,GAC9B,IAAK2hB,MAAMC,QAAQ5hB,EAAKgZ,OACtB,MAAO,GAKT,OAF8BhZ,EAAKgZ,MAEhB7R,KAAK8C,IAAW,CAAEhM,MAAOgM,EAAOA,WACrD,CAQA,mBAAO+X,CAAa/B,EAAe5J,EAAcK,GAC/CuK,GAAUhJ,QAAQgI,GAAQ,8BAC1BgB,GAAU5K,EAAO,GAAKK,EAAK,GAAKA,EAAKL,EAAM,qBAC7C,CAEM4L,UAAAA,EAAW,MAAEhC,EAAK,KAAE5J,EAAI,GAAEK,I,kBAAhC,gBACE+K,GAAiBO,aAAa/B,EAAO5J,EAAMK,GAE3C,MAAMwL,EAAc,CAAC,EAAKb,UAAW1hB,QAASsgB,EAAO5J,EAAMK,GAErDyL,EAAmB,EAAKZ,YAAY3jB,IAAIskB,GAC9C,GAAIC,EAAkB,CACpB,MAAMniB,QAAamiB,EACbC,EAASX,GAAiBC,oBAAoB1hB,GAMpD,OAJKoiB,EAAOjf,QACV,EAAKoe,YAAYP,OAAOkB,GAGnBE,CACT,CAEA,MAAMC,EAAS,EAAKhB,UAAWhB,YAAYJ,EAAO5J,EAAMK,GACxD,EAAK6K,YAAYvjB,IAAIkkB,EAAaG,GAElC,IACE,MAAMriB,QAAaqiB,EACnB,OAAOZ,GAAiBC,oBAAoB1hB,EAC9C,CAAE,MAAO5C,GAEP,MADA,EAAKmkB,YAAYP,OAAOkB,GAClB9kB,CACR,CACF,GA3BA,E,CA6BMklB,eAAAA,EAAgB,MAAErY,EAAK,MAAEgW,EAAK,KAAE5J,EAAI,GAAEK,I,kBAA5C,gBACE+K,GAAiBO,aAAa/B,EAAO5J,EAAMK,GAC3CuK,GAAUhJ,QAAQhO,GAAQ,wBAE1B,MAAMiY,EAAc,CAAC,EAAKb,UAAW1hB,QAASsK,EAAOgW,EAAO5J,EAAMK,GAE5D6L,EAAwB,EAAKhB,YAAY3jB,IAAIskB,GACnD,GAAIK,EAAuB,CACzB,MAAMviB,QAAauiB,EACbtH,EAAcwG,GAAiBC,oBAAoB1hB,GAMzD,OAJKib,EAAY9X,QACf,EAAKoe,YAAYP,OAAOkB,GAGnBjH,CACT,CAEA,MAAMoH,EAAS,EAAKhB,UAAWX,iBAAiBzW,EAAOgW,EAAO5J,EAAMK,GACpE,EAAK6K,YAAYvjB,IAAIkkB,EAAaG,GAElC,IACE,MAAMriB,QAAaqiB,EACnB,OAAOZ,GAAiBM,yBAAyB/hB,EACnD,CAAE,MAAO5C,GAEP,MADA,EAAKmkB,YAAYP,OAAOkB,GAClB9kB,CACR,CACF,GA5BA,E,CAxCAG,WAAAA,CAAY+B,GACVL,MAAM,CAAEoiB,UAAW/hB,EAAQ+hB,YAzB7BE,GAAAA,KAAAA,mBAAAA,GA2BEplB,KAAKolB,YAAcjiB,EAAQiiB,WAC7B,EA1BA,GAHIE,GAGGK,+BAA+B7X,IAAmB,0BAA0BvO,KAAKuO,KA6FnF,MAAMuY,GAAmB,IAAIf,GAAiB,CACnDJ,UAAW,IAAItB,GACfwB,YAAa,IAAIX,KCjHZ,SAAS6B,GAAgBC,EAAqBC,GACnD,MAAMC,EAA2BF,EAAW7hB,QAAO,EAAGE,UAAWA,IAAS0e,GAAWoD,UAC/EC,EAAgCH,EAAgB9hB,QAAO,EAAGE,UAAWA,IAAS0e,GAAWoD,UAE/F,OACED,EAAyBzf,SAAW2f,EAA8B3f,QAClEyf,EAAyBG,OAAOliB,GAC9BiiB,EAA8BrnB,MAC5B,EAAGsF,OAAMiiB,YAAWC,WAAUhlB,Y,IAGR4C,EACHA,E,OAHjBE,IAASF,EAAOE,MAChBiiB,EAAU/kB,QAAU4C,EAAOmiB,UAAU/kB,QACrCglB,aAAAA,EAAAA,EAAUhlB,UAAyB,QAAf4C,EAAAA,EAAOoiB,gBAAPpiB,IAAAA,OAAAA,EAAAA,EAAiB5C,SACrCA,aAAAA,EAAAA,EAAOA,UAAsB,QAAZ4C,EAAAA,EAAO5C,aAAP4C,IAAAA,OAAAA,EAAAA,EAAc5C,MAAK,KAI9C,C,yHChBA,MAAMilB,GAAgB,CACpBniB,KAAM0e,GAAW,sBACjBwD,SAAU,CACRhlB,MAAOyhB,GAAa,YACpBzV,MAAO,YAEThM,MAAO,CACLA,MAAOyhB,GAAa,YACpBzV,MAAO,KAIEkZ,GAAsBtiB,G,uUAAoB,IAAKA,EAAWqiB,ICZhE,SAASE,GAAenD,EAAeoD,GAC5C,MAAMC,EAAaD,EAChBxiB,QAAO,EAAGE,UAAWA,IAAS0e,GAAWoD,UACzC1b,KAAKtG,IACJ,MAAM,UAAEmiB,EAAS,SAAEC,EAAQ,MAAEhlB,GAAU4C,EAEvC,OAAQoiB,EAAShlB,OACf,KAAKyhB,GAAa6D,GAChB,MAAO,GAAGP,EAAU/kB,WAAWA,EAAMA,SAEvC,KAAKyhB,GAAa,UAChB,MAAO,GAAGsD,EAAU/kB,WAAWA,EAAMA,SAEvC,KAAKyhB,GAAa,YAChB,MAAO,GAAGsD,EAAU/kB,WAEtB,QACE,MAAO,GAAG+kB,EAAU/kB,QAAQglB,EAAShlB,SAASA,EAAMA,SACxD,I,IAGyBgiB,EAA7B,MAAO,CAAEuD,GAAgC,QAAZvD,EAAAA,EAAMwD,MAAM,uCAAZxD,IAAAA,EAAAA,EAA+C,GAM5E,OAJIuD,GACFF,EAAW9H,QAAQgI,GAGdvD,EAAMyD,QAAQ,UAAW,IAAIJ,EAAWlM,KAAK,QACtD,CC5BO,MAAMuM,GAAiBN,GAAoCA,EAAQrhB,IAAI,IAAM,KCAvE4hB,GAA4BX,GACvCA,IAAavD,GAAiB,IAAKuD,IAAavD,GAAa,UCAlDmE,GAAmBhjB,IAC9BogB,GAAUhJ,QAAQpX,GAAS,wBAEpBA,EAAOE,OAAS0e,GAAWoD,SCM7B,SAASiB,GAAsBC,EAAyBC,GAC7D,OAAID,IAAoBC,IAIpBA,IAAgBtE,GAAa,cAK/B,CACEA,GAAa,MACbA,GAAa,MACbA,GAAiB,GACjBA,GAAa,UACbA,GAAa,aACbxL,SAAS6P,IACX,CAACrE,GAAa,MAAOA,GAAa,MAAOA,GAAiB,GAAGA,GAAa,WAAWxL,SACnF8P,IAGN,CAEO,SAASC,GAAwBC,EAA4BF,GAClE/C,QAAiD,IAAhCiD,EAAmBjB,SAA0B,6CAI9D,OAAOa,GAFiBI,EAAmBjB,SAAShlB,MAEN+lB,EAChD,C,kkBCpCA,MAAMG,GAAmBC,IACvB,MAAMC,EAAUD,EAAWE,SAAS,+BACpC,OAAO3C,MAAMtL,KAAKgO,GAASld,KAAI,EAAE,CAAE6b,EAAWC,EAAUhlB,KAAW,CAAC+kB,EAAWC,EAAUhlB,IAAO,EAG5FsmB,GAAe,oBACfC,GAAoB,6BAGnB,SAASC,GAAexE,GAE7B,IAAKA,EACH,MAAO,GAGT,MAAMyE,EAAYzE,EAAMwD,MAAMc,IAE9B,IAAKG,EACH,MAAO,GAOT,OAJmBP,GAAgBO,EAAU,IAK1C7jB,QAAO,EAAEmiB,KAA6B,iBAAdA,IACxB7b,KAAI,EAAE6b,EAAWC,EAAUhlB,MAC1B,MAAM4C,EAAS,CACbsR,IAAIwS,EAAAA,GAAAA,IAAO,IACX5jB,KAAM0e,GAAW,4BACjBtB,QAAQ,EACR6E,UAAW,CAAE/kB,MAAO+kB,EAAW/Y,MAAO+Y,GACtCC,SAAU,CAAEhlB,MAAOglB,EAAUhZ,MAAOgZ,GACpChlB,MAAO,CAAEA,MAAOA,EAAOgM,MAAOhM,IAIhC,GADuCglB,IAAavD,GAAa,MAAkB,KAAVzhB,EAEvE,OAAOklB,GAAmBtiB,GAM5B,MAFE,CAAC6e,GAAa,MAAOA,GAAa,OAAOxL,SAAS+O,KAA8BuB,GAAkB9oB,KAAKuC,GAGhG,G,uUAAA,IACF4C,GAAAA,CACHoiB,SACEA,IAAavD,GAAa,MACtB,CAAEzhB,MAAOyhB,GAAa6D,GAAItZ,MAAO,MACjC,CAAEhM,MAAOyhB,GAAa,UAAWzV,MAAO,UAC9ChM,MAAO,CACLA,MAAOA,EACPgM,MAAOhM,EACJ2R,MAAM,KACNzI,KAAKyd,GAAMA,EAAEC,SACbzN,KAAK,SAKPvW,CAAM,GAEnB,C,kkBCnEO,MAAMikB,GAAwB,CAACzB,EAAkBlF,IACtDkF,EAAQlc,KAAKtG,GAAYA,EAAOE,OAAS0e,GAAWoD,QAAU,G,uUAAA,IAAKhiB,GAAAA,CAAQsd,WAAWtd,I,44BCuBxF,SAASkkB,GAAsBrC,EAAqBrlB,GAClD,MAAM2nB,EAAkBvC,GAAgBC,EAAY+B,GAAepnB,EAAQ4nB,YAAYhF,QAEvF,MAAO,CACLoD,QAAS2B,EAAkBF,GAAsBpC,GAAY,GAAQA,EACrEzC,MAAOmD,GAAe/lB,EAAQ4iB,MAAOyC,GACrCsC,kBAEJ,CAEO,MAAM9gB,GAAe,CAC1BghB,cAAe,KACb1C,GAAiBhB,OAAO,oBAAoB,EAG9C2D,oBAAoBC,EAAAA,GAAAA,KAAO,CAAC/nB,EAA8BgoB,KACxD,MAAM3C,EAAa,IACdrlB,EAAQgmB,QACX,CAAElR,IAAIwS,EAAAA,GAAAA,IAAO,IAAK5jB,KAAM0e,GAAWoD,QAAS1E,QAAQ,EAAO6E,UAAWqC,EAAM9hB,OAG9E,OAAO,SACFlG,GAAAA,CACHgmB,QAASX,EACTsC,gBAAiBvC,GAAgBC,EAAY+B,GAAepnB,EAAQ4nB,YAAYhF,S,IAGpFqF,qBAAqBF,EAAAA,GAAAA,KAAO,CAAC/nB,EAA8BgoB,KACzD,GAAwB,OAApBhoB,EAAQiN,QACV,MAAM,IAAI3L,MAAM,sDAGlB,MAAM,SAAE4mB,GAAaloB,EAAQiN,QAEvBoY,EAAarlB,EAAQgmB,QAAQlc,KAAKtG,GACtCA,EAAOsR,KAAOoT,EACV,SACK1kB,GAAAA,CACHmiB,UAAWqC,EAAM9hB,KACjB0f,cAAUnc,EACV7I,WAAO6I,IAETjG,IAGN,OAAO,SACFxD,GAAAA,CACHgmB,QAASX,EAETsC,gBAAiBvC,GAAgBC,EAAY+B,GAAepnB,EAAQ4nB,YAAYhF,QAChF3V,QAAS,M,IAIbkb,mBAAmBJ,EAAAA,GAAAA,KAAO,CAAC/nB,EAA8BgoB,KACvD,MAAM3C,EAAarlB,EAAQgmB,QAAQlc,KAAKtG,IACtC,IAAKgjB,GAAgBhjB,GACnB,OAAOA,EAGT,MAAMmjB,EAAcqB,EAAM9hB,KAE1B,OAAIygB,EAAY/lB,QAAUyhB,GAAa,YAC9ByD,GAAmBtiB,GAGrB,SACFA,GAAAA,CACHoiB,SAAUe,EACV/lB,WAAO6I,G,IAIX,OAAO,MACFzJ,EACA0nB,GAAsBrC,EAAYrlB,GAAAA,IAIzCooB,oBAAoBL,EAAAA,GAAAA,KAAO,CAAC/nB,EAA8BgoB,KACxD,GAAwB,OAApBhoB,EAAQiN,QACV,MAAM,IAAI3L,MAAM,qDAGlB,MAAM,SAAE4mB,GAAaloB,EAAQiN,QACvB0Z,EAAcqB,EAAM9hB,KAC1B,IAAImiB,EAAa,KAEjB,MAAMhD,EAAarlB,EAAQgmB,QAAQlc,KAAKtG,IACtC,MAAM8kB,EAAmB9kB,EAAOoiB,SAAUhlB,MAE1C,OAAI4C,EAAOsR,KAAOoT,GAAYI,IAAqB3B,EAAY/lB,MACtD4C,EAGLmjB,EAAY/lB,QAAUyhB,GAAa,YAC9ByD,GAAmB,SACrBtiB,GAAAA,CACHsd,QAAQ,MAIRwH,IAAqBjG,GAAa,cACpC7e,EAAO5C,MAAQ,CAAEA,MAAO,aAAcgM,MAAO,gBAG1C4Z,GAAgBhjB,IAAWijB,GAAsB6B,EAAkB3B,EAAY/lB,SAClFynB,EAAa,SAAKroB,EAAQiN,SAAO,CAAEsb,KAAMjG,GAAe1hB,SAGnD,SACF4C,GAAAA,CACHoiB,SAAUe,EACV/lB,MACE2lB,GAAyB+B,KAAsB/B,GAAyBI,EAAY/lB,QAAU4C,EAAO5C,MACjG,CACEA,MAAO4C,EAAO5C,MAAMA,MAAM2R,MAAM,KAAK2L,QACrCtR,MAAOpJ,EAAO5C,MAAMgM,MAAM2F,MAAM,MAAM2L,SAExC1a,EAAO5C,MACbkgB,QAAQ,I,IAIZ,OAAO,SACF9gB,EACA0nB,GAAsBrC,EAAYrlB,IAAAA,CACrCiN,QAASob,G,IAIbG,gBAAgBT,EAAAA,GAAAA,KAAO,CAAC/nB,EAA8BgoB,KACpD,MAAM3C,EAAarlB,EAAQgmB,QAAQlc,KAAKtG,GACtCgjB,GAAgBhjB,GACZ,SACKA,GAAAA,CACHE,KAAM0e,GAAW,4BACjBtB,QAAQ,EACRlgB,MAAOonB,EAAM9hB,OAEf1C,IAGN,OAAO,MACFxD,EACA0nB,GAAsBrC,EAAYrlB,GAAAA,IAGzCyoB,iBAAiBV,EAAAA,GAAAA,KAAO,CAAC/nB,EAA8BgoB,KACrD,GAAwB,OAApBhoB,EAAQiN,QACV,MAAM,IAAI3L,MAAM,kDAGlB,MAAM,SAAE4mB,GAAaloB,EAAQiN,QAEvBoY,EAAarlB,EAAQgmB,QAAQlc,KAAKtG,GACtCA,EAAOsR,KAAOoT,EACV,SACK1kB,GAAAA,CACHE,KAAM0e,GAAW,4BACjBtB,QAAQ,EACRlgB,MAAOonB,EAAM9hB,OAEf1C,IAGN,OAAO,SACFxD,EACA0nB,GAAsBrC,EAAYrlB,IAAAA,CACrCiN,QAAS,M,IAIbyb,cAAcX,EAAAA,GAAAA,KAAO,CAAC/nB,EAA8BgoB,KAClD,MAAME,EAAWF,EAAM9hB,KACjBmf,EAAaoC,GAAsBznB,EAAQgmB,QAAQxiB,QAAO,EAAGsR,QAASA,IAAOoT,KAAsB,GAEzG,OAAO,MACFloB,EACA0nB,GAAsBrC,EAAYrlB,GAAAA,IAGzC2oB,kBAAkBZ,EAAAA,GAAAA,KAAQ/nB,IACxB,MAAM,QAAEgmB,GAAYhmB,EAEd4oB,EAAatC,GAAcN,GACjC,IAAK4C,EACH,OAAO5oB,EAGT,GAAIwmB,GAAgBoC,IAAeA,EAAWhD,SAAU,CACtD,MAAMP,EAAaW,EAAQxZ,MAAM,EAAGwZ,EAAQlgB,OAAS,GAAG+iB,OAAO,SAAKD,GAAAA,CAAYhD,cAAUnc,KAE1F,OAAO,SACFzJ,GAAAA,CACHgmB,QAASX,EAETsC,iBAAiB,GAErB,CAEA,MAAMtC,EAAaW,EAAQxZ,MAAM,EAAGwZ,EAAQlgB,OAAS,GAAGgE,KAAKtG,GAAY,SAAKA,GAAAA,CAAQsd,QAAQ,MAE9F,OAAO,MACF9gB,EACA0nB,GAAsBrC,EAAYrlB,GAAAA,IAIzC8oB,YAAYf,EAAAA,GAAAA,IAAO,CAAE9a,QAAS,CAACjN,EAASgoB,IAAqBA,EAAM9hB,OACnE6iB,mBAAmBhB,EAAAA,GAAAA,KAAO,CAAC/nB,EAA8BgoB,KAGnDA,EAAM9hB,KAAKuc,eACb0C,GAAiBpB,aAAa,IAAIrB,GAAgB,CAAED,cAAeuF,EAAM9hB,KAAKuc,iBAGzE,CACLmF,YAAaI,EAAM9hB,KACnB0c,MAAOoF,EAAM9hB,KAAK0c,MAElBoD,QAASoB,GAAeY,EAAM9hB,KAAK0c,OACnC+E,iBAAiB,MAGrBqB,iBAAiBjB,EAAAA,GAAAA,KAAQ/nB,GAAkC,MACtDA,EACA0nB,GAAsB1nB,EAAQgmB,QAAShmB,OC1PvC,SAASipB,GAAsBjpB,GACpC,MAAM,QAAEiN,EAAO,QAAE+Y,GAAYhmB,EAE7B4jB,GAAsB,OAAZ3W,EAAkB,sBAE5B,MAAMzJ,EAASwiB,EAAQ5nB,MAAK,EAAG0W,QAASA,IAAO7H,EAAQib,WAIvD,OAFAtE,QAAqBna,IAAXjG,EAAsB,yCAEzBA,CACT,CCJO,MAAM0lB,GAAyD,CACpEC,wBAA0BnpB,IACxB,MAAM4oB,EAAatC,GAActmB,EAAQgmB,SACzC,OAAQ4C,IAAepC,GAAgBoC,EAAW,EAEpDQ,uBAAyBppB,I,IACfsmB,EAAR,QAAqC,QAA7BA,EAAAA,GAActmB,EAAQgmB,gBAAtBM,IAAAA,OAAAA,EAAAA,EAAgCV,SAAQ,EAElDyD,oBAAsBrpB,IACpB,MAAM4oB,EAAatC,GAActmB,EAAQgmB,SACzC,OAAOpL,SAAQgO,aAAAA,EAAAA,EAAYhD,aAAagD,aAAAA,EAAAA,EAAYhoB,OAAK,EAG3D0oB,UAAYtpB,GAAgC,OAApBA,EAAQiN,QAChCsc,wCAAyC,CAACvpB,EAASgoB,MAC5ChoB,EAAQiN,SAIN2Z,GAAwBqC,GAAsBjpB,GAAU,EAAuBkG,KAAKtF,OAE7F4oB,2CAA4C,CAACxpB,EAASgoB,MAC/ChoB,EAAQiN,UAIL2Z,GAAwBqC,GAAsBjpB,GAAU,EAAuBkG,KAAKtF,OAG9F6oB,iBAAmBzpB,IACjB,MAAM4oB,EAAatC,GAActmB,EAAQgmB,SACzC,OAAOpL,QAAQgO,GAAcpC,GAAgBoC,GAAY,EAE3Dc,oBAAqB,CAAC1pB,EAASgoB,IAAU,EAAqB9hB,KAAKqiB,OAASjG,GAAeqD,UAC3FgE,mBAAoB,CAAC3pB,EAASgoB,IAAU,EAAqB9hB,KAAKqiB,OAASjG,GAAesD,SAC1FgE,gBAAiB,CAAC5pB,EAASgoB,IAAU,EAAqB9hB,KAAKqiB,OAASjG,GAAe1hB,O,0HC5BlF,MAAMipB,GAAsB,IAdnC,MACQC,IAAAA,G,SAAN,YACE,MAAO,CACL,CAAElpB,MAAO,IAAKgM,MAAO,KACrB,CAAEhM,MAAO,KAAMgM,MAAO,MACtB,CAAEhM,MAAO,WAAYgM,MAAO,YAC5B,CAAEhM,MAAO,KAAMgM,MAAO,KAAMmd,YAAa,aACzC,CAAEnpB,MAAO,SAAUgM,MAAO,SAAUmd,YAAa,iBACjD,CAAEnpB,MAAO,KAAMgM,MAAO,KAAMmd,YAAa,iBACzC,CAAEnpB,MAAO,KAAMgM,MAAO,KAAMmd,YAAa,wBAE7C,E,2LCbWC,GAAkBpd,GAAkBA,EAAMqd,WAAW,M,gUCYlE,SAASC,GAAYnqB,EAAcN,GAEjC,GADqBM,aAAiBgD,cAA+B,eAAfhD,EAAMiD,KAE1D,MAAO,GAIT,MADAhE,EAAOe,MAAMA,EAAO,CAAEN,SAChBM,CACR,CAEO,MAAMoqB,GAA6D,CACxEnH,YAAW,W,MAAE,cAAOhjB,GAClB,MAAM,KAAEgZ,EAAI,GAAEK,GAAOrZ,EAAQ4nB,YAE7B,IACE,MAAM7C,QAAeI,GAAiBP,WAAW,CAAEhC,MAAO5iB,EAAQ4iB,MAAO5J,OAAMK,OAEzE+Q,EAA4B,GAC5BC,EAA6B,GAWnC,OARAtF,EAAOuF,SAAS1d,IACVod,GAAepd,EAAMhM,OACvBypB,EAActO,KAAKnP,GAEnBwd,EAAarO,KAAKnP,EACpB,IAGK,IAAIwd,KAAiBC,EAC9B,CAAE,MAAOtqB,GACP,OAAOmqB,GAAYnqB,EAAgB,+BACrC,CACF,I,gBAtBoBC,G,gCAAT,GAuBXuqB,eAAc,IAAE,YACd,IACE,aAAaV,GAAoBC,MACnC,CAAE,MAAO/pB,GACP,OAAOmqB,GAAYnqB,EAAgB,kCACrC,CACF,IAGAsjB,iBAAgB,W,MAAE,cAAOrjB,GACvB,IACIwqB,GADA,MAAE5H,EAAK,QAAE3V,EAAO,YAAEwd,GAAgBzqB,EAGtC,IACE,GAAIiN,EAAS,CACX,MAAM+Y,EAAUhmB,EAAQgmB,QAAQxiB,QAAQA,GAClCA,EAAOsR,KAAO7H,EAASib,WACzBsC,EAAehnB,GACR,KAMX,IAAKgnB,EACH,MAAM,IAAIlpB,MAAM,iCAAiC2L,EAAQib,+BAG3DtF,EAAQmD,GAAenD,EAAOoD,EAChC,MAGE,GAFAwE,EAAelE,GAActmB,EAAQgmB,UAEjCwE,aAAAA,EAAAA,EAAc9mB,QAAS0e,GAAWoD,QACpC,MAAM,IAAIlkB,MAAM,6DAIpB,GAAImpB,EAAYzd,SACd,MAAO,GAGT,MAAMsW,EAAUkH,EAAa7E,UAAU/kB,OACjC,KAAEoY,EAAI,GAAEK,GAAOrZ,EAAQ4nB,YAE7B,aAAazC,GAAiBF,gBAAgB,CAAErY,MAAO0W,EAASV,QAAO5J,OAAMK,MAC/E,CAAE,MAAOtZ,GACP,OAAOmqB,GAAYnqB,EAAgB,qCACrC,CACF,I,gBAvCyBC,G,gCAAT,ICnDL0qB,GAIT,CAEFC,OAAQ,CACN,CACEC,KAAM,yBACN7b,OAAQ,iBAEV,CACE6b,KAAM,sBACN7b,OAAQ,mBAEV,CAAEA,OAAQ,UCnBD8b,GAAW,CACtBC,WAAY,4BACZC,aAAc,oBACdC,gBAAiB,wBACjBC,aAAc,oBACdC,cAAe,mBACfC,WAAY,kBACZC,QAAS,aACTC,WAAY,gEACZC,iBAAkB,4BAClBC,qBAAsB,4CCRXC,GAAmB5F,GAC9BA,IAAavD,GAAa,OAASuD,IAAavD,GAAa,M,kkBCOxD,MAAMoJ,GAIT,CACFC,MAAO,CACL,iBACA3D,EAAAA,GAAAA,IAAO,CAEL0C,YAAczqB,IACZ,IAAI2rB,EAAcd,GAASC,WACvBc,GAAmB,EACvB,MAAMhD,EAAatC,GAActmB,EAAQgmB,SAgBzC,OAdI4C,GAAcpC,GAAgBoC,KAC3BA,EAAWhD,UAGdgG,EAAmBJ,GAAgB5C,EAAWhD,SAAShlB,OAEvD+qB,EAAcpF,GAAyBqC,EAAWhD,SAAShlB,OACvDiqB,GAASK,cACTU,EACAf,GAASM,WACTN,GAASI,cARbU,EAAcd,GAASG,iBAYpB,G,uUAAA,IACFa,GAAepB,aAAW,CAC7BkB,cACAC,oB,EAGJ3e,QAAS,QAGb6e,GAAI,CACFC,YAAa,CACX,CACEnB,KAAM,0BACN7b,OAAQ,cAEV,CACE6b,KAAM,yBACN7b,OAAQ,iBAEV,CACE6b,KAAM,sBACN7b,OAAQ,oBAGZid,YAAa,CACX,CACEpB,KAAM,sBACN7b,OAAQ,aACRlI,QAAS,CAAC,eAEZ,CACE+jB,KAAM,qBACN7b,OAAQ,gBACRlI,QAAS,CAAC,eAEZ,CACE+jB,KAAM,kBACN7b,OAAQ,kBACRlI,QAAS,CAAC,gBAGdolB,cAAe,CACb,CACErB,KAAM,mBACN7b,OAAQ,mBACRlI,QAAS,CAAC,iBAEZ,CACEkI,OAAQ,OACRlI,QAAS,CAAC,kBAGdqlB,mBAAoB,CAClBnd,OAAQ,OACRlI,QAAS,CAAC,qBAEZslB,oBAAqB,CACnBpd,OAAQ,OACRlI,QAAS,CAAC,sBAEZulB,cAAe,CACbrd,OAAQ,OACRlI,QAAS,CAAC,sB,44BC9FT,MAAMwlB,GAIT,CACFX,OAAO3D,EAAAA,GAAAA,IAAO,CACZ0C,YAAa,IAAO,SACfoB,GAAepB,aAAW,CAC7B6B,WAAW,EACXlW,WAAW,MAGfmW,OAAQ,CACNzX,GAAI,cACJxJ,IAAK,cACLkhB,OAAQ,CACNzd,OAAQ,gBACRlI,SAASkhB,EAAAA,GAAAA,IAAO,CACd0C,YAAa,CAACzqB,EAASgoB,IAAW,SAC7BhoB,EAAQyqB,aAAW,CACtBgC,MAAO,EAAOvmB,KAAqB1C,QACjC,EAAG5C,YAAaZ,EAAQgmB,QAAQ0G,MAAMlpB,I,IAAWA,E,OAAgB,QAAhBA,EAAAA,EAAOmiB,iBAAPniB,IAAAA,OAAAA,EAAAA,EAAkB5C,SAAUA,CAAK,MAEpFwV,WAAW,OAIjBa,QAAS,CACPlI,OAAQ,gBACRlI,SAASkhB,EAAAA,GAAAA,IAAO,CACd0C,YAAa,CAACzqB,EAASgoB,IAAW,SAC7BhoB,EAAQyqB,aAAW,CACtBrU,WAAW,EACXrW,MAAOioB,EAAM9hB,WAKrB4lB,GAAI,CACFa,oBAAqB,SAIZC,GAIT,CACFlB,OAAO3D,EAAAA,GAAAA,IAAO,CACZ0C,YAAczqB,GAAa,SACtBA,EAAQyqB,aAAW,CACtB/mB,KAAM6e,GAAeoD,UACrB2G,WAAW,EACXX,YAAad,GAASE,iBAG1Be,GAAI,CACFa,oBAAqB,OACrBE,kBAAmB,CACjB,CACEjC,KAAM,YACN7b,OAAQ,gBACRlI,QAAS,CAAC,wBAEZ,CACEkI,OAAQ,gBACRlI,QAAS,CAAC,wBAGdqlB,mBAAoB,CAClBnd,OAAQ,OACRlI,QAAS,CAAC,uB,44BCjET,MAAMimB,GAIT,CACFpB,OAAO3D,EAAAA,GAAAA,IAAO,CACZ0C,YAAczqB,IACZ,MAAMwqB,EAAexqB,EAAQiN,QAAUgc,GAAsBjpB,GAAWsmB,GAActmB,EAAQgmB,SAI9F,OAFApC,QAA4Cna,WAA3B+gB,aAAAA,EAAAA,EAAc5E,UAAwB,sCAEhD,SACFiG,GAAepB,aAAW,CAC7Bzd,SAEE,CAAC,KAAM,MAAM6J,SAAS2T,EAAc5E,SAAUhlB,QAE9CopB,GAAeQ,EAAc7E,UAAW/kB,OAC1C0rB,WAAW,EACXlW,WAAW,G,IAIjBmW,OAAQ,CACNzX,GAAI,mBACJxJ,IAAK,mBACLkhB,OAAQ,CACNzd,OAAQ,qBACRlI,SAASkhB,EAAAA,GAAAA,IAAO,CACd0C,YAAa,CAACzqB,EAASgoB,IAAW,SAC7BhoB,EAAQyqB,aAAW,CACtBgC,MAAOzE,EAAM9hB,KACbkQ,WAAW,OAIjBa,QAAS,CACPlI,OAAQ,qBACRlI,SAASkhB,EAAAA,GAAAA,IAAO,CACd0C,YAAa,CAACzqB,EAASgoB,IAAW,SAC7BhoB,EAAQyqB,aAAW,CACtBgC,MAAO,GACPrW,WAAW,EACXrW,MAAOioB,EAAM9hB,WAKrB4lB,GAAI,CACFa,oBAAqB,SAIZI,GAIT,CACFrB,OAAO3D,EAAAA,GAAAA,IAAO,CAEZ0C,YAAczqB,IACZ,MAAMwqB,EAAexqB,EAAQiN,QAAUgc,GAAsBjpB,GAAWsmB,GAActmB,EAAQgmB,SAE9FpC,QAA4Cna,WAA3B+gB,aAAAA,EAAAA,EAAc5E,UAAwB,sCAEvD,MAAMoH,EAAiBxC,EAAc5E,SAAUhlB,MAEzCgrB,EACJJ,GAAgBwB,IAEhBhtB,EAAQyqB,YAAYzd,SAEhBgK,EAAWuP,GAAyByG,GAE1C,IAAIrB,EAQAsB,EAQJ,OAbEtB,EADEC,EACYf,GAASM,WAETnU,EAAW6T,GAASK,cAAgBL,GAASI,aAM3DgC,EADEjtB,EAAQyqB,YAAY1qB,MACH8qB,GAASQ,WAETrrB,EAAQyqB,YAAYzd,SAAW6d,GAASU,qBAAuBV,GAASS,iBAGtF,SACFtrB,EAAQyqB,aAAW,CACtB/mB,KAAM6e,GAAe3hB,MACrB0rB,WAAW,EACXX,cACAsB,mBACArB,mBACA5U,Y,IAIN8U,GAAI,CACFa,oBAAqB,OACrBE,kBAAmB,CACjB,CACEjC,KAAM,YACN7b,OAAQ,mBACRlI,QAAS,CAAC,oBAEZ,CACEkI,OAAQ,OACRlI,QAAS,CAAC,oBAGdqlB,mBAAoB,CAClBnd,OAAQ,gBACRlI,QAAS,CAAC,uB,44BC1HT,MAAMqmB,GAIT,CACFxB,OAAO3D,EAAAA,GAAAA,IAAO,CACZ0C,YAAa,IAAO,SACfoB,GAAepB,aAAW,CAC7B6B,WAAW,EACXlW,WAAW,MAGfmW,OAAQ,CACNzX,GAAI,iBACJxJ,IAAK,iBACLkhB,OAAQ,CACNzd,OAAQ,mBACRlI,SAASkhB,EAAAA,GAAAA,IAAO,CACd0C,YAAa,CAACzqB,EAASgoB,IAAW,SAC7BhoB,EAAQyqB,aAAW,CACtBgC,MAAOzE,EAAM9hB,KACbkQ,WAAW,OAIjBa,QAAS,CACPlI,OAAQ,mBACRlI,SAASkhB,EAAAA,GAAAA,IAAO,CACd0C,YAAa,CAACzqB,EAASgoB,IAAW,SAC7BhoB,EAAQyqB,aAAW,CACtBgC,MAAO,GACPrW,WAAW,EACXrW,MAAOioB,EAAM9hB,WAKrB4lB,GAAI,CACFa,oBAAqB,SAIZQ,GAIT,CACFzB,OAAO3D,EAAAA,GAAAA,IAAO,CACZ0C,YAAczqB,GAAa,SACtBA,EAAQyqB,aAAW,CACtB/mB,KAAM6e,GAAeqD,SACrB0G,WAAW,EACXX,YAAad,GAASG,gBACtBY,kBAAkB,EAClB5U,UAAU,MAGd8U,GAAI,CACFa,oBAAqB,OACrBE,kBAAmB,CAEjB,CACEjC,KAAM,0CACN7b,OAAQ,kBACRlI,QAAS,CAAC,uBAEZ,CACE+jB,KAAM,6CACN7b,OAAQ,mBACRlI,QAAS,CAAC,uBAGZ,CACE+jB,KAAM,mBACN7b,OAAQ,mBACRlI,QAAS,CAAC,sBAEZ,CACEkI,OAAQ,kBACRlI,QAAS,CAAC,uBAGdqlB,mBAAoB,CAClBnd,OAAQ,aACRlI,QAAS,CAAC,uB,kkBC7ET,MAAMglB,GAAsC5oB,OAAOC,OAAO,CAC/D0kB,YAAa,CACXhF,MAAO,GACP5J,KAAM,EACNK,GAAI,GAENuJ,MAAO,GACPoD,QAAS,GACT2B,iBAAiB,EACjB1a,QAAS,KACTwd,YAAa,CACX/mB,KAAM,KACN+oB,MAAO,GACPH,WAAW,EACXlW,WAAW,EACXrW,MAAO,KACP4rB,YAAa,GACbsB,iBAAkB,GAClBrB,kBAAkB,EAClB5U,UAAU,EACVhK,UAAU,KAIR1J,GACJtD,IAC+E,CAC/E8U,GAAI,gBACJsY,QAAS,OACTptB,UACAqtB,4BAA4B,EAC5BC,OAAQ,CACN7B,KAAIA,GACJY,WAAUA,GACVO,cAAaA,GACbM,cAAaA,GACbC,iBAAgBA,GAChBL,gBAAeA,GACfC,mBAAkBA,GAClBrC,iBAAgBA,MAIdzoB,GAAkE,CACtEinB,OAAMA,GACNiB,SAAQA,GACRtjB,QAAOA,IAKF,SAAS0mB,GAAkB3F,GAChC,MAAM,MAAEhF,GAAUgF,EAEZ4F,EAAsC,G,uUAAA,IACvC3B,IAAAA,CACHjE,cACAhF,QAEAoD,QAASoB,GAAexE,KAGpB6K,GAAeC,EAAAA,GAAAA,GAAcpqB,GAAOkqB,GAAiBvrB,IAI3D,MAAO,CAAE0rB,OAFKC,EAAAA,GAAAA,IAAUH,GAERD,iBAClB,CChFA,MAEaK,GAFI,IAAI5V,KAAK6V,SAAS,KAAM,CAAEC,YAAa,SAElBC,QCahCC,GAA4B5qB,GAAwB,CAACyL,EAAeof,KACxE,MAAMC,EAAc9qB,EAAOqpB,MAAMnF,GAAMA,EAAE3mB,QAAUkO,EAAElO,QAC/CwtB,EAAc/qB,EAAOqpB,MAAMnF,GAAMA,EAAE3mB,QAAUstB,EAAEttB,QAErD,OAAIutB,GAAeC,EACVP,GAAc/e,EAAElO,MAAOstB,EAAEttB,OAG9BwtB,EACK,EAGLD,GACM,EAGH,CAAC,EAGH,SAASE,IAAsB,UAAEC,EAAS,YAAE7D,EAAW,YAAE8D,IAC9D,MAAMvlB,GAASC,EAAAA,EAAAA,YAAWlC,IAEpBynB,GAAenlB,EAAAA,EAAAA,UAAQ,KAC3B,MAAMolB,EAAkBH,EAAU1tB,MAAM2R,MAAM,KACxCmc,EAAkBJ,EAAU1hB,MAAM2F,MAAM,MAC9C,OAAOkc,EAAgB3kB,KAAI,CAACyd,EAAGvd,KAAO,CAAEpJ,MAAO2mB,EAAG3a,MAAO8hB,EAAgB1kB,MAAM,GAC9E,CAACskB,KAEGjrB,EAAQsrB,IAAa/oB,EAAAA,EAAAA,UAAsB4oB,GAI5CI,GAAgBvlB,EAAAA,EAAAA,UAAQ,IAAMohB,EAAYgC,MAAMoC,KAAKZ,GAAyB5qB,KAAU,CAAConB,EAAYgC,QAErGhN,GAAWhJ,EAAAA,EAAAA,cAAaqY,IAC5BH,EAAUG,EAAUhlB,KAAI,EAAGlJ,QAAQ,GAAIgM,QAAQ,OAAU,CAAEhM,QAAOgM,YAAU,GAC3E,IAEGmiB,GAAsBtY,EAAAA,EAAAA,cAAY,KACtC8X,EAAYlrB,EAAO,GAClB,CAACkrB,EAAalrB,IAEjB,OACE,kBAAC2rB,EAAAA,YAAWA,CACVxlB,UAAWR,EAAOimB,cAClBtD,YAAalB,EAAYkB,YACzBvK,eAAgByJ,GAASO,QACzB8D,mBAAmB,EACnBC,qBAAqB,EACrBC,uBAAAA,EAEAC,WAAAA,EACAzuB,MAAOyC,EACPoc,SAAUA,EACV8O,YAAaQ,EACb9sB,QAAS2sB,EACTjN,QAAAA,EACAvL,UAAWqU,EAAYrU,UACvBkZ,QAAS1U,QAAQ6P,EAAY1qB,OAC7BktB,iBAAkBxC,EAAYwC,kBAGpC,CAEA,MAAMlmB,GAAY,KAAO,CACvBkoB,cAAe/nB,EAAAA,GAAG;;;;;;;MCnEb,SAASqoB,IAAmB,YAAE5D,EAAW,aAAE6C,EAAY,QAAEgB,EAAO,SAAE/P,EAAQ,OAAEgQ,IACjF,MAAMzmB,GAASC,EAAAA,EAAAA,YAAWlC,IAEpB2oB,GAAWC,EAAAA,EAAAA,QAAyB,OACnCL,EAASM,IAAchqB,EAAAA,EAAAA,WAAS,GAkCvC,OANA2N,EAAAA,EAAAA,YAAU,KACJmc,EAASG,SACXH,EAASG,QAAQC,OACnB,GACC,IAGD,kBAACC,EAAAA,MAAKA,CACJC,IAAKN,EACLlmB,WAAW4B,EAAAA,EAAAA,IAAGojB,GAAgBxlB,EAAOiE,SACrCqiB,QAASA,EACT3D,YAAaA,EACb6C,aAAcA,EACdgB,QAASA,EACTS,QAxCaC,IACf,MAAMtvB,EAAQ,EAAGmO,OAA4BnO,MAAM4mB,OAIpC,UAAX0I,EAAEC,OACAvvB,EACF6e,EAAS,CAAE7e,QAAOgM,MAAOhM,IAEzBgvB,GAAW,GAEf,EA8BEH,OA3BoBS,IACtB,MAAMtvB,EAAQ,EAAGmO,OAA4BnO,MAAM4mB,OAI/C5mB,EACF6e,EAAS,CAAE7e,QAAOgM,MAAOhM,IAEzB6uB,GACF,GAqBJ,CAEA,MAAM1oB,GAAY,KAAO,CACvBkG,QAAS/F,EAAAA,GAAG;;;MCzDRH,GAAY,KAAO,CACvBkoB,cAAe/nB,EAAAA,GAAG;;;;;;;;;MAmBb,SAASkpB,IAAoB,UAAE9B,EAAS,YAAE7D,EAAW,SAAEhL,EAAQ,YAAE8O,IACtE,MAAMvlB,GAASC,EAAAA,EAAAA,YAAWlC,IAE1B,OAAI0jB,EAAYmB,iBAEZ,kBAAC2D,GAAkBA,CACjBf,aAAcF,EAAU1tB,MACxB+qB,YAAalB,EAAYkB,YACzBlM,SAAUA,EACVgQ,OAAQlB,IAMZ,kBAACxO,EAAAA,OAAMA,CACLvW,UAAWR,EAAOimB,cAClBtD,YAAalB,EAAYkB,YACzBvK,eAAgByJ,GAASO,QACzB8D,mBAAmB,EACnBG,WAAAA,EACAzuB,MAAO0tB,EAAU1tB,MACjB6e,SAAUA,EACV8O,YAAaA,EACbtsB,QAASwoB,EAAYgC,MACrB9K,QAAAA,EACAvL,UAAWqU,EAAYrU,UACvBkZ,QAAS1U,QAAQ6P,EAAY1qB,OAC7BktB,iBAAkBxC,EAAYwC,kBAGpC,CC/CA,MAAM7rB,GAAO,OAEAivB,GAA2B,EAAG7sB,SAAQsJ,UAASwjB,eAC1D,MAAMtnB,GAASC,EAAAA,EAAAA,YAAWlC,KAEpB,UAAE4e,EAAS,SAAEC,EAAQ,OAAE9E,GAAWtd,EAClCgG,EAAYsX,EAAS9X,EAAOunB,SAAUnlB,EAAAA,EAAAA,IAAGpC,EAAOunB,QAASvnB,EAAOwnB,iBAEtE,OACE,kBAAClnB,MAAAA,CAAIE,UAAWA,EAAWyB,aAAW,UACpC,kBAACwlB,EAAAA,IAAGA,CAACxlB,aAAW,eAAezB,UAAWR,EAAO0nB,iBAAkB1tB,KAAM2iB,EAAU/Y,MAAOE,QAAS1L,KAEnG,kBAACqvB,EAAAA,IAAGA,CACFxlB,aAAW,kBACXzB,UAAWR,EAAO2nB,gBAClB3tB,KAAM4iB,EAAShZ,MACfE,QAAS,CAAC9J,EAAMktB,IAAMpjB,EAAQojB,EAAG1sB,EAAQ8e,GAAesD,UACxDgL,SAAU,IAGZ,kBAACH,EAAAA,IAAGA,CACFxlB,aAAW,gBACXzB,UAAWR,EAAO6nB,oBAClBhkB,KAAK,QACL7J,KAAK,GACL8J,QAAS,CAAC9J,EAAMktB,IAAMI,EAASJ,EAAG1sB,GAClCotB,SAAU,I,EC1BZxvB,GAAO,OAEA0vB,GAAgC,EAAGttB,SAAQsJ,UAASwjB,eAC/D,MAAMtnB,GAASC,EAAAA,EAAAA,YAAWlC,KAEpB,UAAE4e,EAAS,SAAEC,EAAQ,MAAEhlB,EAAK,OAAEkgB,GAAWtd,EACzCgG,EAAYsX,EAAS9X,EAAOunB,SAAUnlB,EAAAA,EAAAA,IAAGpC,EAAOunB,QAASvnB,EAAOwnB,iBAEtE,OACE,kBAAClnB,MAAAA,CAAIE,UAAWA,EAAWyB,aAAW,UACpC,kBAACwlB,EAAAA,IAAGA,CAACxlB,aAAW,eAAezB,UAAWR,EAAO0nB,iBAAkB1tB,KAAM2iB,EAAU/Y,MAAOE,QAAS1L,KAEnG,kBAACqvB,EAAAA,IAAGA,CACFxlB,aAAW,kBACXzB,UAAWR,EAAO2nB,gBAClB3tB,KAAM4iB,EAAShZ,MACfE,QAAS,CAAC9J,EAAMktB,IAAMpjB,EAAQojB,EAAG1sB,EAAQ8e,GAAesD,UACxDgL,SAAU,IAGZ,kBAACG,EAAAA,QAAOA,CAAClmB,QAASjK,EAAMgM,OACtB,kBAAC6jB,EAAAA,IAAGA,CACFxlB,aAAW,eACXjI,KAAMpC,EAAMgM,MACZpD,UAAWR,EAAOgoB,aAClBlkB,QAAS,CAAC9J,EAAMktB,IAAMpjB,EAAQojB,EAAG1sB,EAAQ8e,GAAe1hB,OACxDgwB,SAAU,KAId,kBAACH,EAAAA,IAAGA,CACFxlB,aAAW,gBACXzB,UAAWR,EAAO6nB,oBAClBhkB,KAAK,QACL7J,KAAK,GACL8J,QAAS,CAAC9J,EAAMktB,IAAMI,EAASJ,EAAG1sB,GAClCotB,SAAU,I,ECrCLK,GAAiB,EAAGztB,SAAQsJ,cACvC,MAAM9D,GAASC,EAAAA,EAAAA,YAAWlC,KAEpB,UAAE4e,EAAS,SAAEC,GAAapiB,EAChC,OAAKmiB,GAAcC,EAKjB,kBAACtc,MAAAA,CAAIE,WAAW4B,EAAAA,EAAAA,IAAGpC,EAAOunB,QAASvnB,EAAOkoB,gBAAiBjmB,aAAW,kBACpE,kBAACwlB,EAAAA,IAAGA,CACFU,WAAY,EACZnuB,KAAM2iB,EAAU/Y,MAChBY,MAAO,SAASmY,EAAU/Y,SAC1BE,QAAS,CAAC9J,EAAMktB,IAAMpjB,EAAQojB,EAAG1sB,EAAQ8e,GAAeqD,WACxDiL,SAAU,IAGXhL,GACC,kBAAC6K,EAAAA,IAAGA,CACFU,WAAY,EACZnuB,KAAM4iB,EAAShZ,MACfY,MAAO,SAASoY,EAAShZ,SACzBpD,UAAWR,EAAO2nB,gBAClB7jB,QAAS,CAAC9J,EAAMktB,IAAMpjB,EAAQojB,EAAG1sB,EAAQ8e,GAAesD,UACxDgL,SAAU,KApBT,I,ECFLQ,GAAwB,oBAExBC,GAAsB,UAEftqB,GAAaC,IAA0B,CAClDupB,QAASrpB,EAAAA,GAAG;;;wBAGUkqB;;;;;0BAKEpqB,EAAMY,OAAOmI,WAAWuB;eACnCtK,EAAMY,OAAOC,KAAKypB;;;;0BAIPF;eAjBF;;;;;;;;;+BA2BOA;;;;IAK7BF,eAAgBhqB,EAAAA,GAAG;oBACDmqB;;;;;;0BAMMrqB,EAAMY,OAAOmI,WAAWjI;eACnCd,EAAMY,OAAOC,KAAKypB;;;;;;;;;;sBAUXD;eACPrqB,EAAMY,OAAOC,KAAKypB;;IAG/Bd,gBAAiBtpB,EAAAA,GAAG;oBACFmqB;;;eAGLrqB,EAAMY,OAAOC,KAAKypB;;;;0BAIPtqB,EAAMY,OAAOmI,WAAWjI;eACnCd,EAAMY,OAAOC,KAAKypB;;;;sBAIXD;;IAGpBX,iBAAkBxpB,EAAAA,GAAG;;;;IAKrBypB,gBAAiBzpB,EAAAA,GAAG;;0BAEIF,EAAMY,OAAOmI,WAAWjI;;IAGhDkpB,aAAc9pB,EAAAA,GAAG;;;;;;;;;0BASOF,EAAMY,OAAOmI,WAAWjI;;IAGhD+oB,oBAAqB3pB,EAAAA,GAAG;;0BAEAF,EAAMY,OAAOmI,WAAWjI;;;;;;;MAU5CypB,GAAmB,EAAG/tB,SAAQsJ,UAASwjB,eAC3C,OAAQ9sB,EAAOE,MACb,KAAK0e,GAAWoD,QACd,OAAO,kBAACyL,GAAcA,CAACztB,OAAQA,EAAQsJ,QAASA,IAElD,KAAKsV,GAAW,4BACd,OAAO,kBAAC0O,GAA6BA,CAACttB,OAAQA,EAA0BsJ,QAASA,EAASwjB,SAAUA,IAEtG,KAAKlO,GAAW,sBACd,OAAO,kBAACiO,GAAwBA,CAAC7sB,OAAQA,EAA0BsJ,QAASA,EAASwjB,SAAUA,IAEjG,QACE,MAAM,IAAIkB,UAAU,4BAA4BhuB,EAAOE,UAAUlD,KAAKM,UAAU0C,QACpF,EAGWiuB,IAAUrjB,EAAAA,EAAAA,MACrBmjB,IACA,CAACG,EAAWC,IAAcnxB,KAAKM,UAAU4wB,EAAUluB,UAAYhD,KAAKM,UAAU6wB,EAAUnuB,UCvHpFuD,GAAY,KAAO,CACvB6qB,aAAc1qB,EAAAA,GAAG;;;;;IAMjB2qB,qBAAsB3qB,EAAAA,GAAG;;MAgB3B,SAAS4qB,IAAsB,QAC7B9L,EAAO,eACP+L,EAAc,gBACdC,EAAe,QACf/kB,EAAO,YACPwd,EAAW,yBACXwH,EAAwB,6BACxBC,EAA4B,+BAC5BC,IAEA,MAAMnpB,GAASC,EAAAA,EAAAA,YAAWlC,IAE1B,OACE,kBAACuC,MAAAA,CAAIE,UAAWR,EAAO4oB,aAAcroB,cAAY,eAC9Cyc,EAAQlc,KAAKtG,GACZ,kBAAC8F,MAAAA,CAAIW,IAAKzG,EAAOsR,GAAItL,UAAWR,EAAO6oB,sBACrC,kBAACJ,GAAOA,CAACjuB,OAAQA,EAAQsJ,QAASilB,EAAgBzB,SAAU0B,KAE3D/kB,aAAAA,EAAAA,EAASib,YAAa1kB,EAAOsR,GAC3B2V,EAAYzT,SAUX,kBAACqX,GAAqBA,CACpBC,UAAW9qB,EAAOyJ,EAAQsb,MAC1BkC,YAAaA,EACb8D,YAAa4D,IAZf,kBAAC/B,GAAmBA,CAElBnmB,IAAKgD,EAAQsb,KACb+F,UAAW9qB,EAAOyJ,EAAQsb,MAC1BkC,YAAaA,EACbhL,SAAUwS,EACV1D,YAAa2D,IASf,QAKd,CAEO,MAAME,IAAehkB,EAAAA,EAAAA,MAAK0jB,IC5EpB/qB,GAAY,KAAO,CAC9BsrB,OAAQnrB,EAAAA,GAAG;;;MAoCN,SAASorB,IAAa,YAAE7H,EAAW,QAAE+E,EAAO,SAAE/P,EAAQ,UAAE8S,EAAS,YAAEhE,IACxE,MAAMvlB,GAASC,EAAAA,EAAAA,YAAWlC,IACpB4a,EAnBR,SAA6B2K,GAC3B,MAAO3K,EAAQ6Q,IAAa5sB,EAAAA,EAAAA,WAAS,GAarC,OAXA2N,EAAAA,EAAAA,YAAU,MACJ+Y,GAAc3K,EAKd2K,IAAc3K,GAChB6Q,EAAUlG,GALVmG,YAAW,IAAMD,GAAU,IAAO,EAMpC,GACC,CAAC7Q,EAAQ2K,IAEL3K,CACT,CAIiB+Q,CAAoBjI,EAAY6B,WAE/C,OAAI7B,EAAYmB,iBAEZ,kBAAC2D,GAAkBA,CACjB5D,YAAalB,EAAYkB,YACzB6D,QAASA,EACT/P,SAAUA,EACVgQ,OAAQlB,IAMZ,kBAACxO,EAAAA,OAAMA,CACLvW,UAAWR,EAAOqpB,OAClB1G,YAAalB,EAAYkB,YACzBvK,eAAgByJ,GAASO,QACzB8D,mBAAmB,EACnBtuB,MAAO,KACP4uB,QAASA,EACT+C,UAAWA,EACX9S,SAAUA,EACV8O,YAAaA,EACbtsB,QAASwoB,EAAYgC,MACrB9K,OAAQA,EACRvL,UAAWqU,EAAYrU,UACvBkZ,QAAS1U,QAAQ6P,EAAY1qB,OAC7BktB,iBAAkBxC,EAAYwC,kBAGpC,CCxEA,MAAM7rB,GAAO,OAEN,SAASuxB,KACd,MAAM3pB,GAASC,EAAAA,EAAAA,YAAWlC,IAE1B,OAAO,kBAACgZ,EAAAA,OAAMA,CAAC/S,UAAAA,EAASxD,UAAWR,EAAOqpB,OAAQ1G,YAAad,GAASC,WAAYrL,SAAUre,IAChG,CCGO,SAASwxB,IAAe,YAAEnI,EAAW,QAAE+E,EAAO,UAAE+C,EAAS,YAAEhE,IAChE,MAAMvlB,GAASC,EAAAA,EAAAA,YAAWlC,KACnB1D,EAAQsrB,IAAa/oB,EAAAA,EAAAA,UAAsB,IAE5C6Z,GAAWhJ,EAAAA,EAAAA,cAAaqY,IAC5BH,EAAUG,EAAUhlB,KAAI,EAAGlJ,QAAQ,GAAIgM,QAAQ,OAAU,CAAEhM,QAAOgM,YAAU,GAC3E,IAEGimB,GAAoBpc,EAAAA,EAAAA,cACvBuR,IACCuK,EAAUvK,EAAO3kB,EAAO,GAE1B,CAACkvB,EAAWlvB,IAGR0rB,GAAsBtY,EAAAA,EAAAA,cAAY,KACtC8X,EAAYlrB,EAAO,GAClB,CAACkrB,EAAalrB,IAEjB,OACE,kBAAC2rB,EAAAA,YAAWA,CACVxlB,UAAWR,EAAOqpB,OAClB1G,YAAalB,EAAYkB,YACzBvK,eAAgByJ,GAASO,QACzB8D,mBAAmB,EACnBC,qBAAqB,EACrBC,uBAAAA,EAEAC,WAAAA,EACAzuB,MAAOyC,EACPmsB,QAASA,EACT+C,UAAWM,EACXpT,SAAUA,EACV8O,YAAaQ,EACb9sB,QAASwoB,EAAYgC,MACrB9K,OAAQ8I,EAAY6B,UACpBlW,UAAWqU,EAAYrU,UACvBkZ,QAAS1U,QAAQ6P,EAAY1qB,OAC7BktB,iBAAkBxC,EAAYwC,kBAGpC,CAEA,MAAMlmB,GAAY,KAAO,CACvBsrB,OAAQnrB,EAAAA,GAAG;;;;MCpCPH,GAAY,KAAO,CACvB+rB,aAAc5rB,EAAAA,GAAG;;;;;;;IAQjB6rB,SAAU7rB,EAAAA,GAAG;;;;IAKb8rB,cAAe9rB,EAAAA,GAAG;;;MAkBpB,SAAS+rB,GAAsBlqB,GAC7B,MAAMC,GAASC,EAAAA,EAAAA,YAAWlC,KAEpB,MAAE4mB,EAAK,cAAEuF,GCpDV,UAAyB,cAAEzQ,EAAa,MAAEG,EAAK,KAAE5J,EAAI,GAAEK,EAAE,cAAE8Z,IAChE,MAAM,MAAExF,EAAK,eAAEH,IAAmBnkB,EAAAA,EAAAA,UAChC,IAAMkkB,GAAkB,CAAE3K,QAAO5J,OAAMK,QAGvC,KAGF9F,EAAAA,EAAAA,YAAU,KACRoa,EAAMyF,KAAK,CAAE1vB,KAAM,sBAAuBwC,KAAM,CAAEuc,gBAAeG,QAAO5J,OAAMK,OAAO,GACpF,CAACsU,EAAOlL,EAAeG,EAAO5J,EAAMK,IAEvC,MAAO6Z,EAAeG,IAAoBztB,EAAAA,EAAAA,UAA8B4nB,GAwBxE,OAtBAja,EAAAA,EAAAA,YAAU,KACRoa,EAAMxK,QAMNwK,EAAM2F,WAAU,EAAGtL,QAAOhoB,cACL,kBAAfgoB,EAAMtkB,MACRyvB,EAAcnzB,EAAQ4iB,MAAO5iB,EAAQgmB,SAGvCqN,EAAiBrzB,EAAQ,IAGpB,KACL2tB,EAAM4F,MAAM,IAIb,CAAC5F,IAEG,CAAEA,QAAOuF,gBAClB,CDemCM,CAAgBzqB,IAC3C,QAAEid,EAAO,QAAE/Y,EAAO,gBAAE0a,EAAe,YAAE8C,GAAgByI,GAErD,eAAEnB,EAAc,gBAAEC,GAmF1B,SAA4BrE,GAC1B,MAAMoE,GAAiBtb,EAAAA,EAAAA,cACrB,CAACuR,EAAYxkB,EAAgB+kB,KAC3BoF,EAAMyF,KAAK,CAAE1vB,KAAM,cAAewC,KAAM,CAAEgiB,SAAU1kB,EAAOsR,GAAIyT,SAAS,GAE1E,CAACoF,IAGGqE,GAAkBvb,EAAAA,EAAAA,cACtB,CAACuR,EAAYxkB,KACXmqB,EAAMyF,KAAK,CAAE1vB,KAAM,gBAAiBwC,KAAM1C,EAAOsR,IAAK,GAExD,CAAC6Y,IAGH,MAAO,CACLoE,iBACAC,kBAEJ,CAtG8CyB,CAAmB9F,IAEzD,QACJ6B,EAAO,yBACPyC,EAAwB,sBACxByB,EAAqB,kBACrBC,EAAiB,wBACjBC,EAAuB,oBACvBC,GAiGJ,SAA2BlG,EAAclD,EAAiDqJ,GAExF,MAAMtE,GAAU/Y,EAAAA,EAAAA,cAAY,KAC1BkX,EAAMyF,KAAK,CAAE1vB,KAAM,eAAgB,GAClC,CAACiqB,IAGEsE,GAA2Bxb,EAAAA,EAAAA,cAC9Bsd,IACC,MAAM,MAAEnzB,EAAQ,GAAE,MAAEgM,EAAQ,IAAOmnB,EAEnCpG,EAAMyF,KAAK,CAAE1vB,KAAM,oBAAqBwC,KAAM,CAAEtF,QAAOgM,UAAU,GAEnE,CAAC+gB,IAGG+F,GAAwBjd,EAAAA,EAAAA,cAC3BuR,IACoB,cAAfA,EAAMmI,MAAyBnI,EAAMjZ,OAAOnO,OAC9C+sB,EAAMyF,KAAK,CAAE1vB,KAAM,sBACrB,GAEF,CAACiqB,IAGGgG,GAAoBld,EAAAA,EAAAA,cAAY,KACpCkX,EAAMyF,KAAK,CAAE1vB,KAAM,uBAAwB,GAC1C,CAACiqB,IAGEiG,GAA0Bnd,EAAAA,EAAAA,cAC9B,CAACuR,EAAY3kB,KACQ,cAAf2kB,EAAMmI,MAAyBnI,EAAMjZ,OAAOnO,OAAUyC,EAAOyC,QAC/D6nB,EAAMyF,KAAK,CAAE1vB,KAAM,sBACrB,GAGF,CAACiqB,IAGGkG,GAAsBpd,EAAAA,EAAAA,cACzBpT,IACKA,EAAOyC,OACT6nB,EAAMyF,KAAK,CACT1vB,KAAM,oBACNwC,KAAM,CAAEtF,MAAOyC,EAAOyG,KAAKyd,GAAMA,EAAE3mB,QAAOmZ,KAAK,KAAMnN,MAAOvJ,EAAOyG,KAAKyd,GAAMA,EAAE3a,QAAOmN,KAAK,SAG9F4T,EAAMyF,KAAK,CAAE1vB,KAAM,uBACrB,GAEF,CAACiqB,IAKGqG,EExND,SAAwBC,GAC7B,MAAMjE,GAAML,EAAAA,EAAAA,UAMZ,OAJApc,EAAAA,EAAAA,YAAU,KACRyc,EAAIH,QAAUoE,CAAK,IAGdjE,EAAIH,OACb,CFgNuCqE,CAAYzJ,EAAY6B,WAa7D,OAXA/Y,EAAAA,EAAAA,YAAU,K,IAOL8G,GANEoQ,EAAY6B,WAAa0H,IAMsB,QAAjD3Z,EAAAA,SAASU,cAAc,IAAI+Y,kBAA3BzZ,IAAAA,GAAD,EAA0E8Z,OAC5E,GACC,CAAC1J,EAAY6B,UAAW0H,EAA8BF,IAElD,CACLtE,UACAyC,2BACAyB,wBACAE,0BACAD,oBACAE,sBAEJ,CA7KMO,CAAkBzG,EAAOlD,EAAa1hB,EAAM+L,IAE1Cuf,GAAiB5d,EAAAA,EAAAA,cAAY,KACjCkX,EAAMyF,KAAK,CAAE1vB,KAAM,iBAAkB,GACpC,CAACiqB,IAoBJ,OAlBApa,EAAAA,EAAAA,YAAU,KACR,IAAKxK,EAAMurB,YACT,OAGF,MAAMC,EAAsE,EAAG3zB,QAAOZ,UAASgoB,YAC/E,SAAVpnB,GAAqBZ,EAAQ2nB,iBAAkC,kBAAfK,EAAMtkB,MACxDiqB,EAAMyF,KAAK,CAAE1vB,KAAM,iBACrB,EAKF,OAFAiqB,EAAM4G,aAAaA,GAEZ,KACL5G,EAAM6G,IAAID,EAAa,CACxB,GACA,CAAC5G,EAAO5kB,EAAMurB,cAGf,kBAAChrB,MAAAA,CAAIwL,GAAI/L,EAAM+L,GAAItL,WAAW4B,EAAAA,EAAAA,IAAGpC,EAAO8pB,aAAc/pB,EAAMS,YACzDwc,EAAQlgB,OAAS,EAChB,kBAACssB,GAAYA,CACXpM,QAASA,EACT+L,eAAgBA,EAChBC,gBAAiBA,EACjB/kB,QAASA,EACTwd,YAAaA,EACbwH,yBAA0BA,EAC1BC,6BAA8ByB,EAC9BxB,+BAAgC0B,IAEhC,KAEJ,kBAACvqB,MAAAA,CAAIE,UAAWR,EAAO+pB,UACpB9lB,EACC,kBAAC0lB,GAAcA,MACblI,EAAYzT,SACd,kBAAC4b,GAAcA,CACbnI,YAAaA,EACb+E,QAASA,EACT+C,UAAWqB,EACXrF,YAAasF,IAGf,kBAACvB,GAAYA,CACX7H,YAAaA,EACb+E,QAASA,EACT/P,SAAUwS,EACVM,UAAWmB,EACXnF,YAAaoF,KAIf5qB,EAAMurB,aACN,kBAACpiB,EAAAA,OAAMA,CACLpF,QAASunB,EACT3sB,QAAUigB,EAAwC,0CAAtB,oBAC5Bne,UAAWR,EAAOgqB,cAClBhmB,SAAU2a,GACX,YAOX,CAuGO,MAAM8M,IAAermB,EAAAA,EAAAA,MAAK6kB,I,gmJGzO1B,SAASyB,GAAiBC,GAC/B,GAAIC,GAAgBD,GAClB,OAAOC,GAAgBD,GAGzB,MAAOE,EAAQ,IAAKnxB,EAAO,KAAOixB,EAAkBA,EAAgBpiB,MAAM,KAAO,GAKjF,MAAO,CACLuC,GAAI6f,EACJ5K,YAAa,GACbrmB,OACAmxB,QACA5X,KAAM,QAEV,C,eCxBO,MAAM6X,GAAuC7xB,OAAOC,OAAO,CAChEQ,KAAM,+BACNU,IAAK,gBAKM2wB,GAA8C9xB,OAAOC,OAAO,CACvEQ,KAAM,sCACNU,IAAK,wCAGM4wB,GAAiD/xB,OAAOC,OAAO,CAC1EQ,KAAM,yCACNU,IAAK,2CAGM6wB,GAA8ChyB,OAAOC,OAAO,CACvEQ,KAAM,sCACNU,IAAK,wC,mPCEA,MAAM8wB,WAA8BC,GAAAA,GA0BzCC,UAAAA,GACOt2B,KAAKm1B,MAAMrzB,OACd9B,KAAKu2B,SAAS,CAAEz0B,MAAOs0B,GAAsBI,eAEjD,CAEMC,MAAAA,CAAOC,GAAQ,G,sBAArB,YACE,IAAKA,GAAS,EAAKvB,MAAMwB,QACvB,OAGF,IAAIxzB,EAAiC,GACjClC,EAAQ,KAEZ,EAAKs1B,SAAS,CAAEI,SAAS,EAAMxzB,QAAS,GAAIlC,MAAO,OAEnD,IACEkC,QAAgByzB,EAAAA,GAAAA,eAAc,EAAKC,gBAAgB,CAAC,GACtD,CAAE,MAAOzF,GACPnwB,EAAQmwB,CACV,CAAE,QACA,EAAKmF,SAAS,CAAEI,SAAS,EAAOxzB,UAASlC,SAC3C,CACF,E,mLAEA,2BAAO61B,CAAqB3zB,GAC1B,MAAM4zB,EAAa,IAAIt3B,IAEvB,IAAK,MAAM,MAAEqC,KAAWqB,EAAS,CAC/B,MAAM6zB,EAAgBpB,GAAiB9zB,IACjC,MAAEi0B,EAAK,KAAEnxB,GAASoyB,EAElBC,EAAoBF,EAAWt1B,IAAIs0B,IAAU,CACjDj0B,MAAOi0B,EACPjoB,MAAOioB,EACPpI,MAAO,IAGHA,EAAQsJ,EAAkBtJ,OAAS,GAEzCA,EAAM1Q,KAAK,CACTnb,QACAgM,MAAOlJ,IAGTqyB,EAAkBtJ,MAAQA,EAE1BoJ,EAAWl1B,IAAIk0B,EAAOkB,EACxB,CAEA,OAAOzR,MAAMtL,KAAK6c,EAAWxyB,UAAUwrB,MAAK,CAAC/f,EAAGof,IAAML,GAAcK,EAAEthB,MAAOkC,EAAElC,QACjF,CApEA1M,WAAAA,CAAY+zB,GACVryB,M,uUAAM,EACJqI,IAAK,kBACLjH,KAAM,kBACN4J,MAAO,eACPopB,WAAYjB,GACZnS,MAAOsS,GAAsBe,cAC7BR,SAAS,EACTS,QAASC,EAAAA,gBAAgBC,oBACtBnC,IA6DPoC,GAAAA,KAAAA,YAAYC,IACVrjB,GAAkB,2CAEbnU,KAAKm1B,MAAMsC,aACdvU,KAEFljB,KAAK03B,cAAcF,EAAS,IAhE5Bx3B,KAAK03B,cAAgB13B,KAAK03B,cAAcC,KAAK33B,MAE7CA,KAAK43B,qBAAqB53B,KAAKs2B,WAAWqB,KAAK33B,MACjD,EAvBA,GADWo2B,GACJI,gBAAgB,+CAGvB,GAJWJ,GAIJe,gBAAgB,uCAGvB,GAPWf,GAOJyB,+BAA+B,qDAiFtC,GAxFWzB,GAwFJ0B,aAAY,EAAGC,YACpB,MAAM7tB,GAASC,EAAAA,EAAAA,YAAWlC,KACpB,QAAE0uB,EAAO,MAAE70B,EAAK,QAAEqB,EAAO,MAAElC,GAAU82B,EAAMjxB,WAE3CkxB,GAAkBztB,EAAAA,EAAAA,UAAQ,IACvB6rB,GAAsBU,qBAAqB3zB,IACjD,CAACA,IAEJ,OAAIlC,EAEA,kBAACgxB,EAAAA,QAAOA,CAAC/pB,MAAM,QAAQ6D,QAAS9K,EAAM6E,YACpC,kBAAC8J,EAAAA,KAAIA,CAAClF,UAAWR,EAAO+tB,UAAW/zB,KAAK,uBAAuByF,KAAK,QAMxE,kBAACuuB,EAAAA,SAAQA,CAGP/sB,KAAKqd,EAAAA,GAAAA,IAAO,GACZrc,aAAW,uBACX+U,MAAO,GACPiX,UAAU,IACVC,0BAAAA,EACAvL,YAAa8J,EAAU,aAAe,4BAA4BxzB,EAAQ6D,UAC1E7D,QAAS60B,EACTK,aAAcv2B,EACdw2B,gBAAgB,EAChBf,SAAUQ,EAAMR,U,IAMxB,MAAMtvB,GAAaC,IAA0B,CAC3C+vB,UAAW7vB,EAAAA,GAAG;;;aAGHF,EAAMY,OAAO7H,MAAM8H;yPCtIzB,MAAMwvB,WAA4BlC,GAAAA,GAsBvCC,UAAAA,GACE,MAAQkC,YAAaC,GAA2Bp3B,EAAYI,IAAIJ,EAAYa,KAAKG,oBAAsB,CAAC,EAEpGo2B,IAA2Bz4B,KAAKm1B,MAAMrzB,OACxC9B,KAAKu2B,SAAS,CAAEz0B,MAAO22B,IAGzBz4B,KAAK04B,kBAAiB,CAACC,EAAUC,KAC/B,GAAID,EAAS72B,OAAS62B,EAAS72B,QAAU82B,EAAU92B,MAAO,CACxD,MAAM+2B,EAAUx3B,EAAYI,IAAIJ,EAAYa,KAAKG,oBAAsB,CAAC,EACxEw2B,EAAQL,YAAcG,EAAS72B,MAC/BT,EAAYQ,IAAIR,EAAYa,KAAKG,kBAAmBw2B,EACtD,IAEJ,CAEMpC,MAAAA,G,sBAAN,YACE,GAAI,EAAKtB,MAAMwB,QACb,OAGF,IAAIxzB,EAAiC,GACjClC,EAAQ,KAEZ,EAAKs1B,SAAS,CAAEI,SAAS,EAAMxzB,QAAS,GAAIlC,MAAO,OAEnD,IACEkC,QAAgByzB,EAAAA,GAAAA,eAAc,EAAKC,gBAAgB,CAAC,GACtD,CAAE,MAAOzF,GACPnwB,EAAQmwB,CACV,CAAE,QACA,EAAKmF,SAAS,CAAEI,SAAS,EAAOxzB,UAASlC,SAC3C,CACF,E,mLAhDAG,WAAAA,CAAY+zB,GACVryB,M,uUAAM,EACJqI,IAAK,cACLjH,KAAM,cACN4J,MAAO,UACPopB,WAAYjB,GACZnS,MAAOyU,GAAoBpB,cAC3BR,SAAS,EACTS,QAASC,EAAAA,gBAAgBC,oBACtBnC,IAyCP2D,GAAAA,KAAAA,kBAAkBtB,IAChBrjB,GAAkB,yCAEbnU,KAAKm1B,MAAMsC,aACdvU,KAGFljB,KAAK03B,cAAcF,EAAS,IA7C5Bx3B,KAAK43B,qBAAqB53B,KAAKs2B,WAAWqB,KAAK33B,MACjD,EAlBA,GAFWu4B,GAEJpB,gBAAgB,gCAGvB,GALWoB,GAKJQ,iCAAiC,kDA8DxC,GAnEWR,GAmEJT,aAAY,EAAGC,YACpB,MAAM7tB,GAASC,EAAAA,EAAAA,YAAWlC,KACpB,QAAE0uB,EAAO,MAAE70B,EAAK,QAAEqB,EAAO,MAAElC,GAAU82B,EAAMjxB,WAE3CkxB,GAAkBztB,EAAAA,EAAAA,UACtB,ICxFC,SAAyCyuB,GAE9C,MAAMC,EAAqB,IAAID,GAAcjJ,OAGvCmJ,EAAiC,GAGjCC,EAAY,IAAI15B,IAEtB,IAAK,MAAM25B,KAAaH,EAAoB,CAC1C,MAAMnf,EAAQsf,EAAU3lB,MAAM,KAC9B,IAAI4lB,EAAc,GAElB,IAAK,IAAInuB,EAAI,EAAGA,EAAI4O,EAAM9S,OAAQkE,IAAK,CACrC,MAAMue,EAAO3P,EAAM5O,GACbouB,EAAeD,EACrBA,EAAcA,EAAc,GAAGA,KAAe5P,IAASA,EAEvD,MAAM8P,EAAaruB,IAAM4O,EAAM9S,OAAS,EAExC,IAAKmyB,EAAU73B,IAAI+3B,IAAgBE,EAAY,CAC7C,MAAMzhB,EAAyB,CAE7BhW,MAAOy3B,EAAaF,EAAcA,EAAc,IAChDvrB,MAAO2b,EACPkE,MAAO4L,OAAa5uB,EAAY,IASlC,GALK4uB,GACHJ,EAAUt3B,IAAIw3B,EAAavhB,GAIzBwhB,EAAc,CAChB,MAAME,EAASL,EAAU13B,IAAI63B,GACzBE,GAAUA,EAAO7L,OACnB6L,EAAO7L,MAAM1Q,KAAKnF,EAEtB,MACEohB,EAAajc,KAAKnF,EAEtB,CACF,CACF,CACA,OAAOohB,CACT,CDyCYO,CAAgCt2B,EAAQ6H,KAAI,EAAG8C,WAAYA,MACjE,CAAC3K,IAGH,OAAIlC,EAEA,kBAACgxB,EAAAA,QAAOA,CAAC/pB,MAAM,QAAQ6D,QAAS9K,EAAM6E,YACpC,kBAAC8J,EAAAA,KAAIA,CAAClF,UAAWR,EAAO+tB,UAAW/zB,KAAK,uBAAuByF,KAAK,QAMxE,kBAACuuB,EAAAA,SAAQA,CAMP/sB,KAAKqd,EAAAA,GAAAA,IAAO,GACZrc,aAAW,gBACX+U,MAAO,GACPiX,UAAU,IACVC,0BAAAA,EACAvL,YAAa8J,EAAU,sBAAwB,qBAAqBxzB,EAAQ6D,UAC5E7D,QAAS60B,EACTK,aAAcv2B,EACdw2B,gBAAgB,EAChBf,SAAUQ,EAAMe,gB,IAMxB,MAAM7wB,GAAaC,IAA0B,CAC3C+vB,UAAW7vB,EAAAA,GAAG;;;aAGHF,EAAMY,OAAO7H,MAAM8H;ME1HzB,SAAS2wB,GAAuBC,EAA0BC,GAC/D,MAAQ93B,MAAO02B,GAAgBqB,GAAAA,GAC5BC,iBAAiBH,EAAa,cAAepB,IAC7CzxB,YAEKhF,MAAO+zB,GAAoBgE,GAAAA,GAChCC,iBAAiBH,EAAa,kBAAmBvD,IACjDtvB,YAEG,iBAAEizB,GAAqBF,GAAAA,GAAWC,iBAAiBH,EAAaC,EAAWI,IAAiBlzB,WAElG,OAAOyD,EAAAA,EAAAA,UACL,IAAM,GAAGsrB,mBAAiC2C,MAAgBuB,MAC1D,CAACA,EAAkBlE,EAAiB2C,GAExC,CClBO,MAAMyB,WAAmCC,GAAAA,GAe9C5D,UAAAA,GACEt2B,KAAKu2B,SAAS,CAAEkB,aAAa,IAE7Bz3B,KAAK04B,kBAAiB,CAACC,EAAUC,KAC/B,GAAID,EAAS72B,OAAS62B,EAAS72B,QAAU82B,EAAU92B,MAAO,CACxD,MAAM+2B,EAAUx3B,EAAYI,IAAIJ,EAAYa,KAAKG,oBAAsB,CAAC,EACxEw2B,EAAQzzB,WAAauzB,EAAS72B,MAC9BT,EAAYQ,IAAIR,EAAYa,KAAKG,kBAAmBw2B,EACtD,IAEJ,CAxBAz3B,WAAAA,GACE0B,MAAM,CACJq3B,SAAU,+BACVhvB,IAAK,aACLjH,KAAM,aACN4J,MAAO,cACP2pB,aAAa,EAEb31B,MAAOuC,EAAUQ,0BAA0BS,MAG7CtF,KAAK43B,qBAAqB53B,KAAKs2B,WAAWqB,KAAK33B,MACjD,E,44BCdK,MAAMo6B,GAAoC11B,IAC/C,IAAImjB,EAAcnjB,EAAOoiB,SAAShlB,MAQlC,OANI4C,EAAOoiB,SAAShlB,QAAUyhB,GAAiB,GAC7CsE,EAActE,GAAa,MAClB7e,EAAOoiB,SAAShlB,QAAUyhB,GAAa,YAChDsE,EAActE,GAAa,OAGtB,CACLpY,IAAKzG,EAAOmiB,UAAU/kB,MACtBglB,SAAUe,EACV/lB,MAAO4C,EAAO5C,MAAMA,MACrB,EAGH,SAASu4B,GAAgBnT,EAAgC0S,GACvD,IAAIv6B,EAEJ,MAAMi7B,EAAsBpT,EAAQxiB,QAAQ61B,GACtCA,EAAEpvB,MAAQyuB,IACZv6B,EAAQk7B,GACD,KAMX,MAAO,CAAEl7B,QAAOi7B,sBAClB,CAEA,MAAME,GAAe,CAACtT,EAAgCuT,IAAqC,IAAIvT,EAASuT,GAEjG,SAASC,GACdxT,EACAyT,GAEA,MAAM,MAAEt7B,EAAK,oBAAEi7B,GAAwBD,GAAgBnT,EAASyT,EAAiBxvB,KAEjF,IAAK9L,EACH,OAAOm7B,GAAatT,EAAS,SAAKyT,GAAAA,CAAkB7T,SAAU,QAGhE,GAAI,CAAC,KAAM,MAAM/O,SAAS1Y,EAAMynB,UAC9B,OAAO0T,GAAaF,EAAqB,SAAKK,GAAAA,CAAkB7T,SAAU,QAG5E,MAAM8T,EAAc,IAAIlV,IAAIrmB,EAAMyC,MAAM2R,MAAM,MAE9C,MAAuB,OAAnBpU,EAAMynB,SACD0T,GAAaF,EAAqB,SACpCj7B,GAAAA,CACHyC,MAAO0jB,MAAMtL,KAAK0gB,EAAYC,IAAIF,EAAiB74B,QAAQmZ,KAAK,QAK7D5b,EAAMyC,QAAU64B,EAAiB74B,MACpColB,EACAsT,GAAaF,EAAqB,SAC7BK,GAAAA,CACH7T,SAAU,KACVhlB,MAAO0jB,MAAMtL,KAAK0gB,EAAYC,IAAIF,EAAiB74B,QAAQmZ,KAAK,OAExE,CAEO,SAAS6f,GACd5T,EACA6T,GAEA,MAAM,MAAE17B,EAAK,oBAAEi7B,GAAwBD,GAAgBnT,EAAS6T,EAAiB5vB,KAEjF,IAAK9L,EACH,OAAOm7B,GAAatT,EAAS,SAAK6T,GAAAA,CAAkBjU,SAAU,QAGhE,GAAI,CAAC,KAAM,KAAK/O,SAAS1Y,EAAMynB,UAC7B,OAAO0T,GAAaF,EAAqB,SAAKS,GAAAA,CAAkBjU,SAAU,QAG5E,MAAM8T,EAAc,IAAIlV,IAAIrmB,EAAMyC,MAAM2R,MAAM,MAE9C,MAAuB,OAAnBpU,EAAMynB,SACD0T,GAAaF,EAAqB,SACpCj7B,GAAAA,CACHyC,MAAO0jB,MAAMtL,KAAK0gB,EAAYC,IAAIE,EAAiBj5B,QAAQmZ,KAAK,QAK7D5b,EAAMyC,QAAUi5B,EAAiBj5B,MACpColB,EACAsT,GAAaF,EAAqB,SAC7BS,GAAAA,CACHjU,SAAU,KACVhlB,MAAO0jB,MAAMtL,KAAK0gB,EAAYC,IAAIE,EAAiBj5B,QAAQmZ,KAAK,OAExE,CAEO,SAAS+f,GACd9T,EACA+T,GAEA,MAAM,MAAE57B,EAAK,oBAAEi7B,GAAwBD,GAAgBnT,EAAS+T,EAAe9vB,KAE/E,IAAK9L,EACH,OAAO6nB,EAGT,MAAMgU,EAAiB77B,EAAMyC,MAAM2R,MAAM,KAAK/O,QAAQ+jB,GAAMA,IAAMwS,EAAen5B,QAEjF,OAAIo5B,EAAel0B,OAAS,EACnBwzB,GAAaF,EAAqB,SACpCj7B,GAAAA,CACHyC,MAAOo5B,EAAejgB,KAAK,QAIxB,IAAIqf,EACb,CAEO,MAAMa,GAAiBz2B,GAAgCA,EAAOoiB,YAAYvD,G,yHCjH1E,MAAMyW,WAAwBoB,GAAAA,GAuBnCC,KAAAA,GACEr7B,KAAKu2B,SAAS,CAAErP,QAAS8S,GAAgBxD,eAC3C,CAEA,eAAO8E,CAAS3B,GACd,CAAC,UAAW,kBAAmB,qBAAqBnO,SAASoO,IAC3DC,GAAAA,GAAWC,iBAAiBH,EAAaC,EAAWI,IAAiBqB,OAAO,GAEhF,CAEA/E,UAAAA,GAEE,MAAMiF,EAAgB1B,GAAAA,GACnBC,iBAAiB95B,KAAM,aAAci6B,IACrCvB,kBAAiB,KAChB14B,KAAKq7B,OAAO,IAGhB,MAAO,KACLE,EAAcC,aAAa,CAE/B,CAzCAp6B,WAAAA,EAAY,IAAE+J,IACZrI,MAAM,CACJqI,MACAjH,KAAMiH,EACN2C,MAAO,UACPoZ,QAAS8S,GAAgBxD,cACzBiF,kBAAoBvU,GAClBA,EAGGxiB,OAAOy2B,IACPnwB,KAAI,EAAGG,MAAK2b,WAAUhlB,WACrBglB,IAAavD,GAAa,YAAc,GAAGpY,OAAW,GAAGA,IAAM2b,KAAYhlB,OAE5EmZ,KAAK,OA6BdoZ,GAAAA,KAAAA,iBAAgB,CAACvQ,EAAeoD,KAC9B/S,GAAkB,kCAAmC,CACnDjQ,KAAMlE,KAAKm1B,MAAMjxB,KACjB6F,MAAOmd,EAAQlgB,OACf00B,WAAWC,EAAAA,GAAAA,MAAKzU,EAAQlc,KAAKuvB,GAAMA,EAAEzT,SAAShZ,WAGhD9N,KAAKu2B,SAAS,CACZrP,QAASA,EAAQlc,IAAIovB,KACrB,IAnCFp6B,KAAK43B,qBAAqB53B,KAAKs2B,WAAWqB,KAAK33B,MACjD,EC9BK,SAAS47B,GAAsBjC,EAA0BkC,G,IACvDhC,EAAP,OAA+CF,QAAxCE,EAAAA,GAAAA,GAAWiC,eAAeD,EAAclC,UAAxCE,IAAAA,OAAAA,EAAAA,EAAsDkC,UAC/D,C,yHDQE,GADW/B,GACJxD,gBAAgB,IAyDvB,GA1DWwD,GA0DJlC,aAAY,EAAGC,YACpB,MAAM,IAAE5sB,GAAQ4sB,EAAMjxB,WAEhBgd,EAAQ4V,GAAuB3B,EAAO5sB,IAEpCrJ,MAAO6hB,GAAkBkW,GAAAA,GAC9BC,iBAAiB/B,EAAO,aAAckC,IACtCnzB,YAEG,KAAEoT,EAAI,GAAEK,GAAOsf,GAAAA,GAAWrf,aAAaud,GAAO5C,MAAMrzB,MAE1D,OACE,kBAAC6zB,GAAYA,CACX3f,GAAI,iBAAiB7K,IACrBqqB,aAAAA,EACA7R,cAAeA,EACfG,MAAOA,EACP5J,KAAoB,IAAdA,EAAKI,OACXC,GAAgB,IAAZA,EAAGD,OACP+Z,cAAe0D,EAAM1D,e,IE7EtB,gBAAK2H,G,iGAAAA,C,CAAL,C,IAYA,MAAMC,WAA+BC,GAAAA,GAmB1CC,WAAAA,GACE,MAAO,CACLC,UAAWp8B,KAAKm1B,MAAMiH,UAE1B,CAEAC,aAAAA,CAAc93B,GACZ,MAAM+3B,EAAoD,CAAC,EAE3B,iBAArB/3B,EAAO63B,WAA0B73B,EAAO63B,YAAcp8B,KAAKm1B,MAAMiH,YAC1EE,EAAYF,UAAYj4B,OAAOI,OAAOy3B,IAAWjkB,SAASxT,EAAO63B,WAC5D73B,EAAO63B,UACRH,GAAuBM,oBAG7Bv8B,KAAKu2B,SAAS+F,EAChB,CAEAjB,KAAAA,GACEr7B,KAAKu2B,SAAS,CAAE6F,UAAWH,GAAuBM,oBACpD,CA3BAn7B,WAAAA,GACE0B,MAAM,CACJqI,IAAK,sBACLixB,UAAWH,GAAuBM,qBAdtC,QAAUC,WAAW,IAAIC,GAAAA,GAAyBz8B,KAAM,CAAE08B,KAAM,CAAC,gBAwCjE/b,GAAAA,KAAAA,YAAYyb,IACVjoB,GAAkB,qCAAsC,CAAEioB,cAE1Dp8B,KAAKu2B,SAAS,CAAE6F,aAAY,GA3B9B,EAdA,GAHWH,GAGJU,UAAU,CACf,CAAE7uB,MAAO,cAAehM,MAAO,cAAsBiM,KAAM,cAC3D,CAAED,MAAO,SAAUhM,MAAO,YAAoBiM,KAAM,cACpD,CAAED,MAAO,SAAUhM,MAAO,QAAiBiM,KAAM,mBACjD,CAAED,MAAO,aAAchM,MAAO,YAAqBiM,KAAM,eAG3D,GAVWkuB,GAUJM,qBAAAA,eAqCP,GA/CWN,GA+CJnE,aAAY,EAAGC,YACpB,MAAM,UAAEqE,GAAcrE,EAAMjxB,WAE5B,OACE,kBAAC81B,EAAAA,iBAAgBA,CACfzwB,aAAW,sBACXhJ,QAAS84B,GAAuBU,QAChC76B,MAAOs6B,EACPzb,SAAUoX,EAAMpX,SAChBkc,WAAW,G,mBC7EZ,SAASC,GAAgBC,GAC9B,MAAMC,EAAWx4B,EAAAA,OAAOy4B,OAAOC,cAC/B,OAAOF,EAASG,eAAeH,EAASI,QAAQL,EAAQ,GAC1D,CCHO,MAAMM,GAA0B,CAACC,EAAoBxvB,K,IAC1DwvB,E,OAAkB,QAAlBA,EAAAA,EAAYrX,cAAZqX,IAAAA,OAAAA,EAAAA,EAAqBxvB,KAAoB,YAAY,ECD1CyvB,GAAsB,CAACC,EAAmBC,K,IACrDD,EAAAA,EAAAA,E,OAAW,QAAXA,EAAAA,EAAOxwB,YAAPwwB,IAAAA,GAAkB,QAAlBA,EAAAA,EAAat2B,aAAbs2B,IAAAA,GAAkDC,QAAlDD,EAAAA,EAAoBl+B,MAAM2L,GAAMA,EAAEwyB,cAAgBA,WAAlDD,IAAAA,OAAAA,EAAAA,EAAgE17B,KAAK,ECIhE,SAAS47B,GAAW5Z,GACzB,MAAO,CAAEsV,EAAY,IAAMtV,EAAMwD,MAAM,qCAAuC,IACvE,CAAEuO,EAAkB,IAAM/R,EAAMwD,MAAM,iBAAmB,GAE1DqW,EAAiB7Z,EAAMG,UAAUH,EAAME,QAAQ,MAE/CiC,EAAS0X,EACZpW,QAAQ,UAAW,IACnB9T,MAAM,KACNzI,KAAK4yB,I,IAAMA,E,OAAQ,QAARA,EAAAA,EAAEtW,MAAM,yCAARsW,IAAAA,OAAAA,EAAAA,EAA4C,EAAE,IACzDl5B,QAAQoJ,GAAUA,IAAUA,EAAMiK,SAAS,kBAE9C,MAAO,CAAEqhB,YAAWvD,kBAAiB8H,iBAAgB1X,SACvD,CCfO,SAAS4X,GAAwBC,GAsCtC,OArCAA,EAAYlG,sBAAqB,KAC/B,MAAM,cAAEmG,EAAa,cAAEC,GAAkBF,EAAY3I,MAAM92B,QAAQ,GAEnE,IAAK0/B,EAKH,YAJAD,EAAYvH,SAAS,CACnBl4B,QAAS,CAAC,CAAE4/B,MAAO,SACnB72B,KAAM82B,GAAeJ,EAAa,2BAKtC,IAAKE,EAKH,YAJAF,EAAYvH,SAAS,CACnBl4B,QAAS,CAAC,CAAE4/B,MAAO,SACnB72B,KAAM82B,GAAeJ,EAAa,6BAKtC,IAAKjE,GAAAA,GAAWsE,YAAYL,EAAa,oBAKvC,YAJAA,EAAYvH,SAAS,CACnBl4B,QAAS,CAAC,CAAE4/B,MAAO,SACnB72B,KAAM82B,GAAeJ,EAAa,2BAKvBJ,GAAW7D,GAAAA,GAAWsE,YAAYL,EAAa,iBAAiBE,OAEnE5E,WACV0E,EAAYvH,SAAS,CACnBl4B,QAAS,CAAC,CAAE4/B,MAAO,SACnB72B,KAAM82B,GAAeJ,EAAa,0BAEtC,IAGKA,CACT,CAEA,SAASI,GAAeJ,EAA+BM,GACrD,MAAMn9B,EAAQ,IAAIuB,MAAM47B,GAIxB,OAFAl+B,EAAOe,MAAMA,GAEN,CACLk0B,MAAOkJ,EAAAA,aAAa77B,MACpB87B,OAAQ,CAACr9B,GACTu8B,OAAQ,GACRvjB,UAAW4f,GAAAA,GAAWrf,aAAasjB,GAAa3I,MAAMrzB,MAE1D,CC3CO,SAASy8B,IACd,YAAE/F,EAAW,gBAAE3C,EAAe,QAAE2I,EAAO,QAAEtX,GACzCuX,EACAC,GAEA,MAAMC,EAAkBzX,EAAU,IAAIA,GAAW,GACjDyX,EAAgBtf,QAAQ,CAAElU,IAAK,eAAgB2b,SAAU,IAAKhlB,MAAO02B,GAAe,iBAEpF,MAAMoG,EAAWD,EAAgB3zB,KAAI,EAAGG,MAAK2b,WAAUhlB,WAAY,GAAGqJ,IAAM2b,KAAYhlB,OAAUmZ,KAAK,KAiBvG,OAAO4iB,GAfa,IAAIgB,GAAAA,GAAiB,CACvC3H,WAAYlB,GACZ33B,QAAS,CACP,CACE4/B,MAAO,GAAGpI,GAAmB,sBAAsB+I,MAAYJ,aAAAA,EAAAA,EAAS1wB,QAAS,gBACjFgxB,UAAW,UACXf,cAAelI,GAAmB,mBAClCmI,cAAe,IAAIY,cACnBJ,SAASA,aAAAA,EAAAA,EAAS1wB,OAAQ,CAAC0wB,EAAQ1wB,OAAS,GAC5C2wB,QACAC,kBAMR,CCjCO,MAAMK,GAAW,IAAOC,GAC7BA,EAAOC,MAAKj0B,EAAAA,GAAAA,MAAK5D,GAAsBA,aAAAA,EAAAA,EAAM4D,KAAI,CAACk0B,EAAGh0B,KAAMi0B,EAAAA,GAAAA,OAAMD,EAAG,CAAEjB,MAAO,GAAGiB,EAAEjB,SAAS/yB,WAEhFk0B,GAAW,IAAOJ,GAC7BA,EAAOC,MACLj0B,EAAAA,GAAAA,MAAK5D,IACH,MAAMi4B,EAAmBj4B,aAAAA,EAAAA,EAAMJ,OAI/B,OAAOI,aAAAA,EAAAA,EAAM4D,KAAKk0B,I,IAGKA,EAAAA,EAFrB,IAAII,EAAW74B,OAAO84B,kBAEtB,MAAMC,EAAuB,QAARN,EAAAA,EAAE3f,cAAF2f,IAAAA,GACc,QADdA,EAAAA,EACjB5/B,MAAMmgC,GAAyB,WAAfA,EAAM76B,cADLs6B,IAAAA,OAAAA,EAAAA,EAEjB36B,OAAOyQ,QAAO,CAACC,EAAanT,KACxBA,EAAQw9B,IACVA,EAAWx9B,GAENmT,EAAMnT,IACZ,GAEL,OAAOq9B,EAAAA,GAAAA,OAAMD,EAAG,CACdlyB,KAAM,CACJ9F,MAAO,CACL,CACEu2B,YAAa,mBACb37B,MAAOu9B,GAET,CACE5B,YAAa,eACb37B,MAAO09B,GAET,CACE/B,YAAa,WACb37B,MAAOw9B,MAIb,GACF,KCtBD,MAAMI,WAAiCxD,GAAAA,GAyB5C5F,UAAAA,CAAWqJ,GACT,MAAM,KAAEt5B,GAASrG,KAAKm1B,MAEhByK,EAAM,EAAMzK,MAAM0K,MAAgCnH,kBAAkBC,I,IACpEA,EAAJ,IAAiB,QAAbA,EAAAA,EAASvxB,YAATuxB,IAAAA,OAAAA,EAAAA,EAAexD,SAAUkJ,EAAAA,aAAayB,KACxC,OAGF,MAAM,OAAEtC,GAAW7E,EAASvxB,MAExBo2B,aAAAA,EAAAA,EAAQx2B,SACVX,EAAKkwB,SAASv2B,KAAK+/B,UAAUJ,EAAMnC,IAIrCx9B,KAAKggC,aAAa,IAAI5c,GAA4B,CAAEoa,YAAW,EAAK,IAGtE,MAAO,KACLoC,EAAIpE,aAAa,CAErB,CAEAuE,SAAAA,CAAUJ,EAAoBnC,G,IAWPmC,EAVrB,IAAIM,EAAMx5B,OAAO84B,kBAEjB,IAAK,MAAMt0B,KAAKuyB,EAAQ,CACtB,MAAMgC,EAAejC,GAAoBtyB,EAAG,iBAAmB,EAE3Du0B,EAAeS,IACjBA,EAAMT,EAEV,CAEA,MAAMU,EAA6C,QAA9BP,EAAAA,EAAKQ,kBAAkB3B,eAAvBmB,IAAAA,OAAAA,EAAAA,EAAgC7xB,MAE/Cmd,EAAciV,EAAe,yEAAsEv1B,EAEzG,MAAO,CACL+D,MAAO8uB,EAAOx2B,OAAS,EAAI,GAAG24B,EAAK7xB,UAAU0vB,EAAOx2B,UAAY24B,EAAK7xB,MACrEmd,cACA9nB,QAAS,CACPi9B,cAAe,CAAE77B,QAAQ,EAAO87B,MAAO,CAAC,QACxCC,YAAaC,EAAAA,eAAeC,WAC5BC,YAAaC,GAAAA,GAAoBC,SACjCC,UAAWC,GAAAA,GAAkBC,KAC7BC,cAAc,EACdC,OAAQC,GAAAA,GAAeC,OACvBn4B,KAAM,CAAEo4B,UAAW,GAAIC,UAAW,IAClCC,cAAeC,GAAAA,GAAsBC,IACrCC,aAAc,GACdC,aAAc,GACdC,OAAQ,CACNC,YAAY,IAGhBC,YAAa,CACXC,SAAU,CAERpE,YAA+B,IAAlBD,EAAOx2B,OAAek5B,OAAev1B,EAClDm3B,IAAK,EACL7B,MACA8B,WAAY,CACV3hB,KAAM4hB,EAAAA,eAAeC,WACrBC,MAAO,KAGXC,UAAWniC,KAAKoiC,aAAazC,EAAMnC,IAGzC,CAEA4E,YAAAA,CAAazC,EAAoBnC,G,IAEV2C,EADrB,MAAQpD,MAAOsF,EAAe,kBAAElC,GAAsBR,EAChDO,EAAwC,QAAzBC,EAAAA,EAAkB3B,eAAlB2B,IAAAA,OAAAA,EAAAA,EAA2BryB,MAEhD,OAAO0vB,EAAOxyB,KAAI,CAACC,EAAGC,KAAO,CAC3Bo3B,QAAS,CAAEtsB,GAAIusB,EAAAA,eAAeC,aAAcr/B,QAAS8H,EAAEgzB,OACvDwE,WAAY,CACV,CACEzsB,GAAI,cACJlU,MAAOu7B,GAAwBpyB,EAAEsU,OAAO,GAAI2gB,IAE9C,CACElqB,GAAI,QACJlU,MAAO,CAAEse,KAAM,QAASsiB,WAAY5F,GAAgBuF,EAAkBn3B,SAI9E,CAEA,gBAAO4sB,EAAU,MAAEC,IACjB,MAAM,KAAE1xB,GAAS0xB,EAAMjxB,WAEvB,OAAO,kBAACT,EAAKyxB,UAAS,CAACC,MAAO1xB,GAChC,CAvHAjF,WAAAA,EAAY,KACVu+B,EAAI,cACJgD,IAKA7/B,MAAM,CACJqI,IAAK,yBACL9E,KAAMu8B,GAAAA,GAAcC,WACjBC,SAASnD,EAAK7xB,OACdi1B,QACC,IAAIC,GAAAA,GAAqB,CACvBnD,MAAOtB,GAA2BoB,EAAKQ,mBACvC8C,gBAAiB,CAAClE,GAAUK,OAG/B8D,iBAAiBP,EAAchD,IAC/BwD,UAGLnjC,KAAK43B,qBAAqB53B,KAAKs2B,WAAWqB,KAAK33B,KAAM2/B,GACvD,ECvCK,SAASyD,GAA8Bt1B,EAAe7C,G,IACnCA,EAAAA,EAAxB,MAAMo4B,GAA6B,QAAXp4B,EAAAA,EAAEsU,OAAO,UAATtU,IAAAA,GAAmB,QAAnBA,EAAAA,EAAazG,cAAbyG,IAAAA,OAAAA,EAAAA,EAAqBkT,OAAQ,QAC/CqhB,EAAejC,GAAoBtyB,EAAG,iBAAmB,EACzDq0B,EAAW/B,GAAoBtyB,EAAG,aAAe,EAEjDq4B,EAVR,SAAmCr4B,G,IACVA,EAAAA,EAAvB,MAAMs4B,EAAuB,QAANt4B,EAAAA,EAAE+B,YAAF/B,IAAAA,GAAc,QAAdA,EAAAA,EAAQu4B,cAARv4B,IAAAA,OAAAA,EAAAA,EAAgBs4B,eACvC,OAAOznB,QAAQynB,EACjB,CAO2BE,CAA0Bx4B,GAEnD,IAAIy4B,EACAC,EAEJ,GAAIL,EAAkB,C,IAGGM,EADvB,MAAMA,EAAa34B,EAAEsU,OAAOjgB,MAAMi7B,GAAiB,WAAXA,EAAE31B,OAE1C8+B,EAAelE,IADQoE,SAAkB,QAAlBA,EAAAA,EAAYr/B,cAAZq/B,IAAAA,OAAAA,EAAAA,EAAoB58B,SAAU,GAErD28B,EAAe,KACjB,MAEED,EAAelE,EACfmE,EAAe,QAGjB,MAAME,GAAmBh6B,EAAAA,EAAAA,gBAAew5B,EAAfx5B,CAAgC65B,GACnDI,GAAoBj6B,EAAAA,EAAAA,gBAAew5B,EAAfx5B,CAAgCy1B,GAE1D,MAAO,GAAGqE,KAAgB71B,OAAW+1B,EAAiB96B,OAAO86B,EAAiBE,kBAAkBD,EAAkB/6B,OAAO+6B,EAAkBC,QAC7I,CCRO,MAAMC,WAAkC9H,GAAAA,GA4B7C5F,UAAAA,CAAWqJ,GACT,MAAM,KAAEt5B,GAASrG,KAAKm1B,MAEhByK,EAAM,EAAMzK,MAAM0K,MAAgCnH,kBAAkBC,I,IACpEA,EAAJ,IAAiB,QAAbA,EAAAA,EAASvxB,YAATuxB,IAAAA,OAAAA,EAAAA,EAAexD,SAAUkJ,EAAAA,aAAayB,KACxC,OAGF,MAAM,OAAEtC,GAAW7E,EAASvxB,MAExBo2B,aAAAA,EAAAA,EAAQx2B,SACVX,EAAKkwB,SAASv2B,KAAK+/B,UAAUJ,EAAMnC,IAIrCx9B,KAAKggC,aAAa,IAAI5c,GAA4B,CAAEoa,YAAW,EAAK,IAGtE,MAAO,KACLoC,EAAIpE,aAAa,CAErB,CAEAuE,SAAAA,CAAUJ,EAAoBnC,G,IAEPmC,EADrB,MAAM,gBAAEsE,GAAoBjkC,KAAKm1B,MAC3B+K,EAA6C,QAA9BP,EAAAA,EAAKQ,kBAAkB3B,eAAvBmB,IAAAA,OAAAA,EAAAA,EAAgC7xB,MAErD,MAAO,CACLY,MAAO8uB,EAAOx2B,OAAS,EAAI,GAAG24B,EAAK7xB,UAAU0vB,EAAOx2B,UAAY24B,EAAK7xB,MACrE3K,QAAS,CACPyF,QAAS,CACPwX,KAAM8jB,EAAAA,mBAAmBC,OACzBpU,KAAMqU,GAAAA,GAAUC,MAElB3C,OAAQ,CACNC,YAAY,EACZlB,YAAa6D,EAAAA,kBAAkBC,KAC/B91B,UAAWw1B,EACX5D,MAAO,KAGXuB,YAAa,CACXC,SAAU,CAERpE,YAA+B,IAAlBD,EAAOx2B,OAAek5B,OAAev1B,EAClD64B,OAAQ,CACNgB,UAAW,IAGfrC,UAAWniC,KAAKoiC,aAAazC,EAAMnC,IAGzC,CAEA4E,YAAAA,CAAazC,EAAoBnC,G,IAEV2C,EADrB,MAAQpD,MAAOsF,EAAe,kBAAElC,GAAsBR,EAChDO,EAAwC,QAAzBC,EAAAA,EAAkB3B,eAAlB2B,IAAAA,OAAAA,EAAAA,EAA2BryB,MAEhD,OAAO0vB,EAAOxyB,KAAI,CAACC,EAAGC,KACpB,MAAMoyB,EAAcryB,EAAEsU,OAAO,GAC7B,IAAIke,EAAcyC,EAAe7C,GAAwBC,EAAa4C,GAAgB5C,EAAYp5B,KAMlG,OAJsB,IAAlBs5B,EAAOx2B,SACTy2B,EAAc2F,GAA8B3F,EAAaxyB,IAGpD,CACLq3B,QAAS,CAAEtsB,GAAIusB,EAAAA,eAAeC,aAAcr/B,QAAS8H,EAAEgzB,OACvDwE,WAAY,CACV,CACEzsB,GAAI,cACJlU,MAAO27B,GAET,CACEznB,GAAI,QACJlU,MAAO,CAAEse,KAAM,QAASsiB,WAAY5F,GAAgBuF,EAAkBn3B,MAG3E,GAEL,CAEA,gBAAO4sB,EAAU,MAAEC,IACjB,MAAM,KAAE1xB,GAAS0xB,EAAMjxB,WAEvB,OAAO,kBAACT,EAAKyxB,UAAS,CAACC,MAAO1xB,GAChC,CAjHAjF,WAAAA,EAAY,KACVu+B,EAAI,cACJgD,EAAa,gBACbsB,IAMAnhC,MAAM,CACJqI,IAAK,yBACL84B,gBAAiBA,GAAmB,SACpC59B,KAAMu8B,GAAAA,GAAc6B,YACjB3B,SAASnD,EAAK7xB,OACdi1B,QACC,IAAIC,GAAAA,GAAqB,CACvBnD,MAAOtB,GAA2BoB,EAAKQ,mBACvC8C,gBAAiB,CAAClE,GAAUK,OAG/B8D,iBAAiBP,EAAchD,IAC/BwD,UAGLnjC,KAAK43B,qBAAqB53B,KAAKs2B,WAAWqB,KAAK33B,KAAM2/B,GACvD,EC3BK,MAAM+E,WAA8BxI,GAAAA,GA2DzC5F,UAAAA,CAAWqJ,GACT,MAAM,KAAEt5B,GAASrG,KAAKm1B,MAEhByK,EAAM,EAAMzK,MAAM0K,MAAgCnH,kBAAkBC,I,IACpEA,EAAJ,IAAiB,QAAbA,EAAAA,EAASvxB,YAATuxB,IAAAA,OAAAA,EAAAA,EAAexD,SAAUkJ,EAAAA,aAAayB,KACxC,OAGF,MAAM,OAAEtC,GAAW7E,EAASvxB,MAExBo2B,aAAAA,EAAAA,EAAQx2B,SACVX,EAAKkwB,SAASv2B,KAAK+/B,UAAUJ,EAAMnC,IAIrCx9B,KAAKggC,aAAa,IAAI5c,GAA4B,CAAEoa,YAAW,EAAK,IAGtE,MAAO,KACLoC,EAAIpE,aAAa,CAErB,CAEAuE,SAAAA,CAAUJ,EAAoBnC,GAC5B,MAAMmH,EAAcnH,EAAO,GAAGje,OAAO,GAAGhb,OAAOyC,OAKzC49B,EADgBhP,GAFEiE,GAAAA,GAAWC,iBAAiB95B,KAAM,kBAAmBo2B,IAAuBjB,MACjGrzB,OAE6Bqc,KAEhC,MAAO,CACLzP,MAAOi2B,EAAc,EAAI,GAAGhF,EAAK7xB,UAAU62B,KAAiBhF,EAAK7xB,MACjE8zB,YAAa,CACXC,SAAU,CACR2B,OAAQ,CACNqB,YAAY,EACZC,YAAa,CAAC,IAGlB3C,UAAW,CACT,CACEG,QAAS,CACPtsB,GAAI,SACJ7S,QAAS,OAEXs/B,WAAY,CACV,CACEzsB,GAAI,OACJlU,MAAO8iC,GAET,CACE5uB,GAAI,eACJlU,MAAO,SAOrB,CAEA,gBAAOg2B,EAAU,MAAEC,IACjB,MAAM7tB,GAASC,EAAAA,EAAAA,YAAWlC,KACpB,KAAE5B,GAAS0xB,EAAMjxB,WAEvB,OACE,kBAACmF,OAAAA,CAAKvB,UAAWR,EAAOwK,WACtB,kBAACrO,EAAKyxB,UAAS,CAACC,MAAO1xB,IAG7B,CAjIAjF,WAAAA,EAAY,KACVu+B,EAAI,cACJgD,IAKA7/B,MAAM,CACJqI,IAAK,qBACL9E,KAAMu8B,GAAAA,GAAcmC,QACjBjC,SAASnD,EAAK7xB,OACdi1B,QACC,IAAIC,GAAAA,GAAqB,CACvBnD,MAAOtB,GAA2BoB,EAAKQ,mBACvC8C,gBAAiB,CACf,CACEjtB,GAAIgvB,EAAAA,kBAAkBhwB,OACtB7R,QAAS,CACP8hC,SAAU,CAAC,OACXC,gBAAgB,IAGpB,CACElvB,GAAIgvB,EAAAA,kBAAkBG,mBACtBhiC,QAAS,CACPiiC,QAAS,CACPvoB,MAAO,CAAC,YAId,CACE7G,GAAIgvB,EAAAA,kBAAkBK,cACtBliC,QAAS,CACPmiC,MAAO,MACPC,cAAe,QAGnB,CACEvvB,GAAIgvB,EAAAA,kBAAkBQ,OACtBriC,QAAS,CACP4sB,KAAM,CACJ,CACE0P,MAAO,MACPgG,MAAM,UAQnBvC,iBAAiBP,EAAchD,IAC/BwD,UAGLnjC,KAAK43B,qBAAqB53B,KAAKs2B,WAAWqB,KAAK33B,KAAM2/B,GACvD,EA4EF,MAAM13B,GAAY,KAAO,CAEvByM,UAAWtM,EAAAA,GAAG;;eAED00B,GAAgB;;;MCjKxB,SAAS4I,GAAwBzrB,GAEtC,MAAO,CACLC,KAA4D,IAAtDE,KAAKurB,OAAO1rB,EAAUC,KAAK0rB,WAAa,GAAK,KACnDrrB,GAAwD,IAApDH,KAAKurB,OAAO1rB,EAAUM,GAAGqrB,WAAa,GAAK,KAEnD,C,4sCCYA,MACMnH,IAAQoH,E,QAAAA,GAD+B,IAGtC,MAAMC,WAAyBC,GAAAA,GAO9BjiB,KAAAA,G,OAAN,gBACE,MAAO,CACLqR,MAAOkJ,EAAAA,aAAayB,KACpB14B,KAAM,CACJ,CACElD,KAAM,SACNqb,OAAQ,CACN,CACErb,KAAM,QACNU,KAAM4a,EAAAA,UAAUwmB,MAChBzhC,OAAQ,GACRC,OAAQ,CAAC,IAGbwC,OAAQ,IAIhB,GAlBA,E,CAoBAi/B,SAAAA,CAAU9iC,G,IAEY+iC,EADpB,MAAM,WAAEA,EAAU,MAAEC,GAAUhjC,EACxBw2B,EAAcuM,SAAyB,QAAzBA,EAAAA,EAAYE,qBAAZF,IAAAA,OAAAA,EAAAA,EAA2BpkC,MAEzC6hB,EAAgBkW,GAAAA,GAAWsE,YAAYxE,EAAa,eACpDnB,EAAcqB,GAAAA,GAAWsE,YAAYxE,EAAa,gBAClD9D,EAAkBgE,GAAAA,GAAWsE,YAAYxE,EAAa,oBAKtD7V,EAAQ,GAAG+R,mBAAiC2C,OAE5C,KAAEte,EAAI,GAAEK,GAAOmrB,GAAwBS,GAE7C,MAAO,CACLxiB,gBACA6U,cACA3C,kBACA/R,QACA5J,OACAK,KAEJ,CAEM2J,WAAAA,CAAYP,EAAuBG,EAAe5J,EAAcK,EAAYshB,G,OAAlF,gBACExV,GAAiBpB,aAAa,IAAIrB,GAAgB,CAAED,mBAEpD,IACE,aAAa0C,GAAiBP,WAAW,CAAEhC,QAAO5J,OAAMK,MAC1D,CAAE,MAAOtZ,GAMP,MALAf,EAAOe,MAAMA,EAAgB,CAC3BN,KAAM,6CACNk7B,aAAcA,GAAgB,KAG1B56B,CACR,CACF,GAbA,E,CAeMsjB,gBAAAA,CACJwY,EACAjZ,EACA5J,EACAK,EACA8rB,EACAxK,G,OANF,gBAQE,IAAIt3B,EAEJ,IACEA,QAAe8hB,GAAiBF,gBAAgB,CAAErC,QAAO5J,OAAMK,KAAIzM,MAAOu4B,GAC5E,CAAE,MAAOplC,GACPf,EAAOe,MAAMA,EAAgB,CAC3BN,KAAM,8CACNk7B,aAAcA,GAAgB,IAElC,CAEA,MAAM9xB,EAAQxF,EAASA,EAAOyC,QAAU,EAExC,MAAO,CACLlF,MAAO,CACLA,MAAOukC,EACP7H,QAAS,CACP1wB,MAAOu4B,EACP9hC,OAAQA,GAAU,KAGtBwE,KAAM,GAAGs9B,MAAct8B,GAAS,EAAIA,EAAQ,OAC5CA,QAEJ,GAhCA,E,CAkCMu8B,eAAAA,CAAgBC,EAAWpjC,G,kBAAjC,gB,IACsBA,EAAAA,EAoBkDA,EAftE,KALsC,QAAlBA,EAAAA,EAAQ+iC,kBAAR/iC,IAAAA,GAAiC,QAAjCA,EAAAA,EAAoBijC,qBAApBjjC,IAAAA,OAAAA,EAAAA,EAAmCrB,OAKtC0kC,SACf,MAAO,GAGT,MAAM,cAAE7iB,EAAa,YAAE6U,EAAW,gBAAE3C,EAAe,MAAE/R,EAAK,KAAE5J,EAAI,GAAEK,GAAO,EAAK0rB,UAAU9iC,GAExF,IAAKq1B,IAAgB3C,EAMnB,OALA31B,EAAOa,KACL,sGACAy3B,EACA3C,GAEK,GAGT,MAAM5P,QAAe,EAAK/B,YAAYP,EAAeG,EAAO5J,EAAMK,EAAoB,QAAhBpX,EAAAA,EAAQsjC,gBAARtjC,IAAAA,OAAAA,EAAAA,EAAkBe,MAElFwiC,QAAiCjwB,QAAQkwB,IAC7C1gB,EACGvhB,QAAO,EAAG5C,YAAaopB,GAAeppB,KACtCkJ,KAAI,EAAGlJ,SAASi7B,IACf0B,IAAM,K,IAA2Dt7B,E,OAArD,EAAKohB,iBAAiBwY,EAAOjZ,EAAO5J,EAAMK,EAAIzY,EAAuB,QAAhBqB,EAAAA,EAAQsjC,gBAARtjC,IAAAA,OAAAA,EAAAA,EAAkBe,KAAK,OAIxF0iC,EAAeF,EAClB3W,MAAK,CAAC/f,EAAGof,IAAMA,EAAErlB,MAAQiG,EAAEjG,QAC3BiB,KAAI,EAAGlJ,QAAOiH,QAAQg0B,KACd,CAELj7B,MAAOJ,KAAKM,UAAU,SAAKF,GAAAA,CAAOi7B,WAClCh0B,WAIN,MAAO,CAEL,CACEjH,MAAO,MACPiH,KAAM,UAEL69B,EAEP,GAjDA,E,CAmDMC,cAAAA,G,OAAN,gBACE,MAAO,CACLjkC,OAAQ,UACRD,QAAS,KAEb,GALA,E,CArJAvB,WAAAA,GACE0B,MAAMqzB,GAA6BvxB,KAAMuxB,GAA6B7wB,IACxE,EAJA,GADWwgC,GACJgB,8BAA8B,I,o7BCtBhC,SAASC,GAAsBlR,GACpC,MAAMmB,EAAgBpB,GAAiBC,GACvC,MAAO,GAAGmB,EAAcpyB,SAASoyB,EAAcjB,QACjD,C,44BC2BA,MAAMiR,GAAc,CAClB,CACEj+B,KAAM,SACNk+B,kBAAmB,CAAEriC,KAAMsiC,GAAAA,GAAkBC,SAE/C,CACEp+B,KAAM,OACNk+B,kBAAmB,CAAEriC,KAAMsiC,GAAAA,GAAkBE,IAAKvmC,IAAK,KAIpD,MAAMwmC,WAA4BnL,GAAAA,GAUvC5F,UAAAA,GACEt2B,KAAKu2B,SAAS,CAAE5I,MAAO3tB,KAAKsnC,kBAC9B,CAEAA,cAAAA,CAAeC,GACb,MAAM,MAAE5Z,EAAK,UAAE6Z,GAAcxnC,KAAKm1B,MAE5BsS,EAA6B,CACjC,CACE1+B,KAAM,aACNnE,KAAM,QACN8iC,QAASV,GAAYh8B,KAAK8M,IAAY,CACpC/O,KAAM,GAAGy+B,IAAc1vB,EAAOmvB,kBAAkBriC,KAAO,KAAO,KAAKkT,EAAO/O,OAC1EiF,QAAS,IAAMhO,KAAK2nC,mBAAmB7vB,QAG3C,CACElT,KAAM,UACNmE,KAAM,IAER,CACE6+B,cAAe,UACf7+B,KAAM,kBACNiF,QAAS,IAAMhO,KAAK6nC,mBAIxB,GAAIN,EACFE,EAAUxqB,KAAK,CACb2qB,cAAe,cACf7+B,KAAM,8BACNiF,QAAS,KACPu5B,EAAuBv5B,SAAO,QAG7B,CACL,MAAM85B,EAAiCna,aAAAA,EAAAA,EAAOruB,MAAM4L,GAAMA,EAAEnC,KAAKgP,SAAS,0BAEtE+vB,GACFL,EAAUxqB,KAAK,MAAK6qB,GAExB,CAEA,OAAOL,CACT,CAEAE,kBAAAA,CAAmB7vB,GACjB,MAAM,kBAAEmvB,EAAiB,KAAEl+B,GAAS+O,GAEpC3D,EAAAA,EAAAA,mBAAkB,2CAA4C,CAAE4zB,MAAOd,EAAkBriC,OAEtEi1B,GAAAA,GAAWmO,YAAYhoC,KAAMioC,IAErCC,YAAYjB,EAAmBl+B,GAE1C/I,KAAKu2B,SAAS,CACZiR,UAAWP,EAAkBriC,KAC7B+oB,MAAO3tB,KAAKsnC,kBAEhB,CAEAO,cAAAA,IACE1zB,EAAAA,EAAAA,mBAAkB,2CAElB,MAIMg0B,ECpHH,SAAuBC,EAA4BtkB,EAAwBoT,GAChF,MAAMmR,EAAe3mC,KAAKM,UAAU,CAClC,oBAAuB,CACrBmkC,OAAOmC,EAAAA,EAAAA,YAAWF,GAClB/pC,QAAS,CAAC,SAAKylB,GAAAA,CAAOoT,gBACtBqR,YAAa,CAAC,EACdrR,gB,IAIW1yB,EAAf,MAAMgkC,EAAyB,QAAhBhkC,EAAAA,EAAAA,OAAOoB,iBAAPpB,IAAAA,EAAAA,EAAoB,GAEnC,OAAOikC,EAAAA,QAAQC,UAAU,GAAGF,YAAkB,CAC5CG,MAAON,EACPO,cAAe,GAEnB,CDoGuBC,CAJEhP,GAAAA,GAAWrf,aAAaxa,MAAMm1B,MAAMrzB,MAAM8Y,IACjD5a,KAAK8oC,uBACAjP,GAAAA,GAAWsE,YAAYn+B,KAAM,kBAIhDd,OAAO+O,KAAKk6B,EAAY,SAC1B,CAEAW,oBAAAA,G,IAEsBC,EADpB,MACMjL,EAA+C,QAAjCiL,EADDlP,GAAAA,GAAWmO,YAAYhoC,KAAMioC,IACjB9S,MAAM9uB,KAAK8uB,MAAM0K,aAA5BkJ,IAAAA,OAAAA,EAAAA,EAAmC5T,MAAM0K,MACvDmJ,EAAuBlL,aAAAA,EAAAA,EAAa3I,MAAM92B,QAAQ,GAExD,OAAO8F,OAAO8kC,QAAQD,GACnBh+B,KAAI,EAAEG,EAAKrJ,KAAW,CAACqJ,EAAsB,iBAAVrJ,EAAqB+3B,GAAAA,GAAWsE,YAAYn+B,KAAM8B,GAASA,KAC9FkT,QACC,CAACC,GAAM9J,EAAKrJ,KAAY,SACnBmT,GAAAA,CACH,CAAC9J,GAAMrJ,KAET,CAAC,EAEP,CAEAonC,oCAAAA,GACE,MAAM,MAAEjL,EAAK,UAAEa,EAAS,cAAEf,EAAa,cAAEC,EAAa,QAAEQ,GAAYx+B,KAAK8oC,uBAEnEK,EAAczL,GAAW,GAAGK,IAAgBC,KAC5CoL,EAAa,CAACD,EAAY/P,UAAW2N,GAAsBoC,EAAYtT,mBAEzE2I,aAAAA,EAAAA,EAASx3B,SACXoiC,EAAWnsB,KAAKuhB,EAAQ,IAGtB2K,EAAYljB,OAAOjf,QACrBoiC,EAAWnsB,KAAKksB,EAAYljB,OAAOhL,KAAK,OAG1C,MAAMvM,EAAQ06B,EAAWnuB,KAAK,OACxBic,EAAa2C,GAAAA,GAAWsE,YAAYn+B,KAAM,iBAC1Cia,EAAY4f,GAAAA,GAAWrf,aAAaxa,MAAMm1B,MAAMrzB,MAGtD,OAAOyI,EAAAA,EAAAA,UAAQ,KACN,CACLyL,IAAIwS,EAAAA,GAAAA,MACJ6gB,OAAQ,6BACR5tB,IAAKvc,OAAOC,SAAS8F,KACrBqkC,SAAU78B,GACViC,QACA9J,KAAM,aACNqV,UAAW,MAAKA,GAChB5b,QAAS,CAAC,CAAE4/B,QAAOa,YAAWf,gBAAeC,gBAAeQ,YAC5DtH,gBAED,CAACA,EAAYsH,EAASR,EAAeD,EAAee,EAAWb,EAAOhkB,EAAWvL,GACtF,CAEA66B,kBAAAA,GACE,MAGM15B,EExKH,UAAmC,iBACxC25B,EAAgB,QAChBtoC,EAAO,SACPi5B,IAEA,MAAMsP,GAAcC,EAAAA,EAAAA,gBAAe,CAAEF,mBAAkBtoC,aAEhD2O,GAAQ45B,EAAYE,MAAMjlC,QAAQmL,GAASA,EAAKsqB,WAAaA,IAEpE,OAAOtqB,CACT,CF8JiB+5B,CAA0B,CACrCJ,iBElL4C,yCFmL5CtoC,QALclB,KAAKkpC,uCAMnB/O,SEnL+B,gCF0LjC1lB,EAAAA,EAAAA,YAAU,KACJ5E,GACF7P,KAAKu2B,SAAS,CAAE5I,MAAO3tB,KAAKsnC,eAAez3B,IAC7C,GACC,CAACA,GACN,CAEA,gBAAOioB,EAAU,MAAEC,IAGjB,OAFAA,EAAMwR,qBAEC,kBAACM,GAAAA,GAAa/R,UAAS,CAACC,MAAOA,GACxC,CA7JA32B,WAAAA,CAAY+zB,GACVryB,MAAM,IACJ0kC,UAAWN,GAAAA,GAAkBC,QAC1BhS,IAGLn1B,KAAK43B,qBAAqB53B,KAAKs2B,WAAWqB,KAAK33B,MACjD,EGZK,MAAMioC,WAAmC/L,GAAAA,GA4C9C5F,UAAAA,GACE,MAAM,KAAEjwB,GAASrG,KAAKm1B,MAEhB2U,EAAU,EAAM3U,MAAM0K,MAA4BnH,iBAAiB14B,KAAK+pC,sBAAsBpS,KAAK33B,OAEnGgqC,EAAmBhqC,KAAKiqC,kCAE9B,MAAO,KACLH,EAAQtO,cACRwO,SAAAA,EAAkBxO,aAAa,CAEnC,CAEQuO,qBAAAA,CAAsBpR,EAAeC,G,IACvCD,EAAJ,IAAiB,QAAbA,EAAAA,EAASvxB,YAATuxB,IAAAA,OAAAA,EAAAA,EAAexD,SAAUkJ,EAAAA,aAAayB,KACxC,OAGF9/B,KAAKkqC,0BAA0BvR,EAAUC,GAEzC,MAAM,OAAE4E,GAAW7E,EAASvxB,MAExBo2B,aAAAA,EAAAA,EAAQx2B,SACVhH,KAAKmqC,iBAAiB3M,GAGxBx9B,KAAKggC,aAAa,IAAI5c,GAA4B,CAAEoa,YAAW,EACjE,CAEQ0M,yBAAAA,CAA0BvR,EAAeC,G,IAC1CD,EAAqCC,EAAAA,IAAZ,QAAzBD,EAAAA,EAASvxB,KAAKs3B,mBAAd/F,IAAAA,OAAAA,EAAAA,EAA2B3xB,UAAwB,QAAd4xB,EAAAA,EAAUxxB,YAAVwxB,IAAAA,GAA2B,QAA3BA,EAAAA,EAAgB8F,mBAAhB9F,IAAAA,OAAAA,EAAAA,EAA6B5xB,UACrE2xB,EAASvxB,KAAKs3B,YAAc9F,EAAUxxB,KAAKs3B,YAE/C,CAEQyL,gBAAAA,CAAiB3M,GACvB,MAAM,KAAEn3B,GAASrG,KAAKm1B,MAChB3wB,EAASxE,KAAKm1B,MAAMiV,iBAAmBpqC,KAAKqqC,mBAAmB7M,GAAUx9B,KAAK+/B,UAAUvC,GAC9Fn3B,EAAKkwB,UAAS4I,EAAAA,GAAAA,OAAM,CAAC,EAAG94B,EAAK8uB,MAAO3wB,GACtC,CAEQylC,+BAAAA,GACN,IAEE,OAD8BpQ,GAAAA,GAAWC,iBAAiB95B,KAAM,kBAAmBo2B,IACtDsC,kBAAiB,CAACC,EAAUC,KACnDD,EAAS72B,QAAU82B,EAAU92B,OAC/B9B,KAAKsqC,2BACP,GAEJ,CAAE,MAAOrpC,GACP,OAAO,IACT,CACF,CAEQqpC,yBAAAA,G,IAGFC,EAFJ,MAAM,KAAElkC,GAASrG,KAAKm1B,MAChBoV,EAAc,EAAMpV,MAAM0K,MAA4B1K,MAAM/tB,MAC9DmjC,SAAmB,QAAnBA,EAAAA,EAAa/M,cAAb+M,IAAAA,OAAAA,EAAAA,EAAqBvjC,SACvBhH,KAAKmqC,iBAAiBI,EAAY/M,OAEtC,CAEAuC,SAAAA,CAAUvC,G,IAKJmC,EAJJ,MAAM,KAAEt5B,EAAI,KAAEs5B,EAAI,gBAAEsE,GAAoBjkC,KAAKm1B,MAC7C,IACIlK,GADA,MAAEvc,GAAUrI,EAAK8uB,MAQrB,OALkC,QAA9BwK,EAAAA,EAAKQ,kBAAkB3B,eAAvBmB,IAAAA,OAAAA,EAAAA,EAAgC7xB,SAClCY,EAAQ8uB,EAAOx2B,OAAS,EAAI,GAAG24B,EAAK7xB,UAAU0vB,EAAOx2B,UAAY24B,EAAK7xB,MACtEmd,EAAcjrB,KAAKwqC,iBAAiB7K,EAAKQ,kBAAkB3B,UAGtD,CACL9vB,QACAuc,cACA9nB,QAAS,CACPyF,QAAS,CACPwX,KAAM,SACN2P,KAAM,QAER2R,OAAQ,CACNC,YAAY,EACZlB,YAAa,OACbhyB,UAAWw1B,IAGfrC,YAAa,CACXC,SAAU,CACRC,IAAK,EACL0B,OAAQ,CACNiH,YAAajN,EAAOx2B,QAAU8+B,GAAiBgB,4BAA8B,EAAI,EACjF4D,aAAgC,IAAlBlN,EAAOx2B,OAAe2jC,GAAAA,GAAkBtG,KAAOsG,GAAAA,GAAkBC,QAC/EC,UAAW,IAGf1I,UAAWniC,KAAKoiC,aAAa5E,IAGnC,CAEAgN,gBAAAA,CAAiBhM,GACf,OAAKA,EAKAA,EAASj6B,OAIVi6B,EAASj6B,OAAOyC,OAAS8+B,GAAiBgB,4BACrC,gBAAgBhB,GAAiBgB,uCACtCtI,EAASj6B,OAAOyC,iIAIb,GATE,gBAAgB8+B,GAAiBgB,8HALjC,EAeX,CAEAuD,kBAAAA,CAAmB7M,GACjB,MAAM,gBAAEyG,GAAoBjkC,KAAKm1B,MAEjC,MAAO,CACLhyB,QAAS,CACPyF,QAAS,CACPwX,KAAM8jB,EAAAA,mBAAmBC,OACzBpU,KAAMqU,GAAAA,GAAUC,MAElB3C,OAAQ,CACNC,YAAY,EACZlB,YAAa6D,EAAAA,kBAAkBC,KAC/B91B,UAAWw1B,EACX5D,MAAO,KAGXuB,YAAa,CACXC,SAAU,CACRC,IAAK,EACL0B,OAAQ,CACNiH,YAAa,EACbI,UAAW,IAGf1I,UAAWniC,KAAKoiC,aAAa5E,IAGnC,CAEA4E,YAAAA,CAAa5E,G,IAMUmC,EALrB,GAAI3/B,KAAKm1B,MAAMgN,UACb,OAAOniC,KAAKm1B,MAAMgN,UAAU3E,GAG9B,MAAM,KAAEmC,GAAS3/B,KAAKm1B,MAChB+K,EAA6C,QAA9BP,EAAAA,EAAKQ,kBAAkB3B,eAAvBmB,IAAAA,OAAAA,EAAAA,EAAgC7xB,MAErD,OAAO0vB,EAAOxyB,KAAI,CAACC,EAAGC,KACpB,MAAMoyB,EAAcryB,EAAEsU,OAAO,GAC7B,IAAIke,EAAcyC,EAAe7C,GAAwBC,EAAa4C,GAAgB5C,EAAYp5B,KAElGu5B,EAAc2F,GAA8B3F,EAAaxyB,GAEzD,MAAMw3B,EAAa,CACjB,CACEzsB,GAAI,cACJlU,MAAO27B,GAET,CACEznB,GAAI,QACJlU,MAAO,CAAEse,KAAM,QAASsiB,WAAY5F,GAAgB6C,EAAK5C,MAAQ7xB,MAIrE,MAAO,CACLo3B,QAAS,CAAEtsB,GAAIusB,EAAAA,eAAeC,aAAcr/B,QAAS8H,EAAEgzB,OACvDwE,aACD,GAEL,CAEAqI,UAAAA,CAAWC,G,IAILA,EAUFA,EAbF,MAAM,KAAEpL,EAAI,cAAEgD,EAAa,KAAEt8B,GAASrG,KAAKm1B,MACrC6V,GAAc7L,EAAAA,GAAAA,OAAM,CAAC,EAAGQ,EAAMoL,GA0BpC,IAxBiC,QAA7BA,EAAAA,EAAY5K,yBAAZ4K,IAAAA,OAAAA,EAAAA,EAA+BvpC,eAAe,mBACFmJ,IAA1CogC,EAAY5K,kBAAkB3B,eACzBwM,EAAY7K,kBAAkB3B,QAGrCwM,EAAY7K,kBAAkB3B,QAAUuM,EAAY5K,kBAAkB3B,UAK3C,QAA7BuM,EAAAA,EAAY5K,yBAAZ4K,IAAAA,OAAAA,EAAAA,EAA+BvpC,eAAe,kBACJmJ,IAA1CogC,EAAY5K,kBAAkBjZ,gBAEvB8jB,EAAY7K,kBAAkBjZ,QAGvClnB,KAAKu2B,SAAS,CAAEoJ,KAAMqL,IAEtB3kC,EAAKkwB,SAAS,CACZ7nB,MAAOq8B,EAAYj9B,MACnBmd,YAAajrB,KAAKwqC,iBAAiBQ,EAAY7K,kBAAkB3B,SACjEmE,cAAeA,EAAcqI,OAG1BC,EAAAA,GAAAA,SAAQtL,EAAKQ,kBAAmB6K,EAAY7K,mBAAoB,C,IAM/C95B,EALpB,MAAM,QAAEhI,GAAYkgC,GAClByM,EAAY7K,kBACZ2F,GAAiBgB,6BACjB3R,MAEI2I,EAA8B,QAAhBz3B,EAAAA,EAAK8uB,MAAM0K,aAAXx5B,IAAAA,OAAAA,EAAAA,EAAkB8uB,MAAM0K,MAG5C/B,SAAAA,EAAavH,SAAS,CAAEl4B,YACxBy/B,SAAAA,EAAaoN,YACf,CACF,CAEAhD,WAAAA,CAAYjB,EAA4CkE,GACtD,MAAM,KAAE9kC,GAASrG,KAAKm1B,MAEtB9uB,EAAK+kC,wBAEL/kC,EAAKkwB,SAAS,CACZqL,aAAazC,EAAAA,GAAAA,OAAM,CAAC,EAAG94B,EAAK8uB,MAAMyM,YAAa,CAC7CC,SAAU,CACR2B,OAAQ,CACNyD,oBACAkE,UAAWlE,EAAkBriC,OAASsiC,GAAAA,GAAkBC,OAASgE,EAAY,QAKvF,CAEA,gBAAOrT,EAAU,MAAEC,IACjB,MAAM,KAAE1xB,GAAS0xB,EAAMjxB,WAEvB,OAAO,kBAACT,EAAKyxB,UAAS,CAACC,MAAO1xB,GAChC,CA9RAjF,WAAAA,EAAY,KACVu+B,EAAI,cACJgD,EAAa,iBACbyH,EAAgB,gBAChBnG,EAAe,KACf78B,EAAI,UACJ+6B,IASAr/B,MAAM,CACJqI,IAAK,0BACLw0B,OACAgD,gBACAyH,iBAAkBtuB,QAAQsuB,GAC1BnG,gBAAiBA,GAAmB,SACpC9B,YACA97B,KAAMu8B,GAAAA,GAAcmG,aACjBjG,SAASnD,EAAK7xB,OACdi1B,QACC37B,GACE,IAAI47B,GAAAA,GAAqB,CACvBnD,MAAOtB,GACLoB,EAAKQ,kBACLiK,OAAmBz/B,EAAYm7B,GAAiBgB,6BAChD,GAEF7D,gBAAiB,CAAClE,GAAUK,OAGjC8D,iBAAiBP,EAAchD,IAC/B0L,QAAQ,IAAIhE,GAAoB,CAAC,IACjClE,UAGLnjC,KAAK43B,qBAAqB53B,KAAKs2B,WAAWqB,KAAK33B,MACjD,EC3EK,SAASsrC,GAAgBlP,EAAsBj5B,GACpD,OAAQi5B,GACN,KAAKJ,GAAUuP,SACb,OAAO,IAAI7L,GAAyBv8B,GAEtC,KAAK64B,GAAUwP,MACb,OAAO,IAAI9G,GAAsBvhC,GAEnC,KAAK64B,GAAUyP,UACb,OAAO,IAAIzH,GAA0B7gC,GAEvC,KAAK64B,GAAU0P,WACf,QACE,OAAO,IAAIzD,GAA2B9kC,GAE5C,C,yFCOA,GAjByB,CAACwoC,EAFW,MAGnC,MAAOC,EAAeC,IAAoB/kC,EAAAA,EAAAA,UAAwB,CAAEglC,EAAG,KAAMC,EAAG,OAahF,OAXAt3B,EAAAA,EAAAA,YAAU,KACR,MAAMu3B,GAAsBC,EAAAA,GAAAA,WAAU/iB,IACpC2iB,EAAiB,CAAEC,EAAG5iB,EAAMgjB,QAASH,EAAG7iB,EAAMijB,SAAU,GACvDR,GAGH,OAFAzsC,OAAO4X,iBAAiB,YAAak1B,GAE9B,KACL9sC,OAAOktC,oBAAoB,YAAaJ,EAAoB,CAC7D,GACA,CAACL,IAEGC,CAAa,ECJTS,GAAe,EAAGnrB,QAAQ,OAAQorB,SAAQC,WAAU,MAC/D,MAAMrkC,GAAQ8V,EAAAA,EAAAA,cACR,EAAE8tB,EAAC,EAAEC,GAAMS,KACXtiC,GAASC,EAAAA,EAAAA,YAAWlC,GAAW6jC,EAAGC,EAAGQ,GAC3C,OACE,kBAACE,GAAAA,EAAGA,CACFjgC,IAAMtE,EAAMwkC,OAASC,GAAUC,GAC/BliC,UAAWR,EAAO2iC,IAClBP,OAAQA,EACRprB,MAAOA,G,EAKbmrB,GAAa5O,YAAc,eAE3B,MAAMx1B,GAAY,CAACC,EAAsB4kC,EAAqBC,EAAqBR,KACjF,MAAM,WAAES,EAAU,YAAEC,GAAgB/tC,OAC9BguC,EAAcH,GAAQA,EAAOE,EAC7BE,EAAaL,GAAQA,EAAOE,EAC5BI,EAA2B,OAAhBF,EAAuBG,GAAqBH,GA/BtC,GACA,GA8ByF,EAC1GI,EACW,OAAfH,EAAsBE,GAAqBF,GA/BnB,EACA,GA8B2E,EAErG,MAAO,CACLN,KAAKzkC,EAAAA,EAAAA,KAAI,CACP,qCAAsC,CACpCmlC,UAAW,UAAUH,oBAA2BE,MAChDE,gBAAiB,SACjBC,WAAY,yBAEd,iBAAkB,CAChBplC,QAASkkC,EAAU,QAAU,UAGlC,EAOGc,GAAuB,CAACK,EAAerpB,EAAeC,IAC5CopB,GAASppB,EAAMD,GAASA,ECtD3BspB,GAAa,EAAGhrC,cAC3B,MAAMuH,GAASC,EAAAA,EAAAA,YAAWlC,IAE1B,OACE,kBAACuC,MAAAA,CAAIE,UAAWR,EAAOwK,WACrB,kBAACk5B,EAAAA,IAAGA,CAACC,SAAU,GACb,kBAAC5+B,EAAAA,MAAKA,CAAC6+B,UAAU,SAAStlC,WAAW,SAASulC,IAAK,GACjD,kBAAC1B,GAAYA,CAACnrB,MAAO,MACrB,kBAAC4f,EAAAA,KAAIA,CAACztB,QAAQ,MAAM1Q,KAAAA,EAS9B,SAASsF,KACP,MAAO,CACLyM,WAAWtM,EAAAA,EAAAA,KAAI,CACb8Y,MAAO,OACP7Y,QAAS,OACTE,eAAgB,eAChBD,cAAe,WAGrB,CAXAqlC,GAAWlQ,YAAc,aChBlB,MAAMuQ,WAAwB9R,GAAAA,K,6GACnC,CADW8R,GACGlW,aAAY,EAAGC,YAC3B,MAAM,QAAEp1B,GAAYo1B,EAAMjxB,WAC1B,OAAO,kBAAC6mC,GAAUA,CAAChrC,QAASA,G,ICJzB,MAAMsrC,WAAwB/R,GAAAA,I,uOACnC,CADW+R,GACGnW,aAAY,EAAGC,YAC3B,MAAM,QAAEp1B,GAAYo1B,EAAMjxB,WAC1B,OACE,kBAACsJ,EAAAA,MAAKA,CAAC1B,MAAM,eAAe2B,SAAS,SAClC1N,EAAAA,ICFF,gBAAKurC,G,mCAAAA,C,CAAL,C,IAUA,MAAMC,WAA4BjS,GAAAA,GAiBvCC,WAAAA,GACE,MAAO,CACL1sB,OAAQzP,KAAKm1B,MAAM1lB,OAEvB,CAEA4sB,aAAAA,CAAc93B,GACZ,MAAM+3B,EAAiD,CAAC,EAE3B,iBAAlB/3B,EAAOkL,QAAuBlL,EAAOkL,SAAWzP,KAAKm1B,MAAM1lB,SACpE6sB,EAAY7sB,OAAStL,OAAOI,OAAO2pC,IAAYn2B,SAASxT,EAAOkL,QAC1DlL,EAAOkL,OACR0+B,GAAoBC,gBAG1BpuC,KAAKu2B,SAAS+F,EAChB,CAvBAl7B,WAAAA,GACE0B,MAAM,CACJqI,IAAK,kBACLsE,OAAQ0+B,GAAoBC,iBAZhC,QAAU5R,WAAW,IAAIC,GAAAA,GAAyBz8B,KAAM,CAAE08B,KAAM,CAAC,aAkCjE/b,GAAAA,KAAAA,YAAYlR,IACV0E,GAAkB,iCAAkC,CAAE1E,WAEtDzP,KAAKu2B,SAAS,CAAE9mB,UAAS,GAvB3B,E,yHAZA,GAHW0+B,GAGJxR,UAAU,CACf,CAAE7uB,MAAO,OAAQhM,MAAO,QACxB,CAAEgM,MAAO,OAAQhM,MAAO,UAG1B,GARWqsC,GAQJC,iBAAAA,QAiCP,GAzCWD,GAyCJrW,aAAY,EAAGC,YACpB,MAAM,OAAEtoB,GAAWsoB,EAAMjxB,WAEzB,OACE,kBAAC81B,EAAAA,iBAAgBA,CACfzwB,aAAW,kBACXhJ,QAASgrC,GAAoBxR,QAC7B76B,MAAO2N,EACPkR,SAAUoX,EAAMpX,SAChBkc,WAAW,G,ICvDZ,MAAMwR,WAA4BnS,GAAAA,GAYvCC,WAAAA,GACE,MAAO,CACLmS,WAAYtuC,KAAKm1B,MAAMmZ,WAE3B,CAEAjS,aAAAA,CAAc93B,GACZ,MAAM+3B,EAAiD,CAAC,EAEvB,iBAAtB/3B,EAAO+pC,YAA2B/pC,EAAO+pC,aAAetuC,KAAKm1B,MAAMmZ,aAC5EhS,EAAYgS,WAAa,CAAC,KAAM,OAAOv2B,SAASxT,EAAO+pC,YACnD/pC,EAAO+pC,WACPD,GAAoB7X,eAG1Bx2B,KAAKu2B,SAAS+F,EAChB,CAvBAl7B,WAAAA,GACE0B,MAAM,CACJqI,IAAK,mBACLmjC,WAAYD,GAAoB7X,gBAPpC,QAAUgG,WAAW,IAAIC,GAAAA,GAAyBz8B,KAAM,CAAE08B,KAAM,CAAC,iBA6BjE/b,GAAAA,KAAAA,YAAY2tB,IACVn6B,GAAkB,uCAAwC,CAAEm6B,eAE5DtuC,KAAKu2B,SAAS,CAAE+X,cAAa,GAvB/B,E,yHAPA,GAHWD,GAGJ7X,gBAAgB,OAiCvB,GApCW6X,GAoCJvW,aAAY,EAAGC,YACpB,MAAM,WAAEuW,GAAevW,EAAMjxB,WAE7B,OACE,kBAACynC,EAAAA,aAAYA,CACX9jC,cAAY,iBACZ+jC,WAAAA,EACA1gC,MAAM,2BACNhM,MAAsB,OAAfwsC,EACP3tB,SAAWuI,GAA+C6O,EAAMpX,SAASuI,EAAMjZ,OAAOw+B,QAAU,KAAO,Q,ICzCxG,MAAMC,WAAyBxS,GAAAA,GAgBpCyS,cAAAA,CAAe9hB,GACb7sB,KAAKu2B,SAAS,CAAE1J,eAClB,CAEA+hB,eAAAA,CAAgBC,GACd7uC,KAAKu2B,SAAS,CAAEsY,aAAc9oC,OAAO8oC,IACvC,CAEA1S,WAAAA,GACE,MAAO,CACL2S,WAAY9uC,KAAKm1B,MAAM2Z,WAE3B,CAEAzS,aAAAA,CAAc93B,GACZ,MAAM+3B,EAA8C,CAAC,EAEpB,iBAAtB/3B,EAAOuqC,YAA2BvqC,EAAOuqC,aAAe9uC,KAAKm1B,MAAM2Z,aAC5ExS,EAAYwS,WAAavqC,EAAOuqC,YAGlC9uC,KAAKu2B,SAAS+F,EAChB,CAMAjB,KAAAA,GACEr7B,KAAKu2B,SAAS,CAAE1J,YAAa,GAAIiiB,WAAY,GAAID,aAAc,IACjE,CAvCAztC,WAAAA,EAAY,YAAEyrB,IACZ/pB,MAAM,CACJqI,IAAK,eACL0hB,cACAiiB,WAAYJ,GAAiBK,oBAC7BF,aAAc,KAXlB,QAAUrS,WAAW,IAAIC,GAAAA,GAAyBz8B,KAAM,CAAE08B,KAAM,CAAC,iBAuCjE/b,GAAAA,KAAAA,YAAYyQ,IACVpxB,KAAKu2B,SAAS,CAAEuY,WAAY1d,EAAEnhB,OAAOnO,OAAQ,IAO/CktC,GAAAA,KAAAA,mBAAkB,KAChBhvC,KAAKu2B,SAAS,CAAEuY,WAAY,IAAK,IAGnCpe,GAAAA,KAAAA,WAAU,KACRvc,GAAkB,uCAAuC,GAvC3D,EAXA,GAHWu6B,GAGJK,sBAAsB,IAE7B,GALWL,GAKJO,iBAAiB,KAmDxB,GAxDWP,GAwDJ5W,aAAY,EAAGC,YACpB,MAAM7tB,GAASC,EAAAA,EAAAA,YAAWlC,KACpB,YAAE4kB,EAAW,WAAEiiB,EAAU,aAAED,GAAiB9W,EAAMjxB,WAExD,OACE,kBAACmqB,EAAAA,MAAKA,CACJrsB,KAAK,OACL8F,UAAU,eACVyB,aAAW,eACX0gB,YAAaA,EACb/qB,MAAOgtC,EACPI,OAAQ,kBAACt/B,EAAAA,KAAIA,CAAC1L,KAAK,WACnB6/B,OACE,oCACoB,KAAjB8K,GACC,kBAACld,EAAAA,IAAGA,CACFjnB,UAAWR,EAAO2kC,aAClB3qC,KAAM2qC,EACNxc,WAAY,EACZ5nB,cAAY,+BAGhB,kBAACyB,EAAAA,WAAUA,CAAChI,KAAK,QAAQiI,aAAW,eAAe6B,QAAS+pB,EAAMiX,mBAGtEruB,SAAUoX,EAAMpX,SAChB8S,UAAYrC,IACI,WAAVA,EAAEjmB,KACJ4sB,EAAMiX,iBACR,EAEFte,QAASqH,EAAMrH,S,IAMvB,MAAMzoB,GAAaC,IAA0B,CAC3C2mC,aAAczmC,EAAAA,GAAG;oBACCF,EAAMyG,QAAQ;;;aAGrBzG,EAAMY,OAAOC,KAAKyJ;wBACPtK,EAAMY,OAAOmI,WAAWjI;ywBC1FzC,MAAMmmC,WAA4BpJ,GAAAA,GACvC,sBAAOqJ,G,IACE/tC,EAAP,OAAyD,QAAlDA,EAAAA,EAAYI,IAAIJ,EAAYa,KAAKG,0BAAjChB,IAAAA,OAAAA,EAAAA,EAAqDguC,YAAa,EAC3E,CAEA,wBAAOC,CAAkBC,EAAcC,GACrC,OAAOD,EAAGnT,YAAcoT,EAAGpT,YAAa6O,EAAAA,GAAAA,SAAQsE,EAAGpP,kBAAmBqP,EAAGrP,kBAC3E,CAEA,aAAOsP,CAAOC,GACZ,OAAOP,GAAoBC,kBAAkBxhB,MAAM2M,GACjD4U,GAAoBG,kBAAkB/U,EAAGmV,IAE7C,CAEA,kBAAOC,CAAYD,GACjB,MAAM7W,EAAUx3B,EAAYI,IAAIJ,EAAYa,KAAKG,mBACjDw2B,EAAQwW,UAAUpyB,KAAKyyB,GACvBruC,EAAYQ,IAAIR,EAAYa,KAAKG,kBAAmBw2B,EACtD,CAEA,qBAAO+W,CAAeF,GACpB,MAAM7W,EAAUx3B,EAAYI,IAAIJ,EAAYa,KAAKG,mBACjDw2B,EAAQwW,UAAYxW,EAAQwW,UAAU3qC,QAAQ61B,IAAiB4U,GAAoBG,kBAAkB/U,EAAGmV,KACxGruC,EAAYQ,IAAIR,EAAYa,KAAKG,kBAAmBw2B,EACtD,CAiBM/U,KAAAA,G,OAAN,gBACE,MAAO,CACLqR,MAAOkJ,EAAAA,aAAayB,KACpB14B,KAAM,CACJ,CACElD,KAAM,WACNqb,OAAQ,CACN,CACErb,KAAM,KACNU,KAAM4a,EAAAA,UAAUwmB,MAChBzhC,OAAQ,GACRC,OAAQ,CAAC,IAGbwC,OAAQ,IAIhB,GAlBA,E,CAoBMs/B,eAAAA,G,OAAN,gBACE,OAAO6I,GAAoBC,kBAAkBpkC,KAAKuvB,IAChD,MAAM,YAAE/B,EAAW,gBAAE3C,EAAe,QAAE2I,EAAO,QAAEtX,GAAYqT,EAAE4F,mBAAqB,CAAC,EAC7E0P,EAAY,CAACrX,EAAauO,GAAsBlR,IAUtD,OARI2I,aAAAA,EAAAA,EAAS1wB,QACX+hC,EAAU5yB,KAAKuhB,EAAQ1wB,QAGrBoZ,aAAAA,EAAAA,EAASlgB,SACX6oC,EAAU5yB,KAAKiK,EAAQlc,KAAI,EAAGG,MAAK2b,WAAUhlB,WAAY,GAAGqJ,IAAM2b,KAAYhlB,OAAUmZ,KAAK,OAGxF,CACLnZ,MAAOJ,KAAKM,UAAU,IAAEF,MAAOJ,KAAKM,UAAUu4B,IAAOA,IACrDxxB,KAAM8mC,EAAU50B,KAAK,OACtB,GAEL,GAlBA,E,CAoBM4rB,cAAAA,G,OAAN,gBACE,MAAO,CACLjkC,OAAQ,UACRD,QAAS,KAEb,GALA,E,CAvDAvB,WAAAA,G,IAIEy3B,EAHA/1B,MAAMozB,GAAgCtxB,KAAMsxB,GAAgC5wB,KAE5E,MAAMuzB,EAAUx3B,EAAYI,IAAIJ,EAAYa,KAAKG,oBAAsB,CAAC,GACxEw2B,EAAAA,GAAQwW,YAARxW,EAAQwW,UAAc,IAGtBxW,EAAQwW,UAAYxW,EAAQwW,UAAUrkC,KAAKuvB,GAAiB,IAC1D6B,UAAWJ,GAAU0P,YAClBnR,KAGLl5B,EAAYQ,IAAIR,EAAYa,KAAKG,kBAAmBw2B,EACtD,ECvDK,SAASiX,GACdnW,EACAgG,GAEA,MAAM,kBAAEQ,GAAsBR,EAExBoQ,GAAqBlO,EAAAA,GAAAA,WAASmO,EAAAA,GAAAA,OAAM7P,GAAoB,CAC5D3H,YAAaoD,GAAsBjC,EAAa,eAChD9D,gBAAiB+F,GAAsBjC,EAAa,qBAIhDsW,EAAgB,MAAYnU,eAAe,UAAWnC,GAAiCxE,MAAMjO,QAAQlc,KACzG,EAAGG,MAAK2b,WAAUhlB,YAAa,CAAEqJ,MAAK2b,WAAUhlB,YAQlD,OALAiuC,EAAmB7oB,SAAUgpB,EAAAA,GAAAA,QAC3B,IAAKH,EAAmB7oB,SAAW,MAAQ+oB,IAC3C,EAAG9kC,MAAK2b,WAAUhlB,WAAY,GAAGqJ,IAAM2b,IAAWhlB,MAG7CiuC,CACT,C,yHCpBO,MAAMI,WAAkBjU,GAAAA,GAc7BzF,MAAAA,GACEz2B,KAAKu2B,SAAS,CAAE6Z,MAAOpwC,KAAKqwC,YAC9B,CAEAA,QAAAA,GACE,OAAOlB,GAAoBM,OAAOzvC,KAAKswC,gBACzC,CAEA,oBAAOA,CAAc3Q,G,IAoBfQ,EAnBJ,MAAM,MAAEpD,EAAK,kBAAEoD,EAAiB,UAAE/D,GAAcuD,EAE1C+P,EAAqB,CACzB3S,QACAoD,kBAAmB,CACjB3H,YAAa2H,EAAkB3H,YAC/B3C,gBAAiBsK,EAAkBtK,iBAErCuG,aAeF,OAXI+D,EAAkB3B,UACpBkR,EAASvP,kBAAkB3B,QAAU,CACnC1wB,MAAOqyB,EAAkB3B,QAAQ1wB,SAKR,QAAzBqyB,EAAAA,EAAkBjZ,eAAlBiZ,IAAAA,OAAAA,EAAAA,EAA2Bn5B,UAC7B0oC,EAASvP,kBAAkBjZ,QAAUiZ,EAAkBjZ,SAGlDwoB,CACT,CAEAY,aAAAA,GACE,MAAM,KAAE3Q,EAAI,2BAAE4Q,GAA+BvwC,KAAKm1B,MAElD,OAAOgb,GAAUG,cAAc,CAC7BvT,MAAO4C,EAAK5C,MACZoD,kBAAmBoQ,EACf5Q,EAAKQ,kBACL2P,GAAgC9vC,KAAM2/B,GAC1CvD,UAAWuD,EAAKvD,WAEpB,CAnDAh7B,WAAAA,CAAY+zB,GACVryB,MAAMqyB,GARR,QAAUqb,sBAAsB,IAAIC,GAAAA,GAAyBzwC,KAAM,CACjE0wC,cAAe,CAAC,cAAe,kBAAmB,WAClDC,iCAAkC,KAChC3wC,KAAKy2B,QAAQ,KAyDjB,QAAOzoB,WAAU,KACfmG,GAAkB,qCAAsC,CAAEy8B,eAAgB5wC,KAAKm1B,MAAMib,QAEhFpwC,KAAKm1B,MAAMib,MAGdjB,GAAoBS,eAAe5vC,KAAKswC,iBAFxCnB,GAAoBQ,YAAY3vC,KAAKswC,iBAKvCtwC,KAAKu2B,SAAS,CAAE6Z,OAAQpwC,KAAKm1B,MAAMib,OAAQ,IA3D3CpwC,KAAK43B,sBAAqB,IAAM53B,KAAKy2B,UACvC,EA6DA,GAzEW0Z,GAyEGrY,aAAY,EAAGC,YAC3B,MAAM7tB,GAASC,EAAAA,EAAAA,YAAWlC,KACpB,MAAEmoC,GAAUrY,EAAMjxB,WAExB,OACE,kBAACoF,EAAAA,WAAUA,CACTxB,UAAW0lC,EAAQlmC,EAAO2mC,YAAc3mC,EAAO4mC,eAC/C5sC,KAAMksC,EAAQ,WAAa,OAC3B/8B,QAAQ,YACR1J,KAAK,KACLwC,aAAYikC,EAAQ,aAAe,WACnCxnC,QAASwnC,EAAQ,aAAe,WAChCW,iBAAiB,MACjB/iC,QAAS+pB,EAAM/pB,S,IAMvB,MAAM/F,GAAY,KAAO,CACvB4oC,YAAazoC,EAAAA,GAAG;;;IAIhB0oC,eAAgB1oC,EAAAA,GAAG;;MC3GR4oC,GAAiE,SAAUhhC,EAAGof,GACzF,MAAM6hB,EAAS9B,GAAoBM,OAAOU,GAAUG,cAActgC,IAC5DkhC,EAAS/B,GAAoBM,OAAOU,GAAUG,cAAclhB,IAElE,OAAI6hB,GAAUC,EACLniB,GAAc/e,EAAElC,MAAOshB,EAAEthB,OAG9BojC,EACK,EAGLD,GACM,EAGH,CACT,EC4BME,GAAiB,QAEhB,MAAMC,WAAoClV,GAAAA,GAC/C,uBAAOmV,CAAiB1R,GACtB,MAAO,aAAaA,EAAK5C,SAAS4C,EAAK79B,OACzC,CAEA,6BAAOwvC,CAAuB7hC,GAC5B,OAAOA,IAAWy+B,GAAWqD,KATN,MADG,sCAW5B,CAwCAjb,UAAAA,GAEE,MAAMmQ,EAAW5M,GAAAA,GAAWiC,eAAe97B,KAAKm1B,MAAM0G,aAAc77B,MAE9DwxC,EAAc/K,EAAS/N,kBAAiB,CAACC,EAAUC,MAClDD,EAAShC,SAAWiC,EAAUjC,SACjC32B,KAAKyxC,iBACP,IAKFhL,EAAShQ,SAET,MAAMib,EAAa1xC,KAAK2xC,0BAClBC,EAAiB5xC,KAAK6xC,+BACtBC,EAAkB9xC,KAAK+xC,0BACvBC,EAAgBhyC,KAAKiyC,8BACrBC,EAAalyC,KAAKmyC,2BAExB,MAAO,KACLD,EAAW1W,cACXwW,EAAcxW,cACdsW,EAAgBtW,cAChBoW,EAAepW,cACfkW,EAAWlW,cAEXgW,EAAYhW,aAAa,CAE7B,CAEAmW,uBAAAA,GACE,MAAMlL,EAAW5M,GAAAA,GAAWiC,eAAe97B,KAAKm1B,MAAM0G,aAAc77B,MAC9DoyC,EAAkB3L,EAAStR,MAAMiC,QAEvCqP,EAASlQ,SAAS,CAAEa,QAASC,EAAAA,gBAAgBgb,QAE7C,MAAMC,EAAiB,KACrB7L,EAAShQ,QAAQ,EAMb8b,EAAgBh3B,SAASU,cAC7B,wDAaF,OAVKs2B,GACHryC,EAAOe,MACL,IAAIuB,MAAM,oGAId+vC,SAAAA,EAAez7B,iBAAiB,QAASw7B,GACzCC,SAAAA,EAAeC,aAAa,QAAS,oEAG9B,CACLhX,WAAAA,GACE+W,SAAAA,EAAeE,gBAAgB,SAC/BF,SAAAA,EAAenG,oBAAoB,QAASkG,GAC5C7L,EAASlQ,SAAS,CAAEa,QAASgb,GAC/B,EAEJ,CAEAP,4BAAAA,GACE,MAAMa,EAAc7Y,GAAAA,GAAWC,iBAAiB95B,KAAM,eAAgB0uC,IAEtE1uC,KAAK04B,kBAAiB,CAACC,EAAUC,KAC3BD,EAAShL,MAAM3mB,SAAW4xB,EAAUjL,MAAM3mB,QAC5C0rC,EAAY9D,gBAAgBjW,EAAShL,MAAM3mB,OAC7C,IASF,OAAO0rC,EAAYha,kBAAiBia,EAAAA,GAAAA,WANd,CAACha,EAAiCC,KAClDD,EAASmW,cAAelW,aAAAA,EAAAA,EAAWkW,aACrC9uC,KAAKyxC,iBACP,GAG0D/C,GAAiBO,gBAC/E,CAEA8C,uBAAAA,GACE,MAAMa,EAAiB/Y,GAAAA,GAAWC,iBAAiB95B,KAAM,kBAAmBmuC,IAEtE9nC,EAAOrG,KAAKm1B,MAAM9uB,KAElBwsC,EAAgB,CAACla,EAAoCC,KACrDD,EAASlpB,UAAWmpB,aAAAA,EAAAA,EAAWnpB,SACjCpJ,EAAKkwB,SAAS,CACZuc,gBAAiB1B,GAA4BE,uBAAuB3Y,EAASlpB,SAEjF,EAKF,OAFAojC,EAAcD,EAAezd,OAEtByd,EAAela,iBAAiBma,EACzC,CAEAZ,2BAAAA,GACE,MAAMc,EAAiBlZ,GAAAA,GAAWC,iBAAiB95B,KAAM,mBAAoBquC,IAE7E,IAAK0E,EAAevM,SAGlB,OAFAxmC,KAAKu2B,SAAS,CAAE+X,YAAY,IAErB,CACL9S,YAAal5B,GAIjB,MAAMuwC,EAAgB,CAACla,EAAoCC,KACrDD,EAAS2V,cAAe1V,aAAAA,EAAAA,EAAW0V,cACrCtuC,KAAKu2B,SAAS,CAAE+X,WAAoC,OAAxB3V,EAAS2V,aAGrCtuC,KAAKyxC,iBAAgB,GACvB,EAKF,OAFAoB,EAAcE,EAAe5d,OAEtB4d,EAAera,iBAAiBma,EACzC,CAEAV,wBAAAA,GACE,MAAMa,EAAkBnZ,GAAAA,GAAWC,iBAAiB95B,KAAM,UAAWg6B,IAC/D+Y,EAAiBlZ,GAAAA,GAAWC,iBAAiB95B,KAAM,mBAAoBquC,IAG7E,OAAO2E,EAAgBta,kBAAiB,KACE,OAApCqa,EAAe5d,MAAMmZ,YAEvBtuC,KAAKyxC,iBAAgB,EACvB,GAEJ,CAEAwB,cAAAA,CAAexM,GACb,MAAM,gBAAEyM,GAAoBlzC,KAAKm1B,MAE3Bge,EAAiB,CACrB3a,YAAaoD,GAAsB57B,KAAM,eACzC61B,gBAAiB+F,GAAsB57B,KAAM,mBAC7Co8B,UAAWvC,GAAAA,GAAWC,iBAAiB95B,KAAM,sBAAuBi8B,IAAwB9G,MAAMiH,WAG9FzO,EAAQ8Y,EAAStR,MAAMhyB,QAC1B6H,KAAI,CAAC8M,EAAQ5M,IAAMgoC,EAAgBp7B,EAAQ5M,EAAGioC,KAC9CzuC,OAAOoX,SAEV,OAAO9b,KAAKozC,YAAYzlB,GAAOoC,KAAK/vB,KAAKm1B,MAAMke,YACjD,CAEAC,iBAAAA,CAAkBC,GAChB,MAAM,MAAE5lB,GAAU3tB,KAAKm1B,MAEvB,OAAKoe,EAASvsC,QAAU2mB,EAAM3mB,SAAWusC,EAASvsC,UAI1CikC,EAAAA,GAAAA,SAAQtd,EAAO4lB,EACzB,CAEA9B,eAAAA,CAAgB+B,GAAc,GAC5B,MAAM/M,EAAW5M,GAAAA,GAAWiC,eAAe97B,KAAKm1B,MAAM0G,aAAc77B,MAEpE,GAAIymC,EAAStR,MAAMwB,QACjB,OAGF,GAAI8P,EAAStR,MAAMl0B,MAEjB,YADAjB,KAAKyzC,iBAAiBhN,EAAStR,MAAMl0B,OAIvC,MAAMsyC,EAAWvzC,KAAKizC,eAAexM,GAErC,IAAK+M,IAAgBxzC,KAAKszC,kBAAkBC,GAC1C,OAKF,GAFAvzC,KAAKu2B,SAAS,CAAE5I,MAAO4lB,KAElBvzC,KAAKm1B,MAAMxH,MAAM3mB,OAEpB,YADAhH,KAAK0zC,mBAIP,MAAMC,EAAY3zC,KAAKm1B,MAAMxH,MAAM3iB,KAAK20B,IACtC,MAAMiU,EAAWtI,GAAgB3L,EAAKvD,UAAW,CAC/CuD,OACAgD,cAAe3iC,KAAKm1B,MAAMwN,cAAchL,KAAK,KAAMgI,EAAM3/B,KAAKm1B,MAAMxH,SAOtE,OAJI3tB,KAAKm1B,MAAMmZ,YACbtuC,KAAK6zC,gBAAgBD,GAGhB,IAAIE,GAAAA,GAAiB,CAC1B3oC,IAAKimC,GAA4BC,iBAAiB1R,GAClDt5B,KAAMutC,GACN,IAGH5zC,KAAKm1B,MAAM9uB,KAA4BkwB,SAAS,CAC/Cwd,SAAU5C,GACVphC,SAAU4jC,GAEd,CAEAE,eAAAA,CACED,GAEA,MAAMhU,EAAMgU,EAASI,iBAAiB5wB,IAA8B8F,I,IAC9DA,EAAJ,GAAwB,QAApBA,EAAAA,EAAM1T,QAAQgoB,cAAdtU,IAAAA,OAAAA,EAAAA,EAAsBliB,OACxB,OAGF,MAAMitC,EAAWpa,GAAAA,GAAWmO,YAAY4L,EAAUE,GAAAA,KAC1C3oC,IAAK+oC,GAAgBD,EAAS9e,MAChCgf,EAAOta,GAAAA,GAAWmO,YAAYiM,EAAUG,GAAAA,IAExCC,EAAmBF,EAAKhf,MAAMplB,SAASrL,QAAQ4vC,GAAMA,EAAEnf,MAAMhqB,MAAQ+oC,IAEtEG,EAAiBrtC,OAGpBmtC,EAAK5d,SAAS,CAAExmB,SAAUskC,IAF1Br0C,KAAK0zC,kBAGP,IAGFE,EAAShc,sBAAqB,IACrB,KACLgI,EAAIpE,aAAa,GAGvB,CAEA4X,WAAAA,CAAYzlB,GACV,MAAM4mB,EAAmB1a,GAAAA,GAAWC,iBAAiB95B,KAAM,eAAgB0uC,KACrE,WAAEI,GAAeyF,EAAiBpf,MAExC,IAAK2Z,EACH,OAAOnhB,EAGT,MAAM6mB,EAAU1F,EACbr7B,MAAM,KACNzI,KAAKypC,GAAMA,EAAE/rB,SACbhkB,OAAOoX,SACP9Q,KAAK0pC,IACJ,IACE,OAAO,IAAIC,OAAOD,EACpB,CAAE,SACA,OAAO,IACT,KAEDhwC,OAAOoX,SAEV,OAAO6R,EAAMjpB,QAAO,EAAGoJ,WAAY0mC,EAAQ5mB,MAAM8mB,GAAMA,EAAEn1C,KAAKuO,MAChE,CAEA4lC,gBAAAA,GACG1zC,KAAKm1B,MAAM9uB,KAA4BkwB,SAAS,CAC/Cwd,SAAU,QACVhkC,SAAU,CACR,IAAI+jC,GAAAA,GAAiB,CACnBztC,KAAM,IAAI2nC,GAAgB,CACxBrrC,QAAS,mBAKnB,CAEA8wC,gBAAAA,CAAiBxyC,GACdjB,KAAKm1B,MAAM9uB,KAA4BkwB,SAAS,CAC/Cwd,SAAU,QACVhkC,SAAU,CACR,IAAI+jC,GAAAA,GAAiB,CACnBztC,KAAM,IAAI4nC,GAAgB,CACxBtrC,QAAS1B,EAAM0B,SAAW1B,EAAM6E,iBAK1C,CAEA,gBAAOgyB,EAAU,MAAEC,I,IAEI8B,EADrB,MAAM,KAAExzB,EAAI,aAAEw1B,GAAiB9D,EAAMjxB,YAC/B,QAAE6vB,GAAqDoB,QAAxC8B,EAAAA,GAAAA,GAAWiC,eAAeD,EAAc9D,UAAxC8B,IAAAA,OAAAA,EAAD,EAAmE/yB,WAEvF,OAAO6vB,EAAU,kBAACtV,EAAAA,QAAOA,MAAM,kBAAChb,EAAKyxB,UAAS,CAACC,MAAO1xB,GACxD,CA/UAjF,WAAAA,EAAY,IACV+J,EAAG,aACH0wB,EAAY,cACZ8G,EAAa,gBACbuQ,EAAe,YACfG,IAQAvwC,MAAM,CACJqI,MACA0wB,eACAlO,MAAO,GACPgV,gBACAuQ,kBACAG,YAAaA,GAAerC,GAC5B1C,YAAY,EACZjoC,KAAM,IAAI+tC,GAAAA,GAAmB,CAC3BtB,gBAAiB1B,GAA4BE,uBAAuBnD,GAAoBC,gBACxF2F,SAAU5C,GACVyD,QAAQ,EACRC,WAAY,CACV,IAAIC,GAAAA,GAAAA,GAAqB,CACvB3pC,IAAK,sBACL4pC,KAAMC,EAAAA,oBAAoBC,aAG9BllC,SAAU,OAId/P,KAAK43B,qBAAqB53B,KAAKs2B,WAAWqB,KAAK33B,MACjD,EC1FK,MAAMk1C,WAAyB7xB,EAAAA,sB,6GACpC,CADW6xB,GACGtwC,OAAO,gBCDhB,MAAMuwC,WAAyB9xB,EAAAA,sB,6GACpC,CADW8xB,GACGvwC,OAAO,gBCDhB,MAAMwwC,WAAmC/xB,EAAAA,sB,6GAC9C,CADW+xB,GACGxwC,OAAO,4BCDhB,MAAMywC,WAA+BhyB,EAAAA,sB,6GAC1C,CADWgyB,GACGzwC,OAAO,uBCDhB,MAAM0wC,WAAiCjyB,EAAAA,qB,0/BAC5C,CADWiyB,GACG1wC,OAAO,yBCuBvB,MAAM2wC,GAAS,IAAI91C,IAA6B,CAC9C,CACE,eACA0E,OAAOC,OAAO,CACZoxC,UAAW,eACXznC,KAAM,gBACNnF,QAAS,IAAM,iEACf6sC,iBAAkBP,MAGtB,CACE,eACA/wC,OAAOC,OAAO,CACZ0J,MAAO,SACPlF,QAAS,EAAGu3B,wB,IAAiCA,E,MAAT,SAAkC,QAAzBA,EAAAA,EAAkB3B,eAAlB2B,IAAAA,OAAAA,EAAAA,EAA2BryB,yBAAyB,EACjG2nC,iBAAkBN,MAGtB,CACE,mBACAhxC,OAAOC,OAAO,CACZ0J,MAAO,cACPlF,QAAS,EAAGu3B,qBAAqBpI,KAC/B,MAAMS,EAAc2H,EAAkB3H,aAAeoD,GAAsB7D,EAAO,eAElF,MAAO,aAAanC,GADIuK,EAAkBtK,iBAAmB+F,GAAsB7D,EAAO,oBACjBnzB,wBAAwB4zB,GAAa,EAEhHid,iBAAkBL,MAGtB,CACE,cACAjxC,OAAOC,OAAO,CACZ0J,MAAO,SACPlF,QAAS,EAAGu3B,qBAAqBpI,IAExB,yBADaoI,EAAkB3H,aAAeoD,GAAsB7D,EAAO,iBAGpF0d,iBAAkBJ,MAGtB,CACE,gBACAlxC,OAAOC,OAAO,CACZ0J,MAAO,gBACPlF,QAAS,EAAGu3B,qBAAqBpI,IAExB,6BADaoI,EAAkB3H,aAAeoD,GAAsB7D,EAAO,iBAGpF0d,iBAAkBH,QAgBjB,MAAMI,WAAqBxZ,GAAAA,GA0BhCyZ,UAAAA,GACE,MAAM,iBAAEF,EAAgB,KAAE9V,EAAI,2BAAE4Q,GAA+BvwC,KAAKm1B,MASpE,OAAO,IAAIsgB,EAAiB,CAC1B9V,KARmB,SAChBA,GAAAA,CACHQ,kBAAmBoQ,EACf5Q,EAAKQ,kBACL2P,GAAgC9vC,KAAM2/B,MAM9C,CAtCAv+B,WAAAA,EAAY,KACVwD,EAAI,KACJ+6B,EAAI,QACJ/2B,EAAO,2BACP2nC,IAOA,MAAMqF,EAASL,GAAO9zC,IAAImD,GAC1B,IAAKgxC,EACH,MAAM,IAAIljB,UAAU,uBAAuB9tB,OAG7C9B,MAAM,IAAE8B,OAAM+6B,SAASR,EAAAA,GAAAA,OAAM,CAAC,EAAGyW,EAAQ,CAAEhtC,UAAS2nC,iCAGtD,QAAOviC,WAAU,KACfmG,GAAkB,wCAAyC,CAAEvP,KAAM5E,KAAKm1B,MAAMvwB,OAE9E5E,KAAKggC,aAAahgC,KAAK21C,cAAc,EAAK,GAL5C,EAuBA,GAzCWD,GAyCG5d,aAAY,EAAGC,YAC3B,MAAM7tB,GAASC,EAAAA,EAAAA,YAAWlC,KACpB,UAAEutC,EAAS,MAAE1nC,EAAK,KAAEC,EAAI,QAAEnF,EAAO,KAAE+2B,GAAS5H,EAAMjxB,WAExD,OACE,kBAACsM,EAAAA,OAAMA,CACL1I,UAAWR,EAAO2rC,aAClB1pC,aAAYqpC,GAAa1nC,EACzBuF,QAAQ,UACR1J,KAAK,KACL+S,KAAK,OACL1O,QAAS+pB,EAAM/pB,QACfD,KAAMA,EACNnF,QAASA,aAAAA,EAAAA,EAAU+2B,EAAM5H,GACzBgZ,iBAAiB,OAEhBjjC,EAAAA,IAMT,MAAM7F,GAAY,KAAO,CACvB4tC,aAAcztC,EAAAA,GAAG;;;MC7IZ,MAAM0tC,WAAgC5Z,GAAAA,GAsC3C5F,UAAAA,GACEuD,GAAAA,GACGC,iBAAiB95B,KAAM,eAAgB0uC,IACvCC,eAAe,0DACpB,CAGAoH,2BAAAA,GACE,MAAO,CACLC,UAAW,CAACnc,GAAAA,GAAWC,iBAAiB95B,KAAM,kBAAmBo2B,KACjE6f,aAAc,CACZpc,GAAAA,GAAWC,iBAAiB95B,KAAM,eAAgB0uC,IAClD7U,GAAAA,GAAWC,iBAAiB95B,KAAM,kBAAmBmuC,KAG3D,CAEA,gBAAOrW,EAAU,MAAEC,IACjB,MAAM,KAAE1xB,GAAS0xB,EAAMjxB,WAEvB,OAAO,kBAACT,EAAKyxB,UAAS,CAACC,MAAO1xB,GAChC,CA1DAjF,WAAAA,GACE0B,MAAM,CACJqI,IAAK,uBACL+qC,WAAY,IAAIC,GAAAA,GAAiB,CAC/BH,UAAW,CAET,IAAIzd,GAAoB,CACtBzU,MAAOyU,GAAoBQ,+BAC3BtB,aAAa,OAInBpxB,KAAM,IAAI+qC,GAA4B,CACpCjmC,IAAK,oBACL0wB,aAAc,cACdqX,gBAAiB,CAACp7B,EAAQilB,GAASlH,sBAAuB,CACxDkH,QACAj7B,MAAOgW,EAAOhW,MACdgM,MAAOgK,EAAOhK,MACdqyB,kBAAmB,CACjB3H,YAAa1gB,EAAOhW,MACpB+zB,mBAEFuG,UAAWJ,GAAU0P,aAEvB/I,cAAgBhD,GAAS,CACvB,IAAI+V,GAAa,CAAE9wC,KAAM,gBAAiB+6B,SAC1C,IAAI+V,GAAa,CAAE9wC,KAAM,cAAe+6B,SACxC,IAAI+V,GAAa,CAAE9wC,KAAM,mBAAoB+6B,SAC7C,IAAIwQ,GAAU,CAAExQ,cAKtB3/B,KAAK43B,qBAAqB53B,KAAKs2B,WAAWqB,KAAK33B,MACjD,E,44BC5CK,MAAMo2C,WAAoBla,GAAAA,GAC/B96B,WAAAA,CAAY+zB,GACVryB,MAAM,IACJqI,IAAK,SACL0X,QAAQ,GACLsS,IAIPlnB,GAAAA,KAAAA,QAAO,EACLS,QACApB,WACAjH,WAMArG,KAAKu2B,SAAS,SAAKv2B,KAAKm1B,OAAK,CAAEtS,QAAQ,EAAMnU,QAAOpB,WAAUjH,S,IAGhE0c,GAAAA,KAAAA,SAAQ,KACN/iB,KAAKu2B,SAAS,CAAE1T,QAAQ,GAAQ,GAflC,E,0HAkBA,GAzBWuzB,GAyBJte,aAAY,EAAGC,YACpB,MAAM,OAAElV,EAAM,MAAEnU,EAAK,SAAEpB,EAAQ,KAAEjH,GAAS0xB,EAAMjxB,WAEhD,OACE,oCACGT,GAAQwc,GACP,kBAACwzB,EAAAA,OAAMA,CAAC1sC,KAAK,KAAK+E,MAAOA,EAAOoD,SAAUxE,EAAUgpC,kBAAAA,EAAiBC,QAASxe,EAAMhV,OAClF,kBAAC1c,EAAKyxB,UAAS,CAACC,MAAO1xB,K,ICtC5B,MAAMmwC,WAAyBngB,GAAAA,GAc9BI,MAAAA,G,sBAAN,YACE,GAAI,EAAKtB,MAAMwB,QACb,OAGF,IAAIxzB,EAAiC,GACjClC,EAAQ,KAEZ,EAAKs1B,SAAS,CAAEI,SAAS,EAAMxzB,QAAS,GAAIlC,MAAO,OAEnD,IACEkC,QAAgByzB,EAAAA,GAAAA,eAAc,EAAKC,gBAAgB,CAAC,GACtD,CAAE,MAAOzF,GACPnwB,EAAQmwB,CACV,CAAE,QACA,EAAKmF,SAAS,CAAEI,SAAS,EAAOxzB,UAASlC,SAC3C,CACF,E,mLA9BAG,WAAAA,GACE0B,MAAM,CACJoB,KAAM,WACN4J,MAAO,cACPopB,WAAYhB,GAEZpS,MAAO,cACP6S,SAAS,EACTS,QAASC,EAAAA,gBAAgBgb,MACzB5a,aAAa,GAEjB,E,0HCQK,MAAMgf,WAA8Bva,GAAAA,GAiDzC5F,UAAAA,GACEuD,GAAAA,GACGC,iBAAiB95B,KAAM,eAAgB0uC,IACvCC,eAAe,4D,WAElB,MAAM+H,EAAiB12C,KAAKg0C,iBAAiBkB,GAAgBA,W,WAAE,UAAOhsB,GACpE,EAAKytB,wBAAwBztB,EAAM1T,QAAQmqB,KAC7C,E,iMAFsEzW,G,gCAATgsB,IAI7D,MAAO,KACLwB,EAAelb,aAAa,CAEhC,CAGAua,2BAAAA,GACE,MAAO,CACLC,UAAW,GACXC,aAAc,CACZpc,GAAAA,GAAWC,iBAAiB95B,KAAM,eAAgB0uC,IAClD7U,GAAAA,GAAWC,iBAAiB95B,KAAM,kBAAmBmuC,IACrDtU,GAAAA,GAAWC,iBAAiB95B,KAAM,mBAAoBquC,KAG5D,CAEAsI,uBAAAA,CAAwBhX,GAMtB3/B,KAAKm1B,MAAMyhB,OAAO3oC,KAAK,CACrBS,MAAOixB,EAAK7xB,MACZzH,KAAMilC,GAAgB3L,EAAKvD,UAAW,CACpCgO,kBAAkB,EAClBnG,gBAAiB,QACjBtE,OACAgD,cAXkB,IAAM,CAC1B,IAAI+S,GAAa,CAAE9wC,KAAM,cAAe+6B,SACxC,IAAI+V,GAAa,CAAE9wC,KAAM,mBAAoB+6B,aAYjD,CAEA,gBAAO7H,EAAU,MAAEC,IACjB,MAAM,KAAE1xB,EAAI,OAAEuwC,GAAW7e,EAAMjxB,WAE/B,OACE,oCACE,kBAACT,EAAKyxB,UAAS,CAACC,MAAO1xB,IACvB,kBAACuwC,EAAO9e,UAAS,CAACC,MAAO6e,IAG/B,CApGAx1C,WAAAA,GACE0B,MAAM,CACJqI,IAAK,oBACL+qC,WAAY,IAAIC,GAAAA,GAAiB,CAAEH,UAAW,CAAC,IAAIQ,MACnDnwC,KAAM,IAAI+qC,GAA4B,CACpCjmC,IAAK,iBACL0wB,aAAc,WACdqX,gBAAkBp7B,IAEhB,MAAM,MAAEilB,EAAK,MAAEj7B,EAAK,UAAEs6B,EAAS,kBAAE+D,GAAsBz+B,KAAKC,MAAMmW,EAAOhW,OAEzE,MAAO,CACLi7B,QACAj7B,QACAgM,MAAOgK,EAAOhK,MACdqyB,oBACA/D,YACD,EAEHiX,YAAa,CAACrjC,EAAGof,IAAML,GAAc/e,EAAElC,MAAOshB,EAAEthB,OAChD60B,cAAgBhD,IACd,MAAM53B,EAA2C,CAC/C,IAAI2tC,GAAa,CAAE9wC,KAAM,cAAe+6B,OAAM4Q,4BAA4B,IAC1E,IAAImF,GAAa,CAAE9wC,KAAM,mBAAoB+6B,OAAM4Q,4BAA4B,KAgBjF,OAbI5Q,EAAKQ,kBAAkB3B,SACzBz2B,EAAQkV,KACN,IAAIy4B,GAAa,CACf9wC,KAAM,eACN+6B,OACA/2B,QAAS,IAAM,oCACf2nC,4BAA4B,KAKlCxoC,EAAQkV,KAAK,IAAIkzB,GAAU,CAAExQ,OAAM4Q,4BAA4B,KAExDxoC,CAAO,IAGlB6uC,OAAQ,IAAIR,KAGdp2C,KAAK43B,qBAAqB53B,KAAKs2B,WAAWqB,KAAK33B,MACjD,E,eCxDK,SAAS62C,IAAgB,QAAE1zC,EAAO,WAAE2zC,EAAU,MAAEh1C,EAAK,SAAE6e,EAAQ,UAAEo2B,IACtE,MAAM7sC,GAASC,EAAAA,EAAAA,YAAWlC,IACpBC,GAAQ8V,EAAAA,EAAAA,cAEPg5B,EAA4BC,IAAiCnwC,EAAAA,EAAAA,UAAiB,IAC9EowC,EAAgBC,IAAqBrwC,EAAAA,EAAAA,UAAiB,GAEvDswC,EAA6BF,EAAiBF,EAE9CK,GAAoBxmB,EAAAA,EAAAA,QAAuB,OAEjDymB,EAAAA,GAAAA,GAAkB,CAChBpmB,IAAKmmB,EACLE,SAAU,KACR,MAAMC,EAAUH,EAAkBtmB,QAC9BymB,GACFL,EAAkBK,EAAQC,YAC5B,IAIJ,MAAMC,EAAcv0C,EAAQuB,QAAQoc,GAAMg2B,EAAW/+B,SAAS+I,EAAEhf,SAC1D61C,EAAex0C,EAAQuB,QAAQoc,IAAOg2B,EAAW/+B,SAAS+I,EAAEhf,SAUlE,OARA2S,EAAAA,EAAAA,YAAU,KACR,MAAM,SAAExL,GAAaf,EAAMgB,WACrBH,EAAO2uC,EAAY1sC,KAAK8M,GAAWA,EAAOhK,OAASgK,EAAO/O,MAAQ,KAAIkS,KAAK,KAC3E28B,GAAYC,EAAAA,EAAAA,aAAY9uC,EAAME,GAAUiY,MAE9C+1B,EAA8BW,EADC,GACoCF,EAAY1wC,OAAO,GACrF,CAAC0wC,EAAaxvC,IAGf,kBAAC4vC,EAAAA,MAAKA,CAAChqC,MAAM,mBACX,kBAACtD,MAAAA,CAAI0mB,IAAKmmB,EAAmB3sC,UAAWR,EAAOwK,WAC5C0iC,EACC,oCACE,kBAACxa,EAAAA,iBAAgBA,CAACzwB,aAAW,kBAAkBhJ,QAASu0C,EAAa51C,MAAOA,EAAO6e,SAAUA,IAC7F,kBAACM,EAAAA,OAAMA,CACL9U,aAAW,wBACXzB,UAAWR,EAAOqpB,OAClB1G,YAAY,eACZ1pB,QAASw0C,EACT71C,MAAOA,GAAS61C,EAAa/pB,MAAMke,GAAMA,EAAEhqC,QAAUA,IAASA,EAAQ,KACtE6e,SAAWo3B,I,IAAsBA,E,OAATp3B,EAAwB,QAAfo3B,EAAAA,aAAAA,EAAAA,EAAUj2C,aAAVi2C,IAAAA,EAAAA,EAAmB,MAAM,EAC1DC,aAAAA,KAIJ,kBAAC/2B,EAAAA,OAAMA,CACL9U,aAAW,kBACXzB,UAAWR,EAAOqpB,OAClBzxB,MAAOA,EACP+qB,YAAY,eACZ1pB,QAASA,EACTwd,SAAWo3B,GAAap3B,GAASo3B,aAAAA,EAAAA,EAAUj2C,QAASm2C,GAAgBzhB,eACpEwhB,aAAAA,IAGJ,kBAACE,EAAAA,cAAaA,CACZC,kBAAAA,EACApB,UAAWA,EACXqB,YAAY,EACZC,kBAAmB/1C,EACnBsG,QAAQ,iCAKlB,CAEA,MAAMX,GAAaC,IAA0B,CAC3CwM,UAAWtM,EAAAA,GAAG;;WAELF,EAAMyG,QAAQ;IAEvB4kB,OAAQnrB,EAAAA,GAAG;iBACIF,EAAMyG,QAAQ;+bCzExB,MAAMspC,WAAwB5hB,GAAAA,GAuBnCC,UAAAA,GACOt2B,KAAKm1B,MAAMrzB,OACd9B,KAAKu2B,SAAS,CAAEz0B,MAAOm2C,GAAgBzhB,eAE3C,CA4BA8hB,iBAAAA,GACE,MAAM,MAAEx2C,GAAU9B,KAAKm1B,MAGjBrd,EAAS9X,KAAKm1B,MAAMhyB,QACvBuB,QAAQoc,GAAkB,QAAZA,EAAEhf,QAChBxC,MAAMwhB,GAAMpf,KAAKC,MAAMmf,EAAEhf,OAAiBA,QAAUA,IAEvD,GAAIgW,EAAQ,CACV,MAAMygC,EAAc72C,KAAKC,MAAMmW,EAAOhW,OACtC,MAAO,CACLi7B,MAAOwb,EAAYxb,MACnBj7B,MAAOy2C,EAAYz2C,MACnBgM,MAAOyqC,EAAYz2C,MACnB08B,QAAS+Z,EAAY/Z,QAEzB,CAEA,MAAO,CACLzB,MAAO,EACPj7B,MAAOA,EACPgM,MAAOhM,EACP08B,aAAS7zB,EAEb,CA1EAvJ,WAAAA,G,MACE0B,MAAM,CACJqI,IAAK,UACLjH,KAAM,UACN4J,MAAO,kBACPopB,WAAYf,GAIZrS,MAAO,gEACP6S,SAAS,IACX,OAaFF,GAAAA,KAAAA,SAAAA,IAAS,YACP,GAAI,EAAKtB,MAAMwB,QACb,OAGF,IAAIxzB,EAAiC,GACjClC,EAAQ,KAEZ,EAAKs1B,SAAS,CAAEI,SAAS,EAAMxzB,QAAS,GAAIlC,MAAO,OAEnD,IACEkC,QAAgByzB,EAAAA,GAAAA,eAAc,EAAKC,gBAAgB,CAAC,GACtD,CAAE,MAAOzF,GACPnwB,EAAQmwB,CACV,CAAE,QACA,EAAKmF,SAAS,CAAEI,SAAS,EAAOxzB,UAASlC,SAC3C,CACF,KAEA0f,GAAAA,KAAAA,YAAY6W,IACVrjB,GAAkB,0CAElB+O,KACAljB,KAAK03B,cAAcF,EAAS,IAlC5Bx3B,KAAK03B,cAAgB13B,KAAK03B,cAAcC,KAAK33B,MAE7CA,KAAK43B,qBAAqB53B,KAAKs2B,WAAWqB,KAAK33B,MACjD,EApBA,GADWi4C,GACJzhB,gBAAgB,OAEvB,GAHWyhB,GAGJO,kBAAkB,GA8EzB,GAjFWP,GAiFJngB,aAAY,EAAGC,YACpB,MAAM7tB,GAASC,EAAAA,EAAAA,YAAWlC,KACpB,QAAE0uB,EAAO,MAAE70B,EAAK,QAAEqB,EAAO,MAAElC,GAAU82B,EAAMjxB,WAE3C2xC,GAAiBluC,EAAAA,EAAAA,UACrB,IACEpH,EAAQ6H,KAAI,EAAG8C,QAAOhM,WACH,QAAVA,EACH,CAAEgM,QAAOhM,SACT,CACEgM,QAEAhM,MAAOJ,KAAKC,MAAMoE,OAAOjE,IAAQA,UAG3C,CAACqB,IAGH,GAAIwzB,EACF,OACE,kBAACmhB,EAAAA,MAAKA,CAAChqC,MAAM,mBACX,kBAACuT,EAAAA,QAAOA,CAAC3W,UAAWR,EAAOiX,WAKjC,GAAIlgB,EACF,OACE,kBAAC62C,EAAAA,MAAKA,CAAChqC,MAAM,mBACX,kBAACtD,MAAAA,CAAIE,UAAWR,EAAOwuC,uBACrB,kBAACzmB,EAAAA,QAAOA,CAAC/pB,MAAM,QAAQ6D,QAAS9K,EAAM6E,YACpC,kBAAC8J,EAAAA,KAAIA,CAAClF,UAAWR,EAAO+tB,UAAW/zB,KAAK,uBAAuByF,KAAK,QAEtE,kBAACuuC,EAAAA,cAAaA,CAACC,kBAAAA,EAAiBpB,UAAWhf,EAAMtB,OAAQ2hB,YAAY,EAAOC,kBAAmB/1C,MAUvG,OACE,kBAACu0C,GAAeA,CACd1zC,QAASs1C,EACT32C,MAAOA,EACPg1C,WARkB,CAAC2B,GACdA,EAAe/qC,MAAM,EAAGuqC,GAAgBO,iBAAiBxtC,KAAI,EAAGlJ,WAAYA,IAOrE62C,CAAcF,GAC1B93B,SAAUoX,EAAMpX,SAChBo2B,UAAWhf,EAAMtB,Q,IAMzB,MAAMxuB,GAAaC,IAA0B,CAC3CiZ,QAAS/Y,EAAAA,GAAG;;;IAIZswC,sBAAuBtwC,EAAAA,GAAG;;IAG1B6vB,UAAW7vB,EAAAA,GAAG;;;aAGHF,EAAMY,OAAO7H,MAAM8H;+HC1IzB,MAAM6vC,WAAmC1c,GAAAA,GA2B9C5F,UAAAA,CAAWqJ,EAAqBkZ,GAC1BlZ,GACF3/B,KAAK84C,cAAcnZ,GAGrB3/B,KAAKu2B,SAAS,CAAElwB,KAAMrG,KAAK+4C,gBAAgBpZ,EAAMkZ,KAE7CA,GACF74C,KAAKg5C,+BAA+BrZ,EAExC,CAEAmZ,aAAAA,CAAcnZ,GACZ,MAAM,YAAEnH,EAAW,gBAAE3C,EAAe,QAAE3O,GAAYyY,EAAKQ,kBAEvD,GAAI3H,EAAa,CACaqB,GAAAA,GAAWC,iBAAiB95B,KAAM,cAAeu4B,IACzDb,cAAcc,EACpC,CAEA,GAAI3C,EAAiB,CACWgE,GAAAA,GAAWC,iBAAiB95B,KAAM,kBAAmBo2B,IAC7DsB,cAAc7B,EACtC,CAEA,GAAI3O,EAAS,CACa2S,GAAAA,GAAWC,iBAAiB95B,KAAM,UAAWg6B,IACrDzD,SAAS,CAAErP,WAC7B,CACF,CAEA6xB,eAAAA,CAAgBpZ,EAAqBkZ,GACnC,MAAM,cAAElW,GAAkB3iC,KAAKm1B,MAEzB8jB,EAA+B,CACnClc,MAAO,EACPj7B,MAAO,GACPq+B,kBAAmB,CAAC,EACpBryB,MAAO9N,KAAKk5C,aACZ9c,UAAWJ,GAAU0P,YAGnB/L,GAAQkZ,IACVI,EAAe9Y,kBAAkB3B,QAAUmB,EAAKQ,kBAAkB3B,SAGpE,MAAMA,EAAU3E,GAAAA,GAAWC,iBAAiB95B,KAAM,UAAWi4C,IAAiB9iB,MAAMrzB,MAEpF,OAAO,IAAImmC,GAA2B,CACpCtI,KAAMsZ,EACNtW,gBAIAv7B,MACGu4B,GAAQkZ,GAAkBra,GAAuB,QAAZA,EAClC,IAAIwE,GAAAA,GAAqB,CACvBnD,MAAO,IAAIhB,GAAAA,GAAiB,CAAE3H,WAAYlB,GAAuB33B,QAAS,KAC1E4kC,gBAAiB,CAAClE,GAAUK,WAE9Bz0B,GAEV,CAEAquC,8BAAAA,CAA+BrZ,GAC7B,MAAMwZ,EAAkBtf,GAAAA,GAAWC,iBAAiB95B,KAAM,UAAWi4C,IAErEj4C,KAAKo5C,MAAMve,IACTse,EAAgBzgB,kBAAiB,CAACC,EAAUC,MACtCD,EAAShC,SAAYgC,EAASx1B,QAAQ6D,SAOrC24B,IAAQ/G,EAAUjC,QAKnBgC,EAAS72B,QAAU82B,EAAU92B,OAC/B9B,KAAKq5C,iBAAiBF,GALtBn5C,KAAKq5C,iBAAiBF,GAMxB,IAGN,CAEAE,gBAAAA,CAAiBF,G,IAQd,EAPD,IAAKA,EAAgBhkB,MAAMrzB,OAAyC,QAAhCq3C,EAAgBhkB,MAAMrzB,MAExD,YADA9B,KAAKs5C,kBAIP,MAAM,MAAEvc,EAAK,MAAEj7B,EAAK,QAAE08B,GAAY2a,EAAgBb,oBAElC,QAAf,EAAAt4C,KAAKm1B,MAAM9uB,YAAX,OAAD,EAAiDykC,WAAW,CAC1D/N,QACAjvB,MAAO,GAAG9N,KAAKk5C,4BAA4Bp3C,IAC3Cq+B,kBAAmB,CAAE3B,YAEzB,CAEA8a,eAAAA,CAAgBC,GAAe,G,IAK5B,EAJGA,GACF1f,GAAAA,GAAWC,iBAAiB95B,KAAM,UAAWg6B,IAAiBqB,QAGhD,QAAf,EAAAr7B,KAAKm1B,MAAM9uB,YAAX,OAAD,EAAiDykC,WAAW,CAC1D/N,MAAO,EACPjvB,MAAO9N,KAAKk5C,aACZ/Y,kBAAmB,CAAE3B,aAAS7zB,IAElC,CAEAuuC,UAAAA,GACE,MAAMrjB,EAAkB+F,GAAsB57B,KAAM,oBAC9C,YAAEirB,GAAgB2K,GAAiBC,GACzC,OAAO5K,GAAe8b,GAAsBlR,EAC9C,CAEA,gBAAOiC,EAAU,MAAEC,IACjB,MAAM,KAAE1xB,GAAS0xB,EAAMjxB,WAEvB,OAAOT,GAAQ,kBAACA,EAAKyxB,UAAS,CAACC,MAAO1xB,GACxC,CA9IAjF,WAAAA,EAAY,KACVu+B,EAAI,cACJgD,EAAa,eACbkW,IAMA/1C,MAAM,CACJ6/B,gBACAt8B,UAAMsE,IAlBV,QAAU6lC,sBAAsB,IAAIC,GAAAA,GAAyBzwC,KAAM,CACjE0wC,cAAe,CAAC,cAAe,mBAC/BC,iCAAmClK,IACjCzmC,KAAKs5C,gBAAwC,gBAAxB7S,EAAStR,MAAMjxB,KAAuB,KAkB7DlE,KAAK43B,qBAAqB53B,KAAKs2B,WAAWqB,KAAK33B,KAAM2/B,EAAMkZ,GAC7D,EAxBA,GADWD,GACJY,aAAa,KCtBf,MAAMC,WAAgCp2B,EAAAA,sB,6GAC3C,CADWo2B,GACG70C,OAAO,yBCAhB,MAAM80C,WAA8Br2B,EAAAA,qBCOpC,SAASs2B,IAAc,OAAE7hC,EAAM,QAAE22B,EAAO,SAAE9tB,I,IAKhCi5B,EAJf,MAAM1vC,GAASC,EAAAA,EAAAA,YAAWlC,KAEnB4xC,EAAaC,IAAkBhzC,EAAAA,EAAAA,WAAS,GACzC8yC,GAAc/oB,EAAAA,EAAAA,QAAyB,MACvC/iB,EAA4B,QAAnB8rC,EAAAA,EAAY7oB,eAAZ6oB,IAAAA,OAAAA,EAAD,EAA2CG,QAAQ,SA0BjE,OAvBAtlC,EAAAA,EAAAA,YAAU,KACR,IAAK3G,GAAS2gC,EAEZ,YADAqL,GAAe,GAIjB,MAAME,EAAe,KACnBF,GAAe,EAAK,EAGhBG,EAAe,KACnBH,GAAe,EAAM,EAMvB,OAHAhsC,EAAMgJ,iBAAiB,aAAckjC,GACrClsC,EAAMgJ,iBAAiB,aAAcmjC,GAE9B,KACLnsC,EAAMs+B,oBAAoB,aAAc6N,GACxCnsC,EAAMs+B,oBAAoB,aAAc4N,EAAa,CACtD,GACA,CAACvL,EAAS3gC,IAGX,oCACE,kBAACmkB,EAAAA,QAAOA,CAAClmB,QAAS+L,EAAOmT,YAAaivB,MAAOzL,GAAWoL,EAAaprC,UAAU,OAC7E,kBAACxC,OAAAA,CAAKvB,UAAWR,EAAOiwC,iBAE1B,kBAACC,EAAAA,SAAQA,CACPlpB,IAAK0oB,EACLlvC,WAAW4B,EAAAA,EAAAA,IAAGpC,EAAOmwC,SAAU,WAAY5L,GAAW,WACtDA,QAASA,EACT3gC,MAAOgK,EAAOhK,MACd6S,SAAU,IAAMA,EAAS7I,EAAOhW,SAIxC,E,6GDnDE,CADW43C,GACG90C,OAAO,sBCqDvB,MAAMqD,GAAaC,IAA0B,CAC3CiyC,cAAe/xC,EAAAA,GAAG;;;IAIlBiyC,SAAUjyC,EAAAA,GAAG;;;;;;;;;;;;;eAaAF,EAAMY,OAAOC,KAAKC;;;eAGlBd,EAAMY,OAAOC,KAAKyJ;;;;eAIlBtK,EAAMY,OAAOC,KAAKyJ;;MCtE1B,SAAS8nC,IAAW,KACzB3a,EAAI,UACJ4a,EAAS,iBACTC,EAAgB,oBAChBC,EAAmB,sBACnBC,IAEA,MAAMxwC,GAASC,EAAAA,EAAAA,YAAWlC,KAEpB,MAAE80B,EAAK,MAAEj7B,GAAU69B,EAEnB92B,EAAQi0B,GAAgBC,GAExB4d,GAAQpwC,EAAAA,EAAAA,UAAQ,KACpB,IAAKgwC,EACH,OAAO,kBAACl5B,EAAAA,QAAOA,CAACu5B,QAAAA,IAGlB,MAAM,aAAEpb,EAAY,KAAErhB,GAASo8B,GACzB,KAAExxC,EAAI,OAAEg7B,IAAWl6B,EAAAA,EAAAA,gBAAesU,EAAftU,CAAqB21B,GAE9C,MAAO,GAAGz2B,IAAOg7B,GAAQ,GACxB,CAACwW,IAEEp3C,GAAUoH,EAAAA,EAAAA,UACd,IAAM,CACJ,CACEuD,MAAO,WACPhM,MAAOmX,GAAc0B,SACrBsQ,YAAcwvB,EAAoB,GAA+D,GAA1D,oBAAoB34C,iCAE7D,CACEgM,MAAO,aACPhM,MAAOmX,GAAc+B,WACrBiQ,YAAcwvB,EAAoB,GAA6D,GAAxD,oBAAoB34C,iCAG/D,CAAC24C,EAAqB34C,IAGxB,OACE,kBAAC0I,MAAAA,CAAIE,UAAWR,EAAOwK,UAAWjK,cAAa,eAAe3I,KAC5D,kBAACoN,KAAAA,CAAG2rC,MAAO,CAAEhyC,SAAS6B,UAAWR,EAAOwE,MAAOA,MAAO,GAAG8rC,MAAqBG,KAC3EA,GAGH,kBAACnwC,MAAAA,CAAIE,UAAWR,EAAO4wC,gBACrB,kBAACnB,GAAaA,CAAC7hC,OAAQ3U,EAAQ,GAAIsrC,QAASgM,EAAoB,GAAI95B,SAAU+5B,IAC9E,kBAACf,GAAaA,CAAC7hC,OAAQ3U,EAAQ,GAAIsrC,QAASgM,EAAoB,GAAI95B,SAAU+5B,KAItF,CAEA,MAAMzyC,GAAaC,IAA0B,CAC3CwM,UAAWtM,EAAAA,GAAG;;;;;wBAKQF,EAAMY,OAAOmI,WAAW8pC;eACjC7yC,EAAMyG,QAAQ;wBACLzG,EAAMY,OAAOkyC,OAAOC;;;IAI1CvsC,MAAOtG,EAAAA,GAAG;;;;kBAIMF,EAAMyG,QAAQ;IAE9BmsC,eAAgB1yC,EAAAA,GAAG;;;;4BAIOF,EAAMY,OAAOkyC,OAAOC;eACjC/yC,EAAMyG,QAAQ;;;;gCAIGzG,EAAMY,OAAOkyC,OAAO5vC;;;;;+HC5E7C,MAAM8vC,WAAwBhf,GAAAA,GAcnC5F,UAAAA,GACE,MAAMpH,EAAU2K,GAAAA,GAAWC,iBAAiB95B,KAAM,kBAAmBm7C,IAAoBC,aAEzFp7C,KAAKq7C,qBAAqBnsB,EAAQztB,IAAIwX,GAAc0B,UAAWuU,EAAQztB,IAAIwX,GAAc+B,aAEzFhb,KAAKu2B,SAAS,CAAEikB,iBAAkBx6C,KAAKs7C,uBACzC,CAEAD,oBAAAA,CAAqBE,EAA6BC,GAChD,MAAM,KAAE7b,GAAS3/B,KAAKm1B,MAEtBn1B,KAAKu2B,SAAS,CACZkkB,oBAAqB,EAACc,aAAAA,EAAAA,EAAcz5C,SAAU69B,EAAK79B,OAAO05C,aAAAA,EAAAA,EAAgB15C,SAAU69B,EAAK79B,QAE7F,CAEAw5C,mBAAAA,GACE,MAAMzlB,EAAkB+F,GAAsB57B,KAAM,oBAC9C,YAAEirB,GAAgB2K,GAAiBC,GACzC,OAAO5K,GAAe8b,GAAsBlR,EAC9C,CAYA4lB,QAAAA,GACE,OAAOz7C,KAAKm1B,MAAMolB,SACpB,CAEAmB,WAAAA,CAAYnB,GACVv6C,KAAKu2B,SAAS,CAAEgkB,aAClB,CAEA,gBAAOziB,EAAU,MAAEC,IACjB,MAAM,KAAE4H,EAAI,UAAE4a,EAAS,iBAAEC,EAAgB,oBAAEC,GAAwB1iB,EAAMjxB,WAEzE,OACE,kBAACwzC,GAAUA,CACT3a,KAAMA,EACN4a,UAAWA,EACXC,iBAAkBA,EAClBC,oBAAqBA,EACrBC,sBAAuB3iB,EAAM2iB,uBAGnC,CA/DAt5C,WAAAA,EAAY,KAAEu+B,IACZ78B,MAAM,CACJ68B,OACA4a,eAAW5vC,EACX8vC,oBAAqB,EAAC,GAAO,GAC7BD,iBAAkB,KA4BtBE,GAAAA,KAAAA,yBAAyBiB,IACvB37C,KAAKggC,aACH,IAAI0Z,GAAsB,CACxBiC,gBACAhc,KAAM3/B,KAAKm1B,MAAMwK,QAEnB,MA/BF3/B,KAAK43B,qBAAqB53B,KAAKs2B,WAAWqB,KAAK33B,MACjD,EAXA,GADWk7C,GACJU,kBAAkB,KCPpB,MAAMC,WAA6B3f,GAAAA,GACxC,oBAAO4f,CAAcnc,GACnB,MAAO,iBAAiBA,EAAK79B,OAC/B,CAkBAw0B,UAAAA,GACE,MAAM,WAAEylB,EAAU,gBAAEC,GAAoBh8C,KAAKm1B,MAEvC8mB,EAAgBD,EAAgBhI,iBAAiB5wB,IAA8B8F,I,IACzEA,EASN6yB,EATJ,MAAM9wC,EAAwB,QAApBie,EAAAA,EAAM1T,QAAQgoB,cAAdtU,IAAAA,OAAAA,EAAAA,EAAuB,GAEjC,IAAKje,EAEH,YADA8wC,EAAWL,YAAY,CAAElc,aAAc,EAAGrhB,KAAM,UAIlD,MAAMqhB,EAAejC,GAAoBtyB,EAAG,iBAAmB,GAExC,QAAnB8wC,EAAAA,EAAWN,kBAAXM,IAAAA,OAAAA,EAAAA,EAAuBvc,gBAAiBA,GAC1Cuc,EAAWL,YAAY,CACrBlc,eACArhB,KAAMlT,EAAEsU,OAAO,GAAG/a,OAAO2Z,MAAQ,SAErC,IAGF,MAAO,KACL89B,EAAczgB,aAAa,CAE/B,CAEA,gBAAO1D,EAAU,MAAEC,IACjB,MAAM7tB,GAASC,EAAAA,EAAAA,YAAWlC,KACpB,WAAE8zC,EAAU,gBAAEC,GAAoBjkB,EAAMjxB,YACxC,oBAAE2zC,GAAwBsB,EAAWj1C,WACrCo1C,EAAazB,EAAoB,IAAMA,EAAoB,GAEjE,OACE,kBAACjwC,MAAAA,CAAIE,WAAW4B,EAAAA,EAAAA,IAAGpC,EAAOwK,UAAWwnC,GAAc,aACjD,kBAAC1xC,MAAAA,CAAIE,UAAWR,EAAO6xC,YACrB,kBAACA,EAAWjkB,UAAS,CAACC,MAAOgkB,KAE/B,kBAACvxC,MAAAA,CAAIE,UAAWR,EAAO8xC,iBACrB,kBAACA,EAAgBlkB,UAAS,CAACC,MAAOikB,KAI1C,CA1DA56C,WAAAA,EAAY,KACVu+B,EAAI,cACJgD,IAKA7/B,MAAM,CACJqI,IAAK,oBACL4wC,WAAY,IAAIb,GAAgB,CAAEvb,SAClCqc,gBAAiB,IAAI/T,GAA2B,CAAEtI,OAAMgD,oBAG1D3iC,KAAK43B,qBAAqB53B,KAAKs2B,WAAWqB,KAAK33B,MACjD,EA+CF,MAAMiI,GAAaC,IAA0B,CAC3CwM,UAAWtM,EAAAA,GAAG;;;kBAGE+oC;;;;;;0BAMQjpC,EAAMY,OAAO0J,QAAQ6P;;;;;;;;oBAQ3B8uB;;IAGlB4K,WAAY3zC,EAAAA,GAAG;aACJ8yC,GAAgBU;IAE3BI,gBAAiB5zC,EAAAA,GAAG;;;;;;;MCxGf,SAAS+zC,IAAgC,MAAEruC,IAChD,MAAM8wB,EAAW,8BAEjB,OAAO,IAAIC,GAAAA,GAAiB,CAC1B3H,WAAYlB,GACZ33B,QAAS,CACP,CACE4/B,MAAO,oBAAoBW,KAAY9wB,IACvCgxB,UAAW,UACXf,cAAe,mBACfC,cAAe,IAAIY,KACnBJ,QAAS,CAAC1wB,MAIlB,CCqCA,MAEaqjC,GAAiB,QAEvB,MAAMiL,WAA6BlgB,GAAAA,GACxC,uBAAOmV,CAAiB1R,GACtB,MAAO,aAAaA,EAAK5C,SAAS4C,EAAK79B,OACzC,CA2CAw0B,UAAAA,GACEt2B,KAAKq8C,4BAEL,MAAMC,EAAat8C,KAAKu8C,2BAElB7K,EAAa1xC,KAAK2xC,0BAClBC,EAAiB5xC,KAAK6xC,+BACtBC,EAAkB9xC,KAAK+xC,0BACvBC,EAAgBhyC,KAAKiyC,8BACrBC,EAAalyC,KAAKmyC,2BAExB,MAAO,KACLD,EAAW1W,cACXwW,EAAcxW,cACdsW,EAAgBtW,cAChBoW,EAAepW,cACfkW,EAAWlW,cACX8gB,EAAW9gB,aAAa,CAE5B,CAEA6gB,yBAAAA,CAA0B7I,GAAc,GACtC,MAAM1J,EAAU9pC,KAAKm1B,MAAM0K,MAAMnH,kBAAkBC,I,IAC7CA,GAAa,QAAbA,EAAAA,EAASvxB,YAATuxB,IAAAA,OAAAA,EAAAA,EAAexD,SAAUkJ,EAAAA,aAAame,UAI1C1S,EAAQtO,cAERx7B,KAAKyxC,gBAAgB+B,GAErBxzC,KAAKu2B,SAAS,CAAEjf,WAAW,IAAQ,GAEvC,CAEAilC,wBAAAA,GAGE,OAFwB1iB,GAAAA,GAAWC,iBAAiB95B,KAAM,UAAWi4C,IAE9Cvf,kBAAiB,CAACC,EAAUC,MAC5CD,EAAShC,SAAWiC,EAAUjC,SACjC32B,KAAKy8C,aACP,GAEJ,CAEA9K,uBAAAA,GACE,MAAMW,EAAiB,KACrBtyC,KAAKy8C,aAAa,EAMdlK,EAAgBh3B,SAASU,cAC7B,wDAaF,OAVKs2B,GACHryC,EAAOe,MACL,IAAIuB,MAAM,oGAId+vC,SAAAA,EAAez7B,iBAAiB,QAASw7B,GACzCC,SAAAA,EAAeC,aAAa,QAAS,oEAG9B,CACLhX,WAAAA,GACE+W,SAAAA,EAAeE,gBAAgB,SAC/BF,SAAAA,EAAenG,oBAAoB,QAASkG,EAC9C,EAEJ,CAEAT,4BAAAA,GACE,MAAMa,EAAc7Y,GAAAA,GAAWC,iBAAiB95B,KAAM,eAAgB0uC,IAEtE1uC,KAAK04B,kBAAiB,CAACC,EAAUC,KAC3BD,EAAShL,MAAM3mB,SAAW4xB,EAAUjL,MAAM3mB,QAC5C0rC,EAAY9D,gBAAgBjW,EAAShL,MAAM3mB,OAC7C,IASF,OAAO0rC,EAAYha,kBAAiBia,EAAAA,GAAAA,WANd,CAACha,EAAiCC,KAClDD,EAASmW,cAAelW,aAAAA,EAAAA,EAAWkW,aACrC9uC,KAAKyxC,iBACP,GAG0D/C,GAAiBO,gBAC/E,CAEA8C,uBAAAA,GACE,MAAMa,EAAiB/Y,GAAAA,GAAWC,iBAAiB95B,KAAM,kBAAmBmuC,IACtE9nC,EAAOrG,KAAKm1B,MAAM9uB,KAElBwsC,EAAgB,CAACla,EAAoCC,KACrDD,EAASlpB,UAAWmpB,aAAAA,EAAAA,EAAWnpB,SACjCpJ,EAAKkwB,SAAS,CACZuc,gBAAiBna,EAASlpB,SAAWy+B,GAAWqD,KArJ/B,MADG,wCAwJxB,EAKF,OAFAsB,EAAcD,EAAezd,OAEtByd,EAAela,iBAAiBma,EACzC,CAEAZ,2BAAAA,GACE,MAAMc,EAAiBlZ,GAAAA,GAAWC,iBAAiB95B,KAAM,mBAAoBquC,IAE7EruC,KAAKu2B,SAAS,CAAE+X,WAAgD,OAApCyE,EAAe5d,MAAMmZ,aAUjD,OAAOyE,EAAera,kBARA,CAACC,EAAoCC,KACrDD,EAAS2V,cAAe1V,aAAAA,EAAAA,EAAW0V,cACrCtuC,KAAKu2B,SAAS,CAAE+X,WAAoC,OAAxB3V,EAAS2V,aAErCtuC,KAAKy8C,aAAY,GACnB,GAIJ,CAEAtK,wBAAAA,GACE,MAAMa,EAAkBnZ,GAAAA,GAAWC,iBAAiB95B,KAAM,UAAWg6B,IAC/D+Y,EAAiBlZ,GAAAA,GAAWC,iBAAiB95B,KAAM,mBAAoBquC,IAG7E,OAAO2E,EAAgBta,kBAAiB,KACE,OAApCqa,EAAe5d,MAAMmZ,YAEvBtuC,KAAKy8C,aACP,GAEJ,CAEAA,WAAAA,CAAYjJ,GAAc,GACxBxzC,KAAKu2B,SAAS,CACZjf,WAAW,EACXuoB,MAAO,IAAImD,GAAAA,GAAqB,CAC9BnD,MAAOsc,GAAgC,CAAEruC,MAAO9N,KAAKm1B,MAAMrnB,QAC3Dm1B,gBAAiB,CAAClE,GAAUK,QAIhCp/B,KAAKq8C,0BAA0B7I,EACjC,CAEAF,iBAAAA,CAAkBC,GAChB,MAAM,MAAE5lB,GAAU3tB,KAAKm1B,MAEvB,OAAKoe,EAASvsC,QAAU2mB,EAAM3mB,SAAWusC,EAASvsC,UAI1CikC,EAAAA,GAAAA,SAAQtd,EAAO4lB,EACzB,CAEAN,cAAAA,CAAezV,GACb,MAAMhF,EAAcoD,GAAsB57B,KAAM,eAC1C61B,EAAkB+F,GAAsB57B,KAAM,oBAE9C,MAAE8N,EAAK,gBAAEu0B,EAAe,YAAEgR,GAAgBrzC,KAAKm1B,MAG/CxH,EAAQ6P,EAAOxyB,KAAI,CAACC,EAAG8xB,K,IAERO,EADnB,MAAMA,EAAcryB,EAAEsU,OAAO,GACvBm9B,GAA+B,QAAlBpf,EAAAA,EAAYrX,cAAZqX,IAAAA,OAAAA,EAAAA,EAAqBxvB,KAAU,GAC5Cu4B,EAAYhJ,GAAwBC,EAAaxvB,GAEvD,MAAO,CACLivB,MAAOsF,EAAkBtF,EACzBj7B,MAAO46C,EACP5uC,MAAOu4B,EACPlG,kBAAmB,CACjB3H,cACA3C,kBAEA3O,QAAS,CAAC,CAAE/b,IAAK2C,EAAOgZ,SAAU,IAAKhlB,MAAO46C,KAEhDtgB,UAAWJ,GAAU0P,WACtB,IAGH,OAAO1rC,KAAKozC,YAAYzlB,GAAOoC,KAAKsjB,EACtC,CAEA5B,eAAAA,CAAgB+B,GAAc,GAC5B,IAAKxzC,KAAKm1B,MAAM0K,MAAM1K,MAAM/tB,KAC1B,OAGF,MAAQ+tB,MAAOwnB,EAAY,OAAEnf,EAAM,OAAEc,GAAWt+B,KAAKm1B,MAAM0K,MAAM1K,MAAM/tB,KAEvE,GAAIu1C,IAAiBte,EAAAA,aAAame,QAChC,OAGF,GAAIG,IAAiBte,EAAAA,aAAa77B,MAGhC,YADAxC,KAAKyzC,iBAAiBnV,aAAAA,EAAAA,EAAS,IAIjC,MAAMiV,EAAWvzC,KAAKizC,eAAezV,GAErC,IAAKgW,IAAgBxzC,KAAKszC,kBAAkBC,GAC1C,OAKF,GAFAvzC,KAAKu2B,SAAS,CAAE5I,MAAO4lB,KAElBvzC,KAAKm1B,MAAMxH,MAAM3mB,OAEpB,YADAhH,KAAK0zC,mBAIP,MAAMC,EAAYJ,EAASvoC,KAAK20B,GACvB,IAAImU,GAAAA,GAAiB,CAC1B3oC,IAAKixC,GAAqB/K,iBAAiB1R,GAC3Ct5B,KAAMrG,KAAK48C,cAAcjd,OAI5B3/B,KAAKm1B,MAAM9uB,KAA4BkwB,SAAS,CAC/Cwd,SAAU5C,GACVphC,SAAU4jC,GAEd,CAEAiJ,aAAAA,CAAcjd,GACZ,MAAMiU,EAAW,IAAIiI,GAAqB,CACxClc,OACAgD,cAAe3iC,KAAKm1B,MAAMwN,cAAchL,KAAK,KAAMgI,EAAM3/B,KAAKm1B,MAAMxH,SAGhEiS,EAAMgU,EAASI,iBAAiB5wB,IAA8B8F,I,IACpCA,EAA9B,IAAKlpB,KAAKm1B,MAAMmZ,aAAkC,QAApBplB,EAAAA,EAAM1T,QAAQgoB,cAAdtU,IAAAA,OAAAA,EAAAA,EAAsBliB,QAClD,OAGF,MAAMitC,EAAWpa,GAAAA,GAAWmO,YAAY4L,EAAUE,GAAAA,KAC1C3oC,IAAK+oC,GAAgBD,EAAS9e,MAChCgf,EAAOta,GAAAA,GAAWmO,YAAYiM,EAAUG,GAAAA,IAExCC,EAAmBF,EAAKhf,MAAMplB,SAASrL,QAAQ4vC,GAAMA,EAAEnf,MAAMhqB,MAAQ+oC,IAEtEG,EAAiBrtC,OAGpBmtC,EAAK5d,SAAS,CAAExmB,SAAUskC,IAF1Br0C,KAAK0zC,kBAGP,IASF,OANAE,EAAShc,sBAAqB,IACrB,KACLgI,EAAIpE,aAAa,IAIdoY,CACT,CAEAR,WAAAA,CAAYzlB,GACV,MAAM4mB,EAAmB1a,GAAAA,GAAWC,iBAAiB95B,KAAM,eAAgB0uC,KACrE,WAAEI,GAAeyF,EAAiBpf,MAExC,IAAK2Z,EACH,OAAOnhB,EAGT,MAAM6mB,EAAU1F,EACbr7B,MAAM,KACNzI,KAAKypC,GAAMA,EAAE/rB,SACbhkB,OAAOoX,SACP9Q,KAAK0pC,IACJ,IACE,OAAO,IAAIC,OAAOD,EACpB,CAAE,SACA,OAAO,IACT,KAEDhwC,OAAOoX,SAEV,OAAO6R,EAAMjpB,QAAO,EAAGoJ,WAAY0mC,EAAQ5mB,MAAM8mB,GAAMA,EAAEn1C,KAAKuO,MAChE,CAEA4lC,gBAAAA,GACG1zC,KAAKm1B,MAAM9uB,KAA4BkwB,SAAS,CAC/Cwd,SAAU,QACVhkC,SAAU,CACR,IAAI+jC,GAAAA,GAAiB,CACnBztC,KAAM,IAAI2nC,GAAgB,CACxBrrC,QAAS,mBAKnB,CAEA8wC,gBAAAA,CAAiBxyC,GACdjB,KAAKm1B,MAAM9uB,KAA4BkwB,SAAS,CAC/Cwd,SAAU,QACVhkC,SAAU,CACR,IAAI+jC,GAAAA,GAAiB,CACnBztC,KAAM,IAAI4nC,GAAgB,CACxBtrC,QAAS1B,EAAM0B,SAAW1B,EAAM6E,iBAK1C,CAEA,gBAAOgyB,EAAU,MAAEC,IACjB,MAAM,KAAE1xB,EAAI,UAAEiR,GAAcygB,EAAMjxB,WAElC,OAAOwQ,EACL,kBAAC+J,EAAAA,QAAOA,MAER,kBAAC7W,MAAAA,CAAIqwC,MAAO,CAAEgC,aAAc,QAC1B,kBAACx2C,EAAKyxB,UAAS,CAACC,MAAO1xB,IAG7B,CA/WAjF,WAAAA,EAAY,IACV+J,EAAG,MACH2C,EAAK,gBACLu0B,EAAe,cACfM,IAOA7/B,MAAM,CACJqI,MACA2C,QACAu0B,kBACA1U,MAAO,GACPrW,WAAW,EACXuoB,MAAO,IAAImD,GAAAA,GAAqB,CAC9BnD,MAAOsc,GAAgC,CAAEruC,UACzCm1B,gBAAiB,CAAClE,GAAUK,MAE9BkP,YAAY,EACZ3L,gBACA0Q,YAAarC,GACb3qC,KAAM,IAAI+tC,GAAAA,GAAmB,CAC3BtB,gBAjCmB,MAkCnBiB,SAAU5C,GACVyD,QAAQ,EACRC,WAAY,CACV,IAAIC,GAAAA,GAAAA,GAAqB,CACvB3pC,IAAK,sBACL4pC,KAAMC,EAAAA,oBAAoBC,aAG9BllC,SAAU,OAId/P,KAAK43B,qBAAqB53B,KAAKs2B,WAAWqB,KAAK33B,MACjD,EChGK,MAAM88C,WAAmCz5B,EAAAA,sB,6GAC9C,CADWy5B,GACGl4C,OAAO,4BCDhB,MAAMm4C,WAAqC15B,EAAAA,sB,6GAChD,CADW05B,GACGn4C,OAAO,8BCDhB,MAAMo4C,WAAmC35B,EAAAA,sB,6GAC9C,CADW25B,GACGp4C,OAAO,4BC0BvB,MAAMq4C,GAA0BhzC,IAC9B,MAAMC,GAASC,EAAAA,EAAAA,YAAWlC,KAEpB,QAAEi1C,EAAO,QAAE9X,GAzBnB,UAAmB,OAAExiC,EAAM,MAAEkL,EAAK,UAAEqvC,EAAS,UAAEC,EAAS,QAAEC,IACxD,MAAMC,EAA+B,aAAX16C,EAGpB26C,EAA+B,aAAX36C,EAG1B,MAAO,CACLs6C,QAAS,CACPhB,WAAYoB,EACZ10C,QARoB00C,EAA0D,UAAUxvC,sBAAhD,YAAYA,oBASpDE,QAASsvC,EAAoBD,EAAUF,GAEzC/X,QAAS,CACP8W,WAAYqB,EACZ30C,QAVoB20C,EAA0D,UAAUzvC,sBAAhD,YAAYA,oBAWpDE,QAASuvC,EAAoBF,EAAUD,GAG7C,CAM+BI,CAAUvzC,GAEvC,OACE,kBAACO,MAAAA,CAAIE,UAAWR,EAAOwK,WACrB,kBAACtB,EAAAA,OAAMA,CACLzJ,KAAK,KACL+S,KAAK,UACLrJ,QAAS6pC,EAAQhB,WAAa,UAAY,YAC1CuB,gBAAeP,EAAQhB,WACvBxxC,WAAW4B,EAAAA,EAAAA,IAAGpC,EAAOwzC,cAAeR,EAAQhB,YAAc,YAC1DluC,QAASkvC,EAAQlvC,QACjBpF,QAASs0C,EAAQt0C,QACjBmoC,iBAAiB,MACjBtmC,cAAY,yBACb,WAGD,kBAAC2I,EAAAA,OAAMA,CACLzJ,KAAK,KACL+S,KAAK,UACLrJ,QAAS+xB,EAAQ8W,WAAa,UAAY,YAC1CuB,gBAAerY,EAAQ8W,WACvBxxC,WAAW4B,EAAAA,EAAAA,IAAGpC,EAAOyzC,cAAevY,EAAQ8W,YAAc,YAC1DluC,QAASo3B,EAAQp3B,QACjBpF,QAASw8B,EAAQx8B,QACjBmoC,iBAAiB,MACjBtmC,cAAY,yBACb,aAOMmzC,IAAgBtuC,EAAAA,EAAAA,MAAK2tC,IAE5Bh1C,GAAaC,IACV,CACLwM,UAAWtM,EAAAA,GAAG;;;MAIds1C,cAAet1C,EAAAA,GAAG;uBACCF,EAAM21C,MAAMC,OAAOC,eAAe71C,EAAM21C,MAAMC,OAAOC;;;;;MAMxEJ,cAAev1C,EAAAA,GAAG;yBACGF,EAAM21C,MAAMC,OAAOC,WAAW71C,EAAM21C,MAAMC,OAAOC;;;;;iICvEnE,MAAMC,WAA6B9hB,GAAAA,GAKxCshB,SAAAA,CAAUt2B,GACR,MAAM,IAAE/b,EAAG,MAAErJ,GAAU9B,KAAKm1B,MAAMwK,KAAKQ,kBAAkBjZ,QAAS,GAE5D7nB,EAAQ6nB,EAAQ5nB,MAAMi7B,GAAMA,EAAEpvB,MAAQA,IAC5C,OAAK9L,EAIDqtB,GAAgBrtB,EAAMynB,WAAaznB,EAAMyC,MAAM2R,MAAM,KAAKsE,SAASjW,GAC3C,OAAnBzC,EAAMynB,SAAoB,WAAa,WAI5CznB,EAAMyC,QAAUA,EACQ,MAAnBzC,EAAMynB,SAAmB,WAAa,WAGxC,QAZE,OAaX,CAtBA1lB,WAAAA,EAAY,KAAEu+B,IACZ78B,MAAM,CAAE68B,SAuBVwd,GAAAA,KAAAA,aAAY,KACVhpC,GAAkB,0CAElBnU,KAAKggC,aAAa,IAAIgd,GAA2B,CAAErd,KAAM3/B,KAAKm1B,MAAMwK,QAAS,EAAK,IAGpFyd,GAAAA,KAAAA,aAAY,KACVjpC,GAAkB,0CAElBnU,KAAKggC,aAAa,IAAI+c,GAA6B,CAAEpd,KAAM3/B,KAAKm1B,MAAMwK,QAAS,EAAK,IAGtF0d,GAAAA,KAAAA,WAAU,KACRr9C,KAAKggC,aAAa,IAAI8c,GAA2B,CAAEnd,KAAM3/B,KAAKm1B,MAAMwK,QAAS,EAAK,GAnCpF,ECJK,SAASse,IAAgB,QAAE/uB,EAAO,eAAEgvB,EAAc,aAAEC,IACzD,MAAMj0C,GAASC,EAAAA,EAAAA,YAAWlC,IACpBm2C,EAAoBlvB,EAAQvlB,KAAO,EACnC00C,EAAenvB,EAAQvlB,KAAO,EAE9Bf,GAAU2B,EAAAA,EAAAA,UAAQ,K,IAW0B2kB,EACAA,EAV3BA,EACjBA,EAFJ,OAAqB,IAAjBA,EAAQvlB,KACH,YAA8C,QAAlCulB,EAAAA,EAAQztB,IAAIwX,GAAc0B,iBAA1BuU,IAAAA,OAAAA,EAAAA,EAAqCphB,cAClB,QAApCohB,EAAAA,EAAQztB,IAAIwX,GAAc+B,mBAA1BkU,IAAAA,OAAAA,EAAAA,EAAuCphB,SAGtB,IAAjBohB,EAAQvlB,KACH,8EAGFulB,EAAQ5tB,IAAI2X,GAAc0B,UAC7B,4CAA8E,QAAlCuU,EAAAA,EAAQztB,IAAIwX,GAAc0B,iBAA1BuU,IAAAA,OAAAA,EAAAA,EAAqCphB,SACjF,4CAAgF,QAApCohB,EAAAA,EAAQztB,IAAIwX,GAAc+B,mBAA1BkU,IAAAA,OAAAA,EAAAA,EAAuCphB,QAAQ,GAC9F,CAACohB,IAEJ,OACE,kBAAC1kB,MAAAA,CAAIE,UAAWR,EAAOwK,WACrB,kBAACtB,EAAAA,OAAMA,CACLkrC,cAAY,UACZ5zC,UAAWR,EAAOq0C,cAClBlrC,QAAQ,UACRnF,SAAUkwC,EACVpwC,QAASowC,EAAoB97C,EAAO47C,EACpCt1C,QAASA,GACV,YACWsmB,EAAQvlB,KAAK,OAGzB,kBAACyJ,EAAAA,OAAMA,CACL3I,cAAY,kBACZC,WAAW4B,EAAAA,EAAAA,IAAGpC,EAAOs0C,YAAcJ,OAA+CzzC,EAA3BT,EAAOu0C,mBAC9D1wC,KAAK,QACLsF,QAAQ,YACRzK,QAASy1C,EAAe,6BAA+B,GACvDnwC,UAAWmwC,EACXrwC,QAAUqwC,EAAsBF,EAAP77C,IAIjC,CDFE,GAzCW07C,GAyCGlmB,aAAY,EAAGC,YAC3B,MAAM,KAAE4H,GAAS5H,EAAMjxB,YAEjB,QAAEogB,GAAY,MAAY4S,iBAAiB/B,EAAO,UAAWiC,IAAqClzB,WAClGlE,GAAS2H,EAAAA,EAAAA,UAAQ,IAAMwtB,EAAMylB,UAAUt2B,IAAU,CAACA,EAAS6Q,IAEjE,OACE,kBAAC6lB,GAAaA,CACZ9vC,MAAO6xB,EAAK79B,MACZc,OAAQA,EACRu6C,UAAWplB,EAAMolB,UACjBC,UAAWrlB,EAAMqlB,UACjBC,QAAStlB,EAAMslB,S,ICRvB,MAAMp1C,GAAaC,IAA0B,CAC3CwM,UAAWtM,EAAAA,GAAG;;;aAGH8yC,GAAgBU;IAE3B2C,cAAen2C,EAAAA,GAAG;aACP8yC,GAAgBU,gBAAkB;;;;IAK7C4C,YAAap2C,EAAAA,GAAG;;;;aAILF,EAAMY,OAAOC,KAAKC;;;;;;;;;;;IAY7By1C,kBAAmBr2C,EAAAA,GAAG;oBACJF,EAAMY,OAAOkyC,OAAO0D;;;sBAGlBx2C,EAAMY,OAAOkyC,OAAO0D;;yPC5CnC,MAAMvD,WAA2Bjf,GAAAA,GAchC5F,UAAAA,CAAWqJ,G,sBAAjB,YAEE,MAAMwZ,EAAkBtf,GAAAA,GAAWC,iBAAiB,EAAM,UAAWme,UAC/DkB,EAAgB1iB,SAElBkJ,GACF,EAAKgf,yBAAyBhf,GAGhC,EAAKif,WAAWzF,GAEhB,MAAMmD,EAAa,EAAKC,2BAClBsC,EAAiB,EAAKC,yBAE5B,MAAO,K,IAIL,EAHAD,EAAerjB,cACf8gB,EAAW9gB,cAEkB,QAA7B,IAAKrG,MAAM4pB,0BAAX,SAA+BvjB,aAAa,CAEhD,E,mLAEAmjB,wBAAAA,CAAyBhf,GACvB,MAAM,kBAAEQ,EAAiB,UAAE/D,GAAcuD,GACnC,QAAEnB,GAAY2B,EAEpB,GAAI3B,aAAAA,EAAAA,EAAS1wB,MAAO,CACM+rB,GAAAA,GAAWC,iBAAiB95B,KAAM,UAAWi4C,IACrDvgB,cAAc8G,EAAQ1wB,MACxC,CAEA,GAAIsuB,EAAW,CACavC,GAAAA,GAAWC,iBAAiB95B,KAAM,sBAAuBi8B,IACjE1F,SAAS,CAAE6F,aAC/B,CACF,CAEAmgB,wBAAAA,GACE,MAAMpD,EAAkBtf,GAAAA,GAAWC,iBAAiB95B,KAAM,UAAWi4C,IAC/DvF,EAAc7Y,GAAAA,GAAWC,iBAAiB95B,KAAM,eAAgB0uC,IAEtE,OAAOyK,EAAgBzgB,kBAAiB,CAACC,EAAUC,KAC7CD,EAAS72B,SAAU82B,aAAAA,EAAAA,EAAW92B,SAChC4wC,EAAY1D,kBAEZhvC,KAAK4+C,WAAWzF,GAClB,GAEJ,CAEA2F,sBAAAA,GACE,MAAME,EAAiBh/C,KAAKg0C,iBAAiBmB,IAAmBjsB,IAC9DlpB,KAAKi/C,YAAY/1B,EAAM1T,QAAQmqB,KAAK,IAGhCuf,EAAsBl/C,KAAKg0C,iBAAiB0F,IAAwBxwB,IACxE,MAAM,cAAEyyB,EAAa,KAAEhc,GAASzW,EAAM1T,QACtCxV,KAAKm/C,iBAAiBxD,EAAehc,EAAK,IAGtCyf,EAAmBp/C,KAAKg0C,iBAAiBgJ,IAA6B9zB,IAC1ElpB,KAAKq/C,2BAA2Bn2B,EAAM1T,QAAQmqB,KAAK,IAG/C2f,EAAmBt/C,KAAKg0C,iBAAiB+I,IAA+B7zB,IAC5ElpB,KAAKu/C,6BAA6Br2B,EAAM1T,QAAQmqB,KAAK,IAGjD6f,EAAiBx/C,KAAKg0C,iBAAiB8I,IAA6B5zB,IACxElpB,KAAKy/C,2BAA2Bv2B,EAAM1T,QAAQmqB,KAAK,IAGrD,MAAO,CACLnE,WAAAA,GACEgkB,EAAehkB,cACf8jB,EAAiB9jB,cACjB4jB,EAAiB5jB,cACjB0jB,EAAoB1jB,cACpBwjB,EAAexjB,aACjB,EAEJ,CAEAkkB,0BAAAA,GAGE,OAF0B7lB,GAAAA,GAAWC,iBAAiB95B,KAAM,sBAAuBi8B,IAE1DvD,kBACvB,CAACC,EAAuCC,K,IAEnC,EADCD,EAASyD,aAAcxD,aAAAA,EAAAA,EAAWwD,aACpB,QAAf,EAAAp8B,KAAKm1B,MAAM9uB,YAAX,OAAD,EAAkDorC,kBACpD,GAGN,CAEAmN,UAAAA,CAAWzF,G,IACT,EAA6B,QAA7B,EAAAn5C,KAAKm1B,MAAM4pB,0BAAX,SAA+BvjB,cAEK,QAAhC2d,EAAgBhkB,MAAMrzB,OAExB9B,KAAKu2B,SAAS,CAAEwoB,mBAAoB/+C,KAAK0/C,+BAEzC1/C,KAAK2/C,0BAEL3/C,KAAK4/C,wBAAwBzG,EAEjC,CAEAwG,sBAAAA,GACE9lB,GAAAA,GACGC,iBAAiB95B,KAAM,eAAgB0uC,IACvCC,eAAe,yDAElB3uC,KAAKu2B,SAAS,CACZlwB,KAAMrG,KAAK6/C,4BAEf,CAEAA,wBAAAA,GACE,OAAO,IAAIzO,GAA4B,CACrCjmC,IAAK,sBACL0wB,aAAc,UACdqX,gBAAiB,CAACp7B,EAAQilB,GAASvE,cAAa3C,kBAAiBuG,gBAC/D,GAAqB,QAAjBtkB,EAAOhW,MACT,OAAO,KAIT,MAAM,MAAEA,EAAK,QAAE08B,GAAY98B,KAAKC,MAAMmW,EAAOhW,OAE7C,MAAO,CACLi7B,MAAOA,EAAQ,EACfj7B,QAGAgM,MAAOhM,EACPq+B,kBAAmB,CACjB3H,cACA3C,kBACA2I,UACAtX,QAAS,IAEXkV,UAAWA,EACZ,EAEHuG,cAAgBhD,GAAS,CACvB,IAAI+V,GAAa,CAAE9wC,KAAM,eAAgB+6B,SACzC,IAAI+V,GAAa,CAAE9wC,KAAM,eAAgB+6B,SACzC,IAAIwQ,GAAU,CAAExQ,WAGtB,CAEAigB,uBAAAA,CAAwBzG,GACtBtf,GAAAA,GACGC,iBAAiB95B,KAAM,eAAgB0uC,IACvCC,eAAe,+DAElB3uC,KAAK8/C,eAEL,MAAM,MAAE/iB,EAAK,MAAEj7B,GAAUq3C,EAAgBb,oBAEzCt4C,KAAKu2B,SAAS,CACZlwB,KAAMrG,KAAK+/C,0BAA0Bj+C,EAAOi7B,IAEhD,CAEAgjB,yBAAAA,CAA0BjyC,EAAeu0B,GACvC,OAAO,IAAI+Z,GAAqB,CAC9BjxC,IAAK,4BACLk3B,kBACAv0B,QACA60B,cAAgBhD,GAAS,CACvB,IAAI+V,GAAa,CACf9wC,KAAM,mBACN+6B,OACA/2B,QAAS,CAAC+2B,EAAM5H,KACd,MAAM,kBAAEoI,EAAiB,MAAEryB,GAAU6xB,EAC/B9J,EACJsK,EAAkBtK,iBAAmB+F,GAAsB7D,EAAO,mBAC9DioB,EAAepkB,GAAsB7D,EAAO,WAElD,MAAO,aACLnC,GAAiBC,GAAoCjxB,0BACjCo7C,KAAgBlyC,IAAQ,IAGlD,IAAIkwC,GAAqB,CAAEre,SAC3B,IAAIwQ,GAAU,CAAExQ,WAGtB,CAEAsf,WAAAA,EAAY,kBAAE9e,IACZ,MAAMuc,EAAavc,EAAmB3B,QAAS1wB,MACzCqrC,EAAkBtf,GAAAA,GAAWC,iBAAiB95B,KAAM,UAAWi4C,IAErE/0B,KACAi2B,EAAgBzhB,cAAcglB,EAChC,CAEA2C,0BAAAA,CAA2B1f,GACzB,MAAOsgB,GAAmBtgB,EAAKQ,kBAAkBjZ,QAC3C8rB,EAAkBnZ,GAAAA,GAAWC,iBAAiB95B,KAAM,UAAWg6B,IAErEgZ,EAAgBzc,SAAS,CAAErP,QAASwT,GAAkBsY,EAAgB7d,MAAMjO,QAAS+4B,IACvF,CAEAV,4BAAAA,CAA6B5f,GAC3B,MAAMqT,EAAkBnZ,GAAAA,GAAWC,iBAAiB95B,KAAM,UAAWg6B,KAC9DkmB,GAAmBvgB,EAAKQ,kBAAkBjZ,QAEjD8rB,EAAgBzc,SAAS,CAAErP,QAAS4T,GAAkBkY,EAAgB7d,MAAMjO,QAASg5B,IACvF,CAEAT,0BAAAA,CAA2B9f,GACzB,MAAMqT,EAAkBnZ,GAAAA,GAAWC,iBAAiB95B,KAAM,UAAWg6B,KAC9DmmB,GAAiBxgB,EAAKQ,kBAAkBjZ,QAE/C8rB,EAAgBzc,SAAS,CAAErP,QAAS8T,GAAgBgY,EAAgB7d,MAAMjO,QAASi5B,IACrF,CAEAhB,gBAAAA,CAAiBxD,EAA8Bhc,G,IAGzCzQ,EAFJ,MAAMA,EAAU,IAAIzvB,IAAIO,KAAKm1B,MAAMjG,UAEnBysB,QAAZzsB,EAAAA,EAAQztB,IAAIk6C,UAAZzsB,IAAAA,OAAAA,EAAAA,EAA4BptB,SAAU69B,EAAK79B,MAC7CotB,EAAQrK,OAAO82B,GAEfzsB,EAAQrtB,IAAI85C,EAAehc,GAG7B3/B,KAAKu2B,SAAS,CAAErH,YAEhBlvB,KAAKogD,mBACP,CAEAA,iBAAAA,GACE,MAAM,QAAElxB,GAAYlvB,KAAKm1B,MACnBomB,EAAersB,EAAQztB,IAAIwX,GAAc0B,UACzC6gC,EAAiBtsB,EAAQztB,IAAIwX,GAAc+B,YAE3CqlC,EAAcxmB,GAAAA,GAAWymB,eAAetgD,MAAO8gB,GAAMA,aAAao6B,KAIxE,IAAK,MAAMqF,KAASF,EAClBE,EAAMlF,qBAAqBE,EAAcC,EAE7C,CAEAJ,UAAAA,GACE,OAAOp7C,KAAKm1B,MAAMjG,OACpB,CAEA4wB,YAAAA,GACE9/C,KAAKu2B,SAAS,CAAErH,QAAS,IAAIzvB,KAC/B,CA7QA2B,WAAAA,EAAY,KAAEu+B,IACZ78B,MAAM,CACJqI,IAAK,kBACL9E,UAAMsE,EACNukB,QAAS,IAAIzvB,IACbs/C,wBAAoBp0C,IA0QxB61C,GAAAA,KAAAA,wBAAuB,KACrBrsC,GAAkB,wCAElB,MAAM,QAAE+a,GAAYlvB,KAAKm1B,OAEjBjO,QAASu5B,GAAoB3Q,GACnC9vC,KACAkvB,EAAQztB,IAAIwX,GAAc0B,YAGpBuM,QAASw5B,GAAsB5Q,GACrC9vC,KACAkvB,EAAQztB,IAAIwX,GAAc+B,aAG5Bhb,KAAKggC,aACH,IAAIyZ,GAAwB,CAC1BkH,sBAAsB,EACtBC,gBAAgB,EAChBH,kBACAC,uBAEF,MAIJG,GAAAA,KAAAA,6BAA4B,KAC1B7gD,KAAK8/C,eACL9/C,KAAKogD,mBAAmB,IAnSxBpgD,KAAK43B,sBAAqB,KACxB53B,KAAKs2B,WAAWqJ,EAAK,GAEzB,EAmSA,GA/SWwb,GA+SJrjB,aAAY,EAAGC,YACpB,MAAM7tB,GAASC,EAAAA,EAAAA,YAAWlC,KAEpB,KAAE5B,EAAI,QAAE6oB,GAAY6I,EAAMjxB,WAE1BqyC,EAAkBtf,GAAAA,GAAWC,iBAAiB/B,EAAO,UAAWkgB,KAC9Dn2C,MAAOg/C,GAAyB3H,EAAgBryC,WAElDmvC,GAAe1rC,EAAAA,EAAAA,UACnB,IAC2B,QAAzBu2C,EACIjnB,GAAAA,GAAWC,iBAAiB/B,EAAO,oBAAqBgpB,IAAuB5rB,MAAM8gB,aACpF,CACCpc,GAAAA,GAAWC,iBAAiB/B,EAAO,eAAgB2W,IACnD7U,GAAAA,GAAWC,iBAAiB/B,EAAO,kBAAmBoW,IACtDtU,GAAAA,GAAWC,iBAAiB/B,EAAO,mBAAoBsW,MAE/D,CAACyS,EAAsB/oB,IAGzB,OACE,kBAACvtB,MAAAA,CAAIE,UAAWR,EAAOwK,UAAWjK,cAAY,0BAC5C,kBAAC0uC,EAAgBrhB,UAAS,CAACC,MAAOohB,IAElC,kBAAC3uC,MAAAA,CAAIE,UAAWR,EAAO82C,eACrB,kBAAC/xC,EAAAA,MAAKA,CAACgyC,KAAK,QACgB,QAAzBH,GACC,kBAAC7C,GAAeA,CACd/uB,QAASA,EACTgvB,eAAgBnmB,EAAMyoB,qBACtBrC,aAAcpmB,EAAM8oB,4BAIvB5K,EAAajrC,KAAKk2C,GACjB,kBAACA,EAAQppB,UAAS,CAAC3sB,IAAK+1C,EAAQ/rB,MAAMhqB,IAAK4sB,MAAOmpB,QAKvD76C,GAAQ,kBAACA,EAAKyxB,UAAS,CAACC,MAAO1xB,I,IAMxC,MAAM4B,GAAaC,IAA0B,CAC3CwM,UAAWtM,EAAAA,GAAG;kBACEF,EAAMyG,QAAQ;IAE9BqyC,cAAe54C,EAAAA,GAAG;qBACCF,EAAMyG,QAAQ;;;;;;4gCCnX5B,MAAMwyC,WAAkCjlB,GAAAA,GA2C7C5F,UAAAA,CAAWqJ,GACLA,GACF3/B,KAAK84C,cAAcnZ,GAGrB,MAAMyhB,EAAwBvnB,GAAAA,GAAWC,iBAAiB95B,KAAM,kBAAmBo2B,IAEnFgrB,EAAsB7qB,SAAS,CAAEzS,MAAOsS,GAAsByB,+BAC9DupB,EAAsB3qB,QAAO,GAE7B,MAAMooB,EAAiB7+C,KAAK8+C,yBAE5B,MAAO,KACLD,EAAerjB,cACf4lB,EAAsB7qB,SAAS,CAAEzS,MAAOsS,GAAsBe,gBAC9DiqB,EAAsB3qB,QAAO,EAAK,CAEtC,CAEAqiB,aAAAA,CAAcnZ,GACZ,MAAM,kBAAEQ,GAAsBR,GACxB,YAAEnH,EAAW,gBAAE3C,EAAe,QAAE3O,GAAYiZ,EAElD,GAAI3H,EAAa,CACaqB,GAAAA,GAAWC,iBAAiB95B,KAAM,cAAeu4B,IACzDb,cAAcc,EACpC,CAEA,GAAI3C,EAAiB,CACWgE,GAAAA,GAAWC,iBAAiB95B,KAAM,kBAAmBo2B,IAC7DsB,cAAc7B,EACtC,CAEA,GAAI3O,EAAS,CACa2S,GAAAA,GAAWC,iBAAiB95B,KAAM,UAAWg6B,IACrDzD,SAAS,CAAErP,WAC7B,CACF,CAEA43B,sBAAAA,G,WACE,MAAMpI,EAAiB12C,KAAKg0C,iBAAiBkB,GAAgBA,W,WAAE,UAAOhsB,GACpE,EAAKytB,wBAAwBztB,EAAM1T,QAAQmqB,KAC7C,E,iMAFsEzW,G,gCAATgsB,IAIvD8J,EAAiBh/C,KAAKg0C,iBAAiBmB,IAAkB,KAE7Dn1C,KAAKm1B,MAAMyhB,OAAO7zB,OAAO,IAG3B,MAAO,CACLyY,WAAAA,GACEwjB,EAAexjB,cACfkb,EAAelb,aACjB,EAEJ,CAGAua,2BAAAA,GACE,MAAO,CACLC,UAAW,CACTnc,GAAAA,GAAWC,iBAAiB95B,KAAM,cAAeu4B,IACjDsB,GAAAA,GAAWC,iBAAiB95B,KAAM,kBAAmBo2B,IACrDyD,GAAAA,GAAWC,iBAAiB95B,KAAM,UAAWg6B,KAE/Cic,aAAc,GAElB,CAEAU,uBAAAA,CAAwBhX,G,IAM6CA,EALnE,MAAMjxB,EAAQktB,GAAsB57B,KAAM,eAEpC61B,EAAkB+F,GAAsB57B,KAAM,mBAG9CqhD,EAAkB,GADtBzrB,GAAiBC,GAAoC5K,aAAe8b,GAAsBlR,mBACK,QAA9B8J,EAAAA,EAAKQ,kBAAkB3B,eAAvBmB,IAAAA,OAAAA,EAAAA,EAAgC7xB,QAAS,MAE5G9N,KAAKm1B,MAAMyhB,OAAO3oC,KAAK,CACrBS,QACArI,KAAMilC,GAAgB3L,EAAKvD,UAAW,CACpCgO,kBAAkB,EAClBnG,gBAAiB,QACjBtE,KAAM,SAAKA,GAAAA,CAAM7xB,MAAOuzC,IACxB1e,cAAe,IAAM,CAAC,IAAI+S,GAAa,CAAE9wC,KAAM,eAAgB+6B,SAAS,IAAIwQ,GAAU,CAAExQ,aAG9F,CAEA,gBAAO7H,EAAU,MAAEC,IACjB,MAAM,KAAE1xB,EAAI,OAAEuwC,GAAW7e,EAAMjxB,WAE/B,OACE,oCACE,kBAACT,EAAKyxB,UAAS,CAACC,MAAO1xB,IACvB,kBAACuwC,EAAO9e,UAAS,CAACC,MAAO6e,IAG/B,CA3IAx1C,WAAAA,EAAY,KAAEu+B,IACZ78B,MAAM,CACJqI,IAAK,yBACL9E,KAAM,IAAIi7C,GAAAA,GAAgB,CACxBxT,UAAW,SACX+G,WAAY,CACV,IAAIC,GAAAA,GAAAA,GAAqB,CACvB3pC,IAAK,sBACL4pC,KAAMC,EAAAA,oBAAoBC,aAG9BllC,SAAU,CACR,IAAIwxC,GAAAA,GAAc,CAChBC,UAAW5I,GAA2BY,WACtCnzC,KAAM,IAAIuyC,GAA2B,CACnCjZ,OACAgD,cAAgBhD,GACPA,EAAKQ,kBAAkB3B,QAC1B,CACE,IAAIkX,GAAa,CAAE9wC,KAAM,mBAAoB+6B,SAC7C,IAAI+V,GAAa,CACf9wC,KAAM,eACN+6B,SAEF,IAAIwQ,GAAU,CAAExQ,UAElB,CAAC,IAAI+V,GAAa,CAAE9wC,KAAM,mBAAoB+6B,SAAS,IAAIwQ,GAAU,CAAExQ,UAE7EkZ,gBAAgB,MAGpB,IAAI0I,GAAAA,GAAc,CAChBl7C,KAAM,IAAI80C,GAAmB,CAAExb,cAIrCiX,OAAQ,IAAIR,KAGdp2C,KAAK43B,qBAAqB53B,KAAKs2B,WAAWqB,KAAK33B,KAAM2/B,GACvD,ECrDK,MAAM8hB,WAAwCvlB,GAAAA,GAqCnD5F,UAAAA,CAAWqJ,GACT9F,GAAAA,GACGC,iBAAiB95B,KAAM,eAAgB0uC,IACvCC,eAAe,gEAEdhP,GACF3/B,KAAK84C,cAAcnZ,EAEvB,CAEAmZ,aAAAA,CAAcnZ,GACZ,GAAIA,EAAKQ,kBAAkB3H,YAAa,CACVqB,GAAAA,GAAWC,iBAAiB95B,KAAM,cAAeu4B,IACzDb,cAAciI,EAAKQ,kBAAkB3H,YAC3D,CACF,CAGAud,2BAAAA,GACE,MAAO,CACLC,UAAW,CAACnc,GAAAA,GAAWC,iBAAiB95B,KAAM,cAAeu4B,KAC7D0d,aAAc,CACZpc,GAAAA,GAAWC,iBAAiB95B,KAAM,eAAgB0uC,IAClD7U,GAAAA,GAAWC,iBAAiB95B,KAAM,kBAAmBmuC,KAG3D,CAEA,gBAAOrW,EAAU,MAAEC,IACjB,MAAM,KAAE1xB,GAAS0xB,EAAMjxB,WAEvB,OAAO,kBAACT,EAAKyxB,UAAS,CAACC,MAAO1xB,GAChC,CApEAjF,WAAAA,EAAY,KAAEu+B,IACZ78B,MAAM,CACJqI,IAAK,gCACL+qC,WAAY,IAAIC,GAAAA,GAAiB,CAC/BH,UAAW,CAET,IAAI5f,GAAsB,CACxBtS,MAAOsS,GAAsByB,6BAC7BJ,aAAa,OAInBpxB,KAAM,IAAI+qC,GAA4B,CACpCjmC,IAAK,uBACL0wB,aAAc,kBACdqX,gBAAiB,CAACp7B,EAAQilB,GAASvE,kBAAmB,CACpDuE,QACAj7B,MAAOgW,EAAOhW,MACdgM,MAAOgK,EAAOhK,MACdqyB,kBAAmB,CACjB3H,cACA3C,gBAAiB/d,EAAOhW,OAE1Bs6B,UAAWJ,GAAU0P,aAEvB/I,cAAgBhD,GAAS,CACvB,IAAI+V,GAAa,CAAE9wC,KAAM,cAAe+6B,SACxC,IAAI+V,GAAa,CAAE9wC,KAAM,mBAAoB+6B,SAC7C,IAAIwQ,GAAU,CAAExQ,cAKtB3/B,KAAK43B,qBAAqB53B,KAAKs2B,WAAWqB,KAAK33B,KAAM2/B,GACvD,ECrDK,SAAS+hB,GAAexnC,EAAcK,GAC3C,MAAO,CACLL,OACAK,KACAzY,MAAO,CACLoY,MAAMW,EAAAA,EAAAA,eAAcX,GACpBK,IAAIM,EAAAA,EAAAA,eAAcN,GAClBK,IAAK,CAAEV,OAAMK,OAGnB,CAEO,MAAMonC,GAAsB,IAAMD,GAAe,UAAW,OCb5D,MAAME,WAA6BC,GAAAA,GAUxCxmB,KAAAA,GACEr7B,KAAKu2B,SAAS,CAAEz0B,WAAO6I,GACzB,CAXAvJ,WAAAA,GACE0B,MAAM,CACJqI,IAAK,eACLjH,KAAM,eACN4J,MAAO,gBACPhM,WAAO6I,GAEX,ECJK,SAASm3C,GACdC,EACAvpB,GAEA,GAAIA,EAAa,CACf,MAAMwpB,EAAoBD,EAAgB12B,SAAS5pB,IAAI+2B,IAAgB,IAAI/4B,IAE3E,OAAO+lB,MAAMtL,KAAK8nC,EAAkBz9C,UACjCwrB,MAAK,CAAC/f,EAAGof,IAAML,GAAcK,EAAE2G,MAAO/lB,EAAE+lB,SACxC/qB,KAAI,EAAGgL,KAAIpR,OAAMmxB,YAAa,CAC7Bj0B,MAAOkU,EACPjN,KAAM,GAAGnE,MAASmxB,QAExB,CAEA,OAAOvQ,MAAMtL,KAAK6nC,EAAgBE,eAAevlB,QAC9C1xB,KAAKgL,GAAO4f,GAAiB5f,KAC7B+Z,MAAK,CAAC/f,EAAGof,IAAML,GAAcK,EAAE2G,MAAO/lB,EAAE+lB,SACxC/qB,KAAI,EAAGgL,KAAIpR,OAAMmxB,YAAa,CAC7Bj0B,MAAOkU,EACPjN,KAAM,GAAGnE,MAASmxB,QAExB,CCvBO,SAASmsB,GAAuBH,EAAkClsB,GACvE,GAAIA,EAAiB,CACnB,MAAMssB,EAAcJ,EAAgBE,eAAexgD,IAAIo0B,IAAoB,IAAInQ,IAE/E,OAAOF,MAAMtL,KAAKioC,GACfpyB,KAAKhB,IACL/jB,KAAKwtB,IAAiB,CACrBzvB,KAAMyvB,EACN12B,MAAO02B,KAEb,CAEA,OAAOhT,MAAMtL,KAAK6nC,EAAgB12B,SAASqR,QACxC3M,KAAKhB,IACL/jB,KAAKwtB,IAAiB,CACrBzvB,KAAMyvB,EACN12B,MAAO02B,KAEb,CCrBO,MAAM4pB,GAGX,YAAOjf,CACLxf,EACA0+B,GAEA,MAAMC,EAAW,GAAG3+B,KAAiB0+B,EAAen+C,OAE9Cq+C,EAAiBH,GAA6BI,MAAM/gD,IAAI6gD,GAC9D,GAAIC,aAA0BF,EAC5B,OAAOE,EAGT,MAAME,EAAiB,IAAIJ,EAAe,CAAE1+B,kBAI5C,OAFAy+B,GAA6BI,MAAM3gD,IAAIygD,EAAUG,GAE1CA,CACT,ECdF,SAASC,GAAkCz8B,GACzC,IAAIuS,EACA3C,EAEJ,IAAK,MAAM,KAAE3xB,EAAI,MAAEpC,KAAWmkB,EAS5B,GARa,iBAAT/hB,IACFs0B,EAAc12B,GAGH,qBAAToC,IACF2xB,EAAkB/zB,GAGhB02B,GAAe3C,EACjB,MAAO,CAAC2C,EAAa3C,GAIzB,MAAO,EACT,CAEO,SAAS8sB,GAAqBv7C,GACnC,MAAMikB,EAAwC,IAAI5rB,IAC5CwiD,EAAoD,IAAIxiD,IAE9D,IAAK2H,EAAKw7C,UAER,OADA1iD,EAAOa,KAAK,gDACL,CAAEsqB,WAAU42B,kBAGrB,IAAK,MAAM,OAAEh8B,KAAY7e,EAAKw7C,UAAW,CACvC,MAAOpqB,EAAa3C,GAAmB6sB,GAAkCz8B,GAEzE,IAAKuS,IAAgB3C,EAAiB,CACpC31B,EAAOa,KACL,4GACAklB,GAEF,QACF,CAEA,MAAM48B,EAAwBx3B,EAAS5pB,IAAI+2B,IAAgB,IAAI/4B,IAC/DojD,EAAsBhhD,IAAIg0B,EAAiBD,GAAiBC,IAC5DxK,EAASxpB,IAAI22B,EAAaqqB,GAE1B,MAAMC,EAAwBb,EAAexgD,IAAIo0B,IAAoB,IAAInQ,IACzEo9B,EAAsBjoB,IAAIrC,GAC1BypB,EAAepgD,IAAIg0B,EAAiBitB,EACtC,CAEA,MAAO,CAAEz3B,WAAU42B,iBACrB,C,wODvDE,CADWG,GACII,QAAQ,IAAI/iD,KEUtB,MAAMsjD,WAAwBr/B,GAK7BsH,IAAAA,CAAK7nB,G,sBAAX,YACE,MAAM,KAAE+W,EAAI,GAAEK,GAAOpX,EAErB,OAAO,EAAKF,MAAM,oCAAqC,CACrDmD,OAAQ,OACRC,KAAM3E,KAAKM,UAAU,CACnBqiB,MAAOnK,EACPoK,IAAK/J,EACLyoC,WAAY,CAAC,eAAgB,oBAC7B5+B,SAAU,OAGX5T,MAAM/N,GAAaA,EAASoB,SAC5B2M,KAAKmyC,GACV,E,mLAlBAvhD,WAAAA,CAAY+B,GACVL,MAAMK,EACR,E,0HCyBK,MAAM8/C,GAAmB,IAlChC,cAA+Bj+B,GAKvBgG,IAAAA,CAAK7nB,G,sBAAX,YACE,MAAM,KAAE+W,EAAI,GAAEK,GAAOmrB,GAAwBviC,EAAQ8W,WAE/C8L,EAAc,CAAC,EAAKb,UAAW1hB,QAAS0W,EAAMK,GAE9C2oC,EAAqB,EAAK99B,YAAa3jB,IAAIskB,GACjD,GAAIm9B,EAAoB,CACtB,MAAM,SAAE73B,EAAQ,eAAE42B,SAAyBiB,EAM3C,OAJK73B,EAAS1hB,MAASs4C,EAAet4C,MACpC,EAAKyb,YAAaP,OAAOkB,GAGpB,CAAEsF,WAAU42B,iBACrB,CAEA,MAAM/7B,EAAS,EAAKhB,UAAW8F,KAAK,CAAE9Q,OAAMK,OAC5C,EAAK6K,YAAavjB,IAAIkkB,EAAaG,GAEnC,IACE,MAAM,SAAEmF,EAAQ,eAAE42B,SAAyB/7B,EAC3C,MAAO,CAAEmF,WAAU42B,iBACrB,CAAE,MAAOhhD,GAEP,MADA,EAAKmkB,YAAaP,OAAOkB,GACnB9kB,CACR,CACF,E,mLA9BAG,WAAAA,CAAY+B,GACVL,MAAMK,EACR,GA+BmD,CACnDiiB,YAAa,IAAIX,K,gUCvBZ,MAAM0+B,WAAyBpd,GAAAA,GAK9Bqd,WAAAA,CAAYz/B,EAAuB1J,EAAsB4hB,G,OAA/D,gBACEonB,GAAiBh+B,aAAam9B,GAA6Bjf,MAAMxf,EAAeo/B,KAEhF,IACE,aAAaE,GAAiBj4B,KAAK,CAAE/Q,aACvC,CAAE,MAAOhZ,GAMP,MALAf,EAAOe,MAAMA,EAAgB,CAC3BN,KAAM,wCACNk7B,aAAcA,GAAgB,KAG1B56B,CACR,CACF,GAbA,E,CAeM6iB,KAAAA,G,OAAN,gBACE,MAAO,CACLqR,MAAOkJ,EAAAA,aAAayB,KACpB14B,KAAM,CACJ,CACElD,KAAM,kBACNqb,OAAQ,CACN,CACErb,KAAM,kBACNU,KAAM4a,EAAAA,UAAUwmB,MAChBzhC,OAAQ,GACRC,OAAQ,CAAC,IAGbwC,OAAQ,IAIhB,GAlBA,E,CAoBMs/B,eAAAA,CAAgBxiB,EAAe3gB,G,kBAArC,gB,IACsBA,EAAAA,EAMsEA,EAN1F,MAAMw2B,EAAgC,QAAlBx2B,EAAAA,EAAQ+iC,kBAAR/iC,IAAAA,GAAiC,QAAjCA,EAAAA,EAAoBijC,qBAApBjjC,IAAAA,OAAAA,EAAAA,EAAmCrB,MAEjD6hB,EAAgBkW,GAAAA,GAAWsE,YAAYxE,EAAa,eACpDnB,EAAcqB,GAAAA,GAAWsE,YAAYxE,EAAa,gBAClD9D,EAAkBgE,GAAAA,GAAWsE,YAAYxE,EAAa,oBAEtDooB,QAAwB,EAAKqB,YAAYz/B,EAAexgB,EAAQgjC,MAAoC,QAAhBhjC,EAAAA,EAAQsjC,gBAARtjC,IAAAA,OAAAA,EAAAA,EAAkBe,MAE5G,OAAQ4f,GAEN,IAAK,+BACH,OAAOo+B,GAAuBH,GAEhC,IAAK,sCACH,OAAOD,GAA6BC,GAGtC,IAAK,iDACH,OAAOG,GAAuBH,EAAiBlsB,GAEjD,IAAK,oDACH,OAAOisB,GAA6BC,EAAiBvpB,GAEvD,QACE,MAAM,IAAI9F,UAAU,sBAAsB5O,OAEhD,GA3BA,E,CA6BM+iB,cAAAA,G,OAAN,gBACE,MAAO,CACLjkC,OAAQ,UACRD,QAAS,KAEb,GALA,E,CApEAvB,WAAAA,GACE0B,MAAMmzB,GAA6BrxB,KAAMqxB,GAA6B3wB,IACxE,E,+CCXK,MAAM+9C,IACXC,EAAAA,GAAAA,GAAS,8vDAscJ,MCrcMC,IACXD,EAAAA,GAAAA,GAAS,mmFAAomF,CAACD,KAwQnmFG,IACXC,EAAAA,GAAAA,GAAYF,GAAkC,GAqBnCG,IACXD,EAAAA,GAAAA,GAAYF,GAAkC,IA+EzC,gBAAKI,G,OAGT,qBAHSA,C,CAAL,C,oUC9RA,MAAMC,GAA0B,IA3DvC,cAAsCv/C,EAC9B5C,GAAAA,G,oCAAN,gBACE,OAAO,WACE,wDAAyD,CAC9D2E,OAAQ,OACRC,KAAM3E,KAAKM,UAAU,CAAC,KAEvBwO,MAAM/N,GAAaA,EAASoB,SAC5B2M,MAAM3M,GACAA,EAAKggD,MAGHhgD,EAAKggD,MAAM74C,KAAK84C,GAnC/B,SAAyCA,G,IASlBA,EAAAA,EARrB,IAAItrB,EAAc,GAClB,IAAK,IAAI8J,KAAWwhB,EAAK1/B,UAAY,GACnC,GAAIke,EAAQvqB,SAAS,iBAAkB,C,IACvBuqB,EAAd9J,GAAc8J,SAAe,QAAfA,EAAAA,EAAShb,MAAM,iCAAfgb,IAAAA,OAAAA,EAAAA,EAA2C,KAAM,GAC/D,KACF,CAGF,MAAMyhB,EAAoC,QAArBD,EAAAA,EAAKE,wBAALF,IAAAA,GAAmC,QAAnCA,EAAAA,EAAuBC,oBAAvBD,IAAAA,OAAAA,EAAAA,EAAqCC,aAE1D,MAAO,CACL/tC,GAAI8tC,EAAK9tC,GACTiuC,WAAYH,EAAKG,WACjBzrB,cACAziB,YAAa+tC,EAAK/tC,YAClBqO,SAAU0/B,EAAK1/B,SACfoa,QAASslB,EAAKtlB,SAAW,GACzBulB,eACAG,SAAUJ,EAAKK,YAEnB,CAeiBC,CAAgCN,KAHhC,IAMf,GAfA,E,CAiBMO,MAAAA,CAAOP,G,oCAAb,gBACE,IAAIQ,EAA0C,CAC5CL,WAAYH,EAAKG,WACjB7/B,SAAU,CACR,mBAAmB0/B,EAAKtrB,iBACxB,uBAAuBsrB,EAAK/tC,mBACxB+tC,EAAK1/B,UAAY,IAEvBoa,QAASslB,EAAKtlB,SAAW,IAa3B,OATIslB,EAAKC,eACPO,EAAYN,kBAAmBK,EAAAA,GAAAA,GAAOb,GAAwB,CAC5DO,cAAcM,EAAAA,GAAAA,GAAOX,GAAoC,CACvDK,aAAcD,EAAKC,aACnBQ,WAAYZ,GAAWa,WAKtB,WACE,yDAA0D,CAC/Dp+C,OAAQ,OACRC,KAAM3E,KAAKM,UAAUsiD,KAEtB9zC,MAAM/N,GAAaA,EAASoB,QACjC,GA3BA,E,CA6BM4gD,MAAAA,CAAOX,G,oCAAb,gBACE,OAAO,WACE,yDAA0D,CAC/D19C,OAAQ,OACRC,KAAM3E,KAAKM,UAAU,CACnBgU,GAAI8tC,EAAK9tC,OAGZxF,MAAM/N,GAAaA,EAASoB,QACjC,GATA,E,4ICjEK,SAAS6gD,IAAuB,QAAEv9C,GAAyB,CAAC,GACjE,MAAMjJ,GAAcymD,EAAAA,EAAAA,OAEd,WAAE19C,EAAU,MAAEhG,EAAK,KAAEmG,IAASE,EAAAA,EAAAA,GAAoD,CACtFH,UACAK,SAAU,CAAC,mBACXC,QAAS,IAAMm8C,GAAwBniD,SAGjCmjD,YAAaC,IAAWC,EAAAA,GAAAA,GAAY,CAC1CC,WAAajB,GAAiCF,GAAwBS,OAAOP,GAC7ExlD,YAAa,YAGPsmD,YAAaH,IAAWK,EAAAA,GAAAA,GAAY,CAC1CC,WAAU,W,WAAE,UAAOjB,SACXF,GAAwBa,OAAOX,SAC/B5lD,EAAY8mD,kBAAkB,CAAEx9C,SAAU,CAAC,oBACnD,E,iMAHmBs8C,G,gCAAT,GAIVxlD,YAAa,WAGf,MAAO,CACL2I,aACAhG,MAAO2iD,GAAwB7/C,aAAa9C,GAAS,KAAOA,EAC5DgkD,eAAgB79C,EAChBy9C,SACAJ,SAEJ,C,0HC1CO,SAASS,KACd,MAAM,eAAED,EAAgBhkD,MAAOkkD,EAAU,OAAEN,GAAWH,KAEtD,MAAO,CACLt9C,KAAM,CACJ69C,iBACAE,cAEFp9C,QAAS,CACDq9C,IAAAA,CAAKtB,G,SAA8B,YACvC,UACQe,EAAOf,GACbnuC,GAAe,CAAC,kBAAkBmuC,EAAKG,oCACzC,CAAE,MAAO7yB,GACPtc,GAAasc,EAAY,CAAC,iCAAiC0yB,EAAKG,eAClE,CACF,E,2LAGN,C,sgCCPA,MAAMoB,GAAqB,qBAgCpB,MAAMC,WAAsCppB,GAAAA,GACjD96B,WAAAA,GACE0B,MAAM,CAAC,EACT,EAEA,GALWwiD,GAKJxtB,aAAY,EACjBC,QACArV,cACAI,YACAyiC,YACAxB,mBAOA,MAAO5gD,EAASqiD,IAAc1+C,EAAAA,EAAAA,UAAmB,KAE3C,QAAEiB,GAAYm9C,KAGdluB,EAAgBpB,GADQiE,GAAAA,GAAWC,iBAAiB/B,EAAO,kBAAmB3B,IACvBjB,MAAMrzB,OAE7D02B,EApCV,SAA+BT,GAC7B,MACMS,EADsBqB,GAAAA,GAAWC,iBAAiB/B,EAAO,cAAeQ,IACtCpD,MAAMrzB,MAExC2jD,EAAkB5rB,GAAAA,GACrBC,iBAAiB/B,EAAO,oBAAqBgpB,IAC7Cj6C,WAAW2+C,gBACd,OAAOA,IAAoBC,GAAgBC,cAAgBF,IAAoBC,GAAgBE,eAC3Fj7C,EACA6tB,CACN,CA0BwBqtB,CAAsB9tB,GAGpC7Q,EADkB2S,GAAAA,GAAWC,iBAAiB/B,EAAO,UAAWiC,IACtC7E,MAAMjO,QAChC4+B,EAAc5+B,EAAQlc,KAAKtG,GAAW,GAAGA,EAAOyG,MAAMzG,EAAOoiB,YAAYpiB,EAAO5C,WAAUmZ,KAAK,OAE/F,SACJ8qC,EAAQ,aACRC,EAAY,QACZ9E,EACA+E,WAAW,OAAE3nB,KACX4nB,EAAAA,GAAAA,IAA2B,CAC7B9lC,KAAM,WACN+lC,kBAAkB,EAClB5hD,OAAQ,CACNw/C,eACAE,WAAY,GACZh+B,OAAQ,GACRuS,aAAaA,aAAAA,EAAAA,EAAa1yB,aAAc,GACxCw8B,QAAS,GACTvsB,YAAaihB,EAAchhB,MAIzBowC,EAAAA,W,WAA6C,UAAOh/C,GACxD,MAAM08C,EAA+B,CACnC9tC,GAAI,GACJiuC,WAAYoB,GAAqBj+C,EAAK68C,WACtCzrB,YAAapxB,EAAKoxB,YAClBziB,YAAa3O,EAAK2O,YAClBqO,SAAU,CAAC,IAAI0hC,MACftnB,QAASp3B,EAAK6e,OAAS7e,EAAK6e,OAAOjb,KAAK8C,I,IAAUA,E,OAAW,QAAXA,EAAAA,EAAMhM,aAANgM,IAAAA,EAAAA,EAAe,EAAE,IAAI,GACvEi2C,aAAc38C,EAAK28C,aACnBG,UAAU,SAENn8C,EAAQq9C,KAAKtB,GACnByB,GACF,E,iMAb0Dn+C,G,gCAApDg/C,GA4BN,OAbA3xC,EAAAA,EAAAA,YAAU,KACR,MAAMwF,EAAY4f,GAAAA,GAAWrf,aAAaud,GAAO5C,MAAMrzB,MACvDukB,GACGP,WAAW,CACVhC,MAAO,IAAIgiC,KACX5rC,KAA8B,IAAxBD,EAAUC,KAAKI,OACrBC,GAA0B,IAAtBN,EAAUM,GAAGD,SAElB9J,MAAMmb,IACL65B,EAAW75B,EAAY3gB,KAAKC,GAAMA,EAAEnJ,QAAO,GAC3C,GACH,CAACgkD,EAAa/tB,IAGf,kBAACnV,EAAAA,MAAKA,CACJlU,MAAM,wBACNmU,OAAQH,EACRI,UAAWA,EACXrY,cAAY,+BAEZ,kBAAC47C,OAAAA,CAAKD,SAAUJ,EAAaI,IAC3B,kBAACtO,EAAAA,MAAKA,CACJhqC,MAAM,cACNmd,YAAa,uDAAuDo6B,OACpEpkD,MAAOqlD,GAAyBhoB,EAAO2lB,YACvCzzB,UAAW8N,EAAO2lB,YAElB,kBAACz5C,MAAAA,CAAIE,WAAWtC,EAAAA,EAAAA,KAAI,CAAEC,QAAS,UAC7B,kBAACmC,MAAAA,CAAIE,WAAWtC,EAAAA,EAAAA,KAAI,CAAEm+C,aAAc,SAAUC,WAAY,eAAiBnB,IAC3E,kBAACp0B,EAAAA,MAAKA,GAAAA,CACJvmB,WAAWtC,EAAAA,EAAAA,KAAI,CAAEq+C,MAAO,CAAED,WAAY,YAAaE,YAAa,KAChE75B,YAAa,GAAGmK,EAAcpyB,SAAS4zB,GAAe,QACnD1yB,WACAyhB,QAAQ,iBAAkB,OAC7Bpb,aAAW,cACXw6C,UAAAA,EACAp2B,WAAAA,GACIw1B,EAAS,aAAc,CACzBY,SAAU,2BAEVC,QAAS,CACP9kD,MAAO,2BACPa,QAAS,8BAOnB,kBAACm1C,EAAAA,MAAKA,CAAChqC,MAAM,oBAAoBmd,YAAY,wDAC3C,kBAAC47B,GAAAA,GAAUA,CACT3iD,KAAK,SACLg9C,QAASA,EACT4F,OAAQ,EAAGrnB,WACT,kBAACvP,EAAAA,YAAWA,GAAAA,GAAAA,CAAAA,EACNuP,GAAAA,CACJt8B,QAASA,EAAQ6H,KAAK+7C,IAAS,CAAEj5C,MAAOi5C,EAAKjlD,MAAOilD,MACpDC,iBAAkB,CAChB7/C,SAAS,GAEXipB,mBAAmB,EACnBC,qBAAqB,QAM7B,kBAACvlB,EAAAA,QAAOA,MAER,kBAACgtC,EAAAA,MAAKA,CAAChqC,MAAM,eAAerD,cAAY,kDACrC+tB,EACC,kBAAChuB,MAAAA,KAAK,GAAGguB,KAET,kBAACsI,EAAAA,KAAIA,CAAC0W,QAAQ,OAAO3uC,MAAM,aAAY,iBAM3C,kBAAC49C,QAAAA,GAAAA,CAAM7hD,KAAK,OAAOqiD,QAAAA,GAAWlB,EAAS,iBAEvC,kBAACjO,EAAAA,MAAKA,CAAChqC,MAAM,gBACX,kBAACtD,MAAAA,KAAK,GAAGwsB,EAAcjB,SAASiB,EAAcpyB,SAEhD,kBAAC6hD,QAAAA,GAAAA,CAAM7hD,KAAK,OAAOqiD,QAAAA,GAAWlB,EAAS,iBAEvC,kBAACjO,EAAAA,MAAKA,CAAChqC,MAAM,gBAAgBmd,YAAY,uDACvC,kBAACgG,EAAAA,MAAKA,GAAAA,CACJ9kB,aAAW,gBACX0gB,YAAY,qCACRk5B,EAAS,mBAIjB,kBAACjO,EAAAA,MAAKA,CAAChqC,MAAM,UAAUmd,YAAY,kEACjC,kBAACzgB,MAAAA,KAAwB,IAAnB0c,EAAQlgB,OAAe,sBAAwB8+C,IAGvD,kBAACljC,EAAAA,MAAMskC,UAAS,KACd,kBAAC9zC,EAAAA,OAAMA,CAACC,QAAQ,YAAYqJ,KAAK,UAAU1O,QAAS8U,EAAW3W,aAAW,UAAS,UAGnF,kBAACiH,EAAAA,OAAMA,CAACC,QAAQ,UAAUzO,KAAK,UAAS,gBAUpD,MAAM0hD,GAA4BrlD,IAChC,MAAMiJ,GAASC,EAAAA,EAAAA,YAAWlC,IAE1B,QAAc0C,IAAV1J,QAAyC0J,IAAlB1J,EAAM0B,QAIjC,MAAmB,YAAf1B,EAAM2D,KAEN,kBAACqH,OAAAA,KACC,kBAACA,OAAAA,KAAK,kEACN,kBAACk7C,KAAAA,CAAGz8C,UAAWR,EAAOk9C,WACpB,kBAACC,KAAAA,KAAG,uDACJ,kBAACA,KAAAA,KAAG,kCAML,kBAACp7C,OAAAA,KAAMhL,EAAM0B,QAAO,EAGvBsF,GAAaC,IAA0B,CAC3Ck/C,UAAWh/C,EAAAA,GAAG;oBACIF,EAAMyG,QAAQ;MC3O3B,MAAM24C,WAAkCjkC,EAAAA,sB,6GAC7C,CADWikC,GACG1iD,OAAO,0BCLhB,MAAM2iD,WAAyBlkC,EAAAA,sB,6GACpC,CADWkkC,GACG3iD,OAAO,gBCEhB,MAAM4iD,WAA4BnkC,EAAAA,sB,6GACvC,CADWmkC,GACG5iD,OAAO,mBCRhB,MAAM6iD,WAAmCC,GAAAA,K,6GAC9C,CADWD,GACG3vB,aAAY,UAAiC,MACzDC,IAEA,MAAM,WAAE4vB,EAAU,WAAEvP,GAAergB,EAAMjxB,WACnCmT,EAAY4f,GAAAA,GAAWrf,aAAaud,GACpC6vB,EAAW3tC,EAAU4tC,cACrBC,EAAiB7tC,EAAUnT,WAEjC,OAAI6gD,EACK,KAIP,kBAACI,EAAAA,gBAAeA,CACd3P,WAAYA,SAAAA,EACZt2C,MAAOgmD,EAAehmD,MACtB6e,SAAU1G,EAAU+tC,kBACpBJ,SAAUA,EACVK,qBAAsBH,EAAeG,qBACrCC,eAAgBnwB,EAAMmwB,eACtBC,cAAepwB,EAAMowB,cACrBC,OAAQrwB,EAAMqwB,OACdC,iBAAkBpuC,EAAUquC,iBAC5BC,6BAA8BxwB,EAAMwwB,6BAEpCC,UAAU,GAGhB,IC9BF,MAAMC,GAAwB,sBAKvB,SAASC,GAAc5mD,GAC5B,GAAqB,iBAAVA,EACT,OAAO,KAGT,IAA8B,IAA1BA,EAAMkiB,QAAQ,OAChB,OAAOliB,EAGT,GAAI2mD,GAAsBlpD,KAAKuC,GAC7B,OAAOA,EAGT,GAAqB,IAAjBA,EAAMkF,OAAc,CACtB,MAAM2hD,GAAWC,EAAAA,EAAAA,OAAM9mD,EAAO,YAC9B,GAAI6mD,EAASE,UACX,OAAOF,EAASG,aAEpB,MAAO,GAAqB,KAAjBhnD,EAAMkF,OAAe,CAC9B,MAAM2hD,GAAWC,EAAAA,EAAAA,OAAM9mD,EAAO,mBAC9B,GAAI6mD,EAASE,UACX,OAAOF,EAASG,aAEpB,MAAO,GAAqB,KAAjBhnD,EAAMkF,OAAe,CAE9B,OADiB4hD,EAAAA,EAAAA,OAAM9mD,GACPgnD,aAClB,CAEA,MAAMC,EAAQC,SAASlnD,EAAO,IAC9B,OAAKmnD,MAAMF,GAIJ,MAHEH,EAAAA,EAAAA,OAAMG,GAAOD,aAIxB,C,kkBCxCO,MAAMI,WAAwBC,EAAAA,iBA2BnCC,QAAAA,CAASx8B,GACP5sB,KAAK66B,IAAI,G,uUAAA,IAAKjO,GAAAA,CAAOy8B,UAAU,IACjC,CA5BAjoD,WAAAA,GACE0B,QACA,CACE,CACEoB,KAAM,OACNU,KAAM4a,EAAAA,UAAU8pC,MAElB,CACEplD,KAAM,UACNU,KAAM4a,EAAAA,UAAU8pC,MAElB,CACEplD,KAAM,WACNU,KAAM4a,EAAAA,UAAU+pC,SAElB,CACErlD,KAAM,QACNU,KAAM4a,EAAAA,UAAUwmB,OAElB,CACE9hC,KAAM,OACNU,KAAM4a,EAAAA,UAAUC,SAElB+L,SAASiU,GAAUz/B,KAAKwpD,SAAS/pB,IACrC,E,44BCVK,gBAAKgqB,G,uDAAAA,C,CAAL,C,IAYP,MAAMC,GAAgB,CACpBxvC,MAAMyvC,EAAAA,EAAAA,UAAS,GACfpvC,IAAIovC,EAAAA,EAAAA,UAAS,GACb/uC,IAAK,CAAEV,KAAM,GAAIK,GAAI,KAShB,MAAMqvC,WACH1tB,GAAAA,GA8BR5F,UAAAA,G,IAUI,EATFt2B,KAAKu2B,UAASszB,EAAAA,GAAAA,MAAK7pD,KAAK8pD,uBAAuB30B,MAAO,QAEtDn1B,KAAKo5C,MAAMve,IACT76B,KAAK8pD,uBAAuBpxB,kBAAkBC,IAC5C34B,KAAKu2B,UAASszB,EAAAA,GAAAA,MAAKlxB,EAAU,OAAO,KAIxC34B,KAAKo5C,MAAMve,IACuB,QAAhC,EAAA76B,KAAK+pD,gBAAgB50B,MAAM0K,aAA3B,eAAkCnH,kBAAiB,CAACC,EAAUC,K,IAMvDD,EAAsCC,EAAAA,EAMtCD,EAAqCC,EAAAA,EAXrCD,EAASvxB,MAAQuxB,EAASvxB,KAAK+tB,QAAUkJ,EAAAA,aAAayB,QAK7B,QAAzBnH,EAAAA,EAASvxB,KAAKs3B,mBAAd/F,IAAAA,OAAAA,EAAAA,EAA2B3xB,UAAyB,QAAd4xB,EAAAA,EAAUxxB,YAAVwxB,IAAAA,GAA2B,QAA3BA,EAAAA,EAAgB8F,mBAAhB9F,IAAAA,OAAAA,EAAAA,EAA6B5xB,UAM1C,QAAzB2xB,EAAAA,EAASvxB,KAAKs3B,mBAAd/F,IAAAA,OAAAA,EAAAA,EAA2B3xB,UAAwB,QAAd4xB,EAAAA,EAAUxxB,YAAVwxB,IAAAA,GAA2B,QAA3BA,EAAAA,EAAgB8F,mBAAhB9F,IAAAA,OAAAA,EAAAA,EAA6B5xB,UACrE2xB,EAASvxB,KAAKs3B,YAAc9F,EAAUxxB,KAAKs3B,aAN3C1+B,KAAKgqD,6BAOP,IAGN,CAEUF,oBAAAA,GACR,IAAK9pD,KAAKw5B,SAAWx5B,KAAKw5B,OAAOA,OAC/B,MAAM,IAAIh3B,aAAaxC,KAAO,yCAGhC,OAAO65B,GAAAA,GAAWrf,aAAaxa,KAAKw5B,OAAOA,OAC7C,CAEUuwB,aAAAA,GACR,IACE,MAAMnW,EAAW/Z,GAAAA,GAAWmO,YAAYhoC,KAAMiqD,GAAAA,IAE9C,GAAgC,eAA5BrW,EAASze,MAAMgF,SACjB,MAAM,IAAIzH,UAAU,4BAGtB,OAAOkhB,CACT,CAAE,MAAO3yC,GACP,MAAM,IAAIuB,MAAM,uCAClB,CACF,CAEAwnD,0BAAAA,GACE,MAAM,oBAAEE,EAAmB,gBAAEC,EAAe,gBAAEC,GAAoBpqD,KAAKm1B,OAEjE,MAAE0K,GAAU7/B,KAAK+pD,gBAAgB50B,MAEjC/tB,EAAOy4B,aAAAA,EAAAA,EAAO1K,MAAM/tB,KAC1B,IAAKA,EACH,OAGF,MAAMijD,EAAa,IAAInB,GAEvBmB,EAAWjB,SAAS,CAClBvgD,MAAOshD,EACPphD,KAAMqhD,EACNd,KAAwC,IAAlCY,EAAoBhwC,KAAKI,OAC/BgwC,QAAyC,IAAhCJ,EAAoB3vC,GAAGD,SAIlCulB,SAAAA,EAAOtJ,SAAS,CACdnvB,KAAM,SACDA,GAAAA,CACHs3B,YAAa,CAAC2rB,MAGpB,CAEAE,sBAAAA,CAAuBL,EAAgCM,GAAmB,GACxExqD,KAAKu2B,SAAS,CAAE2zB,wBAEZM,GACFxqD,KAAKgqD,4BAET,CAEAS,0BAAAA,GACEzqD,KAAKuqD,uBAAuBb,GAC9B,CAEAvtB,WAAAA,GACE,MAAM,oBAAE+tB,GAAwBlqD,KAAKm1B,MAErC,MAAO,CACLu1B,SAC0C,iBAAjCR,EAAoBtvC,IAAIV,KAC3BgwC,EAAoBtvC,IAAIV,KACxBgwC,EAAoBtvC,IAAIV,KAAK4uC,cACnC6B,OACwC,iBAA/BT,EAAoBtvC,IAAIL,GAC3B2vC,EAAoBtvC,IAAIL,GACxB2vC,EAAoBtvC,IAAIL,GAAGuuC,cAErC,CAEAzsB,aAAAA,CAAc93B,GACZ,MAAM,SAAEmmD,EAAQ,OAAEC,GAAWpmD,EAE7B,IAAKomD,IAAWD,EACd,OAGF,MAAM,oBAAER,GAAwBlqD,KAAKm1B,M,IAIjCuzB,EACAA,EAHJ1oD,KAAKuqD,uBACHvqD,KAAK4qD,yBACWF,QAAdhC,EAAAA,GAAcgC,UAAdhC,IAAAA,EAAAA,EAA2BwB,EAAoBhwC,KACjCywC,QAAdjC,EAAAA,GAAciC,UAAdjC,IAAAA,EAAAA,EAAyBwB,EAAoB3vC,IAGnD,CAEAqwC,wBAAAA,CAAyBF,EAA6BC,GACpD,OC/LG,SACLzwC,EACAK,EACAqtC,EACAK,EACA4C,GAEA,MAAMC,EAAWD,GAAgB,QAAPtwC,EAE1B,MAAO,CACLL,KAAM6wC,EAAAA,SAASppD,MAAMuY,GAAM,EAAO0tC,EAAUK,GAC5C1tC,GAAIwwC,EAAAA,SAASppD,MAAMmpD,EAAW,OAASD,EAAQtwC,GAAI,EAAMqtC,EAAUK,GACnErtC,IAAK,CACHV,KAAMA,EACNK,GAAIA,GAGV,CD8KWywC,CACLN,EACAC,EACA3qD,KAAK6nD,cACL7nD,KAAKm1B,MAAM8yB,qBACXjoD,KAAKm1B,MAAM81B,gBAEf,CAEAjD,iBAAAA,CAAkB/tC,GAChB,MAAM,KAAEmG,GAASpgB,KAAKm1B,MAET,YAAT/U,EAOJpgB,KAAKuqD,uBAAuBtwC,GAAW,GANrCja,KAAK8pD,uBAAuB9B,kBAAkB/tC,EAOlD,CAEAquC,gBAAAA,CAAiBV,GACf5nD,KAAK8pD,uBAAuBxB,iBAAiBV,EAC/C,CAEAC,WAAAA,GACE,OAAO7nD,KAAK8pD,uBAAuBjC,aACrC,CAEA9Q,SAAAA,GACE/2C,KAAK8pD,uBAAuB/S,WAC9B,CA7KA31C,WAAAA,CAAY+B,GAMVL,MAAM,IACJoX,KAAMwvC,GAAc9uC,IAAIV,KACxBK,GAAImvC,GAAc9uC,IAAIL,GACtBzY,MAAO4nD,GACPQ,oBAAqBR,IAClBvmD,IArBP,QAAUqtC,sBAAsB,IAAIC,GAAAA,GAAyBzwC,KAAM,CACjE0wC,cAAe,CAAC,aAAc,eAC9BC,iCAAkC,KAChC3wC,KAAKyqD,6BACLzqD,KAAKgqD,4BAA4B,KAIrC,QAAUxtB,WAAW,IAAIC,GAAAA,GAAyBz8B,KAAM,CAAE08B,KAAM,CAAC,WAAY,aAgB3E18B,KAAK43B,qBAAqB53B,KAAKs2B,WAAWqB,KAAK33B,MACjD,EE9DK,MAAMkrD,WAA0C7nC,EAAAA,qB,uOACrD,CADW6nC,GACGtmD,OAAO,mCCDhB,gBAAKumD,G,4DAAAA,C,CAAL,C,IASA,MAAMC,WAA2ClvB,GAAAA,GAMtD96B,WAAAA,GACE0B,MAAM,CACJsd,KAAM,gBAIV,QAAOO,YAAY0qC,IACjBrrD,KAAKu2B,SAAS,CAAEnW,KAAMirC,IAEtBrrD,KAAKggC,aAAa,IAAIkrB,GAAkC,CAAE9qC,KAAMirC,KAAY,EAAK,GALnF,EATA,GADWD,GACJzuB,UAAU,CACf,CAAE7uB,MAAO,cAAehM,MAAO,cAC/B,CAAEgM,MAAO,cAAehM,MAAO,iBAejC,GAlBWspD,GAkBGtzB,aAAY,EAAGC,YAC3B,MAAM7tB,GAASC,EAAAA,EAAAA,YAAWlC,KACpB,KAAEmY,GAAS2X,EAAMjxB,WAEvB,OACE,kBAAC0D,MAAAA,CAAIE,UAAWR,EAAOwK,WACrB,kBAAC5G,QAAAA,CAAMpD,UAAWR,EAAO4D,OACvB,kBAAC7B,OAAAA,KAAK,yBACN,kBAACgmB,EAAAA,QAAOA,CACNlmB,QACE,kBAACvB,MAAAA,CAAIE,UAAWR,EAAOtB,SACrB,kBAAC4B,MAAAA,KAAI,uGAGL,kBAAC8gD,KAAAA,KACC,kBAACC,KAAAA,KAAG,eACJ,kBAACC,KAAAA,KAAG,0CACJ,kBAACD,KAAAA,KAAG,eACJ,kBAACC,KAAAA,KAAG,8GAOV/8C,UAAU,OAEV,kBAACmB,EAAAA,KAAIA,CAAC1L,KAAK,sBAGf,kBAAC04B,EAAAA,iBAAgBA,CACfjzB,KAAK,KACLxG,QAASioD,GAAmCzuB,QAC5C76B,MAAOse,EACPO,SAAUoX,EAAMpX,SAChBxU,aAAW,yB,IAOrB,MAAMlE,GAAaC,IAA0B,CAC3CwM,UAAWtM,EAAAA,GAAG;;;IAIdQ,QAASR,EAAAA,GAAG;eACCF,EAAMyG,QAAQ;;oBAETzG,EAAMyG,QAAQ;;kBAEhBzG,EAAMyG,QAAQ,MAAMzG,EAAMyG,QAAQ;;;;;;;;;;IAWlDb,MAAO1F,EAAAA,GAAG;;;;aAICF,EAAMY,OAAOC,KAAKC;MCjGxB,SAASyiD,IAAkC,UAChD7xB,IAgBA,OAAOiE,GAZa,IAAIgB,GAAAA,GAAiB,CACvC3H,WAAYlB,GACZ33B,QAAS,CACP,CACE4/B,MAAO,iCAAiCrE,KACxCkF,UAAW,UACXf,cAAe,mBACfC,cAAe,iCAAiCpE,SAMxD,C,0BCrBO,MAAM8xB,GAAkB,CAC7BC,MAAOC,KAAM,WACbC,QAASD,KAAM,WAAWE,MAAM,KAGrBC,GAAoB,CAC/BJ,MAAOC,KAAM,WACbC,QAASD,KAAM,WAAWE,MAAM,K,44BCuD3B,MAAME,WAA0B9vB,GAAAA,GAwCrC5F,UAAAA,CAAWqqB,EAA+BC,EAAyB15B,GACjE,MAAM,WAAE+kC,EAAU,gBAAEjQ,EAAe,UAAEpiB,GAAc55B,KAAKm1B,MAUxD,GARIyrB,GACF5gD,KAAKksD,aAAa,MAGhBvL,GACFsL,EAAW11B,UAASszB,EAAAA,GAAAA,MAAK7pD,KAAK8pD,uBAAuB30B,MAAO,QAG1DjO,EAAQlgB,OAAQ,CACM6yB,GAAAA,GAAWsyB,UAAUnsD,KAAM45B,GAEnCrD,SAAS,CAAErP,WAC7B,CAEA80B,EAAgBlR,WAAW,CAAEh9B,MAAO9N,KAAKosD,yBAEzC,MAAMC,EAAWrsD,KAAKssD,oBAEtB,MAAO,KACLD,EAAS7wB,aAAa,CAE1B,CAEA,2BAAO+wB,EAAqB,OAAEt8C,EAAM,UAAE2pB,EAAS,MAAElrB,EAAK,MAAE7F,IACtD,MAAMmzC,EAA8C,IAAI/T,GAA2B,CACjFtI,KAAM,CACJ5C,MAAO,EACPj7B,MAAOmO,EACPnC,MAAO,GACPqyB,kBAAmB,CAAC,EACpB/D,UAAWJ,GAAU0P,YAEvBtkC,KAAM,IAAI47B,GAAAA,GAAqB,CAC7BnD,MAAO4rB,GAAkC,CAAE7xB,cAC3CqJ,gBAAiB,CAAClE,GAAUK,MAE9B+C,UAAY3E,GAAwBwuB,GAAkBQ,qBAAqBhvB,EAAQ30B,GACnF85B,cAAe,IAAM,CAAC,IAAIyoB,MAI5B,OADAY,GAAkBS,mBAAmBzQ,EAAiB/rC,EAAQvB,GACvDstC,CACT,CAEA,2BAAewQ,CAAqBhvB,EAAqB30B,GACvD,OAAO20B,EAAOxyB,KAAKC,IACjB,MAAMqyB,EAAcryB,EAAEsU,OAAO,GACvBigB,EAAejC,GAAoBtyB,EAAG,iBAAmB,EAKzDw3B,EAAa,CACjB,CACEzsB,GAAI,cACJlU,MAAO,GANSkqD,GAAkBU,eAAezhD,QACvC+gD,GAAkBW,iBAAiBntB,EAAclC,EAAY94B,OAAO2Z,MAAQ,YAOxF,CACEnI,GAAI,QACJlU,MAAO,CAAEse,KAAM,QAASsiB,WAAY75B,KAIxC,MAAO,CACLy5B,QAAS,CAAEtsB,GAAIusB,EAAAA,eAAeC,aAAcr/B,QAAS8H,EAAEgzB,OACvDwE,aACD,GAEL,CAEA,qBAAeiqB,CAAezhD,GAC5B,MACM2hD,EADuBxpB,GAA8B,GAAIn4B,GACvBqc,MAAM,gBAC9C,OAAOslC,EAAaA,EAAW,GAAK,OACtC,CAEA,uBAAeD,CAAiBntB,EAAsBqtB,GACpD,MAAMC,EAAkBD,GAAe,QACjCE,GAAiBljD,EAAAA,EAAAA,gBAAeijD,EAAfjjD,CAAgC21B,GAEvD,MAAO,GAAGutB,EAAehkD,OAAOgkD,EAAehpB,QACjD,CAEA,yBAAe0oB,CAAmBzQ,EAA6C/rC,EAAgBvB,GAC7FstC,EAAgB7mB,MAAM9uB,KAAKkwB,SAAS,CAClC01B,WAAY,IAAIrC,GAA8B,CAC5Cz+C,IAAK,GAAG8E,yBACRmQ,KAAMqpC,GAA6BuD,YACnC7C,gBACEl6C,IAAWgJ,GAAc0B,SAAW+wC,GAAgBG,QAAQ/lD,WAAaimD,GAAkBF,QAAQ/lD,WACrGskD,gBAAiB,GAAG17C,yBAG1B,CAEA,mBAAOu+C,CACLjR,G,IAKmBA,EAAAA,EAAAA,EAQOA,EAX1B,IAAI0O,EACAC,EAEJ,MAAMN,EAAmD,QAAtCrO,EAAAA,EAAgB7mB,MAAM9uB,KAAK8uB,MAAM0K,aAAjCmc,IAAAA,GAAkD,QAAlDA,EAAAA,EAAwC7mB,MAAM/tB,YAA9C40C,IAAAA,GAA+D,QAA/DA,EAAAA,EAAoDtd,mBAApDsd,IAAAA,OAAAA,EAAAA,EAAkE,GAQrF,OANAqO,SAAAA,EAAY9qC,OAAOqO,MAAK,EAAG1pB,OAAMK,aAC/BmmD,EAAoB,SAATxmD,EAAkBK,EAAO,GAAKmmD,EACzCC,EAAkB,YAATzmD,EAAqBK,EAAO,GAAKomD,EACnCD,GAAYC,KAGd,CAACD,EAAUC,EAAwC,QAAhC3O,EAAAA,EAAgB7mB,MAAM82B,kBAAtBjQ,IAAAA,OAAAA,EAAAA,EAAkC7mB,MAAMyyB,SACpE,CAEUkC,oBAAAA,GACR,IAAK9pD,KAAKw5B,SAAWx5B,KAAKw5B,OAAOA,OAC/B,MAAM,IAAIh3B,aAAaxC,KAAO,yCAGhC,OAAO65B,GAAAA,GAAWrf,aAAaxa,KAAKw5B,OAAOA,OAC7C,CAEA8yB,iBAAAA,G,IAoCkBtQ,EAnChB,MAAM,OAAE/rC,EAAM,gBAAE+rC,EAAe,WAAEiQ,GAAejsD,KAAKm1B,MAE/C+3B,EAAuBlR,EAAgB7mB,MAAM9uB,KAAK8uB,MAAM82B,WAExDkB,EAAYntD,KAAKg0C,iBAAiBkX,IAAoChiC,IAG1EgkC,EAAqB32B,SAAS,CAC5BnW,KACE8I,EAAM1T,QAAQ4K,OAAS+qC,GAAuBiC,WAC1C3D,GAA6BuD,YAC7BvD,GAA6B4D,SACnC,IAGEC,EAAyBJ,EAAqBx0B,kBAAiB,CAACC,EAAUC,KAC1E54B,KAAKm1B,MAAMo4B,sBAAwB50B,EAASuxB,sBAAwBtxB,EAAUsxB,qBAChFlqD,KAAKggC,aACH,IAAIwnB,GAAoB,CAAExoB,OAAQ/uB,EAAQi6C,oBAAqBvxB,EAASuxB,uBACxE,EAEJ,IAGIsD,EAAevB,EAAWvzB,kBAAiB,CAACC,EAAUC,KACtDD,EAASze,OAAS0e,EAAU1e,MAAQye,EAASpe,KAAOqe,EAAUre,KAChEva,KAAKytD,YAAY,IAEbztD,KAAKm1B,MAAMo4B,sBACbvtD,KAAKggC,aAAa,IAAIwnB,GAAoB,CAAExoB,OAAQ/uB,EAAQgK,UAAW0e,KAAa,GAExF,IAIImR,EAAgD,QAAtCkS,EAAAA,EAAgB7mB,MAAM9uB,KAAK8uB,MAAM0K,aAAjCmc,IAAAA,OAAAA,EAAAA,EAAwCtjB,kBAAkBC,I,IACpEA,EAAmCA,EAAV,UAAZ,QAAbA,EAAAA,EAASvxB,YAATuxB,IAAAA,OAAAA,EAAAA,EAAexD,SAAwC,QAApBwD,EAAAA,EAASvxB,KAAKo2B,cAAd7E,IAAAA,OAAAA,EAAAA,EAAsB3xB,SAC3DhH,KAAK0tD,wBAAwB/0B,EAASvxB,KAAKo2B,OAC7C,IAGF,MAAO,CACLhC,WAAAA,GACEgyB,EAAahyB,cACb8xB,EAAuB9xB,cACvB2xB,EAAU3xB,cACVsO,SAAAA,EAAStO,aACX,EAEJ,CAEA4wB,oBAAAA,GACE,MAAMv2B,EAAkB+F,GAAsB57B,KAAM,oBAC9C,YAAEirB,GAAgB2K,GAAiBC,GACzC,OAAO5K,GAAe8b,GAAsBlR,EAC9C,CAEA83B,gBAAAA,GACE,OAAO,KAAMx4B,MAAM6mB,gBAAgB7mB,MAAM9uB,KAAK8uB,MAAM82B,WAA6CnlD,UACnG,CAEA8mD,WAAAA,EAAY,KAAE1zC,EAAI,GAAEK,EAAE,SAAEmwC,EAAQ,OAAEC,EAAM,MAAE78C,IACxC9N,KAAKksD,aAAa,CAAEhyC,KAAMwwC,EAAUnwC,GAAIowC,IAExC3qD,KAAK6tD,aAAanM,GAAexnC,EAAMK,IAEvCva,KAAKytD,YAAY3/C,EACnB,CAEA+/C,YAAAA,CAAaC,GACX,MAAM,KAAE5zC,EAAI,GAAEK,GAAOva,KAAKm1B,MAAM82B,WAAW92B,MAAMrzB,MAE5CoY,EAAK6zC,OAAOD,EAAahsD,MAAMoY,OAAUK,EAAGwzC,OAAOD,EAAahsD,MAAMyY,KACzEva,KAAKm1B,MAAM82B,WAAW11B,SAAS,CAAErc,KAAM4zC,EAAa5zC,KAAMK,GAAIuzC,EAAavzC,GAAIzY,MAAOgsD,EAAahsD,OAEvG,CAEAoqD,YAAAA,CAAa/oD,GACX,MAAM6qD,EAAiBhuD,KAAKm1B,MAAM6mB,gBAAgB7mB,MAAM9uB,KAAK8uB,MAAM82B,WAEnE,GAAgB,OAAZ9oD,EAEF,YADA6qD,EAAevD,6BAIjB,MAAM,oBAAEP,GAAwB8D,EAAe74B,MACzC84B,EAAyBD,EAAepD,yBAAyBznD,EAAQ+W,KAAM/W,EAAQoX,IAG1F2vC,EAAoBhwC,KAAK6zC,OAAOE,EAAuB/zC,OACvDgwC,EAAoB3vC,GAAGwzC,OAAOE,EAAuB1zC,KAEtDyzC,EAAezD,uBAAuB0D,GAAwB,EAElE,CAQAC,mBAAAA,CAAoBC,GAClB,MAAM,WAAElC,EAAU,OAAEh8C,GAAWjQ,KAAKm1B,OAC9B,KAAEjb,EAAI,GAAEK,GAAO0xC,EAAW92B,MAAMrzB,MAItC,GAFA9B,KAAKytD,YAAY,IAEbU,EAEF,YADAnuD,KAAKksD,aAAa,CAAEhyC,KAAMA,EAAK4uC,cAAevuC,GAAIA,EAAGuuC,gBAIvD,MAAMhsC,EAAOvC,EAAGuC,KAAK5C,GAGfisB,EAAQ/rB,KAAK0nB,IAAI1nB,KAAKC,MAAa,IAAPyC,GAvShB,OAySd7M,IAAWgJ,GAAc0B,SAE3B3a,KAAKksD,aAAa,CAAEhyC,KAAMA,EAAK4uC,cAAevuC,IAAIovC,EAAAA,EAAAA,UAASzvC,GAAM2gB,IAAIsL,GAAO2iB,gBAG5E9oD,KAAKksD,aAAa,CAAEhyC,MAAMyvC,EAAAA,EAAAA,UAASpvC,GAAI6zC,SAASjoB,GAAO2iB,cAAevuC,GAAIA,EAAGuuC,eAEjF,CAEA2E,WAAAA,CAAY3/C,EAAQ,IAClB,MAAMY,EAAQ1O,KAAKm1B,MAAMllB,SAAWgJ,GAAc0B,SAAW,WAAa,aACpE0zC,EAAWvgD,EAAQ,GAAGY,MAAUZ,KAAWY,EAEjD1O,KAAKu2B,SAAS,CAAE7nB,MAAO2/C,GACzB,CAiBAC,mBAAAA,CAAoBf,GAClBvtD,KAAKu2B,SAAS,CAAEg3B,wBAClB,CAMAgB,iBAAAA,GACEvuD,KAAKm1B,MAAM82B,WAAWlV,WACxB,CAEQ2W,uBAAAA,CAAwBc,GAC9B,MAAMC,EAAezuD,KAAK0uD,kBAC1B,IAAKD,EACH,OAGF,MAAME,EAAc3uD,KAAK4uD,eAAeH,IACnCE,aAAAA,EAAAA,EAAa3nD,SAIlBhH,KAAK6uD,2BAA2BL,EAAQG,EAC1C,CAEQD,eAAAA,GACN,IAAK1uD,KAAKw5B,OACR,OAAO,KAGT,MAAMs1B,EAAc,UAAW9uD,KAAKw5B,OAASx5B,KAAKw5B,OAAOrE,MAAQn1B,KAAKw5B,OACtE,MAAM,kBAAmBs1B,GAAe,oBAAqBA,EAItD9uD,KAAKm1B,MAAMllB,SAAWgJ,GAAc0B,SACtCm0C,EAAYC,gBACZD,EAAYE,cALR,IAMX,CAEQJ,cAAAA,CAAeH,G,IACdA,EAAAA,EAAP,OAAgE,QAAzDA,EAAAA,EAAat5B,MAAM6mB,gBAAgB7mB,MAAM9uB,KAAK8uB,MAAM0K,aAApD4uB,IAAAA,GAAqE,QAArEA,EAAAA,EAA2Dt5B,MAAM/tB,YAAjEqnD,IAAAA,OAAAA,EAAAA,EAAuEjxB,SAAU,IAC1F,CAEQqxB,0BAAAA,CAA2BL,EAAqBG,GACtD,MAAMM,EAASjvD,KAAKkvD,oBAAoBV,GAClCW,EAAcnvD,KAAKkvD,oBAAoBP,GAE7C,GAAIM,GAAUE,GAAe/0C,KAAKg1C,IAAIH,EAASE,GAAe,KAAO,CACnE,MAAME,EAAaj1C,KAAK6lB,IAAIgvB,EAAQE,GAEhCnvD,KAAKm1B,MAAMm6B,oBAAsBD,IACnCrvD,KAAKu2B,SAAS,CAAE+4B,kBAAmBD,IACnCrvD,KAAKuvD,gBAAgBF,GAEzB,CACF,CAEQH,mBAAAA,CAAoB9nD,G,IAMrBooD,EALL,KAAKpoD,aAAAA,EAAAA,EAAMJ,QACT,OAAO,KAGT,MAAMwoD,EAAYpoD,EAAK,GAAGmY,OAAOjgB,MAAMi7B,GAAiB,SAAXA,EAAE31B,OAC/C,KAAK4qD,SAAiB,QAAjBA,EAAAA,EAAWjrD,cAAXirD,IAAAA,OAAAA,EAAAA,EAAmBxoD,SAAUwoD,EAAUjrD,OAAOyC,OAAS,EAC1D,OAAO,KAGT,MAAMyoD,EAAQD,EAAUjrD,OAGxB,OAFuBkrD,EAAM,GAAKA,EAAM,IACC,GAE3C,CAEQF,eAAAA,CAAgBG,G,IACF,EAApB,MAAM5xB,EAA+D,QAAjD,EAAA99B,KAAKm1B,MAAM6mB,gBAAgB7mB,MAAM9uB,KAAK8uB,MAAM0K,aAA5C,eAAmD1K,MAAM0K,MAC7E,KAAK/B,aAAAA,EAAAA,EAAavH,aAAauH,aAAAA,EAAAA,EAAaoN,YAC1C,OAGF,MAEMykB,EAFiB7xB,EAAY3I,MAAM92B,QAEH2M,KAAK8Y,GAAgB,SACtDA,GAAAA,CACH8rC,KAAMF,MAGR5xB,EAAYvH,SAAS,CAAEl4B,QAASsxD,IAChC7xB,EAAYoN,YACd,CA3YA9pC,WAAAA,EAAY,OACV6O,EAAM,qBACN0wC,EAAoB,eACpBC,EAAc,QACd15B,IAOA,MAAM0S,EAAY3pB,IAAWgJ,GAAc0B,SAAW,kBAAoB,oBACpEjM,EAAQuB,IAAWgJ,GAAc0B,SAAW,WAAa,aACzD9R,EACJoH,IAAWgJ,GAAc0B,SAAW+wC,GAAgBC,MAAM7lD,WAAaimD,GAAkBJ,MAAM7lD,WAEjGhD,MAAM,CACJqI,IAAK,GAAG8E,UACRA,SACA2pB,YACAlrB,QACA7F,QACAojD,WAAY,IAAI4D,GAAAA,GAAe,IAAE1kD,IAAK,GAAG8E,qBAA6ByxC,GAAe,SAAU,SAC/FoO,WAAY,IAAIrI,GAA2B,CAAErP,YAAY,IACzD2X,cAAe,IAAIC,GAAAA,GAAmB,CAAE5X,YAAY,IACpD4D,gBAAiBgQ,GAAkBO,qBAAqB,CAAEt8C,SAAQ2pB,YAAWlrB,QAAO7F,UACpF0kD,sBAAsB,IAjC1B,QAAU/c,sBAAsB,IAAIC,GAAAA,GAAyBzwC,KAAM,CACjE0wC,cAAe,CAAC,mBAChBC,iCAAkC,KAChC3wC,KAAKm1B,MAAM6mB,gBAAgBlR,WAAW,CAAEh9B,MAAO9N,KAAKosD,wBAAyB,KAsSjF6D,GAAAA,KAAAA,wBAAuB,KACrB,MAAM,OAAEhgD,EAAM,qBAAEs9C,EAAoB,WAAEtB,EAAU,gBAAEjQ,GAAoBh8C,KAAKm1B,MACrE+3B,EAAuBlR,EAAgB7mB,MAAM9uB,KAAK8uB,MAAM82B,WAE9DjsD,KAAKggC,aACH,IAAIsnB,GAA0B,CAC5BtoB,OAAQ/uB,EACRigD,QAAS3C,EACTtzC,UAAWgyC,EAAW92B,MACtB+0B,oBAAqBgD,EAAqB/3B,MAAM+0B,uBAElD,MAQJ5X,GAAAA,KAAAA,kBAAiB,KACftyC,KAAKggC,aAAa,IAAIunB,GAAiB,CAAEvoB,OAAQh/B,KAAKm1B,MAAMllB,UAAW,EAAK,IAzR5EjQ,KAAK43B,qBAAqB53B,KAAKs2B,WAAWqB,KAAK33B,KAAM2gD,EAAsBC,EAAgB15B,GAC7F,EA+WA,GArZW8kC,GAqZGl0B,aAAY,EAAGC,YAC3B,MAAM,OACJ9nB,EAAM,MACNpH,EAAK,MACL6F,EACAstC,gBAAiBjT,EAAU,WAC3B+mB,EAAU,cACVC,EAAa,UACbn2B,EAAS,qBACT2zB,GACEx1B,EAAMjxB,WAEJoD,GAASC,EAAAA,EAAAA,YAAWlC,GAAWY,GAE/BmqC,EAAkBnZ,GAAAA,GAAWsyB,UAAUp0B,EAAO6B,GAEpD,OACE,kBAACpvB,MAAAA,CAAIE,UAAWR,EAAOq2C,MAAO91C,cAAa,SAASwF,KAClD,kBAACzF,MAAAA,CAAIE,UAAWR,EAAOimD,aACrB,kBAACC,KAAAA,KACC,kBAAC5lD,MAAAA,CAAIE,UAAWR,EAAOmmD,cACtB3hD,GAGH,kBAAClE,MAAAA,CAAIE,UAAWR,EAAOomD,cACrB,kBAACR,EAAWh4B,UAAS,CAACC,MAAO+3B,IAE7B,kBAACtlD,MAAAA,CAAIwD,QAAS+pB,EAAMua,gBAClB,kBAACyd,EAAcj4B,UAAS,CAACC,MAAOg4B,KAGlC,kBAAC7jD,EAAAA,WAAUA,CACTxB,WAAW4B,EAAAA,EAAAA,IAAGpC,EAAOqmD,WAAYhD,GAAwB,UACzDrpD,KAAK,OACLiI,aAAYohD,EAAuB,qBAAuB,mBAC1D3kD,QAAS2kD,EAAuB,qBAAuB,mBACvDv/C,QAAS+pB,EAAMk4B,yBAKrB,kBAACzlD,MAAAA,CAAIE,UAAWR,EAAOxF,QACrB,kBAACsuC,EAAgBlb,UAAS,CAACC,MAAOib,KAGpC,kBAACxoC,MAAAA,CAAIE,UAAWR,EAAO6+B,YAAaA,GAAc,kBAACA,EAAWjR,UAAS,CAACC,MAAOgR,K,IAMvF,MAAM9gC,GAAY,CAACC,EAAsBW,KAAmB,CAC1D03C,MAAOn4C,EAAAA,GAAG;wBACYF,EAAMY,OAAOmI,WAAWuB;eACjCtK,EAAMyG,QAAQ,MAAMzG,EAAMyG,QAAQ,QAAQzG,EAAMyG,QAAQ;wBAC/CzG,EAAMY,OAAOkyC,OAAOC;;IAG1CkV,YAAa/nD,EAAAA,GAAG;;;;qBAIGF,EAAMyG,QAAQ;;;;;;;kBAOjBzG,EAAMyG,QAAQ;;IAG9B0hD,YAAajoD,EAAAA,GAAG;;wBAEMS;;;;;IAMtBynD,aAAcloD,EAAAA,GAAG;;;;IAKjBmoD,WAAYnoD,EAAAA,GAAG;;eAEFF,EAAMyG,QAAQ,EAAG;;kBAEdzG,EAAMY,OAAOE,UAAUqZ;wBACjBna,EAAMY,OAAOE,UAAUgyC;qBAC1B9yC,EAAM21C,MAAMC,OAAOC;;;oBAGpB71C,EAAMY,OAAOE,UAAUwnD;;;;eAI5BtoD,EAAMY,OAAO0J,QAAQzJ;0BACVb,EAAMY,OAAO0J,QAAQzJ;;IAG7CrE,OAAQ0D,EAAAA,GAAG;;qBAEQF,EAAMyG,QAAQ;IAEjCo6B,WAAY3gC,EAAAA,GAAG;;;;;;;;;;MCljBV,SAASqoD,KACd,MAAOC,EAAaC,IAAkB7pD,EAAAA,EAAAA,UAAkB,OACjD8pD,EAAeC,IAAoB/pD,EAAAA,EAAAA,YAE1C,MAAO,CACLgqD,MAAAA,CAAOC,GACLF,GAAiB,IAAME,GACzB,EACAluC,OAAOmuC,GACEA,IAAYN,EAErBziD,IAAAA,CAAK+iD,GACHL,EAAeK,GACfJ,SAAAA,GACF,EACA7tC,KAAAA,GACE4tC,EAAe,KACjB,EAEJ,CCxBO,MAAMM,GAAmC9sD,OAAOC,OAAO,CAC5DwZ,sBAAsB,EACtBszC,SAAU,MACV/1C,8BAA8B,EAC9Bg2C,uBAAuB,EACvBC,2BAA2B,I,gUCN7B,MAAMC,WAA0BhtD,EAGxB5C,GAAAA,G,oCAAN,gBACE,OAAO,WACE,mCAAoC,CAAE2E,OAAQ,OAAQC,KAAM3E,KAAKM,UAAU,CAAC,KAClFwO,MAAM/N,GAAaA,EAASoB,SAC5B2M,MAAM3M,I,IACWA,EAAhB,MAAMytD,EAAuB,QAAbztD,EAAAA,EAAK0tD,gBAAL1tD,IAAAA,OAAAA,EAAAA,EAAevE,MAAK,EAAG4E,UAAWA,IAASmtD,GAAkBG,sBAE7E,OAAKF,EAIE5vD,KAAKC,MAAM2vD,EAAQxvD,OAHjB,CAAC,CAGsB,GAEtC,GAbA,E,CAeMD,GAAAA,CAAI4vD,G,oCAAV,gBACE,OAAO,WACE,mCAAoC,CACzCrrD,OAAQ,OACRC,KAAM3E,KAAKM,UAAU,CACnBsvD,QAAS,CACPptD,KAAMmtD,GAAkBG,oBACxB1vD,MAAOJ,KAAKM,UAAUyvD,QAI3BjhD,MAAM/N,GAAaA,EAASoB,QACjC,GAZA,E,gHAjBA,CADIwtD,GACGG,sBAAsB,kBAgCxB,MAAME,GAAuB,IAC3B,IAAIL,GCrBN,SAASM,IAAuB,QAAExqD,GAAyB,CAAC,GACjE,MAAMyqD,EAAoBF,MAEpB,WAAEzqD,EAAU,MAAEhG,EAAK,KAAEmG,IAASE,EAAAA,EAAAA,GAAS,CAC3CH,UACAK,SAAU,CAAC,WAAY,UAAYnD,EAAUQ,0BAA0BS,KACvEmC,QAAS,IACPmqD,EAAkBnwD,MAAM+O,MACrB3M,GAECM,OAAOu4B,KAAKu0B,IAAkBj8C,QAAO,CAACC,EAAK9J,K,IACzC8J,EAAI9J,E,EACJ,OADQ,QAAR8J,GAAAA,EAAAA,GAAI9J,EAAAA,UAAI,QAAR8J,EAAI9J,GAAS8lD,GAAiB9lD,IACvB8J,CAAG,GACTpR,QAIH+gD,YAAaC,IAAWC,EAAAA,GAAAA,GAAY,CAC1CC,WAAa0M,GAAgCG,EAAkB/vD,IAAI4vD,GACnEnzD,YAAa,WAGf,MAAO,CACL2I,aACAhG,MAAO2wD,EAAkB7tD,aAAa9C,GAAS,KAAOA,EACtDswD,SAAUnqD,EACVy9C,SAEJ,CCpCO,SAASgN,IAAa,SAAExhD,EAAQ,MAAE3B,EAAK,QAAE/L,EAAO,MAAE1B,EAAK,aAAE6wD,IAK9D,OAJI7wD,GACFf,EAAOe,MAAMA,EAAO6wD,GAIpB,kBAAC1hD,EAAAA,MAAKA,CAAC1B,MAAOA,EAAO2B,SAAUA,GAC5BpP,GACC,oCACGA,EAAM0B,QACP,kBAAC2P,KAAAA,OAGJ3P,EAGP,C,eClBO,SAASovD,IAAY,SAAEhiD,EAAQ,MAAE86C,IACtC,MAAOmH,EAAcC,IAAmBnrD,EAAAA,EAAAA,WAAS,GAOjD,OANA2N,EAAAA,EAAAA,YAAU,KACRvV,OAAOy0B,YAAW,KAChBs+B,GAAgB,EAAK,GACpBpH,EAAM,GACR,CAAC96C,EAAU86C,IAEP,oCAAGmH,EAAejiD,EAAW,KACtC,CCcO,SAASmiD,IAAU,KACxBC,EAAI,MACJzjD,EAAK,UACLD,EAAY,SAAQ,OACpByO,EAAM,gBACNk1C,EAAe,gBACfC,EAAe,gBACfC,EAAe,WACfC,IAEA,MAAMC,EAAS9jD,EAAQ+jD,GAAAA,GAAUC,WAAWC,OAAOC,MAAMT,KAAKzjD,GAAS,oBAEjEmkD,GAAmBl7C,EAAAA,EAAAA,cACtBuiC,IACKA,GAAQqY,GACVA,IAEKD,IAET,CAACC,EAAYD,IAGTxkD,EAAQY,EAAQ,6BAA6BA,IAAU,+BAE7D,OACE,kBAACH,EAAAA,SAAQA,CAACC,QAAS2jD,EAAM1jD,UAAWA,EAAWyO,OAAQA,EAAQo1C,gBAAiBO,GAC9E,kBAACC,EAAAA,cAAaA,CACZ3mD,aAAY2B,EACZY,MAAM,OACNX,KAAK,aACLglD,SAAS,KACTC,QAAAA,EACAvoD,cAAa+nD,EACb9nD,WAAW4B,EAAAA,EAAAA,IAAG+lD,EAAiBD,KAIvC,CCrDO,SAASa,IAAY,KAAEd,EAAI,MAAEzjD,EAAK,UAAEwkD,EAAS,SAAEnjD,EAAQ,OAAEmN,GAAS,GAAG,WAAEq1C,IAC5E,MAAMroD,GAASC,EAAAA,EAAAA,YAAWlC,IACpBkrD,GAAetiC,EAAAA,EAAAA,QAAuB,MACtC4hC,EAAYW,GAAAA,GAAaV,WAAWC,OAAOC,MAAMK,YAEjDI,GAAgB17C,EAAAA,EAAAA,cAAayZ,I,IACjC+hC,EAAoB,QAApBA,EAAAA,EAAapiC,eAAboiC,IAAAA,GAAAA,EAAsBG,kBAAkBliC,EAAEmiC,UAAU,GACnD,IAEGC,GAAc77C,EAAAA,EAAAA,cAAayZ,I,IAC/B+hC,EAAoB,QAApBA,EAAAA,EAAapiC,eAAboiC,IAAAA,GAAAA,EAAsBM,sBAAsBriC,EAAEmiC,UAAU,GACvD,KAEIG,EAAUC,IAAe7sD,EAAAA,EAAAA,WAAS,GAEzC,YAAiB6D,IAAboF,GAA6D,IAAnCrD,IAAAA,SAAe3C,MAAMgG,GAC1C,KAIP,kBAACvF,MAAAA,CACCE,WAAW4B,EAAAA,EAAAA,IAAGpC,EAAOwK,UAAW,CAAE,iBAAkBg/C,IACpD7Y,MAAO,CAAE+Y,IAAK,GAAG12C,OACjBzS,cAAagoD,EAAU/9C,WAEtBw+C,GACC,kBAAC1oD,MAAAA,CACCE,WAAW4B,EAAAA,EAAAA,IAAGpC,EAAO2pD,OAAQ3pD,EAAO4pD,UAAWZ,GAC/CG,cAAeA,EACfG,YAAaA,EACbtiC,IAAKiiC,EACL1oD,cAAagoD,EAAUsB,UAEvB,kBAACnkD,EAAAA,KAAIA,CAAC1L,KAAK,gBAAgBwG,UAAWR,EAAO8pD,kBAG/CtlD,GAAS,kBAAC0hD,KAAAA,CAAG1lD,WAAW4B,EAAAA,EAAAA,IAAGpC,EAAO+pD,SAAU,CAAE,CAAC/pD,EAAO4pD,aAAcZ,GAAaA,IAAY,YAC9FnjD,EACAoiD,GACC,kBAACD,GAASA,CACRC,KAAMA,EACNzjD,MAAOA,EACPD,UAAU,SACV4jD,gBAAiBnoD,EAAOgqD,WACxB5B,gBAAiBqB,EACjBpB,WAAYA,IAKtB,CAEA,SAAStqD,GAAUC,GACjB,MAAO,CACL++C,QAAQ7+C,EAAAA,EAAAA,KAAI,CACV+rD,WAAY,SACZC,QAAS,MAEX1/C,WAAWtM,EAAAA,EAAAA,KAAI,CACb0F,MAAO,yBACP2/B,WAAY,iBACZplC,QAAS,OACTgsD,SAAU,WACVC,OAAQ,EACRz/C,MAAO,EACP0/C,UAAW,cACX/rD,WAAY,SACZyI,WAAY/I,EAAMY,OAAOmI,WAAWjI,UACpCH,MAAOX,EAAMY,OAAOC,KAAKyJ,QACzBwoC,OAAQ,aAAa9yC,EAAMY,OAAOkyC,OAAOC,OACzCuZ,aAActsD,EAAM21C,MAAMC,OAAOC,QACjCzR,OAAQpkC,EAAMyG,QAAQ,GACtB8lD,UAAWvsD,EAAMwsD,QAAQC,KAE3Bd,QAAQzrD,EAAAA,EAAAA,KAAI,CACVC,QAAS,OACTE,eAAgB,SAChBC,WAAY,SACZ0Y,MAAOhZ,EAAMyG,QAAQ,GACrB29B,OAAQ,SAEVwnB,WAAW1rD,EAAAA,EAAAA,KAAI,CACbwsD,OAAQ,OAER,CAAC1sD,EAAMsB,YAAYqrD,KAAK,OAAQ,CAC9BxsD,QAAS,UAGb6rD,YAAY9rD,EAAAA,EAAAA,KAAI,CAEd6I,WAAY,UACZ+pC,OAAQ,OACR,UAAW,CACT/pC,WAAY/I,EAAMY,OAAOE,UAAUqZ,QAGvC4xC,UAAU7rD,EAAAA,EAAAA,KAAI,CACZS,MAAOX,EAAMY,OAAOC,KAAKmF,SACzB4mD,UAAW,SACXC,QAAS7sD,EAAMyG,QAAQ,EAAG,GAC1BkuC,aAAc,IAEhBmX,eAAe5rD,EAAAA,EAAAA,KAAI,CACjBmlC,UAAW,gBACX1kC,MAAOX,EAAMY,OAAOC,KAAKC,UACzB,UAAW,CACTH,MAAOX,EAAMY,OAAOC,KAAKyJ,WAIjC,C,iwCC/GO,MAAMwiD,IAAYC,EAAAA,EAAAA,aACvB,CAAC,EAAgE/jC,K,IAAhE,UAAExmB,EAAS,SAAEqF,EAAQ,KAAE9K,EAAI,QAAE+I,EAAO,OAAEiC,EAAM,MAAEvB,GAAgB,EAANwmD,EAAAA,GAAAA,EAAAA,CAAtDxqD,YAAWqF,WAAU9K,OAAM+I,UAASiC,SAAQvB,UAC7C,MAAMxE,GAASC,EAAAA,EAAAA,YAAWlC,IAE1B,OAAIhD,EAEA,kBAAC+K,IAAAA,GAAAA,CACCkhB,IAAKA,EACLjsB,KAAMA,EACN+I,QAASA,EACTiC,OAAQA,EACRvB,MAAOA,EACPhE,WAAW4B,EAAAA,EAAAA,IAAGpC,EAAOirD,SAAUzqD,IAC3BwqD,GAEHnlD,GAGI/B,EAEP,kBAACoF,EAAAA,OAAMA,CAAC8d,IAAKA,EAAKxmB,WAAW4B,EAAAA,EAAAA,IAAGpC,EAAOy1B,KAAMj1B,GAAY2I,QAAQ,YAAYqJ,KAAK,OAAO1O,QAASA,GAC/F+B,GAKH,kBAAC9D,OAAAA,GAAAA,CAAKilB,IAAKA,EAAKxmB,WAAW4B,EAAAA,EAAAA,IAAGpC,EAAOy1B,KAAMj1B,IAAgBwqD,GACxDnlD,EAGP,IAIJilD,GAAUv3B,YAAc,YAExB,MAAMx1B,GAAaC,IACjB,MAAMy3B,GAAOv3B,EAAAA,EAAAA,KAAI,CACfS,MAAO,GAAGX,EAAMY,OAAOC,KAAKC,YAC5B8E,MAAO,oBACP8mD,OAAQ,OACR5Z,OAAQ,OACRwZ,aAAc,GAAGtsD,EAAM21C,MAAMC,OAAOC,UACpCgX,QAAS,GAAG7sD,EAAMyG,QAAQ,EAAG,KAC7B29B,OAAQ,GAAGpkC,EAAMyG,QAAQzG,EAAMwqD,WAAWnS,MAAM6U,gBAChD/sD,QAAS,OACTG,WAAY,SACZD,eAAgB,SAEhB,2BAA4B,SACvB8sD,GAAentD,IAAAA,CAClBosD,OAAQ,IAEV,+BAAgC,CAC9BgB,QAAS,OACTb,UAAW,QAGb,WAAY,CACVA,UAAW,GAAGvsD,EAAMwsD,QAAQC,KAC5B1jD,WAAY,GAAG/I,EAAMY,OAAOmI,WAAWjI,YACvCH,MAAO,GAAGX,EAAMY,OAAOC,KAAKyJ,aAIhC,MAAO,CACLmtB,OACAw1B,UAAU7oD,EAAAA,EAAAA,IAAGqzB,GAAMv3B,EAAAA,EAAAA,KAAI,CAAEwsD,OAAQ,aAClC,EAGH,SAASS,GAAentD,GACtB,MAAO,CACLotD,QAAS,yBACTC,cAAe,MACfd,UAAW,aAAavsD,EAAMY,OAAOmI,WAAW8pC,uBAAuB7yC,EAAMY,OAAO0J,QAAQ6P,OAC5FmzC,yBAA0B,iCAC1BC,mBAAoB,OACpBC,mBAAoB,sCAExB,CCrFO,SAASC,IAAiB,YAAE1qC,EAAW,UAAEvgB,IAC9C,MAAMR,GAASC,EAAAA,EAAAA,YAAWlC,IAY1B,MAAuB,KAAhBgjB,EACL,kBAACgH,EAAAA,QAAOA,CAAC2jC,aAAAA,EAAY7pD,QAXO,KAC5B,MAAM8pD,EAA0C,mBAAhB5qC,EAA6BA,IAAgBA,EAE7E,OACE,kBAACzgB,MAAAA,CAAIE,UAAU,oCACb,kBAACF,MAAAA,CAAIsrD,wBAAyB,CAAEC,OAAQF,K,GAO1C,kBAACb,GAASA,CAACtqD,WAAW4B,EAAAA,EAAAA,IAAG5B,EAAWR,EAAO+gB,cACzC,kBAACrb,EAAAA,KAAIA,CAAC1L,KAAK,cAAcyF,KAAK,SAGhC,IACN,CAEA,MAAM1B,GAAY,KACT,CACLgjB,aAAa7iB,EAAAA,EAAAA,KAAI,CACfipB,KAAM,CACJ2kC,WAAY,SACZC,SAAU,cAGZ,aAAc,CACZ5tD,QAAS,aC/BV,SAAS6tD,IAAY,QAAEvzD,EAAO,QAAEqL,EAAO,UAAEwnC,EAAY,WAC1D,MAAMtrC,GAASC,EAAAA,EAAAA,YAAWlC,IAE1B,OACE,kBAAC6qD,EAAAA,cAAaA,CACZpoD,UAAWR,EAAOisD,aAClBnoD,QAASA,EACTqF,QAAS,cACTtF,KAAK,uBACLglD,SAAS,KACTnqD,QAASjG,GAAW,GACpBwJ,aAAYqpC,GAGlB,CAEA,MAAMvtC,GAAaC,IACjB,MAAM,aAAEktD,EAAY,QAAEL,GAAY7sD,EAAMwqD,WAAWnS,MAEnD,MAAO,CACL4V,cAAc/tD,EAAAA,EAAAA,KAAI,CAChB0F,MAAO,4BACPzF,QAAS,OACTG,WAAY,SACZD,eAAgB,SAChBwsD,QAAS7sD,EAAMyG,QAAQomD,GACvB7zC,MAAOhZ,EAAMyG,QAAQymD,GACrB9oB,OAAQpkC,EAAMyG,QAAQymD,GACtBZ,aAActsD,EAAM21C,MAAMC,OAAOC,UAEpC,ECwBI,SAASqY,IAAgB,SAC9BrmD,EAAQ,QACRglD,EAAU,KAAI,MACdrmD,EAAQ,GAAE,YACVuc,EAAc,GAAE,YAChBwV,EAAc,UAAS,WACvB41B,EAAU,KACVlE,EAAI,UACJe,EAAS,gBACTd,EAAe,YACfkE,GAAc,EAAK,kBACnBC,EAAiB,aACjB5Z,EAAY,cACZ6Z,EAAa,qBACbC,EAAoB,QACpB1uD,EAAO,cACP2uD,EAAa,WACbnE,IAEA,MAAMrqD,GAAQ8V,EAAAA,EAAAA,aACR9T,GAASC,EAAAA,EAAAA,YAAWlC,KAEnBiZ,EAAOy1C,IAAY7vD,EAAAA,EAAAA,UAAS,GAC7B8vD,GAAuB/lC,EAAAA,EAAAA,QAAuB,OAEpDpc,EAAAA,EAAAA,YAAU,KACJmiD,EAAqB7lC,SACvB4lC,EAASC,EAAqB7lC,QAAQ8lC,YACxC,GACC,CAACD,IAEJ,MAAME,GAAaR,EAKblB,EAAe2B,GAAgB7uD,EAAO4uD,IACtC,aAAEE,GAAiBC,GAAgBlC,EAAS7sD,GAE5CgvD,EAA8B,CAClC5qB,OAAQ8oB,EACRR,OAAQ1B,EAAY,OAAS,QAGzBiE,EAAiC,CAAC,EACpB,gBAAhB12B,IACF02B,EAAgBC,gBAAkB,cAClCD,EAAgBnc,OAAS,QAG3B,MAAMqc,EAAS3oD,EAAQ+jD,GAAAA,GAAUC,WAAWC,OAAOC,MAAMlkD,MAAMA,GAAS,QAElE4oD,EACJ,oCACG5oD,GACC,kBAAC0hD,KAAAA,CAAG1hD,MAAOA,EAAOhE,UAAWR,EAAOwE,OACjCA,GAIL,kBAAClE,MAAAA,CAAIE,WAAW4B,EAAAA,EAAAA,IAAGpC,EAAOmsD,WAAYjE,GAAkB3nD,cAAY,yBAClE,kBAACkrD,GAAgBA,CAAC1qC,YAAaA,EAAavgB,UAAW0nD,IACtDiE,GAGF1Z,IAAiBte,EAAAA,aAAak5B,WAC7B,kBAACtlC,EAAAA,QAAOA,CAAClmB,QAAS2qD,EAAgB,iBAAmB,aACnD,kBAAC1B,GAASA,CAACtqD,UAAW0nD,EAAiB3nD,cAAY,kBAAkBuD,QAAS0oD,GAC5E,kBAAC9mD,EAAAA,KAAIA,CAAC1L,KAAK,cAAcyF,KAAK,KAAKe,UAAWR,EAAOstD,cAI1D7a,IAAiBte,EAAAA,aAAame,SAAWka,GACxC,kBAAC3E,GAAWA,CAAClH,MAAO,KAClB,kBAAC54B,EAAAA,QAAOA,CAAClmB,QAAQ,gBACf,kBAACipD,GAASA,CACRtqD,WAAW4B,EAAAA,EAAAA,IAAG8lD,EAAiBloD,EAAOutD,SACtChtD,cAAY,qBACZuD,QAAS0oD,GAET,kBAAC9mD,EAAAA,KAAIA,CAAC1L,KAAK,aAAayF,KAAK,UAKrC,kBAACa,MAAAA,CAAIE,UAAWR,EAAOwtD,cACpB3vD,GAAW,kBAACyC,MAAAA,CAAIE,UAAWR,EAAOytD,cAAeC,GAAc7vD,GAAU43B,GAASA,OAKzF,OACE,kBAACn1B,MAAAA,CAAIE,UAAWR,EAAOwK,UAAWmmC,MAAOsc,EAAiB1sD,cAAa4sD,GACrE,kBAAC7sD,MAAAA,CAAIE,UAAWR,EAAO2tD,qBACpBlb,IAAiBte,EAAAA,aAAame,QAAU,kBAACsb,EAAAA,WAAUA,CAAC52C,MAAOA,EAAOs0B,UAAU,sBAAyB,MAGvG8gB,GACC,oCACE,kBAACrD,GAAWA,CACVd,KAAMA,EACNzjD,MAAOA,EACPwO,OAAQq5C,EACRrD,UAAWA,EACXX,WAAYA,GAEX+E,GAGFd,GACC,kBAAChsD,MAAAA,CAAIE,UAAWR,EAAO6tD,wBACrB,kBAAC7B,GAAWA,CAACvzD,QAAS6zD,EAAexoD,QAASyoD,EAAsBjhB,UAAU,mBAMrFshB,GACC,kBAACtsD,MAAAA,CAAIE,WAAW4B,EAAAA,EAAAA,IAAGpC,EAAO8tD,gBAAiB9E,GAAYrY,MAAOqc,EAAczsD,cAAY,oBACrF+rD,GACC,kBAAChsD,MAAAA,CAAIE,UAAW0nD,GACd,kBAAC8D,GAAWA,CAACvzD,QAAS6zD,EAAexoD,QAASyoD,EAAsBjhB,UAAU,kBAIjF8hB,EAEAnF,GACC,kBAACD,GAASA,CACRC,KAAMA,EACNzjD,MAAOA,EACPD,UAAU,aACV4jD,iBAAiB/lD,EAAAA,EAAAA,IAAGpC,EAAO+tD,SAAU7F,EAlGxB,iBAmGbG,WAAYA,KAMpB,kBAAC/nD,MAAAA,CAAIE,UAAWR,EAAO6B,QAAS8uC,MAAOmc,EAAc9lC,IAAK0lC,GACvD7mD,GAIT,CAEA,MAAM6nD,GAAgB,CAACjqC,EAAgCuqC,KACrD,MAAMC,EAAWzrD,IAAAA,SAAe0rD,QAAQzqC,GAAOjpB,OAAOoX,SACtD,OAAOq8C,EAASnxD,OAAS,EAAIkxD,EAASC,GAAY,IAAI,EAGlDpB,GAAkB,CAAC7uD,EAAsB4uD,IACzCA,EACK5uD,EAAMyG,QAAQ0pD,SAAWnwD,EAAMwqD,WAAWnS,MAAM6U,aAGlD,EAGH6B,GAAkB,CAAClC,EAAiB7sD,KAOjC,CAAE8uD,aAJ2B,CAClCjC,SAHiC,OAAZA,EAAmB7sD,EAAMwqD,WAAWnS,MAAMwU,QAAU,GAAK7sD,EAAMyG,QAAQ0pD,YAS1FpwD,GAAaC,IACjB,MAAM,WAAE+I,EAAU,YAAEqnD,EAAW,QAAEvD,GAAY7sD,EAAMwqD,WAAWnS,MAE9D,MAAO,CACL7rC,WAAWtM,EAAAA,EAAAA,KAAI,CACb0F,MAAO,kBACPspD,gBAAiBnmD,EACjB+pC,OAAQ,aAAasd,IACrBjE,SAAU,WACVG,aAActsD,EAAM21C,MAAMC,OAAOC,QACjCzR,OAAQ,OACRjkC,QAAS,OACTC,cAAe,SAEf,iBAAkB,CAChB6rD,WAAY,SACZC,QAAS,KAGX,2BAA4B,CAE1B,iBAAkB,CAChBD,WAAY,UACZC,QAAS,MAIb,kBAAmB,CACjBkB,QAAS,aAAaptD,EAAMY,OAAOyvD,OAAOvnC,SAG5C,iBAAkB,CAChB,iBAAkB,CAChBmjC,WAAY,UACZC,QAAS,QAIfyD,qBAAqBzvD,EAAAA,EAAAA,KAAI,CACvB0F,MAAO,8BACPumD,SAAU,WACVT,IAAK,EACL1yC,MAAO,OACPs3C,SAAU,WAEZzsD,SAAS3D,EAAAA,EAAAA,KAAI,CACX0F,MAAO,gBACP2qD,SAAU,IAGZT,iBAAiB5vD,EAAAA,EAAAA,KAAI,CACnB0F,MAAO,eACPzF,QAAS,OACTG,WAAY,WAEdivD,SAASrvD,EAAAA,EAAAA,KAAI,CACXwsD,OAAQ,YAEV4C,WAAWpvD,EAAAA,EAAAA,KAAI,CACb0F,MAAO,kBACP4qD,YAAa,EACb7vD,MAAOX,EAAMY,OAAO6vD,QAAQ5vD,KAE5B,UAAW,CACTF,MAAOX,EAAMY,OAAO6vD,QAAQ5vD,QAGhC2F,OAAOtG,EAAAA,EAAAA,KAAI,CACT0F,MAAO,cACP+uC,aAAc,EACdkY,QAAS7sD,EAAMyG,QAAQ,EAAGomD,GAC1B6D,aAAc,WACdJ,SAAU,SACVxC,WAAY,SACZ/sD,SAAUf,EAAMgB,WAAWknD,GAAGnnD,SAC9B4vD,WAAY3wD,EAAMgB,WAAWknD,GAAGyI,aAElClrC,OAAOvlB,EAAAA,EAAAA,KAAI,CACTC,QAAS,SAEXs3B,MAAMv3B,EAAAA,EAAAA,KAAI,CACRC,QAAS,OACTE,eAAgB,SAChBC,WAAY,WAEdswD,YAAY1wD,EAAAA,EAAAA,KAAI,CACd+rD,WAAY,WAEd8D,UAAU7vD,EAAAA,EAAAA,KAAI,CACZ0F,MAAO,aACPktC,OAAQ,OACR/pC,WAAY/I,EAAMY,OAAOE,UAAUqZ,KACnC,UAAW,CACTpR,WAAY/I,EAAMY,OAAOE,UAAUwnD,SAGvCuH,wBAAwB3vD,EAAAA,EAAAA,KAAI,CAC1B0F,MAAO,kBACPumD,SAAU,WACVz/C,KAAM,EACNg/C,IAAK,EACLU,OAAQpsD,EAAMosD,OAAO1rD,UAEvB+uD,cAAcvvD,EAAAA,EAAAA,KAAI,CAChBC,QAAS,OACT0sD,QAAS7sD,EAAMyG,QAAQ,EAAGomD,GAC1BhnB,IAAK7lC,EAAMyG,QAAQ,KAErB+oD,cAActvD,EAAAA,EAAAA,KAAI,CAChB0F,MAAO,0BACPirD,WAAY,OACZ1wD,QAAS,OACTG,WAAY,WAEd6tD,YAAYjuD,EAAAA,EAAAA,KAAI,CACdC,QAAS,OACTikC,OAAQ,SAEX,ECzVGrkC,GAAaC,IAA0B,CAC3C8wD,UAAW5wD,EAAAA,GAAG;qBACKF,EAAMyG,QAAQ;MAc5B,SAASikD,IAAM,UACpBt7C,EAAS,MACT5I,EAAK,YACLuc,EAAW,SACXlb,EAAQ,UACRrF,EAAY,GAAE,cACdi4B,EAAa,WACbs2B,IAEA,MAAMhuD,GAAId,EAAAA,EAAAA,YAAWlC,IAEf00C,EAAerlC,EAAY+mB,EAAAA,aAAame,QAAUne,EAAAA,aAAayB,KAErE,OACE,kBAACt1B,MAAAA,CAAIE,UAAW,GAAGA,KAAaO,EAAE+tD,YAAavuD,cAAawuD,GAAc,SACxE,kBAAC7C,GAAeA,CACdzZ,aAAcA,EACdjuC,MAAOA,EACPuc,YAAaA,EACbljB,QAAS46B,GAER5yB,GAIT,C,eCjCO,SAASmpD,IAAS,SAAEnpD,EAAQ,QAAE/B,EAAO,SAAEE,EAAQ,gBAAEkG,IACtD,MAAMlK,GAASC,EAAAA,EAAAA,YAAWlC,KACpB,UAAEkxD,EAAS,MAAEl4D,EAAK,WAAEgG,GCbrB,WACL,MAAM,KAAEG,EAAI,WAAEH,EAAU,MAAEhG,IAAUqG,EAAAA,EAAAA,GAAS,CAC3CE,SAAU,CAAC,OACXC,QAAS,IAAM2xD,GAAAA,OAOjB,OAJIn4D,GACFf,EAAOe,MAAMA,EAAO,CAAEN,KAAM,+DAGvB,CAAEw4D,UAAWr9C,QAAQ1U,GAAOH,aAAYhG,QACjD,CDE2Co4D,GAEzC,IAAItrD,EAAiB,KACjBnF,EAAU,GAad,OAXI3B,GACF8G,EAAO,gBACPnF,EAAU,oDACD3H,GACT8M,EAAO,uBACPnF,EAAU,8DACAuwD,IACVprD,EAAO,qBACPnF,EAAU,+FAIV,kBAACwK,EAAAA,OAAMA,CACL1I,UAAWR,EAAOovD,SAClB3vD,KAAK,KACL+S,KAAK,OACL3O,KAAMA,EACNG,UAAWirD,GAAajrD,EACxBtF,QAASA,EACTmoC,iBAAiB,MACjB/iC,QAAUkb,IACR/U,GAAkBC,GAClBpG,EAAQkb,EAAM,GAGfnZ,EAGP,CAEA,MAAM9H,GAAY,KAAO,CACvBqxD,SAAUlxD,EAAAA,GAAG;;qBE5Cf,MAWMmxD,GAAqBrwC,IACzB,MAAMswC,EAAqBj+C,SAASU,cAAc,2BAElD,GAA2B,OAAvBu9C,EAEF,YADAt5D,EAAOe,MAAM,IAAIuB,MAAM,sCAfJ,EAACg1C,EAAkB11C,KACxC,MAAM23D,EAAct1D,OAAQu1D,yBAAyBliB,EAAS,SAAU31C,IAClE83D,EAAuBx1D,OAAQu1D,yBAAyBv1D,OAAOy1D,eAAepiB,GAAU,SAAU31C,IAEpG43D,GAAeA,IAAgBE,EACjCA,EAAsBE,KAAKriB,EAAS11C,GAEpC23D,EAAaI,KAAKriB,EAAS11C,EAC7B,EAaAg4D,CAAeN,EAFDtwC,EAAMjZ,OAAO8pD,YAAYrxC,QAIvC8wC,EAAmBQ,cAAc,IAAIC,MAAM,QAAS,CAAEC,SAAS,IAAQ,EAkBnEC,GAAmB,CACvBh4B,UAAW,CACT9Q,KAAM,CACJ+oC,UAlBa,EAAGrqD,eACpB,MAAM7F,GAASC,EAAAA,EAAAA,YAAWlC,IAG1B,MAAwB,iBAAb8H,GAAyBA,EAASgI,SAAS,MAC7C,kBAACsZ,OAAAA,KAAMthB,GAId,kBAACshB,OAAAA,CAAK3mB,UAAWR,EAAOmwD,WAAY3rD,MAAM,uBAAuBV,QAASurD,IACvExpD,EAAAA,KAiBA,SAASuqD,IAAQ,MAAEC,I,IAKnBA,EAJL,MAAMrwD,GAASC,EAAAA,EAAAA,YAAWlC,IAE1B,OACE,kBAACuC,MAAAA,CAAIE,UAAWR,EAAOwK,WACpB6lD,SAAe,QAAfA,EAAAA,EAAOC,gBAAPD,IAAAA,OAAAA,EAAAA,EACG71D,QAAQ/B,GAA6B,WAAjBA,EAAQ83D,OAC7BzvD,KAAKrI,GACJ,oCACE,kBAAC6H,MAAAA,CAAIE,UAAWR,EAAOqwD,OACrB,kBAACG,GAAAA,GAAQA,CAACv3D,QAASg3D,IAAmBx3D,EAAQoJ,SAAW,KAE3D,kBAAC4uD,KAAAA,SAIP,kBAACnwD,MAAAA,CAAIE,UAAWR,EAAOqwD,OACrB,kBAACG,GAAAA,GAAQA,CAACv3D,QAASg3D,IAAmBI,EAAMxxD,OAIpD,CAEA,MAAMd,GAAY,KAAO,CACvByM,UAAWtM,EAAAA,GAAG;;;IAIdmyD,MAAOnyD,EAAAA,GAAG;;;;;;;IAQViyD,WAAYjyD,EAAAA,GAAG;;;;;;;;;;;;;;MC9FXH,GAAY,KAAO,CACvB2yD,SAAUxyD,EAAAA,GAAG;;IAGbyyD,WAAYzyD,EAAAA,GAAG;;;;MAoCV,SAAS0yD,IAAa,SAAE1U,IAC7B,MAAMl8C,GAASC,EAAAA,EAAAA,YAAWlC,KACpB,SAAE8yD,EAAQ,cAAEC,EAAa,YAAEC,GA3BnC,SAAyB7U,GACvB,MAAO2U,EAAUG,IAAep0D,EAAAA,EAAAA,UAAS,IAEnCk0D,GAAgBrjD,EAAAA,EAAAA,cAAauR,IACjCgyC,EAAYhyC,EAAMjZ,OAAOnO,MAAM,GAC9B,IAEGm5D,GAActjD,EAAAA,EAAAA,cAAY,KAC9B,MAAMwjD,EAAiBJ,EAASryC,OAC3ByyC,IAIL/U,EAAS+U,GAETD,EAAY,IAAG,GACd,CAACH,EAAU3U,IAEd,MAAO,CACL2U,WACAC,gBACAC,cAEJ,CAImDG,CAAgBhV,GAQjE,OACE,kBAAC57C,MAAAA,KACC,kBAAC6wD,EAAAA,SAAQA,CACP3wD,UAAWR,EAAO0wD,SAClB/tC,YAAY,8BACZ/qB,MAAOi5D,EACPp6C,SAAUq6C,EACVvnC,UAbavK,IACE,UAAfA,EAAMmI,MAAqBnI,EAAMoyC,UACnCL,GACF,IAaE,kBAAC7nD,EAAAA,OAAMA,CAAC1I,UAAWR,EAAO2wD,WAAY7sD,QAASitD,GAAa,QAKlE,C,eCxDA,MAAMM,GAA6C,CACjDC,OAAQ,CAENC,MAAO,IAAM,6MAKfx1D,KAAM,CAEJy1D,OAAQ,CAAC3lD,EAAqB4lD,IAAuB,wsCAiB9B5lD,sCAErB4lD,EAAS,OAEXC,MAAO,CAAC7lD,EAAqB4lD,IAAuB,w5BAmBlC5lD,uDAEpB4lD,EAAS,OAEP7+C,KAAM,CAAC/G,EAAqB4lD,IAAuB,80CAahC5lD,kDAGrB4lD,EAAS,oDAGTA,EAAS,SAKEE,GAAe,EAC1BL,SACAv1D,OACA8P,cACA4lD,eAOA,MAAMG,EAAeP,GAAQC,OAAOA,GAEpC,GAA4B,mBAAjBM,EACT,MAAM,IAAIt5D,MAAM,8BAA8Bg5D,OAGhD,MAAMO,EAAaR,GAAQt1D,KAAKA,GAEhC,GAA0B,mBAAf81D,EACT,MAAM,IAAIv5D,MAAM,4BAA4ByD,OAG9C,MAAO,CACLu1D,OAAQM,EAAa/lD,EAAa4lD,GAClC11D,KAAM81D,EAAWhmD,EAAa4lD,GAC/B,E,0HCvGI,MAAMK,WAAyBt4C,GAK9BjiB,GAAAA,CAAIw6D,G,sBAAV,YACE,MAAM/2D,EAAe,IAAI+O,gBAAgB,CACvC6P,MAAOm4C,EAAOn4C,MACd5J,KAAMnU,OAAsC,IAA/Bk2D,EAAOhiD,UAAUC,KAAKI,QACnC4hD,MAAOn2D,OAAoC,IAA7Bk2D,EAAOhiD,UAAUM,GAAGD,QAClCV,OAAQqiD,EAAOriD,SAGbqiD,EAAO/K,UACThsD,EAAarD,IAAI,YAAakE,OAAOk2D,EAAO/K,WAG9C,MAAMzuD,QAAiB,EAAKQ,MAAM,qBAAqBiC,EAAaY,cAEpE,OAAQm2D,EAAOriD,QACb,IAAK,MACH,OAAOnX,EAASsG,OAElB,IAAK,OACH,OAAOtG,EAASoB,OAElB,QACE,MAAM,IAAI6uB,UAAU,mBAAmBupC,EAAOriD,YAEpD,E,mLA5BAxY,WAAAA,CAAY+B,GACVL,MAAMK,EACR,E,yHCEK,MAAMg5D,WAAqBjgC,GAAAA,GAKhCkgC,mBAAAA,CAAoBC,EAAiBC,GACnC,IACIr7D,EADAg7D,EAASK,EAab,OAVID,GAAiC,IAAvBC,EAAYt1D,QACxB/F,EAAQ,IAAIuB,MACV,0EAA0E85D,EAAYt1D,YAExFi1D,EAAS,IACCI,GAAiC,IAAvBC,EAAYt1D,SAChC/F,EAAQ,IAAIuB,MAAM,qEAAqE85D,EAAYt1D,YACnGi1D,EAAS,IAGJ,CAAEA,SAAQh7D,QACnB,CAnBAG,WAAAA,GACE0B,MAAM,CAAEqI,IAAK,aAoBfoxD,GAAAA,KAAAA,mBAAkB,CAACF,EAAiBC,KAClC,MAAM34C,EAAgBkW,GAAAA,GAAWC,iBAAiB95B,KAAM,aAAci6B,IAA4BnzB,WAC/FhF,OAEG,OAAEm6D,EAAQh7D,MAAOu7D,GAAoBx8D,KAAKo8D,oBAAoBC,EAAQC,IAEpEr7D,MAAOkkD,EAAU,WAAEl+C,EAAU,SAAE00D,GCjCpC,SAA6Bh4C,EAAuB24C,GACzD,MAAMG,EAAmBra,GAA6Bjf,MAAMxf,EAAeq4C,KAErE,WAAE/0D,EAAU,MAAEhG,EAAK,KAAEmG,IAASE,EAAAA,EAAAA,GAAS,CAC3CE,SAAU,CACR,eACAmc,KACG24C,EAAYI,SAAQ,EAAG54C,QAAO7J,eAAgB,CAAC6J,EAAO7J,EAAUC,KAAKI,OAAQL,EAAUM,GAAGD,UATjF,KAYd7S,QAAS,IAEAgP,QAAQkwB,IACb21B,EAAYtxD,KAAI,EAAG8Y,QAAO7J,eACxBwiD,EACGh7D,IAAI,CAAEqiB,QAAO7J,YAAWL,OAAQ,MAAOs3C,SAjBlC,MAkBL1gD,MAAM/N,GAAgCA,EC5B9C8kB,QAAQ,iBAAkB,IAC1BA,QAAQ,iBAAkB,IAC1BA,QAAQ,wBAAyB,IACjCA,QAAQ,mBAAoB,IAC5BA,QAAQ,oBAAqB,MAC7BA,QAAQ,0BAA2B,IACnCA,QAAQ,cAAe,IACvBA,QAAQ,sBAAuB,IAC/BA,QAAQ,mBAAoB,WD0B/B,MAAO,CACLtgB,aACAhG,QACA06D,SAAUv0D,GAAQ,GAEtB,CDMwDu1D,CAAoBh5C,EAAes4C,GAGjFlmD,EAAc6f,GADIgG,GAAsB57B,KAAM,oBACqB4E,MAEnE,MAAE21D,EAAOt5D,MAAO27D,EAAQ,MAAEr+D,GGhC7B,SAAkCwX,EAAqB4lD,GAC5D,MAAOpB,EAAOsC,IAAY/1D,EAAAA,EAAAA,UAAS,KAC5Bg2D,EAAiBC,IAAsBj2D,EAAAA,EAAAA,WAAS,IAChDk2D,EAAkBC,IAAuBn2D,EAAAA,EAAAA,WAAS,IAClD0zD,EAAU0C,IAAep2D,EAAAA,EAAAA,UAAmB,KAC5C7F,EAAOk8D,IAAYr2D,EAAAA,EAAAA,UAAuB,OAC1Cs2D,EAAcC,IAAmBv2D,EAAAA,EAAAA,YAElCw2D,GAAe3lD,EAAAA,EAAAA,cAAa4lD,IAChCL,EAAYK,GAEZJ,EAAS,MAETN,EAAS,IACTE,GAAmB,GACnBE,GAAoB,GAEpB,MAWMG,EAXShE,GAAAA,GACU,CACrBrhC,MLrCa,qBKsCbyiC,SAAU+C,IAEXt+B,KAGCm6B,GAAAA,MAGwB5kC,UAAU,CACpCgpC,KAAMX,EACN57D,KAAAA,CAAMmwB,GACJ+rC,EAAS/rC,GACT2rC,GAAmB,GACnBE,GAAoB,GACpBI,OAAgB1yD,EAClB,EACA8yD,QAAAA,GACEV,GAAmB,GACnBE,GAAoB,GACpBI,OAAgB1yD,EAClB,IAGF0yD,EAAgBD,EAAa,GAC5B,IAEGM,GAAsB/lD,EAAAA,EAAAA,cACzBojD,IACC,MAAM4C,EAA0B,CAC9B,CACElD,KAAM,YACN1uD,QAASwuD,GAEX,CACEE,KAAM,OACN1uD,QAASgvD,IAIb,IACEuC,EAAa,IAAI9C,KAAamD,GAChC,CAAE,MAAO18D,GACPk8D,EAASl8D,EACX,IAEF,CAACu5D,EAAUD,EAAO+C,IAwCpB,OArCA7oD,EAAAA,EAAAA,YAAU,KACR,IAAKknD,EAAS30D,QAAUwzD,EAASxzD,OAAS,EACxC,OAGF,MAAMu0D,EAAUM,GAAa,CAC3BL,OAAQ,QACRv1D,KAA0B,IAApB01D,EAAS30D,OAAe,OAAS,SACvC+O,cACA4lD,aAGF,IACE2B,EAAa,CACX,CACE7C,KAAM,SACN1uD,QAASwvD,EAAQC,QAEnB,CACEf,KAAM,SACN1uD,QAASwvD,EAAQt1D,OAGvB,CAAE,MAAOhF,GACPk8D,EAASl8D,EACX,IACC,CAACu5D,EAASxzD,OAAQ+O,EAAa4lD,EAAUA,EAAS30D,OAAQs2D,KAE7D7oD,EAAAA,EAAAA,YAAU,IACD,KACD2oD,IACFA,EAAa5hC,cACb6hC,OAAgB1yD,GAClB,GAED,CAACyyD,IAEG,CACL7C,MAAO,CACLxxD,KAAMwxD,EACNqD,WAAYd,EACZe,YAAab,EACbxC,SAAUA,EACVkD,uBAEFn/D,KAAAA,GACE,GAAIi8D,EAASxzD,OAAS,EACpB,IACEs2D,EAAa9C,EACf,CAAE,MAAOv5D,GACPk8D,EAASl8D,EACX,CAEJ,EACAA,QAEJ,CH5F8C68D,CAAyB/nD,EAAa4lD,GAEhF,MAAO,CACLv0D,KAAM,CACJo1D,kBACAllD,UAAWrQ,IAAgBA,IAAek+C,IAAeyX,IAAarC,EAAMxxD,KAAK2f,OACjFy8B,aACAyX,WACArC,QACAwD,mBAAoBjiD,SAAQy+C,aAAAA,EAAAA,EAAOqD,cAAcrD,aAAAA,EAAAA,EAAOsD,cACxDG,2BAA4B7Y,IAAeyX,GAAY9gD,QAAQy+C,aAAAA,EAAAA,EAAOsD,cAExE91D,QAAS,CACPxJ,QACA0/D,sBAAAA,CAAuBlD,GACrBR,EAAMmD,oBAAoB3C,EAC5B,GAEH,GAhDH,EAmDA,GAtDWoB,GAsDJrkC,aAAY,EACjBC,QACAskC,SACAC,cACA/lB,cAMA,MAAMrsC,GAASC,EAAAA,EAAAA,YAAWlC,KACpB,KAAEb,EAAI,QAAEW,GAAYgwB,EAAMwkC,gBAAgBF,EAAQC,GAExD,OACE,kBAAC1J,GAAKA,CACJloD,UAAWR,EAAOg0D,UAClBxvD,MAAM,uBACN4I,UAAWlQ,EAAKkQ,UAChBqrB,cACE,kBAACz2B,EAAAA,WAAUA,CACTwC,MAAM,cACNxK,KAAK,eACLmP,QAAQ,YACRlH,aAAW,QACX6B,QAASuoC,IAGb0iB,WAAW,YAEX,kBAACzuD,MAAAA,CAAIE,UAAWR,EAAO6B,SACpB3E,EAAKo1D,iBACJ,kBAAC3K,GAAYA,CAACxhD,SAAS,QAAQ3B,MAAM,oBAAoBzN,MAAOmG,EAAKo1D,kBAGtEp1D,EAAK+9C,YACJ,kBAAC0M,GAAYA,CACXxhD,SAAS,QACT3B,MAAM,oCACN/L,QAAQ,uDACR1B,MAAOmG,EAAK+9C,aAIf/9C,EAAK22D,oBAAsB,kBAACzD,GAAOA,CAACC,MAAOnzD,EAAKmzD,QAEhDnzD,EAAKkQ,WACJ,oCACE,kBAAC+J,EAAAA,QAAOA,CAACu5B,QAAAA,IAAS,iBAKrBxzC,EAAKw1D,UACJ,kBAACxsD,EAAAA,MAAKA,CAAC1B,MAAM,0DAA0D2B,SAAS,WAC9E,kBAAC7F,MAAAA,KACC,kBAACA,MAAAA,KACC,kBAAC2H,IAAAA,KAAG/K,EAAKw1D,SAASj6D,SAClB,kBAACwP,IAAAA,KAAE,4GAMP,kBAACiB,EAAAA,OAAMA,CAAC1I,UAAWR,EAAOi0D,YAAa9qD,QAAQ,YAAYqJ,KAAK,UAAU1O,QAAS,IAAMjG,EAAQxJ,SAAS,UAM7G6I,EAAK42D,2BAA6B,kBAAClD,GAAYA,CAAC1U,SAAUr+C,EAAQk2D,0B,IAO7E,MAAMh2D,GAAaC,IAA0B,CAC3Cg2D,UAAW91D,EAAAA,GAAG;;;;IAKdsG,MAAOtG,EAAAA,GAAG;;IAGV2D,QAAS3D,EAAAA,GAAG;eACCF,EAAMyG,QAAQ;IAE3BwvD,YAAa/1D,EAAAA,GAAG;;MI3JX,MAAMg2D,WAA4B/6C,EAAAA,sB,6GACvC,CADW+6C,GACGx5D,OAAO,oBCHhB,MAAMy5D,WAA8Bh7C,EAAAA,qBCyBpC,SAASi7C,KACd,MAAM,aAAEp5D,EAAY,WAAEq5D,GC5BjB,WACL,MAAMC,GAAWC,EAAAA,GAAAA,eACXt/D,GAAWu/D,EAAAA,GAAAA,eAEjB,MAAO,CACLx5D,aAAc,IAAI+O,gBAAgB9U,EAAS+U,QAC3CqqD,WAAaI,IACX,MAAMC,EAAkB,IAAI3qD,gBAAgB/U,OAAOC,SAAS+U,QAE5D,IAAK,MAAO/I,EAAKrJ,KAAUqC,OAAO8kC,QAAQ01B,GACxCC,EAAgB/8D,IAAIsJ,EAAKrJ,GAG3B08D,EAAS,CAAEtqD,OAAQ0qD,EAAgB94D,YAAc,CAAEyhB,SAAS,GAAO,EAGzE,CDYuCs3C,G,IACb35D,EAAxB,MAAMgsD,EAAWzqD,OAAwB,QAAjBvB,EAAAA,EAAazD,IAAI,mBAAjByD,IAAAA,EAAAA,EAAgC,IAElD45D,EAAeC,IACnBR,EAAW,CAAErN,SAAUnrD,OAAOg5D,IAAe,EAK/C,OAhCF,SAA+BC,EAAsBF,GACnD,MAAM,WAAE73D,EAAU,MAAEhG,EAAK,SAAEswD,GAAaI,GAAuB,CAAExqD,SAAU63D,IAE3E,IAAIA,IAAe/3D,EAIfhG,GACFwU,GAAe,CACb,8CACA,uIAEFvV,EAAOe,MAAMA,GAEb69D,EAAY7N,GAAiBC,WAK/B4N,EAAYvN,EAAUL,SACxB,CAUE+N,CAAsB/N,EAAW,EAAG4N,GAE7B,CAAC5N,EAAU4N,EACpB,C,wODnCE,CADWT,GACGz5D,OAAO,sBGUhB,MAAMs6D,WAA6Bx7C,GAKlCjiB,GAAAA,CAAIw6D,G,sBAAV,YACE,MAAM/2D,EAAe,IAAI+O,gBAAgB,CACvCkrD,UAAWlD,EAAOkD,UAClBC,SAAUr5D,OAA0C,IAAnCk2D,EAAOoD,cAAcnlD,KAAKI,QAC3CglD,UAAWv5D,OAAwC,IAAjCk2D,EAAOoD,cAAc9kD,GAAGD,QAC1CilD,WAAYtD,EAAOsD,WACnBC,UAAWz5D,OAA2C,IAApCk2D,EAAOwD,eAAevlD,KAAKI,QAC7ColD,WAAY35D,OAAyC,IAAlCk2D,EAAOwD,eAAellD,GAAGD,UAG1C2hD,EAAO/K,UACThsD,EAAarD,IAAI,YAAakE,OAAOk2D,EAAO/K,WAG9C,MAAMzuD,QAAiB,EAAKQ,MAAM,0BAA0BiC,EAAaY,cAIzE,aAFmBrD,EAASoB,MAG9B,E,mLAvBAzC,WAAAA,CAAY+B,GACVL,MAAMK,EACR,E,kkBCFK,SAASw8D,IAAoB,QAClCx4D,EAAO,cACPwc,EAAa,kBACbi8C,EAAiB,cACjBC,EAAa,oBACbC,EAAmB,gBACnBC,IAEA,MAAO7O,GAAYoN,KAEb0B,EAAuB5d,GAA6Bjf,MAAMxf,EAAeu7C,KAEzE,WAAEj4D,EAAU,MAAEhG,EAAK,KAAEmG,EAAI,QAAEC,IAAYC,EAAAA,EAAAA,GAAS,CAEpDC,gBAAkB04D,GAAiBA,EACnC94D,QAAS2U,QAAQ3U,GAAW+pD,GAE5B1pD,SAAU,CACR,eACAmc,EACAk8C,EACAD,EAAkB1lD,KAAKI,OACvBslD,EAAkBrlD,GAAGD,OACrBylD,EACAD,EAAoB5lD,KAAKI,OACzBwlD,EAAoBvlD,GAAGD,OACvB42C,GAEFzpD,QAAS,KACPu4D,EAAqBh8D,QAErB,MAAMi4D,EAAS,CACbkD,UAAWU,EACXR,cAAeO,EACfL,WAAYQ,EACZN,eAAgBK,EAChB5O,YAGF,OAAO8O,EAAqBv+D,IAAIw6D,GAAQzrD,MAAM3M,IAAU,CACtDsS,QAAS,CACPlJ,QAASpJ,EAAKoJ,QACd6S,YAAajc,EAAKic,YAClB/G,SAAUlV,EAAKkV,aAEhB,IAIP,OAAO,G,uUAAA,EACL9R,aACAhG,MAAO++D,EAAqBj8D,aAAa9C,GAAS,KAAOA,GACtDmG,GAAAA,CACHC,WAEJ,CC1DO,SAAS64D,IAAwB,kBACtCC,EAAiB,oBACjBC,EAAmB,eACnBC,IAEA,MAAMn2D,GAASC,EAAAA,EAAAA,YAAWlC,KAEnBq4D,EAAgBC,IAAqBz5D,EAAAA,EAAAA,WAAS,GASrD,OACE,kBAAC+qD,GAAYA,CACXxhD,SAAS,OACT3B,MAAM,8FACN/L,QACE,kBAAC6H,MAAAA,CAAIE,UAAWR,EAAOs2D,SACrB,kBAACruD,IAAAA,KAAE,QACH,kBAACA,IAAAA,KACC,kBAACiB,EAAAA,OAAMA,CAACC,QAAQ,UAAUrF,QAASmyD,GAAmB,eAE5C,IAAI,KACX,IACH,kBAAC/sD,EAAAA,OAAMA,CAACC,QAAQ,UAAUqJ,KAAK,OAAOhS,UAAWR,EAAOu2D,WAAYzyD,QAASoyD,GAAqB,oBAIpG,kBAACjuD,IAAAA,KAAE,kBACH,kBAACuuD,EAAAA,SAAQA,CACP5yD,MAAM,0EACN6yD,aAAAA,EACAj2D,UAAWR,EAAO02D,SAClB/9C,OAAQy9C,EACRO,SA7Be,KAClBP,GACHD,IAEFE,GAAmBD,EAAe,GA2B1B,kBAAC91D,MAAAA,CAAIE,UAAWR,EAAO42D,iBACrB,kBAACC,KAAAA,KACC,kBAAC1Z,KAAAA,KAAG,kEACJ,kBAACA,KAAAA,KAAG,yGAIN,kBAACh7C,MAAAA,CAAIG,I,oEAAuBw0D,IAAI,yCAO9C,CAEA,MAAM/4D,GAAaC,IAA0B,CAC3Cs4D,QAASp4D,EAAAA,GAAG;eACCF,EAAMyG,QAAQ;IAE3B8xD,WAAYr4D,EAAAA,GAAG;;IAGfw4D,SAAUx4D,EAAAA,GAAG;;;IAIb04D,gBAAiB14D,EAAAA,GAAG;iBACLF,EAAMyG,QAAQ;;;;;oBAKXzG,EAAMyG,QAAQ;;+HCtD3B,MAAMsyD,WAA4B/kC,GAAAA,GAQvCgd,UAAAA,GACE,MAAM1gB,EAAcoD,GAAsB57B,KAAM,eAE1CkhE,EAAoBtrC,GADFgG,GAAsB57B,KAAM,oBAC2B4E,KAE/E,OACE,oCACE,kBAAC6H,GAAaA,CAAC9C,KAAK,UAAU,wBACR6uB,EAAY,KAAG0oC,EAAkB,IAG7D,CAlBA9/D,WAAAA,GACE0B,MAAM,CACJqI,IAAK,mBACLg2D,QAAS,IAAIhF,KAiBjBiF,GAAAA,KAAAA,0BAAyB,KACvB,MAAM,QAAED,GAAYnhE,KAAK8G,YACnB,kBAAE84D,EAAiB,oBAAEE,GAAwB,KAAMtmC,OAAsC6nC,oBAEzFxB,EAAgBnmC,GAAuB15B,KAAM,mBAC7C+/D,EAAkBrmC,GAAuB15B,KAAM,sBAE/C,SAAEuxD,EAAUtwD,MAAOqgE,GAAuB3P,KAE1ChuC,EAAgBkW,GAAAA,GAAWC,iBAAiB95B,KAAM,aAAci6B,IAA4BnzB,WAC/FhF,MAEGy/D,EAAqBzlD,QACzB+jD,GACEE,GAGAH,EAAkB1lD,KAAKI,QACvBslD,EAAkBrlD,GAAGD,QACrBwlD,EAAoB5lD,KAAKI,QACzBwlD,EAAoBvlD,GAAGD,SAGrB,WACJrT,EACAhG,MAAOugE,EAAiB,QACxBrrD,GACEwpD,GAAoB,CACtBx4D,QAASo6D,EACT59C,gBACAi8C,oBACAC,gBACAC,sBACAC,oBAGI0B,EACJF,IAAuBt6D,IAAeu6D,GAAuD,KAAlCrrD,aAAAA,EAAAA,EAAS2J,YAAY4hD,UAE5EC,EAA0B7lD,QAC9BylD,IAAuBC,IAAsBC,GAA0BtrD,GAEnEyrD,GAAwBL,EAE9B,MAAO,CACLn6D,KAAM,CACJsH,MAAO1O,KAAKk5C,aACZ5hC,UAAWrQ,EACXu6D,oBACAC,yBACAE,0BACAC,uBACAzrD,QAASA,EACTo7C,WACA+P,qBACAO,GAAI,CACFthB,MAAO4gB,EACP7E,YAAa,CACX,CAAEx4C,MAAO+7C,EAAe5lD,UAAW2lD,GACnC,CAAE97C,MAAOi8C,EAAiB9lD,UAAW6lD,MAI3C/3D,QAAS,CAAC,EACX,IAGHo4D,GAAAA,KAAAA,qBAAoB,KAClBhsD,GAAkB,4CAElBnU,KAAKggC,aAAa,IAAIo+B,GAAoB,CAAE0D,YAAY,KAAU,EAAK,IAGzE1B,GAAAA,KAAAA,uBAAsB,KACpBjsD,GAAkB,8CAElBnU,KAAKggC,aAAa,IAAIq+B,GAAsB,CAAC,IAAI,EAAK,IAGxDgC,GAAAA,KAAAA,kBAAiB,KACflsD,GAAkB,yCAAyC,GA/F7D,EAkGA,GAxGW8sD,GAwGJnpC,aAAY,EAAGC,Y,IAwEoB3wB,EACRA,EAxEhC,MAAM8C,GAASC,EAAAA,EAAAA,YAAWlC,KAEpB,KAAEb,GAAS2wB,EAAMqpC,yBACjBlD,EAAYzN,KAEZsR,EAAqB36D,EAAKkQ,WAAalQ,EAAKw6D,sBAAwBx6D,EAAKq6D,wBAE/EhtD,EAAAA,EAAAA,YAAU,KACJstD,GACF7D,EAAUn7C,OACZ,GACC,CAACg/C,EAAoB7D,IAEpB92D,EAAKk6D,oBACP7rD,GAAe,CACb,8CACA,2IAIJ,MAAMusD,GAAaz3D,EAAAA,EAAAA,UACjB,IACE,oCACGnD,EAAKsH,MACLtH,EAAKkQ,WAAa,kBAAC+J,EAAAA,QAAOA,CAACu5B,QAAAA,EAAOlwC,UAAWR,EAAOiX,YAGzD,CAAC/Z,EAAKkQ,UAAWlQ,EAAKsH,MAAOxE,EAAOiX,UAGtC,OACE,kBAAC3W,MAAAA,CAAIE,UAAWR,EAAO+3D,MACrB,kBAACrP,GAAKA,CACJqG,WAAW,yBACXvuD,UAAWR,EAAOg4D,gBAClBxzD,MAAOszD,EACP1qD,UAAWlQ,EAAKkQ,UAChBqrB,cACE,kBAACu2B,GAAQA,CACPhrD,SAAU6zD,GAAsB7D,EAAUr7C,OAAO,MACjD7U,QAAS,IAAMkwD,EAAUjwD,KAAK,MAC9BmG,gBAAgB,8CACjB,6BAKFhN,EAAKw6D,sBACJ,kBAAC1B,GAAuBA,CACtBC,kBAAmBpoC,EAAMooC,kBACzBC,oBAAqBroC,EAAMqoC,oBAC3BC,eAAgBtoC,EAAMsoC,iBAIzBj5D,EAAKo6D,mBACJ,kBAAC3P,GAAYA,CAACxhD,SAAS,QAAQ3B,MAAM,oCAAoCzN,MAAOmG,EAAKo6D,oBAGtFp6D,EAAKq6D,wBACJ,kBAAC5P,GAAYA,CACXxhD,SAAS,UACT3B,MAAM,4BACN/L,QAAQ,yEAIXyE,EAAKu6D,yBACJ,kBAACrhD,GAAUA,CACTxD,MAAM,EACN3G,QAAS/O,EAAK+O,QACdgF,6BAA2C,QAAb/T,EAAAA,EAAKmqD,gBAALnqD,IAAAA,OAAAA,EAAAA,EAAe+T,6BAC7CyC,qBAAmC,QAAbxW,EAAAA,EAAKmqD,gBAALnqD,IAAAA,OAAAA,EAAAA,EAAewW,qBAErCE,0BAA0B,KAK/BogD,EAAUr7C,OAAO,OAChB,kBAACzb,EAAKy6D,GAAGthB,MAAMzoB,UAAS,CACtBC,MAAO3wB,EAAKy6D,GAAGthB,MACf8b,QAAAA,EACAC,YAAal1D,EAAKy6D,GAAGvF,YACrB/lB,QAAS2nB,EAAUn7C,Q,IAQ/B,MAAM9a,GAAaC,IAA0B,CAC3C+5D,KAAM75D,EAAAA,GAAG;;IAGT85D,gBAAiB95D,EAAAA,GAAG;;;IAIpB81D,UAAW91D,EAAAA,GAAG;;;;IAKd+Y,QAAS/Y,EAAAA,GAAG;mBACKF,EAAMyG,QAAQ;IAE/B2qD,SAAUlxD,EAAAA,GAAG;kBACGF,EAAMyG,QAAQ;MCjPnBwzD,GAAoB,4DAGpBC,GAAqB,KAChC,MAAMl4D,GAASC,EAAAA,EAAAA,YAAWlC,IAE1B,OACE,kBAACuC,MAAAA,CAAIE,UAAWR,EAAOm4D,SACrB,kBAACryD,IAAAA,CACC/K,KAAMk9D,GACNz3D,UAAWR,EAAOo4D,SAClB5zD,MAAM,iDACNuB,OAAO,SACPC,IAAI,uBAEJ,kBAACN,EAAAA,KAAIA,CAAC1L,KAAK,wBAAwB,oBAMrC+D,GAAaC,IACV,CACLm6D,SAASj6D,EAAAA,EAAAA,KAAI,CACXC,QAAS,OACT0lC,IAAK7lC,EAAMyG,QAAQ,GACnBpG,eAAgB,WAChBg6D,WAAY,QAEdD,UAAUl6D,EAAAA,EAAAA,KAAI,CACZo6D,UAAW,SACX35D,MAAOX,EAAMY,OAAOC,KAAKC,UACzBC,SAAUf,EAAMgB,WAAWC,UAAUF,SACrC,UAAW,CACTJ,MAAOX,EAAMY,OAAOC,KAAK8G,U,yHCL1B,MAAM4yD,WAA2BvmC,GAAAA,GAuHtC5F,UAAAA,GACE,CAACrd,GAAc0B,SAAU1B,GAAc+B,YAAYwQ,SAASmwB,IAC1D37C,KAAKo5C,MAAMve,IACThB,GAAAA,GACGC,iBAAiB95B,KAAM,GAAG27C,UAAuBqQ,IACjD72B,MAAM82B,WAAWvzB,kBAAiB,CAACC,EAAUC,KACxCD,EAASze,OAAS0e,EAAU1e,MAAQye,EAASpe,KAAOqe,EAAUre,IAChEva,KAAKu2B,SAAS,CAAEz0B,MAAO,MACzB,IACF,GAGR,CAuCA4gE,UAAAA,GACE1iE,KAAKu2B,SAAS,CAAEosC,cAAc,GAChC,CAEAC,WAAAA,GACE5iE,KAAKu2B,SAAS,CAAEosC,cAAc,GAChC,CAUAtnC,KAAAA,GACEr7B,KAAKu2B,SAAS,CAAEz0B,MAAO,KAAM6gE,cAAc,EAAOjgD,aAAa,GACjE,CAEA,gBAAOoV,EAAU,MAAEC,IACjB,MAAM7tB,GAASC,EAAAA,EAAAA,YAAWlC,KACpB,MAAEnG,EAAK,aAAE6gE,EAAY,YAAEjgD,GAAgBqV,EAAMjxB,WAEnD,OACE,oCACE,kBAAC0D,MAAAA,CAAIE,UAAWR,EAAO24D,kBACrB,kBAAC5hD,EAAAA,OAAMA,CACLvW,UAAWR,EAAOqpB,OAClB1G,YAAY,kBACZ/qB,MAAOA,EACPqB,QAASs/D,GAAmBK,QAC5BniD,SAAUoX,EAAMgrC,eAChBlgD,OAAQ8/C,EACRpQ,WAAYx6B,EAAMirC,aAClBvzC,YAAasI,EAAMkrC,gBAGrB,kBAAC7vD,EAAAA,OAAMA,CACLrF,KAAK,OACLsF,QAAQ,YACRzK,QAAQ,8DACRoF,QAAS+pB,EAAMmrC,eAGnB,kBAACtgD,EAAAA,MAAKA,CACJlU,MAAM,sBACNmU,OAAQH,EACRM,eAAe,EACfC,sBAAsB,EACtBH,UAAWiV,EAAM/vB,YAEjB,kBAACmK,IAAAA,KAAE,kHAIH,kBAACA,IAAAA,KAAE,6DAC0D,IAC3D,kBAACnC,IAAAA,CAAE/K,KAAMk9D,GAAmBlyD,OAAO,SAASC,IAAI,sBAAsBxF,UAAWR,EAAO2F,MAAM,8BAIhG,kBAACsC,IAAAA,KAAE,cACH,kBAACyQ,EAAAA,MAAMskC,UAAS,KACd,kBAAC9zC,EAAAA,OAAMA,CAACC,QAAQ,YAAYqJ,KAAK,UAAU1O,QAAS+pB,EAAM/vB,YAAY,UAGtE,kBAACoL,EAAAA,OAAMA,CAACpF,QAAS+pB,EAAM/vB,WAAYkG,UAAAA,GAAS,UAOtD,CAzIA9M,WAAAA,GACE0B,MAAM,CACJoB,KAAM,kBACN4J,MAAO,qBACPhM,MAAO,KACP4gB,aAAa,EACbigD,cAAc,IAhHlB,QAAUnyB,sBAAsB,IAAIC,GAAAA,GAAyBzwC,KAAM,CACjE0wC,cAAe,CAAC,aAAc,eAC9BC,iCAAkC,KAChC3wC,KAAKq7B,OAAO,KAiIhB0nC,GAAAA,KAAAA,kBAAkBjrD,I,IAUZA,EALJ,GAJA3D,GAAkB,uCAAwC,CAAErS,MAAOgW,EAAOhW,QAE1E9B,KAAK4iE,cAEgB,UAAjB9qD,EAAOhW,MAAX,CAKA,GAAgB,QAAZgW,EAAAA,EAAOhW,aAAPgW,IAAAA,OAAAA,EAAAA,EAAcqT,WAAW,gBAI3B,OAHAnrB,KAAKu2B,SAAS,CAAEz0B,MAAO,YAEvB9B,KAAKggC,aAAa,IAAIo+B,GAAoB,CAAE0D,WAA6B,sBAAjBhqD,EAAOhW,SAAkC,GAInG,CAACmX,GAAc0B,SAAU1B,GAAc+B,YAAYwQ,SAASmwB,IAC1D,MAAM4E,EAAQ1mB,GAAAA,GAAWC,iBAAiB95B,KAAM,GAAG27C,UAAuBqQ,IAE1EzL,EAAM+N,qBAAoB,GAC1B/N,EAAMqN,YAAY91C,EAAO6jC,GAAe,IAG1C37C,KAAKu2B,SAAS,CAAEz0B,MAAOgW,EAAOhW,OAhB9B,MAFE9B,KAAKu2B,SAAS,CAAEz0B,MAAO,KAAM4gB,aAAa,GAkBN,IAGxCwgD,GAAAA,KAAAA,eAAc,KACZ/uD,GAAkB,4CAElBnU,KAAKu2B,SAAS,CAAE7T,aAAa,GAAO,IAGtC1a,GAAAA,KAAAA,cAAa,KACXhI,KAAKu2B,SAAS,CAAE7T,aAAa,GAAQ,IAWvCsgD,GAAAA,KAAAA,gBAAe,KACbrvC,YAAW,IAAM3zB,KAAK0iE,cAAc,EAAE,IAGxCO,GAAAA,KAAAA,iBAAgB,KACdjjE,KAAK4iE,aAAa,IAnElB5iE,KAAK43B,qBAAqB53B,KAAKs2B,WAAWqB,KAAK33B,MACjD,EA7GA,GARWyiE,GAQJK,UAAU,CACf,CACEh1D,MAAO,mBACPhM,MAAO,WACPqB,QAAS,CACP,CACErB,MAAO,yBACPgM,MAAO,yBACPq1D,SAAU,CACRjpD,KAAM,SACNK,GAAI,MACJmwC,SAAU,SACVC,OAAQ,UACR78C,MAAO,aAETs1D,WAAY,CACVlpD,KAAM,SACNK,GAAI,MACJmwC,SAAU,UACVC,OAAQ,MACR78C,MAAO,cAGX,CACEhM,MAAO,wBACPgM,MAAO,wBACPq1D,SAAU,CACRjpD,KAAM,SACNK,GAAI,MACJmwC,SAAU,SACVC,OAAQ,MACR78C,MAAO,aAETs1D,WAAY,CACVlpD,KAAM,SACNK,GAAI,MACJmwC,SAAU,SACVC,OAAQ,MACR78C,MAAO,cAGX,CACEhM,MAAO,gBACPgM,MAAO,6BACPq1D,SAAU,CACRjpD,KAAM,WACNK,GAAI,WACJmwC,SAAU,WACVC,OAAQ,WACR78C,MAAO,UAETs1D,WAAY,CACVlpD,KAAM,SACNK,GAAI,MACJmwC,SAAU,UACVC,OAAQ,MACR78C,MAAO,cAGX,CACEhM,MAAO,iBACPgM,MAAO,8BACPq1D,SAAU,CACRjpD,KAAM,YACNK,GAAI,YACJmwC,SAAU,YACVC,OAAQ,YACR78C,MAAO,WAETs1D,WAAY,CACVlpD,KAAM,SACNK,GAAI,MACJmwC,SAAU,UACVC,OAAQ,MACR78C,MAAO,cAGX,CACEhM,MAAO,iBACPgM,MAAO,2BAET,CACEhM,MAAO,oBACPgM,MAAO,+BAIb,CACEA,MAAO,aACPhM,MAAO,SACPqB,QAAS,CACP,CACE2K,MAAO,6BACPhM,MAAO,aAkJjB,MAAMmG,GAAaC,IAA0B,CAC3C26D,iBAAkBz6D,EAAAA,GAAG;;IAGrBmrB,OAAQnrB,EAAAA,GAAG;iBACIF,EAAMyG,QAAQ;;IAG7BkB,KAAMzH,EAAAA,GAAG;aACEF,EAAMY,OAAOC,KAAK8G;MC5RxB,SAASwzD,KACd,OAAQzvB,IACN,MAAM0vB,EAAS,IAAI7jE,IAEb4sD,EAAWzY,EAASI,iBAAiB5wB,IAA8B8F,I,IAC7DA,EAAV,MAAMje,EAAwB,QAApBie,EAAAA,EAAM1T,QAAQgoB,cAAdtU,IAAAA,OAAAA,EAAAA,EAAuB,IACnBje,aAAAA,EAAAA,EAAGgzB,QAOjBqlC,EAAOzhE,IAAIoJ,EAAEgzB,MAAiB7jB,KAAK6lB,OAAOh1B,EAAEsU,OAAO,GAAGhb,SAW5D,SAA8BqvC,EAAuB3T,GAEnD,MAAM8I,EAAalP,GAAAA,GAAWymB,eAC5B1M,GACC9yB,GAAMA,aAAampC,GAAAA,IAAiC,eAArBnpC,EAAEqU,MAAMgF,WAG1C,IAAK,MAAMsa,KAAK1L,EACd0L,EAAErJ,wBAEFqJ,EAAEle,SAAS,CACTqL,aAAazC,EAAAA,GAAAA,QAAMokC,EAAAA,GAAAA,WAAU9uB,EAAEtf,MAAMyM,aAAc,CAAEC,SAAU,CAAE5B,UAGvE,CAvBMujC,CAAqB5vB,EAAUx5B,KAAK6lB,OAAOqjC,EAAO/+D,YANhDrE,EAAOa,KAAK,uDAAwDmoB,EAAM1T,QAAQgoB,OAMxB,IAG9D,MAAO,KACL6uB,EAAS7wB,aAAa,CACvB,CAEL,CCMO,MAAMioC,WAAmCvnC,GAAAA,GAwC9C5F,UAAAA,GAIEotC,EAAAA,gBAAgBh9C,QAAQ,CAAC,GAAG,GAE5B,MAAM06B,EAAwBvnB,GAAAA,GAAWC,iBAAiB95B,KAAM,kBAAmBo2B,IAOnF,OALAgrB,EAAsB7qB,SAAS,CAAEzS,MAAOsS,GAAsByB,+BAC9DupB,EAAsB3qB,QAAO,GAE7Bz2B,KAAKssD,oBAEE,KACLlL,EAAsB7qB,SAAS,CAAEzS,MAAOsS,GAAsBe,gBAC9DiqB,EAAsB3qB,QAAO,EAAK,CAEtC,CAEA61B,iBAAAA,GACEtsD,KAAKo5C,MAAMve,IACT76B,KAAKg0C,iBAAiBoqB,IAAsBl1C,IAC1C,MAAMilC,EAAmBjlC,EAAM1T,QAAQssD,YACjC,cAAE9S,EAAa,gBAAED,GAAoB/uD,KAAKm1B,MAEhD65B,EAAcV,qBAAoB,GAClCS,EAAgBT,qBAAoB,GAEpCU,EAAcd,oBAAoBC,GAClCY,EAAgBb,oBAAoBC,EAAiB,KAIzDnuD,KAAKo5C,MAAMve,IACT76B,KAAKg0C,iBAAiBqqB,IAAuB,KAC3Cr+D,KAAKm1B,MAAMwuC,cAAcjB,YAAY,KAIzC1iE,KAAKo5C,MAAMve,IACT76B,KAAKg0C,iBAAiBsT,IAA4Bp+B,IAChD,MAAM,OAAE8V,EAAM,OAAEkxB,EAAM,UAAEj2C,EAAS,oBAAEiwC,GAAwBhhC,EAAM1T,SAC3D,cAAEw5C,EAAa,gBAAED,GAAoB/uD,KAAKm1B,MAC1CyuC,EAAc5kC,IAAW/lB,GAAc0B,SAAWo0C,EAAkBC,EAEtEkB,GACFlwD,KAAK6jE,eAAeD,EAAa3pD,EAAWiwC,GAG9C6E,EAAgBT,oBAAoB4B,GACpClB,EAAcV,oBAAoB4B,EAAO,KAI7ClwD,KAAKo5C,MAAMve,IACT76B,KAAKg0C,iBAAiBwT,IAAsBt+B,IAC1C,MAAM,OAAE8V,EAAM,UAAE/kB,EAAS,oBAAEiwC,GAAwBhhC,EAAM1T,SACnD,cAAEw5C,EAAa,gBAAED,GAAoB/uD,KAAKm1B,MAC1CyuC,EAAc5kC,IAAW/lB,GAAc0B,SAAWo0C,EAAkBC,EAE1EhvD,KAAK6jE,eAAeD,EAAa3pD,EAAWiwC,EAAoB,KAIpElqD,KAAKo5C,MAAMve,IACT76B,KAAKg0C,iBAAiBuT,IAAmBr+B,IACvC,MAAM,OAAE8V,GAAW9V,EAAM1T,SACnB,cAAEw5C,EAAa,gBAAED,GAAoB/uD,KAAKm1B,OAC5B6J,IAAW/lB,GAAc0B,SAAWo0C,EAAkBC,GAE9DT,mBAAmB,IAGrC,CAEAsV,cAAAA,CAAeD,EAAgC3pD,EAAiCiwC,GAC1EjwC,GACF2pD,EAAY/V,aAAa5zC,GAGvBiwC,GACF0Z,EAAY1X,aAAa,CACvBhyC,KAAMgwC,EAAoBhwC,KAAK4uC,cAC/BvuC,GAAI2vC,EAAoB3vC,GAAGuuC,eAGjC,CAGA/S,2BAAAA,GACE,MAAO,CACLC,UAAW,CACTnc,GAAAA,GAAWC,iBAAiB95B,KAAM,cAAeu4B,IACjDsB,GAAAA,GAAWC,iBAAiB95B,KAAM,kBAAmBo2B,IACrDp2B,KAAKm1B,MAAMwuC,eAEb1tB,aAAc,GAElB,CAcA,gBAAOne,EAAU,MAAEC,IACjB,MAAM7tB,GAASC,EAAAA,EAAAA,YAAWlC,KAEpB,cAAE+mD,EAAa,gBAAED,EAAe,KAAE1oD,GAAS0xB,EAAMjxB,WAEvD,OACE,kBAAC0D,MAAAA,CAAIE,UAAWR,EAAOwK,WACrB,kBAAClK,MAAAA,CAAIE,UAAWR,EAAO45D,SACrB,kBAAC9U,EAAcl3B,UAAS,CAACC,MAAOi3B,IAChC,kBAACD,EAAgBj3B,UAAS,CAACC,MAAOg3B,KAGpC,kBAAC1oD,EAAKyxB,UAAS,CAACC,MAAO1xB,IAG7B,CAtKAjF,WAAAA,EAAY,qBACVu/C,EAAoB,eACpBC,EAAc,gBACdH,EAAe,kBACfC,IAOA59C,MAAM,CACJqI,IAAK,2BACL6jD,cAAe,IAAIhD,GAAkB,CACnC/7C,OAAQgJ,GAAc0B,SACtBgmC,qBAAsB7kC,QAAQ6kC,GAC9BC,eAAgB9kC,QAAQ8kC,GACxB15B,QAASu5B,GAAmB,KAE9BsO,gBAAiB,IAAI/C,GAAkB,CACrC/7C,OAAQgJ,GAAc+B,WACtB2lC,qBAAsB7kC,QAAQ6kC,GAC9BC,eAAgB9kC,QAAQ8kC,GACxB15B,QAASw5B,GAAqB,KAEhC7L,WAAY,CACV,IAAIC,GAAAA,GAAAA,GAAqB,CACvB3pC,IAAK,sBACL4pC,KAAMC,EAAAA,oBAAoBC,YAE5BouB,MAEFh9D,KAAM,IAAI46D,GACV0C,cAAe,IAAIlB,K,6GA0GvBpB,CAAAA,KAAAA,qBAAoB,KAClB,MAAM,cAAErS,EAAa,gBAAED,GAAoB/uD,KAAKm1B,OAExC+0B,oBAAqB0V,GAAsB5Q,EAAcrB,oBACzDzD,oBAAqB4V,GAAwB/Q,EAAgBpB,mBAErE,MAAO,CACLiS,oBACAE,sBACD,IAhHD9/D,KAAK43B,qBAAqB53B,KAAKs2B,WAAWqB,KAAK33B,MACjD,EAoIF,MAAMiI,GAAaC,IAA0B,CAC3CwM,UAAWtM,EAAAA,GAAG;;;;IAKd07D,QAAS17D,EAAAA,GAAG;;;WAGHF,EAAMyG,QAAQ;qBACJzG,EAAMyG,QAAQ;;;;;sUC9M5B,MAAMo1D,WAAkBrgD,GACvBsgD,WAAAA,CAAYC,G,kBAAlB,gBACE,MAAMxhE,QAAiB,EAAKQ,MAAM,iCAAkC,CAClEmD,OAAQ,OACRC,KAAM3E,KAAKM,UAAU,CACnBiiE,wBAMJ,aAFmBxhE,EAASoB,MAG9B,GAXA,E,CAaMqgE,SAAAA,G,kBAAN,gBACE,MAAMzhE,QAAiB,EAAKQ,MAAM,+BAAgC,CAChEmD,OAAQ,OACRC,KAAM3E,KAAKM,UAAU,CAAC,KAKxB,aAFmBS,EAASoB,MAG9B,GATA,E,2HCZK,MAAMsgE,GAiBXC,kBAAAA,CAAmBC,EAAS,GAC1B,OAAOlqD,KAAKmqD,OAAStkE,KAAKukE,OAAOC,UAAYH,CAC/C,CASA,aAAOI,CAAO3iE,GACZ,QAAc6I,IAAV7I,GAAiC,KAAVA,EACzB,OAGF,IAAI4iE,EACJ,IACEA,EAAUC,KAAK7iE,EACjB,CAAE,MAAOb,GAEP,YADAf,EAAOe,MAAMA,EAAgB,CAAEN,KAAM,4CAEvC,CAEA,MAAM,QAAE6U,EAAO,SAAEovD,GAAaT,GAAiBU,UAAUH,GACzD,OAAIE,EAIK,IAAIT,GAAiBriE,EArDX,QAwDZ,IAAIqiE,GAAiB3uD,EAAQuD,SAAUtS,OAAO+O,EAAQ+uD,QAC/D,CASA,gBAAeM,CAAUpe,GACvB,IAEE,MAAO,CAAEjxC,QADO9T,KAAKC,MAAM8kD,GACTme,UAAU,EAC9B,CAAE,SACA,MAAO,CAAEpvD,aAAS7K,EAAWi6D,UAAU,EACzC,CACF,CA9DAxjE,WAAAA,CAAY2X,EAAkBwrD,GAH9B,QAAiBO,0BAAjB,GACA,QAAiBP,cAAjB,GAGEvkE,KAAK8kE,mBAAqB/rD,EAC1B/Y,KAAKukE,OAAS,IAAIpqD,KAAKoqD,EACzB,E,yHCfF,MACMQ,GAA6B,wBAanC,MAAMC,GAIJC,SAAAA,GAIE,OADAjlE,KAAKklE,wBACEllE,KAAKmlE,aACd,CAEAC,SAAAA,CAAUC,GACHA,EAAOl6C,WAAW,GAAG45C,SACxBM,EAAS,GAAGN,MAA8BM,KAG5C,MAAMC,EAAYN,GAAgCO,iBAAiBF,EAAQN,SACzDp6D,IAAd26D,IAMJtlE,KAAKwlE,qBACLxlE,KAAKslE,UAAYA,EACjBtlE,KAAKmlE,cAAgBhB,GAAiBM,OAAOa,EAAUxjE,OACvDyZ,SAAS8pD,OAAS,GAAGA,YACvB,CAEAI,YAAAA,GACElqD,SAAS8pD,OAAS,GAAGN,sDACrB/kE,KAAKwlE,qBACLxlE,KAAKslE,eAAY36D,EACjB3K,KAAKmlE,mBAAgBx6D,CACvB,CAEQ66D,kBAAAA,GACNjqD,SAAS8pD,OAAS,6DACpB,CAEQH,qBAAAA,G,IAEc,EAAyC,EAD7D,MAAMG,EAASL,GAAgCO,iBAAiBhqD,SAAS8pD,OAAQN,KAC7EM,aAAAA,EAAAA,EAAQl6D,QAAsB,QAAd,EAAAnL,KAAKslE,iBAAL,eAAgBn6D,OAAOk6D,aAAAA,EAAAA,EAAQvjE,UAAwB,QAAd,EAAA9B,KAAKslE,iBAAL,eAAgBxjE,cAIlE6I,IAAX06D,EAAuBrlE,KAAKolE,UAAU,GAAGC,EAAOl6D,OAAOk6D,EAAOvjE,SAAW9B,KAAKylE,eAChF,CAEA,uBAAeF,CAAiBG,EAAaxhE,GAC3C,OAAOwhE,EACJjyD,MAAM,KACNzI,KAAK26D,IAKJ,MAAOx6D,KAAQ+pD,GAAQyQ,EAAGj9C,OAAOjV,MAAM,KACjC3R,EAAQozD,EAAKj6C,KAAK,KACxB,MAAO,CAAE9P,IAAKA,EAAIud,OAAQ5mB,MAAOA,aAAAA,EAAAA,EAAO4mB,OAAQ,IAEjDppB,MAAK,EAAG6L,SAAUA,IAAQjH,GAC/B,C,cA7DA,QAAQohE,iBAAR,GACA,QAAQH,qBAAR,E,EA+DK,MAAMS,GAAmD,IAAIZ,GClDpE,MAAMa,GAAc,IACdC,GAAe,IAEd,SAASC,GAAeC,EAAkBC,EAAeC,GAC9D,MAAMC,EA3BR,SAA4BC,EAAkBH,EAAeC,GAC3D,MAAMtgE,GALoBygE,EAKW7hE,EAAAA,OAAOoB,WAAa,KAJ9C0gE,SAAS,KAAOD,EAAI34D,MAAM,GAAI,GAAK24D,EADhD,IAA4BA,EAM1B,MAAME,EAAc,GAAGrnE,OAAOC,SAASkqC,SAASzjC,IAAYjH,IAAkBC,EAAO4nE,kBAE/E/qD,EAAM,IAAIzW,IAAI,yBAA0B,sBAgB9C,OAfAyW,EAAIvW,aAAarD,IAAI,YAAaukE,GAC9BF,GACFzqD,EAAIvW,aAAarD,IAAI,eAAgBqkE,GAEvCzqD,EAAIvW,aAAarD,IAAI,QAAS,QAC9B4Z,EAAIvW,aAAarD,IACf,QACA+W,KACElX,KAAKM,UAAU,CACbykE,aAAcF,EACdN,YAKCxqD,EAAI3V,UACb,CAMmB4gE,CAAmBV,EAAUC,EAAOC,IAE/C,IAAEtS,GAAQ10D,O,IACL00D,EAA6BA,EAAxC,MAAM9nB,GAAoB,QAAf8nB,EAAAA,aAAAA,EAAAA,EAAK+S,kBAAL/S,IAAAA,EAAAA,EAAmB,GAAK,GAAiB,QAAZA,EAAAA,aAAAA,EAAAA,EAAKgT,eAALhT,IAAAA,EAAAA,EAAgB,GAAKiS,GAAc,E,IAChEjS,EAA8BA,EAAzC,MAAM7nB,GAAqB,QAAhB6nB,EAAAA,aAAAA,EAAAA,EAAKiT,mBAALjT,IAAAA,EAAAA,EAAoB,GAAK,GAAiB,QAAZA,EAAAA,aAAAA,EAAAA,EAAKkT,eAALlT,IAAAA,EAAAA,EAAgB,GAAKkS,GAAe,EAE7E,OAAO5mE,OAAO+O,KACZk4D,EACA,eACA,sHAAsHN,cAAuBC,WAAqB/5B,WAAWD,IAEjL,C,mICnCsBk4B,K,eAAf,UACL+C,EACAC,EACA7B,EACA8B,EACAC,GAMA,GAJID,GACFA,EAAelkD,QAGboiD,aAAAA,EAAAA,EAAef,qBAEjB,IAEE,kBADM4C,EAAiB5vC,UAEzB,CAAE,MAAOn2B,GAGPf,EAAOe,MAAMA,EAAgB,CAAEN,KAAM,wCAIrCilE,GAAwBH,cAC1B,CAIF,IACE,MAAQW,SAAUJ,EAAUmB,YAAajB,SAAsBa,EAAU7C,YACzEgD,EAAkBnB,GAAeC,EAAUC,GAAOC,GACpD,CAAE,MAAOjlE,GACP6T,GAAa7T,EAAgB,CAAC,8BAAgCA,EAAgB0B,SAChF,CACF,EAlCsBqhE,G,gLAAAA,GAAAA,MAAAA,KAAAA,U,oICTAoD,K,eAAf,UACLL,EACAM,EACApB,GAEA,MAAM50C,EAAOg2C,EAAgB5lE,IAAI,QACjC,IAAK4vB,EACH,MAAO,GAGT,MAAMi2C,EAAaD,EAAgB5lE,IAAI,SACvC,IAAK6lE,EACH,MAAM,IAAI9kE,MAAM,4BAGlB,IAAI2yB,EAEJ,IACEA,EAAQzzB,KAAKC,MAAMgjE,KAAK2C,GAC1B,CAAE,MAAOrmE,GACP,MAAM,IAAIuB,MAAM,2BAClB,CAEA,GAAI2yB,EAAM8wC,QAAUA,EAClB,MAAM,IAAIzjE,MAAM,4BAIlB,aADkBukE,EAAU/C,YAAY3yC,IAC7Bg0C,MACb,EA7BsB+B,G,gLAAAA,GAAAA,MAAAA,KAAAA,U,2HCoBf,SAASG,IAAmB,UACjCR,EAAS,eACTE,EAAc,kBACdC,EAAiB,iBACjBM,EAAgB,MAChBvB,KAGAxxD,EAAAA,EAAAA,YAAU,KACR,MAAMgzD,EAAAA,W,WAAa,YACjB,GAAKR,IAAkBA,EAAeS,OAAtC,CAKA,IACE,MAAMxiE,EAxBd,SAAkChG,GAChC,IACE,OAAO,IAAI8F,IAAI9F,EAAOC,SAAS8F,MAAMC,YACvC,CAAE,SACA,OAAO,IACT,CACF,CAkB6ByiE,CAAyBV,GAE9C,GAAqB,OAAjB/hE,EAAuB,CACzB,MAAMigE,QDvCT,SACL4B,EACAM,EACApB,G,OAHoBmB,GAAAA,MAAAA,KAAAA,U,CCuCgBA,CAAYL,EAAW7hE,EAAc+gE,GAEjE,GAAId,EAIF,OAHAqC,EAAiBrC,GACjB8B,EAAelkD,aACfmkD,EAAkB,KAGtB,CACF,CAAE,MAAOjmE,GAIP,OAHA6T,GAAa7T,EAAgB,CAAC,oCAAsCA,EAAgB0B,UACpFskE,EAAelkD,aACfmkD,EAAkB,KAEpB,CAGAhoE,OAAOy0B,WAAW8zC,EAAY,IAvB9B,MAFEP,EAAkB,KA0BtB,E,mOA5BMO,GAkCN,OAJIR,GACFQ,IAGK,KACDR,IACFA,EAAelkD,QACfmkD,EAAkB,MACpB,CACD,GACA,CAACD,EAAgBC,EAAmBM,EAAkBvB,EAAOc,GAClE,C,gUC/DO,MAAMa,GAAyC,CACpDC,mBAAmB,EACnBC,YAAY,EACZC,kBAAkB,EAClBC,MAAK,IAAE,YAAa,KAGTC,IAAgBC,EAAAA,EAAAA,eAAcN,I,ybCUpC,MAAMO,GAA0BhkE,OAAOC,OAAO,CACnDgkE,IAAK,YACLvuD,UAAMlP,EACN09D,OAAQ,CACNL,MAAO,iBACPM,UAAW,IAEb3lE,QAAS,GACTqC,IAAK,KAcA,MAAMujE,WAAyB7kD,GAyBpC,QAAc8kD,EAAuBC,EAAgBC,EAAmBC,G,kBAAxE,gBAWE,aAVuB,EAAKC,gBAC1B,6BACAlnE,KAAKM,UAAU,CACb6mE,cAAeL,EACft3C,IAAKu3C,EACLC,YACAC,eAIY9kE,MAClB,GAZA,E,CAqBA,WAAiBilE,G,kBAAjB,gBACE,aAAaryD,QAAQkwB,IACnBmiC,EAAQ99D,KAAI,EAAGw9D,gBAAeC,YACvBD,GAAkBC,EAIhB,EAAKM,UAAUP,EAAeC,GAAQ3kE,OAAO7C,IAClDf,EAAOe,MAAMA,EAAO,CAClBN,KAAM,0CAA0C6nE,OAAmBC,SAG9DN,MARAA,KAYf,GAhBA,E,CAkBM/wC,OAAAA,G,kBAAN,gBACE,OAAO,EAAK4xC,gBACd,GAFA,E,CAWA,UAAwBR,EAAuBC,G,kBAA/C,gB,IAUE5kE,EATA,MAAMpB,QAAiB,EAAKmmE,gBAC1B,+BACAlnE,KAAKM,UAAU,CACb6mE,cAAeL,EACft3C,IAAKu3C,KAIH5kE,QAAapB,EAASoB,OAE5B,OADAA,EAAAA,GAAKgW,OAALhW,EAAKgW,KAAS,IAAIM,KAAKtW,EAAKgW,OACrBhW,CACT,GAZA,E,CAuBA,gBAA8BolE,EAAc5iE,G,kBAA5C,gB,IAOM,EALJ,GAAI,EAAK6iE,aACP,OAAO,EAAKC,aAAaF,EAAM5iE,GAIjC,GAAiC,QAA7B,IAAK+iE,eAAenE,mBAApB,eAAiCb,mBAAmBmE,GAAiBc,SAAU,CACjF,EAAKH,cAAe,EAGpB,UACQ,EAAKF,gBACb,CAAE,MAAO53C,GACP,EAAKg4C,eAAe3D,eACpB,EAAK6D,WAAWl4C,EAClB,CAGA,EAAKk4C,aACL,EAAKJ,cAAe,CACtB,CAEA,OAAO,EAAKK,KAAKN,EAAM5iE,EACzB,GAxBA,E,CAiCA,KAAmB4iE,EAAc5iE,G,kBAAjC,gBACE,OAAO,EAAKpD,MAAMgmE,EAAM,CACtB7iE,OAAQ,OACRC,KAAMA,GAEV,GALA,E,CAWA,iB,kBAAA,gBACE,MAAM5D,QAAiB,EAAKQ,MAAM,mCAAoC,CACpEmD,OAAQ,OACRC,KAAM3E,KAAKM,UAAU,CAAC,KAGlBqE,QAAa5D,EAASoB,OAC5B,EAAKulE,eAAehE,UAAU/+D,EAAKg/D,OACrC,GARA,E,CAkBA,aAA2B4D,EAAc5iE,G,kBAAzC,gBACE,OAAO,IAAIoQ,SAAQ,CAACC,EAASC,KAC3B,EAAK6yD,aAAavsD,MAAMwsD,IAClBA,EACF9yD,EAAO8yD,GAIT/yD,EAAQ,EAAK6yD,KAAKN,EAAM5iE,GAAM,GAC9B,GAEN,GAXA,E,CAsBA,WAAmBojE,OAAyB9+D,GAC1C3K,KAAKwpE,aAAah+C,SAASvY,GAAaA,EAASw2D,KACjDzpE,KAAKwpE,aAAe,EACtB,CAhLApoE,WAAAA,CAAY+B,GACVL,MAAMK,GATR,QAAQimE,sBAAR,GAEA,QAAQI,oBAAR,GACA,QAAQN,oBAAR,GAQElpE,KAAKopE,eAAiBxD,GACtB5lE,KAAKkpE,cAAe,EACpBlpE,KAAKwpE,aAAe,EACtB,E,gUARA,GAPWjB,GAOac,UAAU,KCtC7B,MAAMpD,GCfJrtD,KAAK7S,OAAO2jE,gBAAgBC,OAAOC,gBAAgB,IAAIC,WAAW,ODkBrEC,GAA0B,wDAEzB,SAASC,IAAsB,cAAEpmD,EAAa,SAAE5T,IACrD,MAAMg3D,EAAY3kB,GAA6Bjf,MAAMxf,EAAeogD,IAC9DiD,EAAmB5kB,GAA6Bjf,MAAMxf,EAAe4kD,KAEpEV,EAAmBmC,IAAwBljE,EAAAA,EAAAA,UAAS8gE,GAAuBC,oBAC3E1C,EAAeqC,GEvBjB,WACL,MAAOnC,EAAQD,IAAat+D,EAAAA,EAAAA,UAAS8+D,GAAwBX,aAY7D,MAAO,CAACI,EAVe4E,IAChBA,GAIHrE,GAAwBR,UAAU6E,GAClC7E,EAAUQ,GAAwBX,eAJlCW,GAAwBH,eACxBL,OAAUz6D,GAIZ,EAIJ,CFS4Cu/D,IACnCjD,EAAgBC,IAAqBpgE,EAAAA,EAAAA,aAK5C2N,EAAAA,EAAAA,YAAU,KAC+B01D,eAAevoE,QAAQkoE,MACvBnmD,IACrC6jD,EAAiB,IACjB2C,eAAepoE,QAAQ+nE,GAAyBnmD,GAAiB,IACnE,GACC,CAACA,IAEJ4jD,GAAmB,CAAER,YAAWE,iBAAgBC,oBAAmBM,mBAAkBvB,WAKrF,MAAMmE,IAAuBnD,IAAkBA,EAAeS,OAC1D0C,IAAyBvC,GAC3BmC,EAAqBI,GAGvB,MAAMpC,GAAQrwD,EAAAA,EAAAA,aAAWA,IAAC,YACxB,ULzCG,SACLovD,EACAC,EACA7B,EACA8B,EACAC,G,OALoBlD,GAAAA,MAAAA,KAAAA,U,CK0CVA,CAAY+C,EAAWC,EAAkB7B,EAAe8B,EAAgBC,EAChF,CAAE,MAAOjmE,GACP6T,GAAa7T,EAAgB,CAAC,4BAA8BA,EAAgB0B,SAC9E,CACF,IAAG,CAACokE,EAAWC,EAAkB7B,EAAe8B,IAEhD,OACE,kBAACgB,GAAcoC,SAAQ,CACrBvoE,MAAO,CACL+lE,oBACAC,WAAYhsD,QAAQqpD,IAAkBA,EAAcf,sBACpD2D,iBAAkBjsD,QAAQqpD,aAAAA,EAAAA,EAAef,sBACzC4D,UAGDj4D,EAGP,C,wIG7DO,gBAAKu6D,G,uCAAAA,C,CAAL,C,IAqBP,MAAMC,IAAyBrC,EAAAA,EAAAA,oBAAsDv9D,GAM9E,SAAS6/D,IAAwB,SAAEz6D,IACxC,MAAOoyB,EAAWsoC,IAAgBC,EAAAA,GAAAA,GAChC,iDACA,CAAC,GAgDG5oE,EAAoC,CACxC6oE,aA9CmB,CAACC,EAAuBpyC,EAAqBvrB,KAChEw9D,GAActoC,IACPA,IACHA,EAAY,CAAC,GAEVA,EAAUyoC,KACbzoC,EAAUyoC,GAAiB,CAAC,GAE9BzoC,EAAUyoC,GAAepyC,G,uUAAe,IACnCvrB,GAEEk1B,IACP,EAmCF0oC,eAhCqB,CAACD,EAAuBpyC,KAC7CiyC,GAActoC,GACPA,GAAcA,EAAUyoC,IAAmBzoC,EAAUyoC,GAAepyC,WAGlE2J,EAAUyoC,GAAepyC,GACzB2J,GAHEA,GAIT,EA0BF2oC,mBAvByB,KACzBL,EAAa,CAAC,EAAE,EAuBhBM,mBApByB,CAACH,EAAuBpyC,EAAqBwyC,K,IAC5C7oC,EAA1B,MAAM8oC,EAAoB9oC,SAA0B,QAA1BA,EAAAA,EAAYyoC,UAAZzoC,IAAAA,OAAAA,EAAAA,EAA6B3J,GAEvD,IAAI0yC,EAOJ,OANID,EACFC,EAAwB,OACfF,IACTE,EAAwB,UAGnB,CACLC,gBAAiBF,GAAqBD,EACtCE,wBACD,GAUH,OAAO,kBAACX,GAAuBF,SAAQ,CAACvoE,MAAOA,GAAQiO,EACzD,CAUO,SAASq7D,GAAmBR,EAAuBpyC,EAAqBvrB,GAC7E,MAAM,aAAE09D,EAAY,eAAEE,EAAc,mBAAEC,EAAkB,mBAAEC,GATrD,WACL,MAAM7pE,GAAUmqE,EAAAA,EAAAA,YAAWd,IAC3B,QAAgB5/D,IAAZzJ,EACF,MAAM,IAAIsB,MAAM,2EAElB,OAAOtB,CACT,CAGmFoqE,IAE3E,gBAAEH,EAAe,sBAAED,GAA0BH,EAAmBH,EAAepyC,EAAavrB,GAElG,MAAO,CACL09D,eACAE,iBACAC,qBACAK,kBACAD,wBAEJ,CClHO,MAAMK,WAA2BloD,EAAAA,sB,6GACtC,CADWkoD,GACG3mE,OAAO,wB,cCHhB,MAAM4mE,GAAiB,CAE5BC,sBAAuBjnE,EAAAA,OAAOgnE,eAAoC,oBAElEE,sCAAuClnE,EAAAA,OAAOgnE,eAAoD,qC,mcCK7F,SAASG,IAA2B,QAAEzkD,EAAO,SAAEgqC,EAAQ,aAAE0a,IAC9D,MAAMjtC,EAAkBzX,EAAU,IAAIA,GAAW,GACjDyX,EAAgBtf,QAAQ,CAAElU,IAAK,eAAgB2b,SAAU,IAAKhlB,MAAO,iBAErE,MAAM88B,EAAWD,EAAgB3zB,KAAI,EAAGG,MAAK2b,WAAUhlB,WAAY,GAAGqJ,IAAM2b,KAAYhlB,OAAUmZ,KAAK,KAgBvG,OAAO4iB,GAda,IAAIgB,GAAAA,GAAiB,CACvC3H,WAAYlB,GACZ33B,QAAS,CACP,IACE4/B,MAAO,UACPa,UAAW,UACXf,cAAe,mBACfC,cAAe,IAAIY,cACnBsyB,YACI0a,GAAgB,CAAEA,aAAc,CAACA,QAM7C,C,6cC9BO,MAAMC,WAAqBC,GAAAA,QAC9B1qE,WAAAA,CACI2qE,EACAC,EACA3nD,EACAC,EACA2nD,GAEAnpE,QAQJ,QACAipE,sBADA,GAGA,QACAC,sBADA,GAGA,QACA3nD,aADA,GAGA,QACAC,WADA,GAGA,QACA2nD,iBADA,GAnBIjsE,KAAK+rE,eAAiBA,EACtB/rE,KAAKgsE,eAAiBA,EACtBhsE,KAAKqkB,MAAQA,EACbrkB,KAAKskB,IAAMA,EACXtkB,KAAKisE,UAAYA,CACrB,E,6UAEO/sC,EAAE,EAAG,W,mDAGLA,EAAE,EAAG,W,mDAGLA,EAAE,EAAG,U,0CAGLA,EAAE,EAAG,U,wCAGLA,EAAE,EAAG,U,iCCRT,MAAMgtC,WAAuBxoD,GAClC,wBAAOyoD,CAAkBroD,EAAe7J,EAAsBi3C,GAC5D,MAAM,gBAAEr7B,EAAe,eAAE8H,GAAmBD,GAAW5Z,GAEjDO,EAAgC,IAAxBpK,EAAUC,KAAKI,OACvBgK,EAA4B,IAAtBrK,EAAUM,GAAGD,OAEnB3X,EAAU,IAAIkpE,GAAah2C,EAAiB8H,EAAgBtZ,EAAOC,EAAK4sC,GAE9E,OAAO2a,GAAaO,OAAOzpE,GAAS0pE,QACtC,CAEMC,kBAAAA,EAAmB,MAAExoD,EAAK,UAAE7J,EAAS,SAAEi3C,I,kBAA7C,gBAOE,aANuB,EAAKjuD,MAAM,gDAAiD,CACjFmD,OAAQ,OACR3C,QAAS,CAAE,eAAgB,qBAC3B4C,KAAM,IAAIkmE,KAAK,CAACL,GAAeC,kBAAkBroD,EAAO7J,EAAWi3C,QAGrD/0C,MAClB,GARA,E,CAUMqwD,sBAAAA,EAAuB,gBAC3B32C,EAAe,eACf8H,EAAc,MACdtZ,EAAK,IACLC,EAAG,WACHmoD,EAAU,SACVvb,I,kBANF,gBAsBE,aAduB,EAAKjuD,MAAM,gDAAiD,CACjFmD,OAAQ,OACRC,KAAM3E,KAAKM,UAAU,CACnB+pE,eAAgBl2C,EAChBm2C,eAAgBruC,EAChBtZ,MAAe,IAARA,EACPC,IAAW,IAANA,EACLooD,mBAAoB,CAClBC,UAAWF,EAAWzhE,KAAK9G,IAAU,CAAEA,YAEzCgtD,gBAIYrtD,MAClB,GAvBA,E,ECzCK,SAASiX,GAAkBgJ,EAAe7J,GAC/C,MAAM,UAAEmf,EAAS,gBAAEvD,GAAoB6H,GAAW5Z,GAC5C8oD,EAAa,GAAG3yD,EAAUC,KAAKN,OAAO,yBAAyBK,EAAUM,GAAGX,OAAO,qBACzF,MAAO,GAAGwf,EAAU7R,QAAQ,MAAO,QAAQsO,KAAmB+2C,GAChE,C,0HC6BO,MAAMl0D,GAA4B,IA3BzC,cAAwC1V,EAOhC2V,MAAAA,CAAOzU,EAAciS,G,sBAA3B,YACE,MAAM1T,QAAiB,EAAKQ,MAAM,aAAc,CAC9CmD,OAAQ,OACRC,KAAM3E,KAAKM,UAAU,CACnBkC,OACAiS,QAASyC,KAAKlX,KAAKM,UAAUmU,IAC7B0C,aAAc,CACZC,MAAO3C,EAAQ4C,SAASD,MACxBE,QAAS7C,EAAQ4C,SAASC,SAE5BpU,KAAM,WAMV,aAFmBnC,EAASoB,MAG9B,E,mLAvBAzC,WAAAA,GACE0B,MAAM,6BAA8B,CAClC,eAAgB,oBAEpB,G,ybCcK,MAAM+pE,WAAwB3wC,GAAAA,GAK7B4wC,uBAAAA,EAAwB,cAC5BnpD,EAAa,MACbG,EAAK,UACL7J,EAAS,SACTi3C,I,OAJF,gBAME,MAAMuL,EAAmBra,GAA6Bjf,MAAMxf,EAAeq4C,IAE3E,IAAI7lD,EAEJ,IACEA,QAAgBsmD,EAAiBh7D,IAAI,CACnCqiB,QACA7J,YACAL,OAAQ,OACRs3C,SAAUA,GAAYD,GAAiBC,UAE3C,CAAE,MAAOjwD,GAEP,OADA6T,GAAa7T,EAAgB,CAAC,gDAAkDA,EAAgB0B,UACzF,IACT,CAEA,OAAOwT,CACT,GAvBA,E,CAyBM42D,iBAAAA,EAAkB,cACtBppD,EAAa,MACbG,EAAK,UACL7J,EAAS,SACTi3C,I,OAJF,gBAME,MAAM8b,EAAiB5qB,GAA6Bjf,MAAMxf,EAAeuoD,IAEzE,IAAI/1D,EAEJ,IACE,MAAMgG,QAAa6wD,EAAeV,mBAAmB,CACnDxoD,QACA7J,YACAi3C,SAAUA,GAAYD,GAAiBC,WAEzC/6C,QAAgB,IAAI82D,SAAS9wD,EAAK+wD,SAASC,YAAY,IAAIC,kBAAkB,UAAUjxD,MACzF,CAAE,MAAOlb,GAEP,OADA6T,GAAa7T,EAAgB,CAAC,6BAA+BA,EAAgB0B,UACtE,IACT,CAEA,OAAOwT,CACT,GAvBA,E,CA7BA/U,WAAAA,GACE0B,MAAM,CAAEqI,IAAK,4BAqDfkiE,GAAAA,KAAAA,sBAAqB,EAAGvpD,QAAO7J,gBAC7B,MAAM0J,EAAgBkW,GAAAA,GAAWC,iBAAiB95B,KAAM,aAAci6B,IAA4BnzB,WAC/FhF,OAEIovD,GAAYoN,MACb,SAAE/M,GAAaI,K,WAkBrB,MAAMt1C,EAAAA,W,MAAe,gBACnBlI,GAAkB,iCAAkC,CAAEyF,OAAQ,SAE9D,MAAMzD,QAAgB,EAAK22D,wBAAwB,CAAEnpD,gBAAeG,QAAO7J,YAAWi3C,aACtF,IAAK/6C,EACH,OAGF,MAAM6F,EAAW,GAAGlB,GAAkBgJ,EAAO7J,UACvC7S,EAAO,gCAAgCmV,mBAAmB7a,KAAKM,UAAUmU,MAE/EiG,KAAOhV,EAAM4U,EACf,I,kDAZMK,G,WAcN,MAAMixD,EAAAA,W,MAAgB,gBACpBn5D,GAAkB,iCAAkC,CAAEyF,OAAQ,UAE9D,MAAMzD,QAAgB,EAAK42D,kBAAkB,CAAEppD,gBAAeG,QAAO7J,YAAWi3C,aAChF,IAAK/6C,EACH,OAGF,MAAM6F,EAAW,GAAGlB,GAAkBgJ,EAAO7J,WAE7CmC,KAAOjG,EAAS6F,EAClB,I,kDAXMsxD,G,WAaN,MAAMlyD,EAAAA,W,MAA2B,gBAC/BjH,GAAkB,iCAAkC,CAAEyF,OAAQ,mBAE9D,MAAMzD,QAAgB,EAAK22D,wBAAwB,CAAEnpD,gBAAeG,QAAO7J,YAAWi3C,aACtF,GAAK/6C,EAIL,IACE,MAAM1T,QAAiBiW,GAA0BC,OAAOmC,GAAkBgJ,EAAO7J,GAAY9D,GAE7F,IAAK1T,EAASgZ,IACZ,MAAM,IAAIjZ,MAAM,uBAGlB,MAAM8Y,EAASC,SAASC,cAAc,KACtCF,EAAOrL,OAAS,SAChBqL,EAAOrW,KAAOxC,EAASgZ,IACvBF,SAASlV,KAAKqV,YAAYJ,GAC1BA,EAAOK,QACPJ,SAASlV,KAAKuV,YAAYN,EAC5B,CAAE,MAAOra,GAEP,YADA6T,GAAa7T,EAAgB,CAAC,sCAAwCA,EAAgB0B,SAExF,CACF,I,kDAzBMyY,GA2BN,MAAO,CACLhU,KAAM,CACJyU,8BAA+BC,QAAQy1C,aAAAA,EAAAA,EAAUp2C,+BAEnDpT,QAAS,CACPgU,YA3EgB,KAClB5H,GAAkB,iCAAkC,CAAEyF,OAAQ,QAE9D,MAAMoC,EAAW,GAAGlB,GAAkBgJ,EAAO7J,SAE5CsB,SAASU,cAAc,oCAA0DC,QAAQC,IACxF,GAAKA,EAMLC,KAAOD,EAAMH,OANb,CACE,MAAM/a,EAAQ,IAAIuB,MAAM,4CACxBsS,GAAa7T,EAAO,CAAC,2BAA4BA,EAAM0B,SAEzD,CAEsB,GACrB,YAAY,EA+Db0Z,eACAixD,gBACAlyD,4BAEH,GA3IH,EC3BK,SAASmyD,KACd,OAAOlC,EAAAA,EAAAA,YAAWpD,GACpB,CCIO,SAASuF,GAAqBtP,GACnC,MAAM,MAAE8J,EAAK,iBAAED,GAAqBwF,MAC9B,SAAEhc,GAAaI,KAEf8b,EAA2Blc,aAAAA,EAAAA,EAAUJ,uBAEpCuc,EAAYC,IAAiB7mE,EAAAA,EAAAA,UAAmB,IAEjD8mE,GAA6Ej2D,EAAAA,EAAAA,cACjF,EAAGgoB,QAAav4B,IAETqmE,GAA2C,IAAf9tC,EAAKr/B,MAI/B,CACL,CACEwN,MAAO,mBACPC,KAAM,cACNC,QAAS,KACPmG,GAAkB,4CAElBw5D,EC5BL,SAAyBE,EAAgBzmE,GAC9C,IAAIsmE,EAAuB,GAE3B,MAAMznD,EAAS7e,EAAKmY,OAAOjgB,MAAK,EAAG4E,UAAsC,UAATA,IAChE,IAAK+hB,EACH,OAAOynD,EAGT,MAAMI,GAAKC,EAAAA,EAAAA,qBAAoB,CAAEtuC,MAAOxZ,EAAQ/d,OAAOiY,EAAAA,EAAAA,iBACvD,IAAI9B,EAAOwvD,EAEX,KAAOxvD,GAAQA,EAAK/d,MAAQ,GAAG,C,IAKtB+d,EAJP,IAAK,MAAM2vD,KAAO3vD,EAAK4vD,YACrBP,EAAWruD,QAAQyuD,EAAG7nD,EAAO1hB,OAAOypE,IAAMjlE,MAG5CsV,EAAmB,QAAZA,EAAAA,EAAK6vD,eAAL7vD,IAAAA,OAAAA,EAAAA,EAAe,EACxB,CAEA,OAAOqvD,CACT,CDQ0BS,CAAgBxuC,EAAMv4B,IAEpC82D,EAAUjwD,KAAK,oBAIX85D,GACFC,GACF,IAlBG,IAuBX,CAACyF,EAA0B1F,EAAkBC,EAAO9J,IAGtD,MAAO,CACL92D,KAAM,CACJsmE,cAEF3lE,QAAS,CACP6lE,+BAGN,CFqHE,GAjJWf,GAiJJ/0C,aAAY,EAAGC,QAAOjU,QAAO7J,gBAClC,MAAM,QAAElS,GAAYgwB,EAAMs1C,mBAAmB,CAAEvpD,QAAO7J,cAEtD,OACE,kBAAC1L,EAAAA,SAAQA,CACPC,QACE,kBAACb,EAAAA,KAAIA,KACH,kBAACA,EAAAA,KAAKE,KAAI,CAACC,MAAM,MAAME,QAASjG,EAAQgU,cACxC,kBAACpO,EAAAA,KAAKE,KAAI,CAACC,MAAM,OAAOE,QAASjG,EAAQsU,eACzC,kBAAC1O,EAAAA,KAAKE,KAAI,CAACC,MAAM,QAAQE,QAASjG,EAAQulE,kBAI9C,kBAACl6D,EAAAA,OAAMA,CACLrF,KAAK,eACLpE,KAAK,KACL0J,QAAQ,YACRqJ,KAAK,UACLvQ,aAAW,sBACXvD,QAAQ,wB,II7LX,MAAMmvB,GAAQ,qBASRq2C,GAAyB,EACpCC,kBACAC,YAGA,MAAMvS,EAAa,u/CAqBAsS,EAAgBnqE,0SAmBrC,SAAiCmqE,EAAkCC,GACjE,OAAOA,EACJtjE,KAAKujE,GACa,IAAbA,EAAKC,IACA,OAAOD,EAAKA,OAEd,IAAIA,EAAKC,OAAOH,EAAgBlwD,SAASowD,EAAKA,SAEtDtzD,KAAK,KACV,CAlBEwzD,CAAwBJ,EAAiBC,eAIzC,MAAO,CACLroE,KAAM81D,EACP,ECjDI,SAAS2S,GAAsBC,GACpC,MAAM,MAAEpU,EAAOt5D,MAAO27D,GCEjB,SAA8B+R,GACnC,MAAOpU,EAAOsC,IAAY/1D,EAAAA,EAAAA,UAAS,KAC5Bg2D,EAAiBC,IAAsBj2D,EAAAA,EAAAA,WAAS,IAChDk2D,EAAkBC,IAAuBn2D,EAAAA,EAAAA,WAAS,IAClD0zD,EAAU0C,IAAep2D,EAAAA,EAAAA,UAAmB,KAC5C7F,EAAOk8D,IAAYr2D,EAAAA,EAAAA,UAAuB,MAE3Cw2D,GAAe3lD,EAAAA,EAAAA,cAAa4lD,IAChCL,EAAYK,GAEZJ,EAAS,MAETN,EAAS,IACTE,GAAmB,GACnBE,GAAoB,GAEL7D,GAAAA,GACU,CACrBrhC,MAAKA,GACLyiC,SAAU+C,IAEXt+B,KAGCm6B,GAAAA,MAGG5kC,UAAU,CACfgpC,KAAMX,EACN57D,KAAAA,CAAMmwB,GACJ+rC,EAAS/rC,GACT2rC,GAAmB,GACnBE,GAAoB,EACtB,EACAQ,QAAAA,GACEV,GAAmB,GACnBE,GAAoB,EACtB,GACA,GACD,IAEGS,GAAsB/lD,EAAAA,EAAAA,cACzBojD,IACC,MAAM4C,EAA0B,CAC9B,CACElD,KAAM,YACN1uD,QAASwuD,GAEX,CACEE,KAAM,OACN1uD,QAASgvD,IAIb,IACEuC,EAAa,IAAI9C,KAAamD,GAChC,CAAE,MAAO18D,GACPk8D,EAASl8D,EACX,IAEF,CAACu5D,EAAUD,EAAO+C,IAsBpB,OAnBA7oD,EAAAA,EAAAA,YAAU,KACR,GAAI+lD,EAASxzD,OAAS,EACpB,OAGF,MAAMu0D,EAAU6S,GAAuBO,GAEvC,IACErR,EAAa,CACX,CACE7C,KAAM,SACN1uD,QAASwvD,EAAQt1D,OAGvB,CAAE,MAAOhF,GACPk8D,EAASl8D,EACX,IACC,CAACu5D,EAASxzD,OAAQ2nE,EAAwBrR,IAEtC,CACL/C,MAAO,CACLxxD,KAAMwxD,EACNqD,WAAYd,EACZe,YAAab,EACbxC,SAAUA,EACVkD,uBAEFz8D,QAEJ,CD9FqC2tE,CAAqBD,GAExD,MAAO,CACLvnE,KAAM,CACJkQ,WAAYslD,IAAarC,EAAMxxD,KAAK2f,OACpCk0C,WACArC,QACAwD,mBAAoBjiD,SAAQy+C,aAAAA,EAAAA,EAAOqD,cAAcrD,aAAAA,EAAAA,EAAOsD,cACxDG,2BAA4BpB,GAAY9gD,QAAQy+C,aAAAA,EAAAA,EAAOsD,cAEzD91D,QAAS,CACPk2D,sBAAAA,CAAuBlD,GACrBR,EAAMmD,oBAAoB3C,EAC5B,GAGN,CEZA,MAAM9yD,GAAY,KAAO,CACvByG,MAAOtG,EAAAA,GAAG;;IAGV2D,QAAS3D,EAAAA,GAAG,KAOP,SAASymE,IAAmB,uBAAEF,IACnC,MAAMzkE,GAASC,EAAAA,EAAAA,YAAWlC,KACpB,KAAEb,EAAI,QAAEW,GAAY2mE,GAAsBC,GAEhD,OACE,oCACE,kBAACve,KAAAA,CAAG1lD,UAAWR,EAAOwE,OAAO,iCAC7B,kBAAClE,MAAAA,CAAIE,UAAWR,EAAO6B,SACpB3E,EAAKkQ,WACJ,oCACE,kBAAC+J,EAAAA,QAAOA,CAACu5B,QAAAA,IAAS,iBAKrBxzC,EAAK+9C,YACJ,kBAAC0M,GAAYA,CACXxhD,SAAS,QACT3B,MAAM,iCACN/L,QAAQ,yDAIXyE,EAAKw1D,UACJ,kBAAC/K,GAAYA,CACXxhD,SAAS,QACT3B,MAAM,2CACNzN,MAAOmG,EAAKw1D,SACZj6D,QAAQ,qHAIXyE,EAAK22D,oBAAsB,kBAACzD,GAAOA,CAACC,MAAOnzD,EAAKmzD,QAEhDnzD,EAAK42D,2BAA6B,kBAAClD,GAAYA,CAAC1U,SAAUr+C,EAAQk2D,0BAI3E,CCzDA,MAAM6Q,GAAyB,ECIxB,SAASC,GAA0BtzD,EAAauzD,GACrD,IAAIC,EAASxzD,EAEb,MAAMyM,EAAUzM,EAAI6L,MAAM,uDAC1B,GAAIY,EAAS,CACX,MAAO,CAAEgnD,EAAKC,EAAMja,GAAQhtC,EAC5B+mD,EAAS,sBAAsBC,KAAOC,UAAaja,GACrD,CAOA,YALkBvqD,IAAdqkE,GAA4BvzD,EAAI1D,SAAS,OAE3Ck3D,GAAU,KAAKD,KAGVC,CACT,C,44BCJO,SAASG,GAAiBzrD,EAAuB0qD,GACtD,MAAM,WAAEvG,GAAeyF,MACjB,QAAEtgE,GAAYohE,GAEbgB,EAAmBC,IAAwBxoE,EAAAA,EAAAA,WAAkB,G,IAUtDmG,EACJA,EACEA,EAVZ,MAAM,SACJsiE,EACAtuE,MAAOkkD,EAAU,WACjBl+C,GCHG,UAAyB,QAC9BE,EAAO,cACPwc,EAAa,WACb6rD,EAAU,OACV/G,EAAM,UACNC,EAAS,SACTC,IAEA,MAAM3B,EAAmB5kB,GAA6Bjf,MAAMxf,EAAe4kD,KACrE,WAAEthE,EAAU,MAAEhG,EAAK,KAAEmG,IAASE,EAAAA,EAAAA,GAAS,CAC3CH,QAAS2U,QAAQ3U,GAAWuhE,GAC5BlhE,SAAU,CAAC,WAAYgoE,EAAY/G,EAAQC,EAAWC,GACtDlhE,QAAS,IACPu/D,EACGyI,QAAQD,EAAY/G,EAAQC,EAAWC,GACvCn4D,MAAM6gB,IAAU,CACftlB,QAASslB,EAAKtlB,QACd/G,IAAKqsB,EAAKrsB,QAEXwL,MAAM3M,IAAU,CAAEmB,IAAKnB,EAAKmB,IAAK+G,QAAS44D,KAAK9gE,EAAKkI,eAG3D,MAAO,CACL9E,aACAhG,MAAO+lE,EAAiBjjE,aAAa9C,GAAS,KAAOA,EACrDsuE,SAAUnoE,EAEd,CDvBMsoE,CAAgB,CAClBvoE,QAAS2gE,EACTnkD,gBACA+kD,UAAW2F,EAAgBsB,SAC3BH,WAA+B,QAAnBviE,EAAAA,aAAAA,EAAAA,EAASuiE,kBAATviE,IAAAA,EAAAA,EAAuB,GACnCw7D,OAAwB,QAAhBx7D,EAAAA,aAAAA,EAAAA,EAAS2iE,eAAT3iE,IAAAA,EAAAA,EAAoB,GAC5B07D,SAA4B,QAAlB17D,EAAAA,aAAAA,EAAAA,EAAS4iE,iBAAT5iE,IAAAA,EAAAA,EAAsB,MAI5B,aAAE6iE,EAAY,SAAEC,IAAaxlE,EAAAA,EAAAA,UACjC,KACEglE,aAAAA,EAAAA,EAAUxjE,SFKT,SAAuBgL,EAAqBi5D,GACjD,MAAMC,EAAYzqD,MAAMtL,KAAK81D,EAAazrE,UAAUwrB,MAAK,CAAC/f,EAAGof,IAAMpf,EAAEu+D,KAAOn/C,EAAEm/C,OACxED,EAAQv3D,EAAYtD,MAAM,MAE1By8D,EAAiB5B,EAAMtjE,KAAI,CAACujE,EAAMxxC,KACtC,MAAMozC,EAAapzC,EAAQ,EACrBqzC,EAAWJ,EAAavuE,IAAI0uE,G,IAK3BC,EACCA,EAJR,MAAO,CACL7B,OACA8B,OAAQF,EACR3B,IAAkB,QAAb4B,EAAAA,aAAAA,EAAAA,EAAU5B,WAAV4B,IAAAA,EAAAA,EAAiB,EACtBE,KAAoB,QAAdF,EAAAA,aAAAA,EAAAA,EAAUE,YAAVF,IAAAA,EAAAA,EAAkB,EACzB,IAGH,GAA0B,IAAtBJ,EAAarmE,KAEf,MAAO,CACLmmE,aAAc,GACdC,SAAUG,GAId,MAAMK,EAAiBn2D,KAAK6lB,IAAI,EAAGgwC,EAAU,GAAG1B,KAAOO,GAAyB,GAC1E0B,EAAgBp2D,KAAK0nB,IAAIwsC,EAAMtnE,OAAQipE,EAAUA,EAAUjpE,OAAS,GAAGunE,KAAOO,IAGpF,MAAO,CACLgB,aAHuBI,EAAexiE,MAAM6iE,EAAgBC,GAI5DT,SAAUG,EAEd,CEpCUO,CAAclB,EAASxjE,QAASsiE,EAAgB4B,WF7BnD,SAAkCD,GACvC,IAAKA,EAAarmE,KAChB,MAAO,CACLmmE,aAAc,GACdC,SAAU,IAId,MAAME,EAAYzqD,MAAMtL,KAAK81D,EAAazrE,UAAUwrB,MAAK,CAAC/f,EAAGof,IAAMpf,EAAEu+D,KAAOn/C,EAAEm/C,OAExEgC,EAAiBn2D,KAAK6lB,IAAI,EAAGgwC,EAAU,GAAG1B,KAAOO,GAAyB,GAC1E0B,EAAgBP,EAAUA,EAAUjpE,OAAS,GAAGunE,KAAOO,GAAyB,EAEhF4B,EAAmB,GACzB,IAAK,IAAIP,EAAaI,EAAiB,EAAGJ,EAAaK,EAAeL,IAAc,CAClF,MAAMC,EAAWJ,EAAavuE,IAAI0uE,G,IAK3BC,EACCA,EAJRM,EAAiBzzD,KAAK,CACpBsxD,UAAM5jE,EACN0lE,OAAQF,EACR3B,IAAkB,QAAb4B,EAAAA,aAAAA,EAAAA,EAAU5B,WAAV4B,IAAAA,EAAAA,EAAiB,EACtBE,KAAoB,QAAdF,EAAAA,aAAAA,EAAAA,EAAUE,YAAVF,IAAAA,EAAAA,EAAkB,GAE5B,CAIA,MAAO,CACLN,aAAcY,EACdX,SAAU,GAEd,CEDUY,CAAyBtC,EAAgB4B,YAC/C,CAACV,aAAAA,EAAAA,EAAUxjE,QAASsiE,EAAgB4B,YAGtC,MAAO,CACL7oE,KAAM,CACJ+9C,aACAkqB,oBACAuB,cAAe3pE,EACfkX,KAAMkwD,EAAgBlwD,KACtB0yD,WAAWtB,aAAAA,EAAAA,EAAUvqE,KAAM+pE,GAA0BQ,EAASvqE,IAAKqpE,EAAgBW,gBAAarkE,EAChGmlE,aAAcA,EAAa9kE,KAAK8lE,I,IAA6CA,E,OAA1B,SAAKA,GAAAA,CAAevC,KAAwB,QAAlBuC,EAAAA,EAAcvC,YAAduC,IAAAA,EAAAA,EAAsB,O,IACnGf,SAAUA,EAAS/kE,KAAK+lE,I,IAA2CA,E,OAAzB,SAAKA,GAAAA,CAAcxC,KAAuB,QAAjBwC,EAAAA,EAAaxC,YAAbwC,IAAAA,EAAAA,EAAqB,O,IACxFC,gBAAiBl1D,QAAQqpC,KAAgB4qB,EAASniD,MAAM2gD,GAASA,EAAKA,QAExExmE,QAAS,CACPunE,wBAGN,CExDO,SAAS2B,GAAmB9yD,GACjC,OAAQA,GACN,IAAK,cACH,OAAOtU,EAAAA,EAAAA,gBAAe,MACxB,IAAK,eACH,OAAOA,EAAAA,EAAAA,gBAAe,MACxB,IAAK,eACH,OAAOA,EAAAA,EAAAA,gBAAe,MACxB,IAAK,UACH,OAAOA,EAAAA,EAAAA,gBAAe,KACxB,IAAK,QACH,OAAOA,EAAAA,EAAAA,gBAAe,SACxB,QACE,OAAOA,EAAAA,EAAAA,gBAAesU,GAE5B,CCDO,MAAM+yD,GAAO,EAAG5C,QAAOnwD,OAAM0yD,YAAWD,gBAAeI,kBAAiBG,0BAC7E,MAAMjnE,GAASC,EAAAA,EAAAA,YAAWlC,IAEpBmpE,EAAMH,GAAmB9yD,GACzBkzD,EAAe9yD,IACnB,GAAIA,GAAK,EACP,MAAO,IAGT,MAAM+yD,EAAYF,EAAI7yD,GACtB,OAAK+yD,EAAUvtC,OAGRutC,EAAUvoE,KAAOuoE,EAAUvtC,OAFzButC,EAAUvoE,IAEqB,EAO1CwoE,GAAiBjD,GAGjB,MAAOkD,EAASC,GAAYnD,EAAMt5D,QAChC,EAAE08D,EAASC,IAAarB,OAAM9B,SAAU,CAACkD,EAAUpB,EAAMqB,EAAWnD,IACpE,CAAC,EAAG,IAGN,OACE,kBAAChkE,MAAAA,CAAIC,cAAY,mCACf,kBAACD,MAAAA,CAAIE,UAAWR,EAAOwK,WACrB,kBAAClK,MAAAA,CAAIE,UAAWR,EAAO0D,QACrB,kBAACpD,MAAAA,CAAIE,UAAWR,EAAO0nE,gBACrB,kBAACxhB,KAAAA,KAAG,sBACJ,kBAACnkD,OAAAA,KACE2kE,GAAiB,kBAACvvD,EAAAA,QAAOA,CAACu5B,QAAAA,KACzBg2B,GAAiBI,GAAmB,mCAI1C,kBAACxmE,MAAAA,CAAIE,UAAWR,EAAO2nE,SACrB,kBAACC,EAAAA,WAAUA,CACT5jE,SAAU4N,QAAQ80D,IAAkBC,GACpC5rE,KAAM4rE,EACN5gE,OAAO,SACPlC,KAAK,SACL2O,KAAK,QACN,kBAID,kBAACw8C,GAAQA,CACPlrD,QAASmjE,EACTjjE,SAAU0iE,GAAiBI,EAC3B58D,gBAAgB,yCACjB,oBAOP,kBAAC29D,MAAAA,CAAIrnE,UAAWR,EAAO8nE,UAAWvnE,cAAY,yBAC5C,kBAACD,MAAAA,CAAIE,WAAW4B,EAAAA,EAAAA,IAAGpC,EAAO+nE,YAAa/nE,EAAOgoE,kBAC3CC,GAAW,SAAUd,EAAYG,GAAUH,EAAYI,GAAW,mBAEpEnD,EAAMtjE,KAAI,EAAGujE,OAAM8B,SAAQ7B,IAAK7zB,EAAO21B,KAAMlzD,KAC5C,kBAAC5S,MAAAA,CAAIW,IAAKojE,EAAO8B,EAAS11B,EAAQv9B,EAAM1S,UAAW0S,EAAOu9B,EAAQ,EAAIzwC,EAAO+nE,YAAc,IAIvFE,GAAW,GAAG9B,KAAWgB,EAAYj0D,GAAOi0D,EAAY12B,GAAQ4zB,OAAAA,EASxE4D,GAAa,CAAChC,EAAoB/yD,EAAcu9B,EAAeua,KAInE,MAAMkd,EAAOjC,EAAWkC,SAAS,EAAG,KAAOj1D,EAAKi1D,SAAS,GAAI,KAAO13B,EAAM03B,SAAS,GAAI,KAEvF,OAAKnd,EAGE,GAAGkd,KAAQld,IAFTkd,CAEe,EAGpBb,GAAoBjD,IACxB,GAAqB,IAAjBA,EAAMtnE,OACR,OAGF,IAAIsrE,EAAeC,GAAgBjE,EAAM,GAAGC,MAC5C,IAAK,IAAIrjE,EAAI,EAAGA,EAAIojE,EAAMtnE,OAAQkE,IAAK,CACrC,MAAM,KAAEqjE,GAASD,EAAMpjE,GACvB,GAAoB,KAAhBqjE,EAAK7lD,OAEP,SAGF,MAAMwmB,EAASqjC,GAAgBhE,GAC/B+D,EAAeE,GAAoBF,EAAcpjC,EACnD,CAEA,GAAKojC,EAML,IAAK,IAAIpnE,EAAI,EAAGA,EAAIojE,EAAMtnE,OAAQkE,IAChCojE,EAAMpjE,GAAGqjE,KAAOD,EAAMpjE,GAAGqjE,KAAKtqD,UAAUquD,EAAatrE,OACvD,EAGIurE,GAAmBxpE,IACvB,MAAMmf,EAAUnf,EAAKue,MAAM,W,IACpBY,EAAP,OAAmB,QAAZA,EAAAA,aAAAA,EAAAA,EAAU,UAAVA,IAAAA,EAAAA,EAAgB,EAAE,EAGrBsqD,GAAsB,CAACxiE,EAAWof,KACtC,IAAIqjD,EAAY,EAChB,IAAK,IAAIvnE,EAAI,EAAGA,EAAIkP,KAAK0nB,IAAI9xB,EAAEhJ,OAAQooB,EAAEpoB,SACnCgJ,EAAE9E,KAAOkkB,EAAElkB,GADiCA,IAKhDunE,IAEF,OAAOziE,EAAEiU,UAAU,EAAGwuD,EAAU,EAG5BxqE,GAAaC,IAA0B,CAC3CwM,UAAWtM,EAAAA,GAAG;;;;;IAMdwF,OAAQxF,EAAAA,GAAG;;;;;IAMXwpE,eAAgBxpE,EAAAA,GAAG;;;oBAGDF,EAAMyG,QAAQ;;;;qBAIbzG,EAAMyG,QAAQ;mBAChBzG,EAAMgB,WAAWC,UAAUF;;;;qBAIzBf,EAAMyG,QAAQ;;IAGjCkjE,QAASzpE,EAAAA,GAAG;;;IAIZ4pE,UAAW5pE,EAAAA,GAAG;;;;;;aAMHF,EAAMY,OAAOC,KAAKC;IAE7BipE,YAAa7pE,EAAAA,GAAG;aACLF,EAAMY,OAAOC,KAAKypB;IAE7B0/C,gBAAiB9pE,EAAAA,GAAG;;MCxLf,SAASsqE,IAAc,cAAE/uD,EAAa,gBAAE0qD,I,IAGtB,EAACjnE,EAFxB,MAAM,KAAEA,EAAI,QAAEW,GAAYqnE,GAAiBzrD,EAAe0qD,GAM1D,OAJIjnE,EAAK+9C,YAAyE,OAA3C,QAAf/9C,EAAAA,EAAK+9C,kBAAL/9C,IAAAA,GAA6C,QAA9C,IAAsC3E,gBAAtC,WAAC2E,EAAD,EAAgDxE,SACrEkS,GAAa1N,EAAK+9C,WAAY,CAAC,oCAAsC/9C,EAAK+9C,WAAqBxiD,UAI/F,oCACE,kBAACuuE,GAAIA,CACH5C,MAAOlnE,EAAK0oE,aACZ3xD,KAAM/W,EAAK+W,KACX0yD,UAAWzpE,EAAKypE,UAChBD,cAAexpE,EAAKwpE,cACpBI,gBAAiB5pE,EAAK4pE,gBACtBG,oBAAqB,K,IAEnB51D,EADAxT,EAAQunE,sBAAqB,GACL,QAAxB/zD,EAAAA,SAASo3D,eAAe,+BAAxBp3D,IAAAA,GAAAA,EAAiDq3D,eAAe,CAC9DC,SAAU,UACV,IAGN,kBAACziB,KAAAA,CAAGp6C,GAAG,uBAAuB6kC,MAAO,CAAEvO,OAAQ,EAAGuQ,aAAc,KAC/Dz1C,EAAKioE,kBACJ,kBAACR,GAAkBA,CACjBF,uBAAwB,CACtBN,gBAAiBA,EACjBC,MAAOlnE,EAAK2oE,YAGd,KAGV,CCxCA,MAAM9nE,GAAaC,IAA0B,CAC3C4qE,SAAU1qE,EAAAA,GAAG;aACFF,EAAMY,OAAO0J,QAAQzJ;;;;;MAiBrBgqE,GAAmB,EAAGC,oBAAmBxD,iBACpD,MAAMtlE,GAASC,EAAAA,EAAAA,YAAWlC,KACpB,kBAAE4/D,EAAiB,WAAEC,EAAU,MAAEE,GAAUuF,KAEjD,OAAKyF,EAKDnL,EAEA,oCACE,kBAACxmD,EAAAA,QAAOA,MACR,kBAACpV,OAAAA,KAAK,4BAMP67D,EAgBH,oCACE,kBAACl4D,EAAAA,KAAIA,CAAC1L,KAAK,SAASyF,KAAK,OACzB,kBAACqG,IAAAA,CAAEtF,UAAWR,EAAO4oE,SAAU7tE,KAAMuqE,EAAWyD,UAAWhjE,OAAO,SAASC,IAAI,aAAaxB,MAAM,eAChG,kBAACkB,EAAAA,KAAIA,CAAC1L,KAAK,sBAAsB,IAEhCsrE,EAAW0D,aAnBd,kBAAC9/D,EAAAA,OAAMA,CACLrF,KAAK,SACLsF,QAAQ,UACRrF,QAASg6D,EACTp/D,QAAQ,qFACRmoC,iBAAiB,OAClB,cACay+B,EAAWtrE,MAvBpB,oCAAE,IAmCiB,E,kkBCxDvB,SAASivE,GAAsBC,EAAqCC,GACzE,MAAMvK,EAAUsK,EAAiBpoE,KAAKsoE,I,IAG5BA,E,OAHyC,G,uUAAA,IAC9CA,EAAQjlE,QAAM,CACjBklE,QAAS,CACPp1D,KAAkB,QAAZm1D,EAAAA,EAAQn1D,YAARm1D,IAAAA,EAAAA,EAAgB,QACtBviD,QAASvL,MAAMtL,KAAKo5D,EAAQrD,UAAU1rE,UAAUyQ,QAAO,CAACC,GAAOu5D,SAAUv5D,EAAMu5D,GAAK,GACpF7zB,MAAO04B,I,IAIX,OAAOvK,CACT,CCrBO,MAAM0K,GAAa,sBCGnB,SAASC,GAAqBC,EAAmBvI,GACtD,KAAKA,aAAAA,EAAAA,EAAiBqE,YACpB,OAAO,KAGT,MAAM/zD,EAAM0vD,EAAgBqE,WACtBtrE,EAAOuX,EAAI8L,QAAQisD,GAAY,IAC/B/K,EAAS0C,EAAgByE,QAE/B,MAAO,CACL8D,WACAj4D,MACAvX,OACA+uE,UAAWxK,EAAS,GAAGhtD,YAAcgtD,IAAWhtD,EAChDy3D,WAAYzK,EAAS,GAAGvkE,KAAQukE,EAAOxkD,UAAU,EAAG,KAAO/f,EAE/D,CCdA,MAAMyvE,GAAe,CAACx9D,EAAuBy9D,EAAgBC,KAC3D,IAAI5mE,EAEJ,IACEA,EAAU4mE,EAAUnyE,KAAKC,MAAMwU,EAAQ29D,YAAYrtE,OAAOotE,EAAQE,gBAAappE,CACjF,CAAE,SAAO,CAET,MAAO,CACLzG,KAAMiS,EAAQ29D,YAAYrtE,OAAOmtE,EAAK1vE,OACtC+I,UACA+hE,UAAYvoE,OAAOwiD,MAAMxiD,OAAOmtE,EAAK5E,iBAAuCrkE,EAAzBlE,OAAOmtE,EAAK5E,WAC/DW,SAAUx5D,EAAQ29D,YAAYrtE,OAAOmtE,EAAK53D,WAC1Ci0D,UAAW,IAAIxwE,IACf0e,KAAMhI,EAAQ29D,YAAYrtE,OAAO0P,EAAQ69D,WAAW,GAAG71D,OACvD9P,OAAQ85D,GACT,EA8BH,SAAS8L,GACPC,EACA/9D,EACAg+D,EACAC,EACAC,EACAC,EACAC,GAEA,MAAMC,EAAgB,IAAI9uD,IAE1B4uD,EAAOG,WAAWjpD,SAAQ,CAACipD,EAAY13C,KACrC,MAAM59B,EAAWg1E,EAAU1yE,IAAIgzE,GAC1Bt1E,GAILA,EAASovE,KAAK/iD,SAAS+iD,IACrB,MAAMqF,EAAOQ,EAAU3yE,IAAI8sE,EAAKmG,YAChC,IAAKd,EACH,OAGF,GAAIz9D,EAAQ29D,YAAYrtE,OAAOmtE,EAAK1vE,SAAWgwE,EAC7C,OAIF,GAAIM,EAAclzE,IAAImzE,GACpB,OAGFD,EAAc35C,IAAI45C,GAElB,MAAMnB,EAAUiB,EAAS9yE,IAAItC,EAASw1E,YAAchB,GAAax9D,EAASy9D,EAAMS,EAAS5yE,IAAItC,EAASw1E,YAEtGJ,EAAS1yE,IAAI1C,EAASw1E,UA9D5B,SAA0BrB,EAA0B/E,EAAYzsE,EAAei7B,GAC7E,MAAMozC,EAAa1pE,OAAO8nE,EAAKA,MACzB6B,EAAWkD,EAAQrD,UAAUxuE,IAAI0uE,IAAe,CACpD5B,KAAM9nE,OAAO8nE,EAAKA,MAClB+B,KAAM,EACN9B,IAAK,GAID8B,EAAiB,IAAVvzC,EAAcj7B,EAAQ,EAK7B0sE,EAAM1sE,EAOZ,OALAsuE,EAASE,MAAQA,EACjBF,EAAS5B,KAAOA,EAEhB8E,EAAQrD,UAAUpuE,IAAIsuE,EAAYC,GAE3BkD,CACT,CAwCuCsB,CAAiBtB,EAAS/E,EAAM9nE,OAAO6tE,EAAOxyE,MAAM,IAAKi7B,GAAO,GACjG,GAEN,C,mICrFsB83C,K,eAAf,UACLlxD,EACAyvD,EACA0B,GAEA,MAAM9N,EAAmB5kB,GAA6Bjf,MAAMxf,EAAe4kD,IAErEO,EAAUsK,EAAiBpoE,KAAKsoE,I,IACrBA,EACPA,EACEA,E,MAHuC,CACjD9K,eAAe8K,SAAgB,QAAhBA,EAAAA,EAASrmE,eAATqmE,IAAAA,OAAAA,EAAAA,EAAkB9D,aAAcsF,EAAuBtF,WACtE/G,QAAQ6K,SAAgB,QAAhBA,EAAAA,EAASrmE,eAATqmE,IAAAA,OAAAA,EAAAA,EAAkB1D,UAAWkF,EAAuBlF,QAC5DjH,UAAU2K,SAAgB,QAAhBA,EAAAA,EAASrmE,eAATqmE,IAAAA,OAAAA,EAAAA,EAAkBzD,YAAaiF,EAAuBjF,UACjE,IASD,aAN0B7I,EAAiB+N,WAAWjM,IAE1Ct9C,SAAQ,CAACnd,EAAQnD,KAC3BkoE,EAAiBloE,GAAGmD,OAASA,CAAM,IAG9B+kE,CACT,EArBsByB,G,gLAAAA,GAAAA,MAAAA,KAAAA,U,CCFf,MAAMG,GAAeC,GAC1BzvD,MAAMtL,KAAK+6D,EAAGhF,UAAU1rE,UAAUyQ,QAAO,CAACC,GAAOu5D,SAAUv5D,EAAMu5D,GAAK,GCA3D0G,GAAc,CAACllE,EAAoBof,IAAuB4lD,GAAY5lD,GAAK4lD,GAAYhlE,G,gUC4BpG,MAEMmlE,GAA4C,CAChD3F,WAAY,GACZI,QAAS,OACTC,UAAW,IAIN,SAASuF,IAAyB,cAAEzxD,EAAa,MAAEG,EAAK,UAAE7J,EAAS,WAAEwyD,IAC1E,MAAM,gBAAE52C,EAAe,eAAE8H,EAAc,UAAEvE,GAAcsE,GAAW5Z,IAC3DO,EAAOC,GAAO,CAACrK,EAAUC,KAAKI,OAAQL,EAAUM,GAAGD,SAClDwtD,WAAYuN,GAAmB9H,KAEjCP,EAAiB5qB,GAA6Bjf,MAAMxf,EAAeuoD,KAGjEf,gBAAiB2J,GAA2B1J,GAClDznD,EACAyV,EACA+7C,KAGI,WACJluE,EACAhG,MAAOq0E,EAAU,KACjBluE,IACEE,EAAAA,EAAAA,GAAS,CACXH,QAAS2U,QAAQ+Z,GAAmB8H,GAAkB8uC,EAAWzlE,OAAS,GAAKqd,EAAQ,GAAKC,EAAM,GAElG9c,SAAU,CACR,mBACAquB,EACA8H,EACAtZ,EACAC,EACAmoD,EACA4I,EACAP,GAEFrtE,QAAO,IAAE,YACP,MAAM8tE,QAAcvI,EAAeR,uBAAuB,CACxD32C,kBACA8H,iBACAtZ,QACAC,MACAmoD,aACAvb,SA/CU,MAkDNkiB,EJUL,SAAuCc,EAAgB/9D,G,IAGlCA,EACAA,EACDA,EAEzBA,EANA,MAAMo+D,EAAW,IAAI90E,IAEf00E,EAAY,IAAI10E,IAAoB,QAAhB0W,EAAAA,EAAQhX,gBAARgX,IAAAA,OAAAA,EAAAA,EAAkBnL,KAAKwqE,GAAM,CAACA,EAAEx/D,GAAIw/D,MACxDpB,EAAY,IAAI30E,IAAoB,QAAhB0W,EAAAA,EAAQs/D,gBAARt/D,IAAAA,OAAAA,EAAAA,EAAkBnL,KAAKuvB,GAAM,CAACA,EAAEvkB,GAAIukB,MACxD85C,EAAW,IAAI50E,IAAmB,QAAf0W,EAAAA,EAAQ09D,eAAR19D,IAAAA,OAAAA,EAAAA,EAAiBnL,KAAK4yB,GAAM,CAACA,EAAE5nB,GAAI4nB,MAS5D,OAPc,QAAdznB,EAAAA,EAAQm+D,cAARn+D,IAAAA,GAAAA,EAIIzR,QAAQ4vE,QAAiC3pE,IAAtB2pE,EAAOG,aAC3BjpD,SAAS8oD,GAAWL,GAAcC,EAAQ/9D,EAASg+D,EAAWC,EAAWC,EAAUC,EAAQC,KAEvF/uD,MAAMtL,KAAKq6D,EAAShwE,SAC7B,CIzB+BmxE,CAA8BjJ,EAAWA,EAAWzlE,OAAS,GAAIuuE,GAAOxlD,KAC/FmlD,IAGF,OAAOG,EHjFN,SACL1xD,EACAyvD,EACA0B,G,OAHoBD,GAAAA,MAAAA,KAAAA,U,CGkFZA,CAAiBlxD,EAAeyvD,EAAkB0B,GAA0BK,IAC5E/B,CACN,MAGIA,GAAmB7oE,EAAAA,EAAAA,UACvB,KACEnD,aAAAA,EAAAA,EAAMJ,QACFI,EACA,CACE,CACElD,KAAMuoE,EAAW5mE,IAAI,GACrBmpE,eAAWrkE,EACXglE,SAAU,GACVM,UAAW,IAAIxwE,IACf0e,KAAM,GACN9P,OAAQ85D,MAGlB,CAAC/gE,EAAMqlE,IAGT,MAAO,CACLxlE,aACAhG,MAAO+rE,EAAejpE,aAAauxE,GAAc,KAAOA,EACxDlC,mBAEJ,CChHA,MAAMuC,GAAU,CAAC,GAAI,KAAM,MAAO,OAAW,OAAY,QAAaC,KAGhEC,GAAuC,CAAC,SAAU,SAAU,OAAQ,MAAO,OAAQ,QAAS,QAG5FC,GAAM,IAAI38D,KAAK48D,mBAAmB,QAAS,CAAEC,QAAS,SCL5D,MAAMC,GAAM,IAAI98D,KAAKC,eAAe,QAAS,CAC3CC,KAAM,UACNC,MAAO,OACPC,IAAK,YAGA,SAAS28D,GAAiBC,GAC/B,OAAOA,EAAa,GAAGF,GAAIr8D,OAAOu8D,ODK7B,SAA+Bt8D,GACpC,MAAMu8D,EAASv8D,EAAK2qD,UAGd6R,EAAej8D,KAAKC,OAAO+7D,EAASj8D,KAAKmqD,OAAS,KAGlDgS,EAAYX,GAAQY,WAAWC,GAAWA,EAASp8D,KAAKg1C,IAAIinB,KAI5DI,EAAUH,EAAYX,GAAQW,EAAY,GAAK,EAGrD,OAAOR,GAAIl8D,OAAOQ,KAAKurB,MAAM0wC,EAAeI,GAAUZ,GAAMS,GAC9D,CCpBoDI,CAAsBP,MAAiB,GAC3F,CCAA,MAAMluE,GAAaC,IAA0B,CAC3CwM,UAAWtM,EAAAA,GAAG;;;;IAKduuE,UAAWvuE,EAAAA,GAAG;;;;;IAMdggE,IAAKhgE,EAAAA,GAAG;;IAGRksE,OAAQlsE,EAAAA,GAAG;;IAGXwuE,WAAYxuE,EAAAA,GAAG;;;;;aAKJF,EAAMY,OAAOC,KAAKC;IAE7B6tE,OAAQzuE,EAAAA,GAAG;;;;;;;IAQXzF,QAASyF,EAAAA,GAAG;;aAEDF,EAAMY,OAAOC,KAAKC;MAQxB,SAAS8tE,IAAa,OAAEzoE,IAC7B,MAAMnE,GAASC,EAAAA,EAAAA,YAAWlC,KAEpB,OAAEogE,EAAM,QAAEkL,GAAYllE,EAEtB0oE,EAAe1O,EAAOL,MACtBgP,EAAwB3O,EAAOC,UAE/B3tB,EAAQs2B,GAAmBsC,EAAQp1D,KAA3B8yD,CAAiCsC,EAAQxiD,SACjDkmD,EAAgB78D,KAAKC,MAAM,EAAS0W,QAAUwiD,EAAQ54B,MAAS,KAErE,OACE,kBAACnwC,MAAAA,CAAIE,UAAWR,EAAOwK,WACrB,kBAAClK,MAAAA,CAAIE,UAAWR,EAAOysE,WACrB,kBAAC1qE,OAAAA,CAAKvB,UAAWR,EAAOk+D,KAAM8O,GAAkB7oE,EAAO+5D,MACvD,kBAACn8D,OAAAA,CAAKvB,UAAWR,EAAOoqE,QACrB35B,EAAM5xC,KACN4xC,EAAM5W,OAAO,KAAGkzC,EAAc,OAInC,kBAACzsE,MAAAA,CAAIE,UAAWR,EAAO0sE,YACpBI,GAAyB,kBAAC3qE,MAAAA,CAAI3B,UAAWR,EAAO2sE,OAAQrqE,IAAKwqE,EAAuBhW,IAAK+V,IAC1F,kBAAC9qE,OAAAA,KACE8qE,EAAa,OAAKb,GAAiB7nE,EAAOwL,QAI/C,kBAAC5N,OAAAA,CAAKvB,UAAWR,EAAOvH,SAAUw0E,GAAsB9oE,EAAO1L,UAGrE,CC5EA,MAAMsF,GAAaC,IAA0B,CAC3CwM,UAAWtM,EAAAA,GAAG;;;;;;IAOdggE,IAAKhgE,EAAAA,GAAG;;IAGRzF,QAASyF,EAAAA,GAAG;aACDF,EAAMY,OAAOC,KAAKC;MAQxB,SAASouE,IAAqB,OAAE/oE,IACrC,MAAMnE,GAASC,EAAAA,EAAAA,YAAWlC,IAE1B,OACE,kBAACuC,MAAAA,CAAIE,UAAWR,EAAOwK,WACrB,kBAACzI,OAAAA,CAAKvB,UAAWR,EAAOk+D,KAAM8O,GAAkB7oE,EAAO+5D,MACvD,kBAAC59D,MAAAA,CAAIE,UAAWR,EAAOvH,SACrB,kBAACsJ,OAAAA,KAAMkrE,GAAsB9oE,EAAO1L,WAI5C,CCxBO,SAAS00E,IAAa,QAAEvO,EAAO,eAAEwO,EAAc,SAAE32D,IACtD,OACE,kBAACM,EAAAA,OAAMA,CACL9d,QAAS2lE,EAAQ99D,KAAKqD,IAAY,CAChCP,MAAOO,EAAO+5D,IACdtmE,MAAOuM,MAETvM,MAAO,CACLgM,MAAOwpE,EAAelP,IACtBtmE,MAAOw1E,GAETjnD,qBAAAA,EACAknD,cAAc,EACdppD,iBAAiB,mBACjBqpD,kBAAmBC,GACnB92D,SAAWgf,IACLA,EAAK79B,OACP6e,EAASgf,EAAK79B,MAChB,GAIR,CAEA,SAAS21E,GACP93C,EACA+3C,G,IAQmBA,EANnB,MAAQ51E,MAAOuM,GAAWsxB,EAE1B,IAAKtxB,EACH,OAAO,KAKT,OAFkD,QAA/BqpE,EAAAA,EAAiBC,YAAY,UAA7BD,IAAAA,OAAAA,EAAAA,EAAiC51E,SAAUuM,EAE1C,kBAAC+oE,GAAoBA,CAAC/oE,OAAQA,IAAa,kBAACyoE,GAAYA,CAACzoE,OAAQA,GACvF,CAEO,MAAM6oE,GAAqB9O,GACzBA,IAAQD,GAAwBC,IAAMA,EAAMA,EAAInkD,UAAU,EAAG,GAGzDkzD,GAAyBx0E,GAC7BA,EAAQ8Q,MAAM,MAAM,GCpDhBmkE,GAA0B,EAAG90D,eAEtC,kBAAC1S,EAAAA,MAAKA,CAACC,SAAS,OAAO3B,MAAM,wBAAwBmpE,cAAc,UAAUrmD,SAAU1O,GACrF,kBAAC3Q,IAAAA,KAAE,2CACuC,kBAACvC,EAAAA,KAAIA,CAAC1L,KAAK,WAAW,YAEhE,kBAACiO,IAAAA,KAAE,sFACmF,IACpF,kBAACkf,OAAAA,KAAK,sBAAyB,QAAK,kBAACA,OAAAA,KAAK,mBAAsB,IAAE,KAEpE,kBAAClf,IAAAA,KAAE,oFACiF,IAClF,kBAAC2lE,EAAAA,SAAQA,CAAC7yE,KAAK,sFAAsF8yE,UAAAA,GAAS,WAElG,IAAI,2BAGlB,kBAACnoE,EAAAA,KAAIA,CAAC1L,KAAK,kBAAmB,IAC9B,kBAAC4zE,EAAAA,SAAQA,CACP7yE,KAAK,qGACL8yE,UAAAA,GACD,eCpBP,SAASC,IAAuB,UAAE1gE,EAAS,SAAEvH,IAC3C,OAAOuH,EAAY,kBAAC+J,EAAAA,QAAOA,CAACu5B,QAAAA,IAAY,oCAAG7qC,EAC7C,CAEO,MAAMkoE,IAAgB3oE,EAAAA,EAAAA,MAAK0oE,I,44BCO3B,MAAME,GAAmCjuE,I,IAwE3Bq0B,EAAAA,EAUAA,EAAAA,EAjFnB,MAAM,YAAE9F,EAAW,QAAEvrB,EAAO,cAAE29D,EAAa,cAAEuN,EAAa,sBAAEjN,GAA0BjhE,GAC/EgE,EAAMmqE,GAAW1rE,IAAAA,UAAe,IACjC,SACJq5C,EAAQ,aACRC,EACAC,WAAW,OAAE3nB,GAAQ,MACrBjD,IACE6qB,EAAAA,GAAAA,IAAyB,CAAE9lC,KAAM,aAWrC,OACE,oCACE,kBAAChN,EAAAA,OAAMA,CACLjH,aAAW,+BACXkH,QAAQ,YACRqJ,KAAK,OACL/S,KAAK,KACLoE,KAAK,MACLC,QAAS,KACPoqE,GAAQ,GACR/8C,EAAMpuB,EAAQ,GAGfi+D,IAA0BZ,GAAsB+N,KAC/C,kBAACv3C,EAAAA,KAAIA,CAAC0W,QAAQ,OAAO3uC,MAAM,aAAY,cAIvC,IAGHoF,GACC,kBAAC2U,EAAAA,MAAKA,CACJlU,MACEw8D,IAA0BZ,GAAsB+N,KAC5C,mCACA,sCAENx1D,OAAQ5U,EACR6U,UAAW,IAAMs1D,GAAQ,IAEzB,kBAAC/xB,OAAAA,CAAKD,SAAUJ,GAxCN5+C,IAChB+wE,EAAcvN,EAAepyC,EAAa,CACxCg3C,WAAYpoE,EAAKooE,WACjBI,QAASxoE,EAAKwoE,SAAW,OACzBC,UAAWzoE,EAAKyoE,WAAa,KAE/BuI,GAAQ,EAAM,KAmCN,kBAAChoE,EAAAA,MAAKA,CAACC,SAAS,OAAO3B,MAAM,6BAC3B,kBAACyD,IAAAA,KAAE,qGAED,kBAACkf,OAAAA,KAAK,sBAAyB,QAAK,kBAACA,OAAAA,KAAK,mBAAsB,KAElE,kBAAClf,IAAAA,KAAE,yLAML,kBAAC2lC,EAAAA,MAAKA,CAAChqC,MAAM,eACX,kBAACwqE,EAAAA,iBAAgBA,CAACvnD,QAAS65C,EAAe18D,UAAU,KAEtD,kBAAC4pC,EAAAA,MAAKA,CAAChqC,MAAM,gBACX,kBAACmjB,EAAAA,MAAKA,CAAC/iB,UAAU,EAAMpM,MAAO02B,KAGhC,kBAACsf,EAAAA,MAAKA,CACJhqC,MAAM,iDACN0iB,UAAW8N,EAAOkxC,WAClBvuE,MAAOq9B,SAAkB,QAAlBA,EAAAA,EAAQkxC,kBAARlxC,IAAAA,GAA2B,QAA3BA,EAAAA,EAAoB37B,eAApB27B,IAAAA,OAAAA,EAAAA,EAA6Bx4B,YAEpC,kBAACmrB,EAAAA,MAAKA,GAAAA,GAAAA,CAAAA,EACA80B,EAAS,aAAc,CAAEY,SAAU,iCAA8B,CACrE95B,YAAY,0DAGhB,kBAACirB,EAAAA,MAAKA,CACJhqC,MAAM,qCACN0iB,UAAW8N,EAAOsxC,QAClB3uE,MAAOq9B,SAAe,QAAfA,EAAAA,EAAQsxC,eAARtxC,IAAAA,GAAwB,QAAxBA,EAAAA,EAAiB37B,eAAjB27B,IAAAA,OAAAA,EAAAA,EAA0Bx4B,YAEjC,kBAACmrB,EAAAA,MAAKA,GAAAA,GAAAA,CAAAA,EAAK80B,EAAS,aAAYl5B,YAAY,WAE9C,kBAACirB,EAAAA,MAAKA,CAAChqC,MAAM,gBACX,kBAACmjB,EAAAA,MAAKA,GAAAA,GAAAA,CAAAA,EAAK80B,EAAS,eAAcl5B,YAAY,sBAGhD,kBAAC5d,EAAAA,MAAKA,CAAC6+B,UAAU,OACf,kBAAC16B,EAAAA,OAAMA,CAACxO,KAAK,UAAUsmE,IAA0BZ,GAAsB+N,KAAO,OAAS,OACtFnN,IAA0BZ,GAAsB+N,MAC/C,kBAACjlE,EAAAA,OAAMA,CACLxO,KAAK,SACLyO,QAAQ,cACRrF,QAAS,KACP/D,EAAM4gE,eAAeD,EAAepyC,GACpC6C,IACA+8C,GAAQ,EAAM,GAEjB,mBAIH,kBAACG,EAAAA,cAAaA,CACZC,eAAe,cACfC,YAAY,aACZC,UAAW,KACTzuE,EAAM6gE,qBACNzvC,IACA+8C,GAAQ,EAAM,GAEjB,6B,sgCCrGR,MAAMO,WAAkCz8C,GAAAA,GAG7C96B,WAAAA,GACE0B,MAAM,CAAEqI,IAAK,2BAIfytE,GAAAA,KAAAA,gCAA+B,CAACnM,EAAwBxyD,K,IAgC5B4+D,EA/B1B,MAAMl1D,EAAgBkW,GAAAA,GAAWC,iBAAiB95B,KAAM,aAAci6B,IAA4BnzB,WAC/FhF,MACGg3E,EAAiBj/C,GAAAA,GAAWC,iBAAiB95B,KAAM,aAAci6B,IAA4BnzB,WAChGiC,KACGyvB,EAAcoD,GAAsB57B,KAAM,eAC1C8jB,EAAQ4V,GAAuB15B,KAAM,YAErC,iBACJozE,EACAnyE,MAAO83E,EAAyB,WAChC9xE,GACEmuE,GAAyB,CAAEzxD,gBAAeG,QAAO7J,YAAWwyD,gBAE1D,aAAE9B,EAAY,eAAEE,EAAc,gBAAEM,EAAe,mBAAEL,EAAkB,sBAAEI,GACzEE,GAAmBznD,EAAe6U,EAAa46C,EAAiB,GAAGnmE,UAE9D+rE,EAAsBC,IAA2BnyE,EAAAA,EAAAA,aACjD+xE,EAAwBK,IAA6BpyE,EAAAA,EAAAA,UAA0BssE,EAAiB,KAChG+F,EAAyBC,IAA8BtyE,EAAAA,EAAAA,UAC5DzF,EAAYC,IAAID,EAAYa,KAAKE,qBAG/BgxE,GAAoB4F,IAAyB5F,IAC/C6F,EAAwB7F,GAEpByF,IAA2BzF,EAAiB,IAC9C8F,EAA0B9F,EAAiB,KAI/C,MAAMiG,IAAkClO,aAAAA,EAAAA,EAAiBqE,aAAc,IfpESrkD,WAAWqoD,IeqE3F,MAAM8F,EAAoBT,SAAgC,QAAhCA,EAAAA,EAAwBlJ,gBAAxBkJ,IAAAA,OAAAA,EAAAA,EAAkCvS,SAAS,OAC/DiT,GAA6BJ,IAA4BE,GAAgBC,EAGzEjG,GAAe9oE,EAAAA,EAAAA,UACnB,IACE6oE,EACGpoE,KAAKsoE,GAAY9tD,MAAMtL,KAAKo5D,EAAQrD,UAAU1rE,UAAUyQ,QAAO,CAACC,GAAOu5D,SAAUv5D,EAAMu5D,GAAK,KAC5Fx5D,QAAO,CAACC,EAAK0lC,IAAU1lC,EAAM0lC,GAAO,IACzC,CAACy4B,IAEGtK,EAAUqK,GAAsBC,EAAkBC,GAClDiE,EAAiBxO,EAAQxpE,MAAK,EAAG8oE,U,IAAkByQ,E,OAARzQ,KAAQyQ,SAA8B,QAA9BA,EAAAA,EAAwBxqE,cAAxBwqE,IAAAA,OAAAA,EAAAA,EAAgCzQ,IAAI,IAE7F,MAAO,CACLhhE,KAAM,CACJoxB,cACAsgD,iBACAxhE,UAAWrQ,EACX8xE,4BACA1K,gBAAiB,SACZwK,GAAAA,CACH5rE,QAAS,MAAK4rE,aAAAA,EAAAA,EAAwB5rE,QAAYk+D,KAEpDD,wBAEAsE,WAAYiE,GAAqB4F,EAAclO,GAC/CrC,UACAwO,iBACAgC,oBACAC,4BACA51D,iBAEF5b,QAAS,CACPyxE,sBAAAA,CAAuB5O,EAAuBpyC,GAC5CqyC,EAAeD,EAAepyC,EAChC,EACAihD,0BAAAA,GACE3O,GACF,EACA4O,mBAAAA,CAAoB9O,EAAuBpyC,EAAqB1X,GAC9D6pD,EAAaC,EAAepyC,EAAa1X,EAC3C,EACA64D,YAAAA,CAAarC,GACX,MAAMhE,EAAUF,EAAiB9zE,MAAK,EAAG+O,YAAaA,EAAO+5D,MAAQkP,EAAelP,MACpF8Q,EAA0B5F,EAC5B,EACMsG,uBAAAA,G,SAA0B,YAC9B,KACMf,aAAAA,EAAAA,EAAwBlJ,kBACpBkK,UAAUC,UAAUC,UAAUlB,EAAuBlJ,UAC3Dh6D,GAAe,CAAC,mCAEpB,CAAE,SAAO,CACX,E,0LACAqkE,mBAAAA,GACE34E,EAAYQ,IAAIR,EAAYa,KAAKE,mBAAoB,CAAC,GACtDg3E,GAA2B,EAC7B,GAEH,GA/FH,EAJA,GADWT,GACJsB,cAAc,IAsGrB,GAvGWtB,GAuGJ7gD,aAAY,EACjBC,QACA9d,YACAwyD,aACAl2B,cAMA,MAAMrsC,GAASC,EAAAA,EAAAA,YAAWlC,KACpB,KAAEb,EAAI,QAAEW,GAAYgwB,EAAM6gD,6BAA6BnM,EAAYxyD,GAEzE,OACE,kBAAC24C,GAAKA,CACJloD,UAAWR,EAAOg0D,UAClBxvD,MAAM,mBACN4I,WAAW,EACXqrB,cAAe,kBAACz2B,EAAAA,WAAUA,CAAChI,KAAK,eAAemP,QAAQ,YAAYlH,aAAW,QAAQ6B,QAASuoC,IAC/F0iB,WAAW,0BAEX,kBAACzuD,MAAAA,CAAIE,UAAWR,EAAO6B,SACpB3E,EAAK2xE,2BACJ,kBAAClnB,GAAYA,CACXxhD,SAAS,QACT3B,MAAM,yCACNzN,MAAOmG,EAAK2xE,4BAIhB,kBAACvuE,MAAAA,CAAIE,UAAWR,EAAOwK,WACrB,kBAAClK,MAAAA,CAAIE,UAAWR,EAAO/B,IAAKsC,cAAY,qBACtC,kBAACyvE,EAAAA,YAAWA,CAACh5D,MAAOy3D,GAA0BsB,aAAa,iBAC3D,kBAAChoD,EAAAA,QAAOA,CAAClmB,QAAS3E,EAAKinE,gBAAgBnqE,KAAMuK,UAAU,OACrD,kBAACxC,OAAAA,CAAKvB,UAAWR,EAAOiwE,WAAY/yE,EAAKinE,gBAAgBnqE,QAI7D,kBAACsG,MAAAA,CAAIE,UAAWR,EAAO/B,IAAKsC,cAAY,kBACtC,kBAACyvE,EAAAA,YAAWA,CACVtxE,QAAQ,iDACRsY,MAAOy3D,GAA0BsB,aAClC,cAGD,kBAAChuE,OAAAA,CAAKvB,UAAWR,EAAOiwE,WACtB,kBAAClC,GAAaA,CAAC3gE,UAAWlQ,EAAKkQ,gBACO3M,IAAnCvD,EAAKinE,gBAAgBW,UAA0B5nE,EAAKinE,gBAAgBW,UAAY,OAKvF,kBAACxkE,MAAAA,CAAIE,UAAWR,EAAO/B,IAAKsC,cAAY,iBACtC,kBAACyvE,EAAAA,YAAWA,CACVtxE,QAAQ,2CACRsY,MAAOy3D,GAA0BsB,aAClC,QAGD,kBAAChC,GAAaA,CAAC3gE,UAAWlQ,EAAKkQ,WAC5BlQ,EAAKinE,gBAAgBsB,SACpB,oCACE,kBAAC19C,EAAAA,QAAOA,CAAClmB,QAAS3E,EAAKinE,gBAAgBsB,SAAUlhE,UAAU,OAEzD,kBAACxC,OAAAA,CAAKvB,UAAWR,EAAOiwE,WAAW,ICnMrC,OAAlBxK,OAD6BA,EDoM+CvoE,EAAKinE,gBAAgBsB,eCnMjGA,EAAAA,EAAW,IAAaA,EAAS1rD,UAAU,GAAK,IAAM0rD,IDqMpC,kBAACzjE,EAAAA,WAAUA,CACThI,KAAK,gBACL0E,QAAQ,oBACRoF,QAASjG,EAAQ6xE,2BAIrB,MAKLxyE,EAAKmyE,2BACJ,kBAAC/uE,MAAAA,CAAIE,UAAWR,EAAO/B,IAAKsC,cAAY,qBACtC,kBAACmtE,GAAuBA,CAAC90D,UAAW/a,EAAQiyE,uBAIhD,kBAACxvE,MAAAA,CAAIE,UAAWR,EAAO/B,IAAKsC,cAAY,kBACtC,kBAACyvE,EAAAA,YAAWA,CACVtxE,QAAQ,qDACRsY,MAAOy3D,GAA0BsB,aAClC,cAGD,kBAAChC,GAAaA,CAAC3gE,UAAWlQ,EAAKkQ,WAC5BlQ,EAAKooE,WACJpoE,EAAKooE,WAAWkE,SACd,kBAACX,GAAgBA,CAACC,kBAAmB5rE,EAAKkyE,kBAAmB9J,WAAYpoE,EAAKooE,aAE9E,kBAACsI,EAAAA,SAAQA,CAAC7yE,KAAMmC,EAAKooE,WAAW/zD,IAAKs8D,UAAAA,GAClC3wE,EAAKooE,WAAW/zD,KAIrB,MAGFrU,EAAKkQ,WACL,kBAAC4gE,GAA+BA,CAC9B1/C,YAAapxB,EAAKoxB,YAClB4hD,eAAgBhzE,EAAK0xE,eACrBlO,cAAexjE,EAAKuc,cACpB1W,QAAS7F,EAAKinE,gBAAgBphE,QAC9Bi+D,sBAAuB9jE,EAAK8jE,sBAC5BiN,cAAepwE,EAAQ2xE,oBACvB5O,mBAAoB/iE,EAAQ0xE,2BAC5B5O,eAAgB9iE,EAAQyxE,0BAK9B,kBAAChvE,MAAAA,CAAIE,UAAWR,EAAO/B,IAAKsC,cAAY,cACtC,kBAACyvE,EAAAA,YAAWA,CACVh5D,MAAOy3D,GAA0BsB,YACjCrxE,QAAQ,6HACT,UAGD,kBAACqvE,GAAaA,CAAC3gE,UAAWlQ,EAAKkQ,WAC7B,kBAAC+/D,GAAYA,CACXvO,QAAS1hE,EAAK0hE,QACdwO,eAAgBlwE,EAAKkwE,eACrB32D,SAAU5Y,EAAQ4xE,kBAM1B,kBAACjH,GAAaA,CAAC/uD,cAAevc,EAAKuc,cAAe0qD,gBAAiBjnE,EAAKinE,oBC3QpD,IAACsB,C,IDkR/B,MAAM1nE,GAAaC,IAA0B,CAC3Cg2D,UAAW91D,EAAAA,GAAG;;;;IAKdsG,MAAOtG,EAAAA,GAAG;;IAGV2D,QAAS3D,EAAAA,GAAG;eACCF,EAAMyG,QAAQ;IAE3B+F,UAAWtM,EAAAA,GAAG;;;;;IAMdD,IAAKC,EAAAA,GAAG;;;;;;;;;IAUR+xE,UAAW/xE,EAAAA,GAAG;;;;;;MEvST,SAASiyE,GAAkBpwE,GAChC,MAAM,aAAE2hE,EAAY,mBAAE0O,GAAuBrwE,EACvCC,GAASC,EAAAA,EAAAA,YAAWlC,IAE1B,OACE,kBAACuC,MAAAA,CAAIE,UAAWR,EAAOwK,WACrB,kBAACud,EAAAA,QAAOA,CAAClmB,QAAS,2DAA2D6/D,MAAkBn9D,UAAU,OACvG,kBAACxC,OAAAA,KAAK,wBAER,kBAACmH,EAAAA,OAAMA,CACLzJ,KAAK,KACL+S,KAAK,OACLrJ,QAAQ,YACRtF,KAAK,QACLnF,QAAS,kCACTmoC,iBAAiB,MACjB/iC,QAAS,KACPssE,GAAoB,IAK9B,CAEA,MAAMryE,GAAY,KAAO,CACvByM,UAAWtM,EAAAA,GAAG;;+HCUT,MAAMmyE,WAAwBr+C,GAAAA,GAkBnC5F,UAAAA,GACE,IAAIkkD,EAEJ,MAAMC,EAAoBz6E,KAAK04B,kBAAiB,CAACC,EAAUC,K,IAStCD,EARfA,EAASkH,QAAUjH,EAAUiH,QAI7B26C,GACFA,EAAiBh/C,cAGnBg/C,EAAiC,QAAd7hD,EAAAA,EAASkH,aAATlH,IAAAA,OAAAA,EAAAA,EAAgBD,kBAAkBgiD,I,IAC/CA,GAAiB,QAAjBA,EAAAA,EAAatzE,YAAbszE,IAAAA,OAAAA,EAAAA,EAAmBvlD,SAAUkJ,EAAAA,aAAayB,MAC5C9/B,KAAKu2B,SAAS,CAAEokD,cAAeD,EAAatzE,KAAK6S,WACnD,IACA,IAGJ,MAAO,KACLwgE,EAAkBj/C,cAClBg/C,SAAAA,EAAkBh/C,aAAa,CAEnC,CAEA0d,UAAAA,GACE,MAAM1gB,EAAcoD,GAAsB57B,KAAM,eAE1CkhE,EAAoBtrC,GADFgG,GAAsB57B,KAAM,oBAC2B4E,KAE/E,OACE,oCACE,kBAAC6H,GAAaA,CAAC9C,KAAK,UAAU,mBACb6uB,EAAY,KAAG0oC,EAAkB,IAGxD,CAyEAoZ,kBAAAA,GACEt6E,KAAKggC,aAAa,IAAIurC,GAAmB,CAAC,IAAI,EAChD,CAhIAnqE,WAAAA,GACE0B,MAAM,CACJqI,IAAK,cACL00B,MAAO,IAAIhB,GAAAA,GAAiB,CAC1B3H,WAAYlB,GACZ33B,QAAS,KAEXs8E,mBAAehwE,EACfiwE,WAAY,IAAI/N,GAChB1L,QAAS,IAAIhF,GACb0e,qBAAsB,IAAIlC,GAC1BmC,yBAA0B,IAAIx1B,KA4ClCy1B,GAAAA,KAAAA,sBAAsBnP,I,IAyBCoP,EAIdA,EAAAA,EAIaA,EAAAA,EAhCpB,MAAM,QAAEj9D,IAAYC,EAAAA,EAAAA,aACdkC,GAAW3V,EAAAA,EAAAA,UAAQ,IAAM,KAAM4V,EAAAA,EAAAA,aAAY,CAAErX,OAAQ,CAAEsX,KAAMrC,EAAU,QAAU,WAAa,CAACA,KAE9FmzC,GAAYoN,MACb,SAAE/M,EAAUtwD,MAAOg6E,GAA4BtpB,MAC/C,MAAE9xB,EAAK,cAAE86C,EAAa,WAAEC,EAAU,QAAEzZ,EAAO,qBAAE0Z,EAAoB,yBAAEC,GACvE96E,KAAK8G,WAEHm0E,GACFxlE,GAAe,CACb,8CACA,yIAIJhB,EAAAA,EAAAA,YAAU,KACJy8C,GACFlxD,KAAKu2B,SAAS,CACZsJ,MAAO8rC,GAA2B,CAAEza,WAAU0a,kBAElD,GACC,CAAC1a,EAAU0a,IAEd,MAAMoP,EAAan7C,EAAM/4B,WACnB61C,EAAeq+B,SAAgB,QAAhBA,EAAAA,EAAY5zE,YAAZ4zE,IAAAA,OAAAA,EAAAA,EAAkB7lD,MAEjCqsC,EACJ7kB,IAAiBte,EAAAA,aAAa77B,OACzBw4E,SAAgB,QAAhBA,EAAAA,EAAY5zE,YAAZ4zE,IAAAA,GAAwB,QAAxBA,EAAAA,EAAkB18C,cAAlB08C,IAAAA,OAAAA,EAAAA,EAA2B,KAAgB,IAAIx4E,MAAM,kBACtD,KAEA04E,EAAwBv+B,IAAiBte,EAAAA,aAAame,QACtDhlC,EAAcwjE,SAAgB,QAAhBA,EAAAA,EAAY5zE,YAAZ4zE,IAAAA,GAAwB,QAAxBA,EAAAA,EAAkBx9C,cAAlBw9C,IAAAA,OAAAA,EAAAA,EAA2B,GACzCG,EAAiB10E,OAAO+Q,aAAAA,EAAAA,EAAaxQ,QAAU,EAE/C8c,EAAQ4V,GAAuB15B,KAAM,WAE3C,MAAO,CACLoH,KAAM,CACJsH,MAAO1O,KAAKk5C,aACZ5hC,UAAW4jE,EACXA,wBACAC,iBACA3jE,cACAo0D,eACApK,oBACAjQ,WACA6pB,OAAQ,CACNjpB,KAAMyoB,EACN92D,QACA7J,UAAW0gE,GAEb9Y,GAAI,CACFthB,MAAO4gB,EACP7E,YAAa,CAAC,CAAEx4C,QAAO7J,UAAW0gE,KAEpCU,OAAQ,CACN96B,MAAOs6B,EACP5gE,UAAW0gE,GAEb11B,eAAgB,CACdq2B,MAAOR,IAGX/yE,QAAS,CACPmY,YAEH,IA7GDlgB,KAAK43B,qBAAqB53B,KAAKs2B,WAAWqB,KAAK33B,MACjD,EAmHA,GAnIWu6E,GAmIJziD,aAAY,EAAGC,Y,IAsFU3wB,EArF9B,MAAM8C,GAASC,EAAAA,EAAAA,YAAWlC,IAEpB2jE,EAAehwC,GAAsB7D,EAAO,iBAC5C,KAAE3wB,EAAI,QAAEW,GAAYgwB,EAAMgjD,mBAAmBnP,GAC7C1N,EAAYzN,KACZ8qB,EAAoB/N,GAAqBtP,IAEzC,SAAE3M,GAAaI,MAEd6pB,EAA0BC,IAA+B30E,EAAAA,EAAAA,UAG7D,CAAE+b,QAAQ,IAEP64D,GCzLkCC,EDyLgB53B,IACtD03B,EAA4B,CAAE54D,QAAQ,EAAMkhC,gBAAe,EC5KxD,CACL38C,KAAM,CAAC,EACPW,QAAS,CACP6lE,6BAhB+Ej2D,EAAAA,EAAAA,cACjF,EAAGgoB,OAAM7xB,WACA,CACL,CACEA,MAAO,wBACPC,KAAM,eACNC,QAAS,IAAM2tE,EAAuB,UAAV7tE,GAAoC,IAAf6xB,EAAKr/B,WAAcqK,EAAYmD,MAItF,CAAC6tE,OAXE,IAAqCA,ED+LxC,MAAOC,IAAeC,EAAAA,GAAAA,gBAChBC,EACJtQ,GAAeE,qCACfkQ,IACC35E,aAAaL,QAAQ,2CAElBmgE,EAAqB36D,EAAKkQ,YAAclQ,EAAK+zE,gBAEnD1mE,EAAAA,EAAAA,YAAU,KACJstD,GACF7D,EAAUn7C,OACZ,GACC,CAACg/C,EAAoB7D,IAExB,MAAM8D,GAAaz3D,EAAAA,EAAAA,UACjB,IACE,oCACGnD,EAAKsH,MACLtH,EAAKkQ,WAAa,kBAAC+J,EAAAA,QAAOA,CAACu5B,QAAAA,EAAOlwC,UAAWR,EAAOiX,YAGzD,CAAC/Z,EAAKkQ,UAAWlQ,EAAKsH,MAAOxE,EAAOiX,UAatC,OACE,kBAAC3W,MAAAA,CAAIE,UAAWR,EAAO+3D,MACrB,kBAACrP,GAAKA,CACJqG,WAAW,oBACXvuD,UAAWR,EAAOg4D,gBAClBxzD,MAAOszD,EACP1qD,UAAWlQ,EAAKkQ,UAChBqrB,cACE,oCACGipC,GACC,kBAACyO,GAAiBA,CAACzO,aAAcA,EAAc0O,mBAAoB,IAAMviD,EAAMuiD,wBAE/EwB,GACA,kBAAC5iB,GAAQA,CACPhrD,SAAU6zD,GAAsB7D,EAAUr7C,OAAO,MACjD7U,QAAS,IAAMkwD,EAAUjwD,KAAK,MAC9BmG,gBAAgB,8CACjB,yBAONhN,EAAKo6D,mBACJ,kBAAC3P,GAAYA,CAACxhD,SAAS,QAAQ3B,MAAM,oCAAoCzN,MAAOmG,EAAKo6D,qBAGrFp6D,EAAKo6D,mBACL,kBAAClhD,GAAAA,GAAUA,CACTlZ,KAAMA,EAAKoQ,YACXwI,oBAAiC,QAAb5Y,EAAAA,EAAKmqD,gBAALnqD,IAAAA,OAAAA,EAAAA,EAAewW,sBACnCsC,SAAUnY,EAAQmY,SAClBrC,2BA3CqE,CAACk+D,EAAiB30E,IAOxF,IANWm0E,EAAkBxzE,QAAQ6lE,4BAA4BmO,EAAiB30E,OAEvFmqD,aAAAA,EAAAA,EAAUH,4BAA6Boa,GAAeC,oBAClDiQ,EAAmB3zE,QAAQ6lE,4BAA4BmO,EAAiB30E,GACxE,IAuCE6Y,oBACE,kBAAC7Y,EAAKg0E,OAAOjpB,KAAKr6B,UAAS,CACzBC,MAAO3wB,EAAKg0E,OAAOjpB,KACnBruC,MAAO1c,EAAKg0E,OAAOt3D,MACnB7J,UAAW7S,EAAKg0E,OAAOnhE,YAG3BoG,uBAAAA,KAKL69C,EAAUr7C,OAAO,OAChB,kBAACzb,EAAKy6D,GAAGthB,MAAMzoB,UAAS,CAACC,MAAO3wB,EAAKy6D,GAAGthB,MAAO+b,YAAal1D,EAAKy6D,GAAGvF,YAAa/lB,QAAS2nB,EAAUn7C,QAGrGm7C,EAAUr7C,OAAO,qBAChB,kBAACzb,EAAKi0E,OAAO96B,MAAMzoB,UAAS,CAC1BC,MAAO3wB,EAAKi0E,OAAO96B,MACnBtmC,UAAW7S,EAAKi0E,OAAOphE,UACvBwyD,WAAY8O,EAAkBn0E,KAAKsmE,WACnCn3B,QAAS2nB,EAAUn7C,QAIvB,kBAAC3b,EAAK69C,eAAeq2B,MAAMxjD,UAAS,CAClCC,MAAO3wB,EAAK69C,eAAeq2B,MAC3B54D,YAAa84D,EAAyB34D,OACtCkhC,aAAcy3B,EAAyBz3B,aACvCjhC,UAAW,IAAM24D,EAA4B,CAAE54D,QAAQ,IACvD0iC,UAAW,KACTk2B,EAA4B,CAAE54D,QAAQ,GAAQ,I,IAQ1D,MAAM5a,GAAaC,IAA0B,CAC3C+5D,KAAM75D,EAAAA,GAAG;;IAGT85D,gBAAiB95D,EAAAA,GAAG;;;IAIpB+Y,QAAS/Y,EAAAA,GAAG;mBACKF,EAAMyG,QAAQ;MEpS1B,MAAMqtE,WAAsC9/C,GAAAA,GAcjD5F,UAAAA,CAAWqJ,GACLA,GACF3/B,KAAK84C,cAAcnZ,GAGrB,MAAMyhB,EAAwBvnB,GAAAA,GAAWC,iBAAiB95B,KAAM,kBAAmBo2B,IAKnF,OAHAgrB,EAAsB7qB,SAAS,CAAEzS,MAAOsS,GAAsByB,+BAC9DupB,EAAsB3qB,QAAO,GAEtB,KACL2qB,EAAsB7qB,SAAS,CAAEzS,MAAOsS,GAAsBe,gBAC9DiqB,EAAsB3qB,QAAO,EAAK,CAEtC,CAEAqiB,aAAAA,CAAcnZ,GACZ,MAAM,YAAEnH,EAAW,gBAAE3C,EAAe,QAAE3O,GAAYyY,EAAKQ,kBAEvD,GAAI3H,EAAa,CACaqB,GAAAA,GAAWC,iBAAiB95B,KAAM,cAAeu4B,IACzDb,cAAcc,EACpC,CAEA,GAAI3C,EAAiB,CACWgE,GAAAA,GAAWC,iBAAiB95B,KAAM,kBAAmBo2B,IAC7DsB,cAAc7B,EACtC,CAEA,GAAI3O,EAAS,CACa2S,GAAAA,GAAWC,iBAAiB95B,KAAM,UAAWg6B,IACrDzD,SAAS,CAAErP,WAC7B,CACF,CAGA6uB,2BAAAA,GACE,MAAO,CACLC,UAAW,CACTnc,GAAAA,GAAWC,iBAAiB95B,KAAM,cAAeu4B,IACjDsB,GAAAA,GAAWC,iBAAiB95B,KAAM,kBAAmBo2B,IACrDyD,GAAAA,GAAWC,iBAAiB95B,KAAM,UAAWg6B,KAE/Cic,aAAc,GAElB,CAEA,gBAAOne,EAAU,MAAEC,IACjB,MAAM7tB,GAASC,EAAAA,EAAAA,YAAWlC,KACpB,eAAEg0E,EAAc,KAAE51E,GAAS0xB,EAAMjxB,WAIvC,OACE,kBAAC0D,MAAAA,CAAIE,UAAWR,EAAO+3D,MACrB,kBAACz3D,MAAAA,CAAIE,UAAWR,EAAO+xE,gBACrB,kBAACA,EAAenkD,UAAS,CAACC,MAAOkkD,KAEnC,kBAAC51E,EAAKyxB,UAAS,CAACC,MAAO1xB,IAG7B,CA1EAjF,WAAAA,EAAY,KAAEu+B,IACZ78B,MAAM,CACJqI,IAAK,8BACL8wE,eAAgB,IAAIrjC,GAA2B,CAC7CjZ,OACAgD,cAAgBhD,GAAS,CAAC,IAAI+V,GAAa,CAAE9wC,KAAM,cAAe+6B,SAAS,IAAIwQ,GAAU,CAAExQ,YAE7Ft5B,KAAM,IAAIk0E,KAGZv6E,KAAK43B,qBAAqB53B,KAAKs2B,WAAWqB,KAAK33B,KAAM2/B,GACvD,EAkEF,MAAM13B,GAAaC,IAA0B,CAC3C+5D,KAAM75D,EAAAA,GAAG;;;;WAIAF,EAAMyG,QAAQ;IAEvBstE,eAAgB7zE,EAAAA,GAAG;cACPwwC,GAA2BY;yIC5F1B0iC,K,OAAAA,GAAAA,MAAAA,KAAAA,U,UAAAA,K,eAAf,YACE/nE,GAAkB,sCAElB,UACQ0lE,UAAUC,UAAUC,UCdvB,WACL,MAAMoC,EAAe,IAAIn3E,IAAI9F,OAAOC,SAAS2G,aACvC,aAAEZ,GAAiBi3E,EAgBzB,OAdKj3E,EAAazD,IAAI,SACpByD,EAAarD,IAAI,OAAQ8/C,KAAsBznC,MAE5ChV,EAAazD,IAAI,OACpByD,EAAarD,IAAI,KAAM8/C,KAAsBpnC,IAG/C,CAAC,OAAQ,KAAM,SAAU,OAAQ,SAAU,OAAQ,WAAY,SAAU,aAAc,YAAYiR,SAAStnB,IAC1G,MAAMpC,EAAQoD,EAAazD,IAAIyC,GAC3BpC,GACFoD,EAAarD,IAAIqC,EAAM6B,OAAOglD,EAAAA,SAASppD,MAAMG,GAAQ8jC,WACvD,IAGKu2C,CACT,CDLwCC,GAAoBt2E,YAExD6P,GAAe,CAAC,6BAClB,CAAE,MAAO1U,GACPf,EAAOe,MAAMA,EAAgB,CAAEN,KAAM,4CACvC,CACF,EAVeu7E,G,gLAAAA,GAAAA,MAAAA,KAAAA,U,CEFR,SAASG,IAAwB,QAAEl5E,EAAO,MAAErB,EAAK,SAAE6e,IACxD,MAAMzW,GAASC,EAAAA,EAAAA,YAAWlC,IAEpBq0E,EAAcn5E,EAAQozE,WAAWz1D,GAAMA,EAAEhf,QAAUA,IAWzD,OACE,kBAAC0I,MAAAA,CAAIE,UAAWR,EAAOqyE,yBAA0B9xE,cAAY,qBAC3D,kBAACD,MAAAA,CAAIE,UAAWR,EAAO4D,OAAO,eAE9B,kBAACtD,MAAAA,CAAIE,UAAWR,EAAOsyE,YACpBr5E,EAAQ6H,KAAI,CAAC8M,EAAQ5M,KACpB,MAAMs7B,EAAW1kC,IAAUgW,EAAOhW,MAC5BuR,GAhBYopE,EAgBevxE,EAfnCoxE,IAAgBn5E,EAAQ6D,OAAS,EAE5By1E,IAAiBH,EAAc,UAAY,YAG7CG,GAAgBH,EAAc,UAAY,aAN1B,IAACG,EAiBlB,MACMC,EAAe,CAACl2C,GAAY,SADJ,YAAZnzB,GACuC,WAEzD,OACE,kBAACspE,EAAAA,SAAQA,CAACxxE,IAAK2M,EAAOhW,OACpB,kBAACsR,EAAAA,OAAMA,CACL1I,WAAW4B,EAAAA,EAAAA,IAAGpC,EAAO4I,UAAW4pE,GAChCrpE,QAASA,EACT1J,KAAK,KACLwC,aAAY2L,EAAOhK,MACnBC,KAAM+J,EAAO/J,KACbC,QAASw4B,EAAWlkC,EAAO,IAAMqe,EAAS7I,EAAOhW,OACjD8G,QAASkP,EAAOmT,YAChB8lB,iBAAiB,MACjBtmC,cAAa+7B,EAAW,iBAAc77B,GAErCmN,EAAOhK,OAIT5C,EAAI/H,EAAQ6D,OAAS,GACpB,kBAACwD,MAAAA,CACCE,UACE4xE,IAAgBn5E,EAAQ6D,OAAS,GAAKkE,GAAKoxE,EAAc,GACrDhwE,EAAAA,EAAAA,IAAGpC,EAAO0yE,MAAO,WAAYF,GAC7BxyE,EAAO0yE,Q,KAU/B,CAEA,MAAM30E,GAAaC,IAA0B,CAC3Cq0E,yBAA0Bn0E,EAAAA,GAAG;;;IAI7B0F,MAAO1F,EAAAA,GAAG;;;;;oBAKQF,EAAMyG,QAAQ;;MAE5BzG,EAAMsB,YAAYqrD,KAAK;;;IAI3B2nB,WAAYp0E,EAAAA,GAAG;;;;;;;0BAOSF,EAAMY,OAAO0J,QAAQ6P;;;;0BAIrBna,EAAMY,OAAO0J,QAAQ6P;;;;;;;;;;0BAUrBna,EAAMY,OAAO0J,QAAQ6P;;IAG7CvP,OAAQ1K,EAAAA,GAAG;;;;;;sBAMSF,EAAMY,OAAO0J,QAAQ6P;;;;;0BAKjBna,EAAMY,OAAO0J,QAAQ6P;;;;qBAI1Bna,EAAMyG,QAAQ;;;;qBAIdzG,EAAMyG,QAAQ;;IAGjCiuE,MAAOx0E,EAAAA,GAAG;wBACYF,EAAMY,OAAOC,KAAKmF;;;MC/GnC,SAAS2uE,GAAO5yE,GACrB,MAAM6yE,EAA0CC,OAArBA,EAAAA,4BAAqBA,IAArBA,EAAAA,2BAAqBA,GAArBA,EAAAA,EAAAA,yBACrB7yE,GAASC,EAAAA,EAAAA,YAAWlC,GAAW60E,QAAAA,EAAsB,IAErD,KAAE11E,EAAI,QAAEW,GHDT,UAAmB,gBAAE09C,EAAe,SAAExxB,EAAQ,KAAE5tB,EAAI,WAAE6vC,EAAU,wBAAE8mC,IACvE,MAAOC,EAAmBC,GACxBz3B,IAAoBC,GAAgBy3B,iBAAmB,GAAMlpD,EAEzDmpD,EAAqBlnC,EAAW/gB,MAAM6gB,UAAU,GAEhDqnC,EAAkBh3E,aAAAA,EAAAA,EAAM8uB,MAAM3iB,QAEpC,GAA2D,mBAAhD6qE,EAAgBtnC,4BACzB,MAAM,IAAIvzC,MACR,0BAA0B66E,EAAgBj8E,YAAY8C,oFAI1D,MAAQ8xC,UAAWsnC,EAAc,aAAErnC,GAAiBonC,EAAgBtnC,8BAK9DpyB,EAAgBy5D,EAAmBt2E,WAAWhF,MAE9C08D,GAAWC,EAAAA,GAAAA,eAOjB,MAAO,CACLr3D,KAAM,CACJq+C,kBACA23B,qBACAH,oBACAC,uBACAI,iBACArnC,eACA5vC,OACAsd,gBACA6U,YAdFitB,IAAoBC,GAAgBC,cAAgBF,IAAoBC,GAAgBE,UAEtChqB,GAAsBsa,EAAY,oBAAiBvrC,GAcrG5C,QAAS,CACPi1E,0BACAd,oBACAqB,uBAAuB5lE,EAAAA,EAAAA,cAAY,KACjCxD,GAAkB,6CAElBqqD,EAAS,GAAG7/D,IAAkBC,EAAO4+E,kBAAmB,CAAEroD,MAAO,CAAEsoD,SAAUv+E,OAAOC,SAAS8F,OAAS,GACrG,CAACu5D,IACJkf,cAAc/lE,EAAAA,EAAAA,cAAY,KACxBxD,GAAkB,yCAElBqqD,EAAS,GAAG7/D,IAAkBC,EAAO++E,QAAS,CAAExoD,MAAO,CAAEsoD,SAAUv+E,OAAOC,SAAS8F,OAAS,GAC3F,CAACu5D,IACJof,qBAAqBjmE,EAAAA,EAAAA,cAAY,KAC/BxD,GAAkB,yCAElBqqD,EAAS,GAAG7/D,IAAkBC,EAAOuD,WAAY,CAAEgzB,MAAO,CAAEsoD,SAAUv+E,OAAOC,SAAS8F,OAAS,GAC9F,CAACu5D,KAGV,CG3D4Bqf,CAAU5zE,IAE9B,SAAEsnD,GAAaI,MAEf,gBACJlM,EAAe,mBACf23B,EAAkB,kBAClBH,EAAiB,qBACjBC,EAAoB,eACpBI,EAAc,aACdrnC,EAAY,YACZzd,GACEpxB,GAMIgzD,UAAW0jB,IAAqBC,EAAAA,EAAAA,oBACtC,iDAGIC,EACJ,kBAACrwE,EAAAA,KAAIA,KACH,kBAACA,EAAAA,KAAKE,KAAI,CACR2nC,UAAU,uBACV1nC,MAAM,uBACNE,QAASjG,EAAQw1E,wBAEnB,kBAAC5vE,EAAAA,KAAKE,KAAI,CAAC2nC,UAAU,qBAAqB1nC,MAAM,qBAAqBE,QAAS/D,EAAMg0E,yBAIxF,OACE,kBAACzzE,MAAAA,CAAIE,UAAWR,EAAO0D,OAAQnD,cAAY,eACzC,kBAAC23D,GAAkBA,MAEnB,kBAAC53D,MAAAA,CAAIE,UAAWR,EAAOg0E,YAAazzE,cAAY,eAC9C,kBAACD,MAAAA,CAAIE,UAAWR,EAAOi0E,iBACrB,kBAAC9B,GAAuBA,CACtBl5E,QAAS49C,GAAsBq9B,yBAC/Bt8E,MAAO2jD,EACP9kC,SAAU5Y,EAAQi1E,2BAItB,kBAACxyE,MAAAA,CAAIE,UAAWR,EAAOm0E,kBACpBP,GACC,kBAACQ,EAAAA,cAAaA,MACX,EAAGr9E,WACFA,OAAQ0J,EACN,kBAACmzE,EAAAA,CAAiBn6D,cAAey5D,EAAmBmB,eAAgB/lD,YAAaA,MAMxFykD,GACC,kBAACA,EAAkBnlD,UAAS,CAAC3sB,IAAK8xE,EAAkB9nD,MAAMhqB,IAAK4sB,MAAOklD,IAEvEC,GACC,kBAACA,EAAqBplD,UAAS,CAAC3sB,IAAK+xE,EAAqB/nD,MAAMhqB,IAAK4sB,MAAOmlD,IAG9E,kBAAC1yE,MAAAA,CAAIE,UAAWR,EAAOs0E,iBACpBjtB,aAAAA,EAAAA,EAAUH,4BAA6Boa,GAAeC,qBACrD,oCACE,kBAACl9D,EAAAA,SAAQA,CAACC,QAASwvE,GACjB,kBAAC9xE,EAAAA,WAAUA,CAAChI,KAAK,gBAAgB0E,QAAQ,kBAAkBuD,aAAW,sBAK5E,kBAACD,EAAAA,WAAUA,CAAChI,KAAK,SAAS0E,QAAQ,yBAAyBoF,QAASjG,EAAQ21E,eAE5E,kBAACxxE,EAAAA,WAAUA,CAAChI,KAAK,MAAM0E,QAAQ,4BAA4BoF,QAASjG,EAAQ61E,sBAE5E,kBAAC1xE,EAAAA,WAAUA,CACThI,KAAK,YACL0E,QAAQ,uCACRoF,QAASjG,EAAQm0E,mBAGnB,kBAAC5tE,GAAUA,SAKjB,kBAAC9D,MAAAA,CAAIwL,GAAI,kBAAkByvC,IAAmB/6C,UAAWR,EAAO82C,cAAev2C,cAAY,iBACzF,kBAACqtC,EAAAA,MAAKA,CACJhqC,MAAOsvE,EAAmBjoD,MAAMrnB,MAChCpD,WAAW4B,EAAAA,EAAAA,IAAGpC,EAAOu0E,cAAerB,EAAmBjoD,MAAMjxB,MAC7DuG,cAAa2yE,EAAmBjoD,MAAMjxB,MAEtC,kBAACk5E,EAAmBtlD,UAAS,CAACC,MAAOqlD,KAGtCE,EAAetyE,KAAKy7B,GACnB,kBAACqR,EAAAA,MAAKA,CACJ3sC,IAAKs7B,EAAStR,MAAMjxB,KACpB4J,MAC2B,YAAzB24B,EAAStR,MAAMrnB,MACb,kBAACtD,MAAAA,CAAIE,UAAWR,EAAOw0E,oBACrB,kBAAC9uE,EAAAA,KAAIA,CAAC1L,KAAK,SAASwG,UAAWR,EAAO6D,OACrC04B,EAAStR,MAAMrnB,OAGlB24B,EAAStR,MAAMrnB,MAGnBpD,WAAW4B,EAAAA,EAAAA,IAAGpC,EAAOu0E,cAAeh4C,EAAStR,MAAMjxB,MACnDuG,cAAag8B,EAAStR,MAAMjxB,MAE5B,kBAACuiC,EAAS3O,UAAS,CAACC,MAAO0O,OAI9BwP,EAAajrC,KAAKk2C,GACjB,kBAACpJ,EAAAA,MAAKA,CAAC3sC,IAAK+1C,EAAQ/rB,MAAMhqB,IAAK6K,GAAIkrC,EAAQ/rB,MAAMhqB,IAAKT,UAAWR,EAAOy0E,YAAa7wE,MAAM,IACzF,kBAACozC,EAAQppB,UAAS,CAACC,MAAOmpB,QAMtC,CAEA,MAAMj5C,GAAY,CAACC,EAAsB40E,KAAgC,CACvElvE,OAAQxF,EAAAA,GAAG;wBACWF,EAAMY,OAAOmI,WAAW8pC;;WAErC+hC;;sBAEW50E,EAAMyG,QAAQ;IAElCuvE,YAAa91E,EAAAA,GAAG;;eAEHF,EAAMyG,QAAQ;;WAElBzG,EAAMyG,QAAQ;IAEvBwvE,gBAAiB/1E,EAAAA,GAAG;;WAEXF,EAAMyG,QAAQ;IAEvB0vE,iBAAkBj2E,EAAAA,GAAG;;WAEZF,EAAMyG,QAAQ;IAEvB6vE,eAAgBp2E,EAAAA,GAAG;;;;wBAIGF,EAAMY,OAAOkyC,OAAOC;wBACpB/yC,EAAMY,OAAOmI,WAAWjI;;iBAE/Bd,EAAMyG,QAAQ;;;;;;IAO7BqyC,cAAe54C,EAAAA,GAAG;;;WAGTF,EAAMyG,QAAQ;;;IAIvB8vE,cAAer2E,EAAAA,GAAG;;;;;eAKLF,EAAMyG,QAAQ;;;;;;;;;;;IAY3B+vE,mBAAoBt2E,EAAAA,GAAG;;;;;;aAMZF,EAAMY,OAAOC,KAAKyJ;;IAG7BzE,KAAM3F,EAAAA,GAAG;;;IAITu2E,YAAav2E,EAAAA,GAAG;;;;;;;+HCnKX,gBAAKs9C,G,mKAAAA,C,CAAL,C,IASA,MAAM3E,WAA8B7kB,GAAAA,GAiFzC5F,UAAAA,GACE,MAAMsoD,EAAS5+E,KAAK6+E,6BACdC,EAAY9+E,KAAKssD,oBAQvB,OANKtsD,KAAKm1B,MAAMswB,iBACdzlD,KAAK++E,mBAAmB,CACtBn6E,KAAMm8C,GAAsBi+B,2BAIzB,KACLF,EAAUtjD,cACVojD,EAAOpjD,aAAa,CAExB,CAEAW,WAAAA,GACE,MAAO,CACLspB,gBAAiBzlD,KAAKm1B,MAAMswB,gBAEhC,CAEAppB,aAAAA,CAAc93B,GACZ,GAAsC,iBAA3BA,EAAOkhD,iBAAgClhD,EAAOkhD,kBAAoBzlD,KAAKm1B,MAAMswB,gBAAiB,CACvG,MAAM7gD,EAAOL,EAAOkhD,gBACpBzlD,KAAK++E,mBAAmB,CACtBn6E,KAAMT,OAAOI,OAAOmhD,IAAiB3tC,SAASnT,GAAQA,EAAOm8C,GAAsBi+B,0BAEvF,CACF,CAEAC,0BAAAA,GAEE,IACEC,GAAAA,GAAWC,0BAA0B,CAAE/5E,WAAY,IAAI+9C,KACvD+7B,GAAAA,GAAWC,0BAA0B,CAAE/5E,WAAY,IAAI+pC,KACvD+vC,GAAAA,GAAWC,0BAA0B,CAAE/5E,WAAY,IAAI0gC,IACzD,CAAE,MAAO7kC,GACP,MAAM,QAAE0B,GAAY1B,EAEf,kEAAkE1B,KAAKoD,IAC1EmS,GAAa7T,EAAgB,CAC3B,iDACA,uIAGN,CACF,CAEA49E,0BAAAA,GACE,MAAMtjD,EAAgB1B,GAAAA,GACnBC,iBAAiB95B,KAAM,aAAci6B,IACrCvB,kBAAiB,CAACC,EAAUC,KACvBD,EAAS72B,OAAS62B,EAAS72B,QAAU82B,EAAU92B,QACjDk4B,GAAgBsB,SAASt7B,MACzBA,KAAKo/E,oBACP,IAGEC,EAAiBxlD,GAAAA,GACpBC,iBAAiB95B,KAAM,cAAeu4B,IACtCG,kBAAiB,CAACC,EAAUC,KACvBD,EAAS72B,OAAS62B,EAAS72B,QAAU82B,EAAU92B,QACjDk4B,GAAgBsB,SAASt7B,MAIrB24B,EAASx1B,QAAQyqB,MAAM9V,GAAWA,EAAOhW,QAAU82B,EAAU92B,SAC/D9B,KAAKo/E,oBAET,IAGEE,EAAiBzlD,GAAAA,GACpBC,iBAAiB95B,KAAM,kBAAmBo2B,IAC1CsC,kBAAiB,CAACC,EAAUC,KACvBD,EAAS72B,OAAS62B,EAAS72B,QAAU82B,EAAU92B,OACjD9B,KAAKo/E,mBACP,IAGEltC,EAAarY,GAAAA,GAChBC,iBAAiB95B,KAAM,UAAWg6B,IAClCtB,kBAAiB,CAACC,EAAUC,KACvBl3B,KAAKM,UAAU22B,EAASzR,WAAaxlB,KAAKM,UAAU42B,EAAU1R,UAChElnB,KAAKo/E,mBACP,IAGJ,MAAO,CACL5jD,WAAAA,GACE6jD,EAAe7jD,cACfD,EAAcC,cACd0W,EAAW1W,cACX8jD,EAAe9jD,aACjB,EAEJ,CAEA8wB,iBAAAA,GACE,MAAMizB,EAAcv/E,KAAKg0C,iBAAiBsB,IAA2BpsB,IACnElpB,KAAK++E,mBAAmB,CACtBn6E,KAAM,WACN46E,qBAAqB,EACrB7/C,KAAMzW,EAAM1T,QAAQmqB,MACpB,IAGE8/C,EAAYz/E,KAAKg0C,iBAAiBqB,IAAyBnsB,IAC/DlpB,KAAK++E,mBAAmB,CACtBn6E,KAAM,SACN46E,qBAAqB,EACrB7/C,KAAMzW,EAAM1T,QAAQmqB,MACpB,IAGE+/C,EAAgB1/E,KAAKg0C,iBAAiBoB,IAA6BlsB,IACvElpB,KAAK++E,mBAAmB,CACtBn6E,KAAM,cACN46E,qBAAqB,EACrB7/C,KAAMzW,EAAM1T,QAAQmqB,MACpB,IAGEggD,EAAoB3/E,KAAKg0C,iBAAiByF,IAA0BvwB,IACxE,MAAM,qBAAEy3B,EAAoB,eAAEC,EAAc,gBAAEH,EAAe,kBAAEC,GAAsBx3B,EAAM1T,QAE3FxV,KAAK++E,mBAAmB,CACtBn6E,KAAM,mBACN46E,qBAAqB,EACrBI,iBAAkB,CAChBj/B,uBACAC,iBACAH,kBACAC,sBAEF,IAGEm/B,EAAwB7/E,KAAKg0C,iBAAiBu3B,IAAoB,KACtEvrE,KAAKo/E,mBAAmB,IAG1B,MAAO,CACL5jD,WAAAA,GACEmkD,EAAkBnkD,cAClBkkD,EAAclkD,cACdikD,EAAUjkD,cACV+jD,EAAY/jD,cACZqkD,EAAsBrkD,aACxB,EAEJ,CAEAujD,kBAAAA,EAAmB,KACjBn6E,EAAI,oBACJ46E,EAAmB,KACnB7/C,EAAI,iBACJigD,IAOIJ,IACFt8D,KACAljB,KAAK8/E,eAAel7E,IAGtB5E,KAAKu2B,SAAS,CACZkvB,gBAAiB7gD,EACjByB,KAAMrG,KAAK+/E,eAAen7E,EAAM+6B,EAAMigD,IAE1C,CAEAR,iBAAAA,GACEvlD,GAAAA,GAAWC,iBAAiB95B,KAAM,eAAgB4hD,IAAsBvmB,OAC1E,CAEAykD,cAAAA,CAAeE,GACbnmD,GAAAA,GAAWC,iBAAiB95B,KAAM,eAAgB0uC,IAAkBrT,QACpExB,GAAAA,GAAWC,iBAAiB95B,KAAM,UAAWi4C,IAAiBvgB,cAAcugB,GAAgBzhB,eAC5FqD,GAAAA,GAAWC,iBAAiB95B,KAAM,sBAAuBi8B,IAAwBZ,QACjFr7B,KAAKo/E,oBAKF,C,2CAAwFrnE,SACvFioE,IAGFnmD,GAAAA,GAAWC,iBAAiB95B,KAAM,UAAWg6B,IAAiBqB,OAElE,CAEA0kD,cAAAA,CAAet6B,EAAkC9lB,EAAqBigD,GACpE,IAAIptE,EAEJ,OAAQizC,GACN,IAAK,WACHjzC,EAAU,IAAIivC,GAAgC,CAAE9hB,SAChD,MAEF,IAAK,SACHntB,EAAU,IAAI2uC,GAA0B,CAAExhB,SAC1C,MAEF,IAAK,cACHntB,EAAU,IAAIwpE,GAA8B,CAAEr8C,SAC9C,MAEF,IAAK,mBACHntB,EAAU,IAAIixD,GAA2Bmc,GAAoB,CAAC,GAC9D,MAEF,IAAK,YACHptE,EAAU,IAAIikC,GACd,MAGF,QACEjkC,EAAU,IAAIsjC,GAGlB,OAAO,IAAImqC,GAAAA,GAAY,CACrBnyC,UAAW,SACXt7B,WAEJ,CA+BA,gBAAOslB,EAAU,MAAEC,IACjB,MAAM7tB,GAASC,EAAAA,EAAAA,YAAWlC,KAEpB,KAAEb,EAAI,QAAEW,GAAYgwB,EAAMmoD,uBAC1B,gBAAEz6B,EAAe,SAAExxB,EAAQ,KAAE5tB,EAAI,WAAE6vC,EAAU,cAAEvyB,GAAkBvc,GAGhEo0E,EAA0BC,IAA+B30E,EAAAA,EAAAA,UAG7D,CAAE+b,QAAQ,KACP,yBAAEi4D,GAA6B/iD,EAAMjxB,WAE3C,OACE,kBAAC0jE,GAAuBA,KACtB,kBAACT,GAAqBA,CAACpmD,cAAeA,GACpC,kBAACk5D,GAAMA,CACLp3B,gBAAiBA,EACjBxxB,SAAUA,EACV5tB,KAAMA,EACN6vC,WAAYA,EACZ8mC,wBAAyBj1E,EAAQi1E,wBACjCiB,sBAAuB,KACrBxC,EAA4B,CAAE54D,QAAQ,GAAO,IAIjD,kBAACrY,MAAAA,CAAIE,UAAWR,EAAO7D,KAAMoE,cAAY,aACtCpE,GAAQ,kBAACA,EAAKyxB,UAAS,CAACC,MAAO1xB,KAGlC,kBAACi/C,GAA8BxtB,UAAS,CACtCC,MAAO+iD,EACPp4D,YAAa84D,EAAyB34D,OACtCkhC,aAAcy3B,EAAyBz3B,aACvCjhC,UAAW,IAAM24D,EAA4B,CAAE54D,QAAQ,IACvD0iC,UAAW,KACTk2B,EAA4B,CAAE54D,QAAQ,GAAQ,KAM1D,CA1VAzhB,WAAAA,GACE0B,MAAM,CACJqI,IAAK,oBACLs6C,qBAAiB96C,EACjBtE,UAAMsE,EACNshD,WAAY,IAAI4D,GAAAA,GAAelO,MAC/BzL,WAAY,IAAIC,GAAAA,GAAiB,CAM/BH,UAAW,CACT,IAAI/b,GACJ,IAAI1B,GACJ,IAAInC,GACJ,IAAI4D,GAAgB,CAAE7uB,IAAK,YAC3B,IAAI6uB,GAAgB,CAAE7uB,IAAK,oBAC3B,IAAI6uB,GAAgB,CAAE7uB,IAAK,sBAC3B,IAAI8sC,GACJ,IAAI2J,MAGRk5B,yBAA0B,IAAIx1B,GAC9BrxB,SAAU,CAAC,IAAIyzB,GAAAA,GAAgB,CAAEtP,YAAY,IAAS,IAAI4X,GAAAA,GAAmB,CAAE5X,YAAY,KAG3FnC,aAAc,CACZ,IAAIvH,GAAiB,CAAE7hB,YAAa,KACpC,IAAIoP,GACJ,IAAIkS,GACJ,IAAIE,MAjCV,QAAU7R,WAAW,IAAIC,GAAAA,GAAyBz8B,KAAM,CAAE08B,KAAM,CAAC,sBAoRjEsgD,GAAAA,KAAAA,2BAA2Bv3B,IACzBtxC,GAAkB,2CAA4C,CAAEsxC,oBAEhEzlD,KAAK++E,mBAAmB,CACtBn6E,KAAM6gD,EACN+5B,qBAAqB,GACrB,IAGJU,GAAAA,KAAAA,uBAAsB,KACpB,MAAM,gBAAEz6B,EAAe,SAAExxB,EAAQ,KAAE5tB,EAAI,WAAE6vC,GAAel2C,KAAK8G,WAK7D,MAAO,CACLM,KAAM,CACJq+C,kBACAxxB,WACA5tB,OACA6vC,aACAvyB,cATuBuyB,EAAW/gB,MAAM6gB,UAAU,GACblvC,WAAWhF,OAUlDiG,QAAS,CACPi1E,wBAAyBh9E,KAAKg9E,yBAEjC,KAzQDmD,EAAAA,GAAAA,MAAoBC,SAASpgF,MAE7BA,KAAKi/E,6BAELj/E,KAAK43B,qBAAqB53B,KAAKs2B,WAAWqB,KAAK33B,MACjD,EA9EA,GADW+gD,GACJq9B,2BAA2B,CAChC,CACEt8E,MAAO,MACPgM,MAAO,eACPmd,YAAa,wDAEf,CACEnpB,MAAO,WACPgM,MAAO,gBACPmd,YAAa,0DAEf,CACEnpB,MAAO,SACPgM,MAAO,SACPmd,YAAa,kDAEf,CACEnpB,MAAO,cACPgM,MAAO,cACPmd,YAAa,8BAEf,CACEnpB,MAAO,mBACPgM,MAAO,mBACPmd,YAAa,oDAEf,CACEnpB,MAAO,YACPgM,MAAO,YACPmd,YAAa,uCACbld,KAAM,cAIV,GAnCWgzC,GAmCJi+B,2BAA2Bj+B,GAAsBq9B,yBAAyB,GAAGt8E,OAiWtF,MAAMmG,GAAY,KAAO,CACvB5B,KAAM+B,EAAAA,GAAG;;;;MCzcI,SAASi4E,KACtB,MAAMC,GAAwB/1E,EAAAA,EAAAA,UAAQ,IAAM,IAAIw2C,IAAyB,IAGzE,OAFAzsC,GAAyB,WAElB,kBAACgsE,EAAsBxoD,UAAS,CAACC,MAAOuoD,GACjD,CCDO,SAASC,IAA0B,KAAEz8B,EAAI,QAAE08B,IAChD,MAAO39D,EAAQ6Q,GAAahnB,IAAAA,UAAe,GAC3C,OACE,oCACE,kBAACR,EAAAA,WAAUA,CACThI,KAAK,YACL8J,QAAS,IAAM0lB,GAAU,GACzBrgB,QAAQ,cACRlH,aAAW,0BAEb,kBAACs0E,EAAAA,aAAYA,CACX59D,OAAQA,EACRnU,MAAO,wBACPrI,KAAM,mCAAmCy9C,EAAKG,6BAC9Cw0B,YAAY,MACZC,UAAW,KACT8H,IACA9sD,GAAU,EAAM,EAElB5Q,UAAW,IAAM4Q,GAAU,KAInC,C,0HC5BO,SAASgtD,KACd,MAAM,eAAEz7B,EAAgBhkD,MAAOkkD,EAAU,OAAEV,EAAM,WAAEx9C,GAAey9C,KAElE,MAAO,CACLt9C,KAAM,CACJ69C,iBACAE,aACAl+C,cAEFc,QAAS,CACD44E,mBAAAA,CAAoB78B,G,SAA8B,YACtD,UACQW,EAAOX,GACbnuC,GAAe,CAAC,kBAAkBmuC,EAAKG,uBACzC,CAAE,MAAO7yB,GACPtc,GAAasc,EAAY,CAAC,mCAAmC0yB,EAAKG,eACpE,CACF,E,2LAGN,C,kkBCXe,SAAS28B,KACtB,MAAM12E,GAASC,EAAAA,EAAAA,YAAWlC,KACpB,KAAEb,EAAI,QAAEW,GAAY24E,MACpB,eAAEz7B,GAAmB79C,EAE3B,GAAIA,EAAKH,WACP,OAAO,kBAACsI,GAAgBA,MAG1B,MAAMu0D,EAAiD,CACrD,CACE9tD,GAAI,aACJpI,OAAQ,OACRizE,SAAU,gBAEZ,CACE7qE,GAAI,cACJpI,OAAQ,eACRizE,SAAU,eACVC,KAAO72E,GACgCA,EAAM9B,IAAI44E,SAExCvoD,aACH,kBAACsI,EAAAA,KAAIA,CAAC0W,QAAQ,OAAO3uC,MAAM,aAAY,iBAO/C,CACEmN,GAAI,cACJpI,OAAQ,eACRizE,SAAU,gBAEZ,CACE7qE,GAAI,eACJpI,OAAQ,gBACRizE,SAAU,eACVC,KAAO72E,GACgCA,EAAM9B,IAAI44E,SAExCh9B,cACH,kBAACjjB,EAAAA,KAAIA,CAAC0W,QAAQ,OAAO3uC,MAAM,aAAY,0BAO/C,CACEmN,GAAI,UACJpI,OAAQ,SACRkzE,KAAO72E,I,IAGU65C,EADf,MACM79B,EAAqB,QAAZ69B,EADsB75C,EAAM9B,IAAI44E,SAC3BviD,eAALslB,IAAAA,OAAAA,EAAAA,EAAcp/C,QAAQoJ,IAAmBA,EAAMwZ,MAAM,eAEpE,OAAKrB,GAA4B,IAAlBA,EAAOjf,OAQf,kBAACg6E,EAAAA,QAAOA,CAACt2E,UAAWR,EAAO+2E,QAASC,WAAY,EAAGC,KAAMl7D,IAN5D,kBAAC6a,EAAAA,KAAIA,CAAC0W,QAAQ,OAAO3uC,MAAM,aAAY,O,GAS/C,CACEmN,GAAI,UACJpI,OAAQ,UACRwzE,aAAa,EACbN,KAAO72E,IACL,MAAM65C,EAA+B75C,EAAM9B,IAAI44E,SAC/C,OAAIj9B,EAAKI,SAEL,kBAACjyB,EAAAA,QAAOA,CAAClmB,QAAQ,wEACf,kBAAC6D,EAAAA,KAAIA,CAAC1L,KAAK,iBAIR,kBAACq8E,GAAyBA,CAACz8B,KAAMA,EAAM08B,QAAS,IAAMz4E,EAAQ44E,oBAAoB78B,IAC3F,IAKAu9B,GAAkBp8B,GAAkB,IAAIj6C,KAAK84C,IACjD,MAAM/tC,EAAc6f,GAAiBkuB,EAAK/tC,aAC1C,OAAO,G,uUAAA,IACF+tC,GAAAA,CACH/tC,YAAa,GAAGA,EAAYggB,SAAShgB,EAAYnR,Q,IAI/C08E,GAAWD,GAA4C,IAA1BA,EAAer6E,OAElD,IAAIozD,EAAY,KA0BhB,OAvBEA,EADEhzD,EAAK+9C,WACK,kBAACo8B,GAAAA,CAAwBtgF,MAAOmG,EAAK+9C,aACxCm8B,EAEP,kBAAC3zC,EAAAA,WAAUA,CAAChrC,QAAS,qBAAsB0Q,QAAQ,YAAYP,OAAQ,kBAACE,GAAUA,OAAK,4IAOvF,kBAACxI,MAAAA,KACC,kBAACg3E,EAAAA,iBAAgBA,CACf92E,WAAWtC,EAAAA,EAAAA,KAAI,CAAEy0C,aAAc,SAC/BinB,QAASA,EACT2d,SAAU,GACVr6E,KAAMi6E,GAAkB,GACxBK,SAAW59B,GAASA,EAAK9tC,KAE3B,kBAAChD,GAAUA,OAMf,oCACE,kBAAC3D,GAASA,CAACX,MAAM,oBAChB0rD,EAGP,CAEA,MAAMnyD,GAAY,KAAO,CACvBg5E,QAAS74E,EAAAA,GAAG;;;MAMd,SAASm5E,IAAwB,MAAEtgF,I,IAE7BA,EADJ,IAAI0gF,EAAe,yCAMnB,OAL+B,OAAb,QAAd1gF,EAAAA,EAAMwB,gBAANxB,IAAAA,OAAAA,EAAAA,EAAgB2B,QAClB++E,EAAe,qEACN1gF,EAAM0B,UACfg/E,EAAe1gF,EAAM0B,SAGrB,kBAACgrC,EAAAA,WAAUA,CAAChrC,QAAQ,yCAAyC0Q,QAAQ,YAAYP,OAAQ,kBAACE,GAAUA,OACjG2uE,EAGP,C,sgCC9JO,SAASC,KACd,MAAM,SAAErwB,EAAUtwD,MAAOkkD,EAAU,OAAEN,GAAW8M,KAC1CmN,EAAcR,KAAqB,IAClCujB,EAAiBC,IAAsBh7E,EAAAA,EAAAA,UAAyByqD,QAAAA,EAAYN,IAQnF,OANAx8C,EAAAA,EAAAA,YAAU,KACJ88C,GACFuwB,EAAmBvwB,EACrB,GACC,CAACA,IAEG,CACLnqD,KAAM,SACDy6E,GAAAA,CACH18B,eAEFp9C,QAAS,CACPg6E,0BAAAA,GACED,GAAoB72E,GAAO,SACtBA,GAAAA,CACH2S,sBAAuB3S,EAAE2S,wBAE7B,EACAokE,cAAAA,CAAe94D,GACb44D,GAAoB72E,GAAO,SACtBA,GAAAA,CACHimD,SAAUzqD,OAAOyiB,EAAMjZ,OAAOnO,UAElC,EACAmgF,kCAAAA,GACEH,GAAoB72E,GAAO,SACtBA,GAAAA,CACHkQ,8BAA+BlQ,EAAEkQ,gCAErC,EACA+mE,2BAAAA,GACEJ,GAAoB72E,GAAO,SACtBA,GAAAA,CACHkmD,uBAAwBlmD,EAAEkmD,yBAE9B,EACAgxB,+BAAAA,GACEL,GAAoB72E,GAAO,SACtBA,GAAAA,CACHmmD,2BAA4BnmD,EAAEmmD,6BAElC,EACMgxB,YAAAA,G,SAAe,YACnBtjB,EAAY+iB,EAAgB3wB,UAE5B,UACQrM,EAAOg9B,GAEblsE,GAAe,CAAC,uCAClB,CAAE,MAAO1U,GACP6T,GAAa7T,EAAgB,CAC3B,0CACA,wDAEJ,CACF,E,2LAGN,CC5DO,SAASohF,IAAe,SAAEtyE,IAC/B,MAAM7F,GAASC,EAAAA,EAAAA,YAAWlC,KACpB,KAAEb,EAAI,QAAEW,GAAY65E,KAc1B,OAZIx6E,EAAK+9C,YACPrwC,GAAa1N,EAAK+9C,WAAY,CAC5B,8CACA,gEAUF,kBAACkB,OAAAA,CAAK37C,UAAWR,EAAOo4E,aAAcl8B,SANxC,SAAkBl9B,GAChBA,EAAMq5D,iBACNx6E,EAAQq6E,cACV,GAII,kBAACI,EAAAA,SAAQA,CAAC10E,MAAM,cAAcrD,cAAY,uBACxC,kBAACsW,EAAAA,eAAcA,KACb,kBAACC,EAAAA,YAAWA,CAAClT,MAAM,yBAAyB20E,WAAY,IACtD,kBAACl0C,EAAAA,aAAYA,CACXzgC,MAAM,gCACN5J,KAAK,wBACLpC,MAAOsF,EAAKwW,qBACZ+C,SAAU5Y,EAAQg6E,+BAIxB,kBAAChhE,EAAAA,eAAcA,KACb,kBAACC,EAAAA,YAAWA,CAAClT,MAAM,0BAA0BlF,QAAQ,GAAG65E,WAAY,IAClE,kBAACxxD,EAAAA,MAAKA,CAAC/sB,KAAK,YAAYU,KAAK,SAASk9B,IAAI,IAAIhgC,MAAOsF,EAAK8pD,SAAUvwC,SAAU5Y,EAAQi6E,oBAI5F,kBAACQ,EAAAA,SAAQA,CAAC10E,MAAM,mBAAmBrD,cAAY,6BAC7C,kBAACsW,EAAAA,eAAcA,KACb,kBAACC,EAAAA,YAAWA,CACVlT,MAAM,0BACN20E,WAAY,GACZ75E,QACE,kBAAC4B,MAAAA,CAAIE,UAAWR,EAAOtB,SACrB,kBAACuJ,IAAAA,KAAE,yLAIH,kBAACA,IAAAA,KACC,kBAACnC,IAAAA,CACC/K,KAAK,qGACLgL,OAAO,SACPC,IAAI,uBACL,gBAMP0lD,aAAAA,GAEA,kBAACrnB,EAAAA,aAAYA,CACXzgC,MAAM,0BACN5J,KAAK,2BACLpC,MAAOsF,EAAK+pD,sBACZxwC,SAAU5Y,EAAQm6E,iCAMzB1W,GAAeC,qBACd,kBAAC+W,EAAAA,SAAQA,CAAC10E,MAAM,wBAAwBrD,cAAY,yBAClD,kBAACsW,EAAAA,eAAcA,KACb,kBAACC,EAAAA,YAAWA,CACVlT,MAAM,wBACNlF,QAAQ,2DACR65E,WAAY,IAEZ,kBAACl0C,EAAAA,aAAYA,CACXzgC,MAAM,+BACN5J,KAAK,wBACLpC,MAAOsF,EAAKgqD,0BACZzwC,SAAU5Y,EAAQo6E,qCAO3BpyE,EAGP,CAEA,MAAM9H,GAAaC,IAA0B,CAC3Co6E,aAAcl6E,EAAAA,GAAG;;;iCAGcF,EAAMY,OAAOkyC,OAAOC;;;;;mBAKlC/yC,EAAMgB,WAAWqZ,GAAGtZ;;IAGrC4oE,QAASzpE,EAAAA,GAAG;;WAEHF,EAAMyG,QAAQ;kBACPzG,EAAMyG,QAAQ;IAE9B/F,QAASR,EAAAA,GAAG;;gBAEEF,EAAMyG,QAAQ;;;;eAIfzG,EAAMY,OAAOC,KAAK8G;;;;;qBAKZ3H,EAAMgB,WAAWw5E;;MChIhCC,GAA8B,oCCK7B,SAASC,K,IAOazjF,EAN3B,MAAO0jF,GAAmBvkB,MACnBwkB,EAAWC,IAAgBj8E,EAAAA,EAAAA,UAAS,GAErC03D,GAAWC,EAAAA,GAAAA,eACXt/D,GAAWu/D,EAAAA,GAAAA,eAEXskB,GAAcnyD,EAAAA,EAAAA,QAAqB,QAAd1xB,EAAAA,EAASg2B,aAATh2B,IAAAA,OAAAA,EAAAA,EAAgBs+E,WAErC,WAAE/qB,EAAU,UAAEp7C,IDDb2rE,EAAAA,EAAAA,qBAA4C,CACjDz5C,iBAAkBm5C,KCEpB,MAAO,CACLv7E,KAAM,CACJ07E,YACApwB,aACAp7C,aAEFvP,QAAS,CACPg7E,YAAAA,CAAaG,GACXH,EAAaG,EACf,EACAC,MAAAA,GACE,IAAKH,EAAYjyD,QAEf,YADAytC,EAAS,GAAG7/D,IAAkBC,EAAO2U,WAIvC,MAAM6vE,EAAU,IAAIp+E,IAAIg+E,EAAYjyD,SAGhC8xD,GACFO,EAAQl+E,aAAarD,IAAI,WAAYkE,OAAO88E,IAG9CrkB,EAAS,GAAG4kB,EAAQlgF,WAAWkgF,EAAQlvE,SACzC,GAGN,CC3Be,SAASmvE,KACtB,MAAMn5E,GAASC,EAAAA,EAAAA,YAAWlC,KACpB,KAAEb,EAAI,QAAEW,GAAY66E,KAI1B,GAFAtuE,GAAyB,YAErBlN,EAAKkQ,UACP,OAAO,kBAAC9M,MAAAA,KAAI,cAId,MAAM84E,EAAc,CAClB,CAEE50E,MAAO,cACP3C,QACE,kBAACs2E,GAAcA,KACb,kBAAC73E,MAAAA,CAAIE,UAAWR,EAAO2nE,SACrB,kBAACz+D,EAAAA,OAAMA,CAACC,QAAQ,UAAUzO,KAAK,UAAS,iBAGxC,kBAACoO,GAAUA,CAAChF,QAASjG,EAAQo7E,aAQjCI,EAAc,CAClB3Y,cAF0BvmE,EAAUQ,0BAEDS,IACnCk+E,WACE,kBAACh5E,MAAAA,CAAIE,UAAWR,EAAO2nE,SACrB,kBAAC7+D,GAAUA,CAAChF,QAASjG,EAAQo7E,WAc7BM,EAAU,IAAIH,KAVDl8E,EAAKsrD,WAAW1nD,KAAK8sB,I,IAExB,EAEd,MAAO,CACLppB,OAHiD,QAArC,IAAiC1B,YAAjC,eAAuC0B,QAAS,oBAI5D3C,QAAS,kBAAC+rB,EAAcyrD,GACzB,KAKH,OACE,oCACE,kBAACl0E,GAASA,CAACX,MAAM,+BAEhB+0E,EAAQz8E,OAAS,GAChB,oCACE,kBAAC8a,EAAAA,QAAOA,KACL2hE,EAAQz4E,KAAI,CAACk4E,EAAKnmD,IACjB,kBAAChb,EAAAA,IAAGA,CACF5W,IAAK,gBAAgB4xB,IACrBjvB,MAAOo1E,EAAIx0E,MACXsT,OAAQ5a,EAAK07E,YAAc/lD,EAC3B9a,YAAa,IAAMla,EAAQg7E,aAAahmD,QAI9C,kBAAC2mD,EAAAA,MAAKA,CAACj7D,EAAG,KAGbg7D,EAAQr8E,EAAK07E,WAAW/2E,QAG/B,CAEA,MAAM9D,GAAaC,IAA0B,CAC3C2pE,QAASzpE,EAAAA,GAAG;;WAEHF,EAAMyG,QAAQ;kBACPzG,EAAMyG,QAAQ;MCrFzB,SAASg1E,KACd,OACE,kBAACC,GAAAA,OAAiBA,KAChB,kBAACC,GAAAA,MAAKA,CAAC5a,KAAMrqE,EAAO2U,QAASikC,QAAS,kBAAC6oC,GAAoBA,QAC3D,kBAACwD,GAAAA,MAAKA,CAAC5a,KAAMrqE,EAAO++E,MAAOnmC,QAAS,kBAACr1B,GAASA,QAC9C,kBAAC0hE,GAAAA,MAAKA,CAAC5a,KAAMrqE,EAAOuD,SAAUq1C,QAAS,kBAAC6rC,GAAYA,QACpD,kBAACQ,GAAAA,MAAKA,CAAC5a,KAAMrqE,EAAO4+E,gBAAiBhmC,QAAS,kBAACopC,GAAkBA,QACjE,kBAACiD,GAAAA,MAAKA,CAAC5a,KAAMrqE,EAAO4nE,gBAAiBhvB,QAAS,kBAACssC,GAAcA,QAE7D,kBAACD,GAAAA,MAAKA,CAAC5a,KAAK,KAAKzxB,QAAS,kBAACusC,GAAAA,SAAQA,CAACxpE,GAAI,GAAG5b,IAAkBC,EAAO2U,UAAWgU,SAAAA,MAGrF,CChBO,SAASy8D,IAAU,MAAE/iF,IAC1B,OACE,kBAACuO,EAAAA,WAAUA,CAACC,OAAQC,EAAAA,eAAeC,QACjC,kBAACnF,MAAAA,CAAIE,UAAU,iBACb,kBAAC2E,GAASA,CAACX,MAAM,+BAEjB,kBAACmjD,GAAYA,CACXxhD,SAAS,QACT3B,MAAM,eACN/L,QAAQ,2HACR1B,MAAOA,EACP6wD,aAAc,CAAE38C,WAAY,2BAKtC,CCPO,SAAS8uE,KACd,MAAM/5E,GAASC,EAAAA,EAAAA,YAAWlC,KACnBhH,EAAOk8D,IAAYr2D,EAAAA,EAAAA,YAE1B,OAAI7F,EACK,kBAAC+iF,GAASA,CAAC/iF,MAAOA,IAIzB,kBAACq9E,EAAAA,cAAaA,CAACnmE,QAASglD,IACrB,IACC,kBAAC+mB,EAAAA,GAAmBA,CAACC,OAAQjmF,GAC3B,kBAAC6U,GAAUA,KACT,kBAACvI,MAAAA,CAAIE,UAAWR,EAAOk6E,eACrB,kBAAC50E,EAAAA,WAAUA,CAACC,OAAQC,EAAAA,eAAemD,QACjC,kBAACrI,MAAAA,CAAIE,UAAU,iBACb,kBAACi5E,GAAMA,YASzB,ElT5BO,WACL,GAAI9jF,IACF,OAGF,MAAMwkF,EmTZD,WACL,MAAMrlF,EAAcC,IAEpB,GAAKD,GAAgBQ,EAAkB8B,IAAItC,GAI3C,OAAOQ,EAAkBiC,IAAIzC,EAC/B,CnTI0BslF,GACxB,IAAKD,EACH,OAGF,MAAM,YAAErlF,EAAW,QAAEW,EAAO,QAAED,GAAY2kF,GAEpC,KAAExwE,EAAI,SAAE7N,EAAQ,UAAE6G,GAAcrI,EAAAA,OAEhCoP,EAAaC,EAAKpV,GAAkBwO,QACpCs3E,EAAYv+E,EAASC,KAAKu+E,MAC1BC,EAAiB,IAAI53E,EAAUI,YAAYJ,EAAUsB,WAlBtC,IAACu2E,KAqBpBC,EAAAA,EAAAA,GAAe,CACblpE,IAAK9b,EACLilF,IAAK,CACH1gF,KAAMxE,EACNmlF,QAASjxE,EACT3G,QAASpO,EACTG,cACA8lF,UAAWL,GAEbx+E,KAAM,CACJu+E,MAAOD,GAETQ,iBAAkB,KACbC,EAAAA,EAAAA,GAAuB,CACxBC,gBAAgB,KAGpBC,SAAS,EACTC,WAAaj8D,I,IACNA,EAAAA,EAEyBA,EAF9B,OAAyB,QAApBA,EAAe,QAAfA,EAAAA,EAAMlc,KAAK+G,YAAXmV,IAAAA,OAAAA,EAAAA,EAAiBzN,WAAjByN,IAAAA,EAAAA,EAAwB,IAAInR,SAASpZ,IACxCuqB,EAAMlc,KAAKgH,KAAO,CAChB9P,KAAM,IAAI+P,gBAA+B,QAAfiV,EAAAA,EAAMlc,KAAK+G,YAAXmV,IAAAA,OAAAA,EAAAA,EAAiBzN,KAAKha,IAAI,oBAAsB,IAGrEynB,GAGF,IAAI,IAhDgCtpB,EAAO8kF,CAoD1D,CkTjDAU,GA6BA,MAAMn9E,GAAaC,IAA0B,CAC3Ck8E,cAAeh8E,EAAAA,GAAG;;;eAGLF,EAAMyG,QAAQ,MAAMzG,EAAMyG,QAAQ,MAAMzG,EAAMyG,QAAQ,MAAMzG,EAAMyG,QAAQ","sources":["webpack://grafana-pyroscope-app/./shared/infrastructure/react-query/queryClient.ts","webpack://grafana-pyroscope-app/./constants.ts","webpack://grafana-pyroscope-app/./version.ts","webpack://grafana-pyroscope-app/./shared/infrastructure/tracking/getEnvironment.ts","webpack://grafana-pyroscope-app/./shared/infrastructure/tracking/faro/faro-environments.ts","webpack://grafana-pyroscope-app/./shared/infrastructure/tracking/faro/faro.ts","webpack://grafana-pyroscope-app/./shared/infrastructure/tracking/logger.ts","webpack://grafana-pyroscope-app/./shared/infrastructure/userStorage.ts","webpack://grafana-pyroscope-app/./shared/domain/noOp.ts","webpack://grafana-pyroscope-app/./shared/infrastructure/http/HttpClientError.ts","webpack://grafana-pyroscope-app/./shared/infrastructure/http/HttpClient.ts","webpack://grafana-pyroscope-app/./shared/infrastructure/http/ApiClient.ts","webpack://grafana-pyroscope-app/./app/components/Onboarding/infrastructure/statsApiClient.ts","webpack://grafana-pyroscope-app/./app/components/Onboarding/domain/useOnboarding.tsx","webpack://grafana-pyroscope-app/./app/components/Onboarding/infrastructure/useFetchTenantStats.ts","webpack://grafana-pyroscope-app/./shared/components/QueryAnalysisTooltip/QueryAnalysisTooltip.tsx","webpack://grafana-pyroscope-app/./shared/ui/PyroscopeLogo.tsx","webpack://grafana-pyroscope-app/./shared/ui/PluginInfo.tsx","webpack://grafana-pyroscope-app/./shared/ui/PageTitle.tsx","webpack://grafana-pyroscope-app/./app/components/Onboarding/ui/EmptyLoadingPage.tsx","webpack://grafana-pyroscope-app/./app/components/Onboarding/ui/StyledLink.tsx","webpack://grafana-pyroscope-app/./app/components/Onboarding/ui/NoDataSourcePage.tsx","webpack://grafana-pyroscope-app/./app/components/Onboarding/domain/useOnboardingModal.tsx","webpack://grafana-pyroscope-app/./app/components/Onboarding/infrastructure/useFetchInstances.tsx","webpack://grafana-pyroscope-app/./app/components/Onboarding/ui/OnboardingModal.tsx","webpack://grafana-pyroscope-app/./app/components/Onboarding/ui/OnboardingPage.tsx","webpack://grafana-pyroscope-app/./app/components/Onboarding/Onboarding.tsx","webpack://grafana-pyroscope-app/./shared/components/Common/BackButton.tsx","webpack://grafana-pyroscope-app/./shared/domain/reportInteraction.ts","webpack://grafana-pyroscope-app/./shared/infrastructure/tracking/useReportPageInitialized.ts","webpack://grafana-pyroscope-app/./pages/AdHocView/ui/AdHocColums.tsx","webpack://grafana-pyroscope-app/./shared/domain/displayStatus.ts","webpack://grafana-pyroscope-app/./pages/AdHocView/infrastructure/adHocProfileClient.ts","webpack://grafana-pyroscope-app/./pages/AdHocView/infrastructure/helpers/stripBase64Prefix.ts","webpack://grafana-pyroscope-app/./pages/AdHocView/domain/useUploadFile.ts","webpack://grafana-pyroscope-app/./pages/AdHocView/ui/AdHocFileDropZone.tsx","webpack://grafana-pyroscope-app/./pages/AdHocView/domain/accepted-file-types.ts","webpack://grafana-pyroscope-app/./shared/components/FlameGraph/components/infrastructure/flamegraphDotComApiClient.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreDiffFlameGraph/domain/types.ts","webpack://grafana-pyroscope-app/./shared/components/FlameGraph/components/domain/getExportFilename.ts","webpack://grafana-pyroscope-app/./shared/components/FlameGraph/components/domain/useExportMenu.ts","webpack://grafana-pyroscope-app/./shared/components/FlameGraph/components/ExportMenu.tsx","webpack://grafana-pyroscope-app/./shared/components/FlameGraph/components/ExportData.tsx","webpack://grafana-pyroscope-app/./shared/components/FlameGraph/domain/flamebearerToDataFrameDTO.ts","webpack://grafana-pyroscope-app/./shared/components/FlameGraph/FlameGraph.tsx","webpack://grafana-pyroscope-app/./pages/AdHocView/ui/AdHocFlameGraph.tsx","webpack://grafana-pyroscope-app/./pages/AdHocView/ui/AdHocProfileTypeSelector.tsx","webpack://grafana-pyroscope-app/./pages/AdHocView/ui/AdHocSpinner.tsx","webpack://grafana-pyroscope-app/./pages/AdHocView/ui/tabs/AdHocSingle.tsx","webpack://grafana-pyroscope-app/./pages/AdHocView/ui/tabs/AdHocComparison.tsx","webpack://grafana-pyroscope-app/./pages/AdHocView/ui/AdHocTabs.tsx","webpack://grafana-pyroscope-app/./pages/AdHocView/AdHocView.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/components/SceneFunctionDetailsPanel/ui/GitHubCallbackView.tsx","webpack://grafana-pyroscope-app/./shared/domain/prepareHistoryEntry.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/domain/events/EventTimeseriesDataReceived.ts","webpack://grafana-pyroscope-app/./shared/components/QueryBuilder/domain/types.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/infrastructure/series/http/DataSourceProxyClient.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/infrastructure/labels/http/LabelsApiClient.ts","webpack://grafana-pyroscope-app/./shared/infrastructure/MemoryCacheClient.ts","webpack://grafana-pyroscope-app/./shared/types/helpers/invariant.ts","webpack://grafana-pyroscope-app/./shared/infrastructure/AbstractRepository.ts","webpack://grafana-pyroscope-app/./shared/infrastructure/labels/LabelsApiClient.ts","webpack://grafana-pyroscope-app/./shared/infrastructure/labels/labelsRepository.ts","webpack://grafana-pyroscope-app/./shared/components/QueryBuilder/domain/helpers/areFiltersEqual.ts","webpack://grafana-pyroscope-app/./shared/components/QueryBuilder/domain/helpers/buildIsEmptyFilter.ts","webpack://grafana-pyroscope-app/./shared/components/QueryBuilder/domain/helpers/filtersToQuery.ts","webpack://grafana-pyroscope-app/./shared/components/QueryBuilder/domain/helpers/getLastFilter.ts","webpack://grafana-pyroscope-app/./shared/components/QueryBuilder/domain/helpers/isMultipleValuesOperator.ts","webpack://grafana-pyroscope-app/./shared/components/QueryBuilder/domain/helpers/isPartialFilter.ts","webpack://grafana-pyroscope-app/./shared/components/QueryBuilder/domain/helpers/isSwitchingOperatorMode.ts","webpack://grafana-pyroscope-app/./shared/components/QueryBuilder/domain/helpers/queryToFilters.ts","webpack://grafana-pyroscope-app/./shared/components/QueryBuilder/domain/helpers/toggleCompleteFilters.ts","webpack://grafana-pyroscope-app/./shared/components/QueryBuilder/domain/actions.ts","webpack://grafana-pyroscope-app/./shared/components/QueryBuilder/domain/helpers/getFilterUnderEdition.ts","webpack://grafana-pyroscope-app/./shared/components/QueryBuilder/domain/guards.ts","webpack://grafana-pyroscope-app/./shared/components/QueryBuilder/infrastructure/operatorsRepository.ts","webpack://grafana-pyroscope-app/./shared/components/QueryBuilder/domain/helpers/isPrivateLabel.ts","webpack://grafana-pyroscope-app/./shared/components/QueryBuilder/domain/services.ts","webpack://grafana-pyroscope-app/./shared/components/QueryBuilder/domain/states/autoSuggestProxy.ts","webpack://grafana-pyroscope-app/./shared/components/QueryBuilder/ui/constants.ts","webpack://grafana-pyroscope-app/./shared/components/QueryBuilder/domain/helpers/isRegexOperator.ts","webpack://grafana-pyroscope-app/./shared/components/QueryBuilder/domain/states/idle.ts","webpack://grafana-pyroscope-app/./shared/components/QueryBuilder/domain/states/loadLabels.ts","webpack://grafana-pyroscope-app/./shared/components/QueryBuilder/domain/states/loadLabelValues.ts","webpack://grafana-pyroscope-app/./shared/components/QueryBuilder/domain/states/loadOperators.ts","webpack://grafana-pyroscope-app/./shared/components/QueryBuilder/domain/stateMachine.ts","webpack://grafana-pyroscope-app/./shared/domain/localeCompare.ts","webpack://grafana-pyroscope-app/./shared/components/QueryBuilder/ui/selects/MultipleEditionSelect.tsx","webpack://grafana-pyroscope-app/./shared/components/QueryBuilder/ui/inputs/SingleEditionInput.tsx","webpack://grafana-pyroscope-app/./shared/components/QueryBuilder/ui/selects/SingleEditionSelect.tsx","webpack://grafana-pyroscope-app/./shared/components/QueryBuilder/ui/chiclets/ChicletAttributeOperator.tsx","webpack://grafana-pyroscope-app/./shared/components/QueryBuilder/ui/chiclets/ChicletAttributeOperatorValue.tsx","webpack://grafana-pyroscope-app/./shared/components/QueryBuilder/ui/chiclets/PartialChiclet.tsx","webpack://grafana-pyroscope-app/./shared/components/QueryBuilder/ui/chiclets/Chiclet.tsx","webpack://grafana-pyroscope-app/./shared/components/QueryBuilder/ui/chiclets/ChicletsList.tsx","webpack://grafana-pyroscope-app/./shared/components/QueryBuilder/ui/selects/SingleSelect.tsx","webpack://grafana-pyroscope-app/./shared/components/QueryBuilder/ui/selects/DisabledSelect.tsx","webpack://grafana-pyroscope-app/./shared/components/QueryBuilder/ui/selects/MultipleSelect.tsx","webpack://grafana-pyroscope-app/./shared/components/QueryBuilder/QueryBuilder.tsx","webpack://grafana-pyroscope-app/./shared/components/QueryBuilder/domain/useStateMachine.tsx","webpack://grafana-pyroscope-app/./shared/components/QueryBuilder/ui/hooks.ts","webpack://grafana-pyroscope-app/./shared/infrastructure/profile-metrics/getProfileMetric.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/infrastructure/pyroscope-data-sources.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/domain/variables/ProfileMetricVariable.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/domain/variables/ServiceNameVariable/ServiceNameVariable.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/domain/variables/ServiceNameVariable/domain/useBuildServiceNameOptions.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/domain/useBuildPyroscopeQuery.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/domain/variables/ProfilesDataSourceVariable.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/domain/variables/FiltersVariable/filters-ops.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/domain/variables/FiltersVariable/FiltersVariable.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/helpers/getSceneVariableValue.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneByVariableRepeaterGrid/components/ScenePanelTypeSwitcher.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/helpers/getColorByIndex.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/infrastructure/helpers/getSeriesLabelFieldName.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/infrastructure/helpers/getSeriesStatsValue.ts","webpack://grafana-pyroscope-app/./shared/domain/url-params/parseQuery.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/infrastructure/withPreventInvalidQuery.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/infrastructure/timeseries/buildTimeSeriesQueryRunner.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneByVariableRepeaterGrid/infrastructure/data-transformations.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneLabelValuesBarGauge.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/helpers/formatSingleSeriesDisplayName.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneLabelValuesHistogram.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneLabelValuesTable.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/helpers/computeRoundedTimeRange.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/infrastructure/labels/LabelsDataSource.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/infrastructure/series/helpers/getProfileMetricLabel.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneLabelValuesTimeseries/SceneTimeseriesMenu.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/helpers/getExploreUrl.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/domain/useGetPluginExtensionLink.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneLabelValuesTimeseries/SceneLabelValuesTimeseries.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/helpers/vizPanelBuilder.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneByVariableRepeaterGrid/components/SceneEmptyState/ui/useMousePosition.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneByVariableRepeaterGrid/components/SceneEmptyState/ui/GrotNotFound.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneByVariableRepeaterGrid/components/SceneEmptyState/ui/EmptyState.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneByVariableRepeaterGrid/components/SceneEmptyState/SceneEmptyState.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneByVariableRepeaterGrid/components/SceneErrorState/SceneErrorState.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneByVariableRepeaterGrid/components/SceneLayoutSwitcher.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneByVariableRepeaterGrid/components/SceneNoDataSwitcher.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneByVariableRepeaterGrid/components/SceneQuickFilter.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/infrastructure/favorites/FavoritesDataSource.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/infrastructure/helpers/interpolateQueryRunnerVariables.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/domain/actions/FavAction.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneByVariableRepeaterGrid/domain/sortFavGridItems.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneByVariableRepeaterGrid/SceneByVariableRepeaterGrid.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/domain/events/EventExpandPanel.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/domain/events/EventSelectLabel.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/domain/events/EventViewServiceFlameGraph.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/domain/events/EventViewServiceLabels.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/domain/events/EventViewServiceProfiles.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/domain/actions/SelectAction.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreAllServices/SceneExploreAllServices.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneDrawer.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/domain/variables/FavoriteVariable.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreFavorites/SceneExploreFavorites.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/domain/variables/GroupByVariable/GroupBySelector.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/domain/variables/GroupByVariable/GroupByVariable.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneMainServiceTimeseries.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/domain/events/EventViewDiffFlameGraph.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceLabels/components/SceneGroupByLabels/domain/events/EventSelectForCompare.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceLabels/components/SceneGroupByLabels/components/SceneLabelValuesGrid/components/SceneStatsPanel/ui/CompareAction.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceLabels/components/SceneGroupByLabels/components/SceneLabelValuesGrid/components/SceneStatsPanel/ui/StatsPanel.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceLabels/components/SceneGroupByLabels/components/SceneLabelValuesGrid/components/SceneStatsPanel/SceneStatsPanel.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceLabels/components/SceneGroupByLabels/components/SceneLabelValuesGrid/components/SceneLabelValuePanel.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceLabels/components/SceneGroupByLabels/components/SceneLabelValuesGrid/infrastructure/buildLabelValuesGridQueryRunner.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceLabels/components/SceneGroupByLabels/components/SceneLabelValuesGrid/SceneLabelValuesGrid.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceLabels/components/SceneGroupByLabels/domain/events/EventClearLabelFromFilters.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceLabels/components/SceneGroupByLabels/domain/events/EventExcludeLabelFromFilters.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceLabels/components/SceneGroupByLabels/domain/events/EventIncludeLabelInFilters.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceLabels/components/SceneGroupByLabels/domain/actions/IncludeExcludeAction/ui/FilterButtons.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceLabels/components/SceneGroupByLabels/domain/actions/IncludeExcludeAction/IncludeExcludeAction.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceLabels/components/SceneGroupByLabels/ui/CompareControls.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceLabels/components/SceneGroupByLabels/SceneGroupByLabels.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceLabels/SceneExploreServiceLabels.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceProfileTypes/SceneExploreServiceProfileTypes.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/domain/buildTimeRange.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/domain/variables/SpanSelectorVariable.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/infrastructure/series/formatSeriesToProfileMetrics.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/infrastructure/series/formatSeriesToServices.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/infrastructure/series/http/DataSourceProxyClientBuilder.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/infrastructure/series/http/formatSeriesResponse.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/infrastructure/series/http/SeriesApiClient.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/infrastructure/series/http/seriesRepository.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/infrastructure/series/SeriesDataSource.ts","webpack://grafana-pyroscope-app/./shared/pyroscope-api/types/v1/types_pb.ts","webpack://grafana-pyroscope-app/./shared/pyroscope-api/settings/v1/recording_rules_pb.ts","webpack://grafana-pyroscope-app/./shared/infrastructure/recording-rules/recordingRulesApiClient.ts","webpack://grafana-pyroscope-app/./shared/infrastructure/recording-rules/useFetchRecordingRules.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneCreateMetricModal/domain/useCreateRecordingRule.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneCreateMetricModal/SceneCreateRecordingRuleModal.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreDiffFlameGraph/components/SceneComparePanel/domain/events/EventEnableSyncTimeRanges.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreDiffFlameGraph/components/SceneComparePanel/domain/events/EventSyncRefresh.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreDiffFlameGraph/components/SceneComparePanel/domain/events/EventSyncTimeRanges.ts","webpack://grafana-pyroscope-app/./shared/components/SceneTimePickerWithoutSync/SceneTimePickerWithoutSync.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreDiffFlameGraph/components/SceneComparePanel/domain/parseUrlParam.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreDiffFlameGraph/components/SceneComparePanel/domain/RangeAnnotation.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreDiffFlameGraph/components/SceneComparePanel/components/SceneTimeRangeWithAnnotations.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreDiffFlameGraph/components/SceneComparePanel/domain/evaluateTimeRange.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreDiffFlameGraph/components/SceneComparePanel/domain/events/EventSwitchTimerangeSelectionMode.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreDiffFlameGraph/components/SceneComparePanel/domain/actions/SwitchTimeRangeSelectionModeAction.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreDiffFlameGraph/components/SceneComparePanel/infrastructure/buildCompareTimeSeriesQueryRunner.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreDiffFlameGraph/components/SceneComparePanel/ui/colors.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreDiffFlameGraph/components/SceneComparePanel/SceneComparePanel.tsx","webpack://grafana-pyroscope-app/./shared/domain/useToggleSidePanel.ts","webpack://grafana-pyroscope-app/./shared/infrastructure/settings/PluginSettings.ts","webpack://grafana-pyroscope-app/./shared/infrastructure/settings/settingsApiClient.ts","webpack://grafana-pyroscope-app/./shared/infrastructure/settings/useFetchPluginSettings.ts","webpack://grafana-pyroscope-app/./shared/ui/InlineBanner.tsx","webpack://grafana-pyroscope-app/./shared/ui/Panel/GrafanaPanelBox/DelayRender.tsx","webpack://grafana-pyroscope-app/./shared/ui/Panel/GrafanaPanelBox/PanelMenu.tsx","webpack://grafana-pyroscope-app/./shared/ui/Panel/GrafanaPanelBox/HoverWidget.tsx","webpack://grafana-pyroscope-app/./shared/ui/Panel/GrafanaPanelBox/TitleItem.tsx","webpack://grafana-pyroscope-app/./shared/ui/Panel/GrafanaPanelBox/PanelDescription.tsx","webpack://grafana-pyroscope-app/./shared/ui/Panel/GrafanaPanelBox/PanelStatus.tsx","webpack://grafana-pyroscope-app/./shared/ui/Panel/GrafanaPanelBox/GrafanaPanelBox.tsx","webpack://grafana-pyroscope-app/./shared/ui/Panel/Panel.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneAiPanel/components/AiButton/AIButton.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneAiPanel/components/AiButton/infrastructure/useFetchLlmPluginStatus.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneAiPanel/components/AiReply.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneAiPanel/components/FollowUpForm.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneAiPanel/domain/buildLlmPrompts.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/infrastructure/profiles/ProfileApiClient.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneAiPanel/SceneAiPanel.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneAiPanel/infrastructure/useFetchDotProfiles.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneAiPanel/infrastructure/cleanupDotResponse.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneAiPanel/domain/useOpenAiChatCompletions.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreDiffFlameGraph/domain/events/EventDiffAutoSelect.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreDiffFlameGraph/domain/events/EventDiffChoosePreset.tsx","webpack://grafana-pyroscope-app/./shared/domain/url-params/useMaxNodesFromUrl.ts","webpack://grafana-pyroscope-app/./shared/domain/url-params/useUrlSearchParams.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreDiffFlameGraph/components/SceneDiffFlameGraph/infrastructure/DiffProfileApiClient.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreDiffFlameGraph/components/SceneDiffFlameGraph/infrastructure/useFetchDiffProfile.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreDiffFlameGraph/components/SceneDiffFlameGraph/ui/MissingSelectionsBanner.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreDiffFlameGraph/components/SceneDiffFlameGraph/SceneDiffFlameGraph.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/GiveFeedbackButton.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreDiffFlameGraph/components/ScenePresetsPicker/ScenePresetsPicker.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreDiffFlameGraph/domain/behaviours/syncYAxis.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreDiffFlameGraph/SceneExploreDiffFlameGraph.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/components/SceneFunctionDetailsPanel/infrastructure/VcsClient.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/components/SceneFunctionDetailsPanel/components/GitHubContextProvider/infrastructure/GitSessionCookie.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/components/SceneFunctionDetailsPanel/components/GitHubContextProvider/infrastructure/GitSessionCookieManager.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/components/SceneFunctionDetailsPanel/components/GitHubContextProvider/domain/openLoginPopup.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/components/SceneFunctionDetailsPanel/components/GitHubContextProvider/domain/githubLogin.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/components/SceneFunctionDetailsPanel/components/GitHubContextProvider/domain/authFromUrl.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/components/SceneFunctionDetailsPanel/components/GitHubContextProvider/domain/usePollGitHubPopup.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/components/SceneFunctionDetailsPanel/components/GitHubContextProvider/GitHubContext.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/components/SceneFunctionDetailsPanel/components/GitHubContextProvider/infrastructure/PrivateVcsClient.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/components/SceneFunctionDetailsPanel/components/GitHubContextProvider/GitHubContextProvider.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/components/SceneFunctionDetailsPanel/components/GitHubContextProvider/domain/generateNonce.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/components/SceneFunctionDetailsPanel/components/GitHubContextProvider/domain/useGithubSessionCookie.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/components/SceneFunctionDetailsPanel/domain/FunctionVersionContext.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/domain/events/RemoveSpanSelector.ts","webpack://grafana-pyroscope-app/./shared/infrastructure/settings/featureToggles.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/infrastructure/flame-graph/buildFlameGraphQueryRunner.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/infrastructure/PprofRequest.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/infrastructure/PprofApiClient.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/components/SceneExportMenu/domain/getExportFilename.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/components/SceneExportMenu/infrastructure/flamegraphDotComApiClient.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/components/SceneExportMenu/SceneExportMenu.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/components/SceneFunctionDetailsPanel/components/GitHubContextProvider/useGitHubContext.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/components/SceneFunctionDetailsPanel/domain/useGitHubIntegration.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/components/SceneFunctionDetailsPanel/domain/buildStackTrace.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/components/SceneFunctionDetailsPanel/components/AiSuggestionsPanel/domain/buildLlmSuggestionPrompts.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/components/SceneFunctionDetailsPanel/components/AiSuggestionsPanel/domain/useAiSuggestionsPanel.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/components/SceneFunctionDetailsPanel/components/AiSuggestionsPanel/domain/useOpenAiSuggestions.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/components/SceneFunctionDetailsPanel/components/AiSuggestionsPanel/AiSuggestionsPanel.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/components/SceneFunctionDetailsPanel/components/CodeContainer/domain/annotateLines.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/components/SceneFunctionDetailsPanel/components/CodeContainer/domain/buildGithubUrlForFunction.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/components/SceneFunctionDetailsPanel/components/CodeContainer/domain/useCodeContainer.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/components/SceneFunctionDetailsPanel/components/CodeContainer/infrastructure/useFetchVCSFile.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/components/SceneFunctionDetailsPanel/domain/buildUnitFormatter.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/components/SceneFunctionDetailsPanel/components/CodeContainer/ui/Code.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/components/SceneFunctionDetailsPanel/components/CodeContainer/CodeContainer.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/components/SceneFunctionDetailsPanel/components/GitHubRepository.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/components/SceneFunctionDetailsPanel/domain/getCommitsWithSamples.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/components/SceneFunctionDetailsPanel/domain/isGitHubRepository.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/components/SceneFunctionDetailsPanel/domain/getRepositoryDetails.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/components/SceneFunctionDetailsPanel/domain/convertPprofToFunctionDetails.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/components/SceneFunctionDetailsPanel/infrastructure/fetchCommitsInfo.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/components/SceneFunctionDetailsPanel/infrastructure/helpers/getTotalSum.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/components/SceneFunctionDetailsPanel/infrastructure/helpers/sortByTotal.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/components/SceneFunctionDetailsPanel/infrastructure/useFetchFunctionsDetails.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/components/SceneFunctionDetailsPanel/domain/getRelativeTimeString.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/components/SceneFunctionDetailsPanel/domain/formatCommitDate.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/components/SceneFunctionDetailsPanel/ui/CommitOption.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/components/SceneFunctionDetailsPanel/ui/CommitOptionSelected.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/components/SceneFunctionDetailsPanel/ui/CommitSelect.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/components/SceneFunctionDetailsPanel/ui/GitHubIntegrationBanner.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/components/SceneFunctionDetailsPanel/ui/InlineSpinner.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/components/SceneFunctionDetailsPanel/ui/OverrideRepositoryDetailsButton.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/components/SceneFunctionDetailsPanel/SceneFunctionDetailsPanel.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/components/SceneFunctionDetailsPanel/domain/formatFileName.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/SpanSelectorLabel.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/SceneFlameGraph.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneCreateMetricModal/domain/useMenuOption.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/SceneExploreServiceFlameGraph.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneProfilesExplorer/components/domain/useHeader.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneProfilesExplorer/components/domain/builsShareableUrl.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneProfilesExplorer/components/ui/ExplorationTypeSelector.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneProfilesExplorer/components/Header.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneProfilesExplorer/SceneProfilesExplorer.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/ProfilesExplorerView.tsx","webpack://grafana-pyroscope-app/./pages/RecordingRulesView/DeleteRecordingRuleButton.tsx","webpack://grafana-pyroscope-app/./pages/RecordingRulesView/domain/useRecordingRulesView.ts","webpack://grafana-pyroscope-app/./pages/RecordingRulesView/RecordingRulesView.tsx","webpack://grafana-pyroscope-app/./pages/SettingsView/components/UISettingsView/domain/useUISettingsView.ts","webpack://grafana-pyroscope-app/./pages/SettingsView/components/UISettingsView/UISettingsView.tsx","webpack://grafana-pyroscope-app/./pages/SettingsView/domain/useSettingsExtensions.ts","webpack://grafana-pyroscope-app/./pages/SettingsView/domain/useSettingsView.ts","webpack://grafana-pyroscope-app/./pages/SettingsView/SettingsView.tsx","webpack://grafana-pyroscope-app/./app/Routes.tsx","webpack://grafana-pyroscope-app/./app/ui/ErrorPage.tsx","webpack://grafana-pyroscope-app/./app/App.tsx","webpack://grafana-pyroscope-app/./shared/infrastructure/tracking/faro/getFaroEnvironment.ts"],"sourcesContent":["import { QueryClient } from '@tanstack/react-query';\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      networkMode: 'always',\n      retry: false,\n      refetchOnWindowFocus: false,\n    },\n  },\n});\n","import plugin from './plugin.json';\n\nexport const PYROSCOPE_APP_ID = plugin.id;\n\nexport const PLUGIN_BASE_URL = `/a/${PYROSCOPE_APP_ID}`;\n\nexport enum ROUTES {\n  EXPLORE = '/explore',\n  ADHOC = '/ad-hoc',\n  SETTINGS = '/settings',\n  RECORDING_RULES = '/recording-rules',\n  GITHUB_CALLBACK = '/github/callback',\n}\n","export const GIT_COMMIT = 'dev';\n","export type Environment = 'local' | 'dev' | 'ops' | 'prod';\n\nconst MATCHERS: Array<{ regExp: RegExp; environment: Environment }> = [\n  {\n    regExp: /localhost/,\n    environment: 'local',\n  },\n  {\n    regExp: /grafana-dev\\.net/,\n    environment: 'dev',\n  },\n  {\n    regExp: /grafana-ops\\.net/,\n    environment: 'ops',\n  },\n  {\n    regExp: /grafana\\.net/,\n    environment: 'prod',\n  },\n];\n\nexport function getEnvironment(): Environment | null {\n  if (!window?.location?.host) {\n    return null;\n  }\n\n  const found = MATCHERS.find(({ regExp }) => regExp.test(window.location.host));\n\n  return found ? found.environment : null;\n}\n","import { Environment } from '../getEnvironment';\nimport { FaroEnvironment } from './getFaroEnvironment';\n\nexport const FARO_ENVIRONMENTS = new Map<Environment, FaroEnvironment>([\n  // Uncomment this map entry to test from your local machine\n  // [\n  //   'local',\n  //   {\n  //     environment: 'local',\n  //     appName: 'grafana-pyroscope-local',\n  //     faroUrl: 'https://faro-collector-ops-eu-south-0.grafana-ops.net/collect/d6ca259b3387e6ddd641973d0fad3ed0',\n  //   },\n  // ],\n  // Always keep the options below\n  [\n    'dev',\n    {\n      environment: 'dev',\n      appName: 'grafana-pyroscope-dev',\n      faroUrl: 'https://faro-collector-ops-eu-south-0.grafana-ops.net/collect/48e03a2647389f2f6494af7f975b4084',\n    },\n  ],\n  [\n    'ops',\n    {\n      environment: 'ops',\n      appName: 'grafana-pyroscope-ops',\n      faroUrl: 'https://faro-collector-ops-eu-south-0.grafana-ops.net/collect/b5cfd5eeb412cf5e74bd828b4ddd17ff',\n    },\n  ],\n  [\n    'prod',\n    {\n      environment: 'prod',\n      appName: 'grafana-pyroscope-prod',\n      faroUrl: 'https://faro-collector-ops-eu-south-0.grafana-ops.net/collect/6cbe17b3af4b72ce5936bf4d15a5c393',\n    },\n  ],\n]);\n","import { Faro, getWebInstrumentations, initializeFaro } from '@grafana/faro-web-sdk';\nimport { config } from '@grafana/runtime';\n\nimport { PLUGIN_BASE_URL, PYROSCOPE_APP_ID } from '../../../../constants';\nimport { GIT_COMMIT } from '../../../../version';\nimport { getFaroEnvironment } from './getFaroEnvironment';\n\nlet faro: Faro | null = null;\n\nexport const getFaro = () => faro;\nexport const setFaro = (instance: Faro | null) => (faro = instance);\n\nexport function initFaro() {\n  if (getFaro()) {\n    return;\n  }\n\n  const faroEnvironment = getFaroEnvironment();\n  if (!faroEnvironment) {\n    return;\n  }\n\n  const { environment, faroUrl, appName } = faroEnvironment;\n\n  const { apps, bootData, buildInfo } = config;\n\n  const appRelease = apps[PYROSCOPE_APP_ID].version;\n  const userEmail = bootData.user.email;\n  const grafanaVersion = `v${buildInfo.version} (${buildInfo.edition})`;\n\n  setFaro(\n    initializeFaro({\n      url: faroUrl,\n      app: {\n        name: appName,\n        release: appRelease,\n        version: GIT_COMMIT,\n        environment,\n        namespace: grafanaVersion, // :man_shrug:\n      },\n      user: {\n        email: userEmail,\n      },\n      instrumentations: [\n        ...getWebInstrumentations({\n          captureConsole: false,\n        }),\n      ],\n      isolate: true,\n      beforeSend: (event) => {\n        if ((event.meta.page?.url ?? '').includes(PLUGIN_BASE_URL)) {\n          event.meta.view = {\n            name: new URLSearchParams(event.meta.page?.url).get('explorationType') || '',\n          };\n\n          return event;\n        }\n\n        return null;\n      },\n    })\n  );\n}\n","import { LogLevel } from '@grafana/faro-web-sdk';\nimport { getFaro } from '@shared/infrastructure/tracking/faro/faro';\n\nimport { Environment, getEnvironment } from './getEnvironment';\n\nexport type ErrorContext = Record<string, string>;\n\nexport class Logger {\n  #environment: Environment | null;\n\n  constructor() {\n    this.#environment = getEnvironment();\n  }\n\n  #callConsole(methodName: 'trace' | 'debug' | 'info' | 'log' | 'warn' | 'error', args: any[]) {\n    // silence console in production\n    if (this.#environment !== 'prod') {\n      console[methodName](...args); // eslint-disable-line no-console\n    }\n  }\n\n  trace() {\n    this.#callConsole('trace', []);\n\n    getFaro()?.api.pushLog([], {\n      level: LogLevel.TRACE,\n    });\n  }\n\n  debug(...args: any) {\n    this.#callConsole('debug', args);\n\n    getFaro()?.api.pushLog(args, {\n      level: LogLevel.DEBUG,\n    });\n  }\n\n  info(...args: any) {\n    this.#callConsole('info', args);\n\n    getFaro()?.api.pushLog(args, {\n      level: LogLevel.INFO,\n    });\n  }\n\n  log(...args: any) {\n    this.#callConsole('log', args);\n\n    getFaro()?.api.pushLog(args, {\n      level: LogLevel.LOG,\n    });\n  }\n\n  warn(...args: any) {\n    this.#callConsole('warn', args);\n\n    getFaro()?.api.pushLog(args, {\n      level: LogLevel.WARN,\n    });\n  }\n\n  error(error: Error, context?: ErrorContext) {\n    this.#callConsole('error', [error]);\n\n    if (context) {\n      this.#callConsole('error', ['Error context', context]);\n    }\n\n    // does not report an error, but an exception ;)\n    getFaro()?.api.pushError(error, {\n      context,\n    });\n  }\n}\n\nexport const logger = new Logger();\n","import { logger } from '@shared/infrastructure/tracking/logger';\n\nimport plugin from '../../plugin.json';\n\nclass UserStorage {\n  #storage: Storage = window.localStorage;\n\n  KEYS = {\n    SETTINGS: `${plugin.id}.userSettings`,\n    GITHUB_INTEGRATION: `${plugin.id}.gitHubIntegration`,\n    PROFILES_EXPLORER: `${plugin.id}.profilesExplorer`,\n  };\n\n  has(itemName: string): boolean {\n    return this.#storage.hasOwnProperty(itemName);\n  }\n\n  get(itemName: string): null | any {\n    if (!this.has(itemName)) {\n      return null;\n    }\n\n    try {\n      return JSON.parse(this.#storage.getItem(itemName) as string);\n    } catch (error) {\n      logger.error(error as Error, { info: `Error parsing JSON for storage item \"${itemName}\"!` });\n      return null;\n    }\n  }\n\n  set(itemName: string, value: any): void {\n    try {\n      this.#storage.setItem(itemName, JSON.stringify(value));\n    } catch (error) {\n      logger.error(error as Error, { info: `Error setting storage item \"${itemName}\"!` });\n    }\n  }\n}\n\nexport const userStorage = new UserStorage();\n","export const noOp = () => {};\n","export class HttpClientError extends Error {\n  response: Response;\n  reason?: any;\n\n  constructor(response: Response, responseJson?: Record<string, any>) {\n    let message = `HTTP ${response.status} (${response.statusText || '?'})`;\n\n    if (responseJson?.message) {\n      message = `${message} → ${responseJson.message}`;\n    }\n\n    super(message);\n\n    this.response = response;\n  }\n}\n","import { noOp } from '@shared/domain/noOp';\n\nimport { HttpClientError } from './HttpClientError';\n\nexport class HttpClient {\n  baseUrl = '';\n  defaultHeaders = {};\n  abortController?: AbortController | null = null;\n\n  constructor(baseUrl: string, defaultHeaders: Record<string, string> = {}) {\n    this.baseUrl = baseUrl;\n    this.defaultHeaders = Object.freeze(defaultHeaders);\n  }\n\n  async fetch(pathname: string, options?: RequestInit) {\n    this.abortController = new AbortController();\n    const { signal } = this.abortController;\n\n    const fullUrl = `${this.baseUrl}${pathname}`;\n    const headers = { ...this.defaultHeaders, ...options?.headers };\n    const fullOptions = {\n      signal, // we allow signal to be passed as an option\n      ...options,\n      headers,\n    };\n\n    let response;\n\n    try {\n      response = await fetch(fullUrl, fullOptions);\n\n      if (!response.ok) {\n        throw new HttpClientError(response, await response.json().catch(noOp));\n      }\n    } catch (error) {\n      if (this.isAbortError(error)) {\n        (error as any).reason = options?.signal?.reason || signal.reason;\n      }\n\n      throw error;\n    } finally {\n      this.abortController = null;\n    }\n\n    return response;\n  }\n\n  abort(reason?: any) {\n    if (this.abortController) {\n      this.abortController.abort(reason);\n    }\n  }\n\n  isAbortError(error: unknown) {\n    return error instanceof DOMException && error.name === 'AbortError';\n  }\n}\n","import { DataSourceInstanceSettings, DataSourceJsonData } from '@grafana/data';\nimport { config } from '@grafana/runtime';\n\nimport { logger } from '../tracking/logger';\nimport { userStorage } from '../userStorage';\nimport { HttpClient } from './HttpClient';\n\nconst PYROSCOPE_DATA_SOURCES_TYPE = 'grafana-pyroscope-datasource';\nconst PYROSCOPE_URL_SEARCH_PARAM_NAME = 'var-dataSource'; // matches with the Scenes library\n\ntype CustomDataSourceJsonData = { overridesDefault: boolean };\ntype CustomDataSourceInstanceSettings = DataSourceInstanceSettings<DataSourceJsonData & CustomDataSourceJsonData>;\n\n/**\n * An HTTP client ready to fetch data from the plugin's backend\n */\nexport class ApiClient extends HttpClient {\n  static getPyroscopeDataSources() {\n    return Object.values(config.datasources).filter((ds) => ds.type === PYROSCOPE_DATA_SOURCES_TYPE);\n  }\n\n  static selectDefaultDataSource() {\n    const pyroscopeDataSources = ApiClient.getPyroscopeDataSources() as CustomDataSourceInstanceSettings[];\n\n    const uidFromUrl = new URL(window.location.href).searchParams.get(PYROSCOPE_URL_SEARCH_PARAM_NAME);\n    const uidFromLocalStorage = userStorage.get(userStorage.KEYS.PROFILES_EXPLORER)?.dataSource;\n\n    const defaultDataSource =\n      pyroscopeDataSources.find((ds) => ds.uid === uidFromUrl) ||\n      pyroscopeDataSources.find((ds) => ds.uid === uidFromLocalStorage) ||\n      pyroscopeDataSources.find((ds) => ds.jsonData.overridesDefault) ||\n      pyroscopeDataSources.find((ds) => ds.isDefault) ||\n      pyroscopeDataSources[0];\n\n    if (!defaultDataSource) {\n      logger.warn(\n        'Cannot find any Pyroscope data source! Please add and configure a Pyroscope data source to your Grafana instance.'\n      );\n\n      // because we instantiate most of our API clients before exporting them,\n      // we have to return a dummy data source to prevent the whole app to fail\n      return { uid: 'no-data-source-configured' };\n    }\n\n    return defaultDataSource;\n  }\n\n  static getBaseUrl() {\n    const pyroscopeDataSource = ApiClient.selectDefaultDataSource();\n\n    let appSubUrl = config.appSubUrl || '';\n    if (appSubUrl.at(-1) !== '/') {\n      // ensures that the API pathname is appended correctly (appUrl seems to always have it but better to be extra careful)\n      appSubUrl += '/';\n    }\n\n    return `${appSubUrl}api/datasources/proxy/uid/${pyroscopeDataSource.uid}`;\n  }\n\n  constructor() {\n    super(ApiClient.getBaseUrl().toString(), {\n      'content-type': 'application/json',\n      'X-Grafana-Org-Id': String(config.bootData?.user?.orgId || ''),\n    });\n  }\n}\n","import { ApiClient } from '@shared/infrastructure/http/ApiClient';\n\nexport type Stats = {\n  hasIngestedData: boolean;\n  oldestProfileTime: number;\n  newestProfileTime: number;\n};\n\nclass StatsApiClient extends ApiClient {\n  async get(): Promise<Stats> {\n    const response = await this.fetch('/querier.v1.QuerierService/GetProfileStats', {\n      method: 'POST',\n      body: JSON.stringify({}),\n    });\n\n    const json = await response.json();\n\n    return {\n      hasIngestedData: json.dataIngested,\n      oldestProfileTime: Number(json.oldestProfileTime),\n      newestProfileTime: Number(json.newestProfileTime),\n    };\n  }\n}\n\nexport const statsApiClient = new StatsApiClient();\n","import { ApiClient } from '@shared/infrastructure/http/ApiClient';\nimport { DomainHookReturnValue } from '@shared/types/DomainHookReturnValue';\nimport { useState } from 'react';\n\nimport { useFetchTenantStats } from '../infrastructure/useFetchTenantStats';\n\nexport function useOnboarding(): DomainHookReturnValue {\n  const [isModalClosed, setIsModalClosed] = useState(false);\n\n  const pyroscopeDataSourcesCount = ApiClient.getPyroscopeDataSources().length;\n  const { isFetching, error, stats } = useFetchTenantStats({ enabled: pyroscopeDataSourcesCount > 0 });\n  const hasNoUserData = !isFetching && !stats?.hasIngestedData;\n\n  return {\n    data: {\n      shouldShowLoadingPage: !error && isFetching,\n      shouldShowOnboardingPage: (error || !pyroscopeDataSourcesCount || hasNoUserData) && !isModalClosed,\n      shouldShowNoDataSourceBanner: !pyroscopeDataSourcesCount,\n    },\n    actions: {\n      closeModal() {\n        setIsModalClosed(true);\n      },\n    },\n  };\n}\n","import { useQuery } from '@tanstack/react-query';\n\nimport { Stats, statsApiClient } from './statsApiClient';\n\ntype FetchResponse = {\n  isFetching: boolean;\n  error: Error | null;\n  stats?: Stats;\n  refetch: () => void;\n};\n\nexport function useFetchTenantStats({ enabled }: { enabled: boolean }): FetchResponse {\n  const { isFetching, error, data, refetch } = useQuery({\n    enabled,\n    placeholderData: () => ({ hasIngestedData: true, oldestProfileTime: 0, newestProfileTime: 0 }),\n    queryKey: ['tenant-stats'],\n    queryFn: () => {\n      statsApiClient.abort();\n\n      return statsApiClient.get();\n    },\n  });\n\n  return {\n    isFetching,\n    error: statsApiClient.isAbortError(error) ? null : error,\n    stats: data,\n    refetch,\n  };\n}\n","import { css } from '@emotion/css';\nimport { formattedValueToString, getValueFormat, GrafanaTheme2 } from '@grafana/data';\nimport { Divider, IconButton, styleMixins, Toggletip, useStyles2 } from '@grafana/ui';\nimport React, { useMemo } from 'react';\n\nimport { QueryAnalysisResult } from './domain/QueryAnalysis';\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  row: css({\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'flex-start',\n  }),\n  headerColumn: css({\n    display: 'flex',\n    flexDirection: 'column',\n    minWidth: '120px',\n    alignItems: 'start',\n  }),\n  column: css({\n    display: 'flex',\n    flexDirection: 'column',\n    minWidth: '120px',\n    alignItems: 'end',\n  }),\n  tooltip: css({\n    display: 'flex',\n    color: theme.colors.text.secondary,\n    fontSize: theme.typography.bodySmall.fontSize,\n  }),\n  contentWithIcon: css({\n    display: 'none',\n\n    [`@media ${styleMixins.mediaUp(theme.v1.breakpoints.sm)}`]: {\n      display: 'block',\n    },\n  }),\n});\n\ntype QueryAnalysisTooltipProps = {\n  data: QueryAnalysisResult;\n};\n\nconst formatSize = (size: number) => formattedValueToString(getValueFormat('decbytes')(size));\n\nconst formatCount = (count: number) => formattedValueToString(getValueFormat('short')(count));\n\nexport function QueryAnalysisTooltip(props: QueryAnalysisTooltipProps) {\n  const styles = useStyles2(getStyles);\n  const { data } = props;\n  const totalBytesInTimeRange = formatSize(data.queryImpact.totalBytesInTimeRange);\n\n  const queryAnalysisTooltip = useMemo(() => {\n    return (\n      <div data-testid=\"queryAnalysis-popup\">\n        <div className={styles.row}>\n          <div className={styles.headerColumn}>Data in time range</div>\n          <div className={styles.column}>{totalBytesInTimeRange}</div>\n          <div className={styles.column}>&nbsp;</div>\n        </div>\n        {data.queryImpact.totalQueriedSeries !== undefined && (\n          <div className={styles.row}>\n            <div className={styles.headerColumn}>Series in query</div>\n            <div className={styles.column}>{formatCount(data.queryImpact.totalQueriedSeries)}</div>\n            <div className={styles.column}>&nbsp;</div>\n          </div>\n        )}\n        <div className={styles.row}>\n          <div className={styles.headerColumn}>Deduplication</div>\n          <div className={styles.column}>{data.queryImpact.deduplicationNeeded ? 'yes' : 'no'}</div>\n          <div className={styles.column}>&nbsp;</div>\n        </div>\n        <Divider />\n        <div className={styles.row}>\n          <div className={styles.headerColumn}>&nbsp;</div>\n          {data.queryScopes.map((s, i) => (\n            <div key={i} className={styles.column}>\n              <strong>{s.componentType}</strong>\n            </div>\n          ))}\n        </div>\n        <div className={styles.row}>\n          <div className={styles.headerColumn}>Replicas</div>\n          {data.queryScopes.map((s, i) => (\n            <div key={i} className={styles.column}>\n              {s.componentCount || '/'}\n            </div>\n          ))}\n        </div>\n        <div className={styles.row}>\n          <div className={styles.headerColumn}>Blocks</div>\n          {data.queryScopes.map((s, i) => (\n            <div key={i} className={styles.column}>\n              {formatCount(s.blockCount) || '/'}\n            </div>\n          ))}\n        </div>\n        <div className={styles.row}>\n          <div className={styles.headerColumn}>Series</div>\n          {data.queryScopes.map((s, i) => (\n            <div key={i} className={styles.column}>\n              {formatCount(s.seriesCount) || '/'}\n            </div>\n          ))}\n        </div>\n        <div className={styles.row}>\n          <div className={styles.headerColumn}>Profiles</div>\n          {data.queryScopes.map((s, i) => (\n            <div key={i} className={styles.column}>\n              {formatCount(s.profileCount) || '/'}\n            </div>\n          ))}\n        </div>\n        <div className={styles.row}>\n          <div className={styles.headerColumn}>Samples</div>\n          {data.queryScopes.map((s, i) => (\n            <div key={i} className={styles.column}>\n              {formatCount(s.sampleCount) || '/'}\n            </div>\n          ))}\n        </div>\n        <div className={styles.row}>\n          <div className={styles.headerColumn}>&nbsp;</div>\n          <div className={styles.column}>&nbsp;</div>\n          <div className={styles.column}>&nbsp;</div>\n        </div>\n        <div className={styles.row}>\n          <div className={styles.headerColumn}>Index Store</div>\n          {data.queryScopes.map((s, i) => (\n            <div key={i} className={styles.column}>\n              {formatSize(s.indexBytes) || '/'}\n            </div>\n          ))}\n        </div>\n        <div className={styles.row}>\n          <div className={styles.headerColumn}>Profiles Store</div>\n          {data.queryScopes.map((s, i) => (\n            <div key={i} className={styles.column}>\n              {formatSize(s.profileBytes) || '/'}\n            </div>\n          ))}\n        </div>\n        <div className={styles.row}>\n          <div className={styles.headerColumn}>Symbols Store</div>\n          {data.queryScopes.map((s, i) => (\n            <div key={i} className={styles.column}>\n              {formatSize(s.symbolBytes) || '/'}\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }, [data, styles, totalBytesInTimeRange]);\n\n  return (\n    <>\n      {data.queryImpact.totalBytesInTimeRange !== undefined ? (\n        <Toggletip content={queryAnalysisTooltip} fitContent={true}>\n          <div className={styles.tooltip} data-testid=\"queryAnalysis-tooltip\">\n            <span className={styles.contentWithIcon}>Stored data in time range: {totalBytesInTimeRange}</span>\n            &nbsp;\n            <IconButton name=\"database\" aria-label=\"Query info\" />\n          </div>\n        </Toggletip>\n      ) : null}\n    </>\n  );\n}\n","import { css, cx } from '@emotion/css';\nimport { useStyles2 } from '@grafana/ui';\nimport React from 'react';\n\ntype PyroscopeLogoProps = {\n  size: 'small' | 'large';\n};\n\nfunction PyroscopeLogoComponent({ size }: PyroscopeLogoProps) {\n  const styles = useStyles2(getStyles);\n  return <img className={cx(styles.logo, size)} src=\"public/plugins/grafana-pyroscope-app/img/logo.svg\" />;\n}\n\nexport const PyroscopeLogo = React.memo(PyroscopeLogoComponent);\n\nconst getStyles = () => ({\n  logo: css`\n    &.small {\n      width: 16px;\n      height: 16px;\n      margin-right: 4px;\n      position: relative;\n      top: -2px;\n    }\n\n    &.large {\n      width: 40px;\n      height: 40px;\n    }\n  `,\n});\n","import { css } from '@emotion/css';\nimport { GrafanaTheme2, usePluginContext } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { Dropdown, IconButton, Menu, useStyles2 } from '@grafana/ui';\nimport React from 'react';\n\nimport { GIT_COMMIT } from '../../version';\nimport { PyroscopeLogo } from './PyroscopeLogo';\n\nconst pluginCommitSha: string = GIT_COMMIT;\nconst pluginCommitURL = `https://github.com/grafana/profiles-drilldown/commit/${pluginCommitSha}`;\n\nconst { buildInfo: grafanaBuildInfo } = config;\n\nfunction InfoMenuHeader() {\n  const styles = useStyles2(getStyles);\n\n  const {\n    meta: {\n      info: { version, updated },\n    },\n  } = usePluginContext() || { meta: { info: { version: '?.?.?', updated: '?' } } };\n\n  return (\n    <div className={styles.menuHeader}>\n      <h5>\n        <PyroscopeLogo size=\"small\" />\n        Grafana Profiles Drilldown v{version}\n      </h5>\n      <div className={styles.subTitle}>Last update: {updated}</div>\n    </div>\n  );\n}\n\nfunction InfoMenu() {\n  const isDev = pluginCommitSha === 'dev';\n  const shortCommitSha = isDev ? pluginCommitSha : pluginCommitSha.slice(0, 8);\n\n  return (\n    <Menu header={<InfoMenuHeader />}>\n      <Menu.Item\n        label={`Commit SHA: ${shortCommitSha}`}\n        icon=\"github\"\n        onClick={() => window.open(pluginCommitURL)}\n        disabled={isDev}\n      />\n      <Menu.Item\n        label=\"Changelog\"\n        icon=\"list-ul\"\n        onClick={() => window.open('https://github.com/grafana/profiles-drilldown/blob/main/CHANGELOG.md')}\n      />\n      <Menu.Item\n        label=\"Contribute\"\n        icon=\"external-link-alt\"\n        onClick={() => window.open('https://github.com/grafana/profiles-drilldown/blob/main/docs/CONTRIBUTING.md')}\n      />\n      <Menu.Item\n        label=\"Documentation\"\n        icon=\"document-info\"\n        onClick={() => window.open('https://grafana.com/docs/grafana/latest/explore/simplified-exploration/profiles')}\n      />\n      <Menu.Item\n        label=\"Report an issue\"\n        icon=\"bug\"\n        onClick={() => window.open('https://github.com/grafana/profiles-drilldown/issues/new?template=bug_report.md')}\n      />\n      <Menu.Divider />\n      <Menu.Item\n        label={`Grafana ${grafanaBuildInfo.edition} v${grafanaBuildInfo.version} (${grafanaBuildInfo.env})`}\n        icon=\"github\"\n        onClick={() => window.open(`https://github.com/grafana/grafana/commit/${grafanaBuildInfo.commit}`)}\n      />\n    </Menu>\n  );\n}\n\nexport function PluginInfo() {\n  return (\n    <Dropdown overlay={() => <InfoMenu />} placement=\"bottom-end\">\n      <IconButton name=\"info-circle\" aria-label=\"Plugin info\" title=\"Plugin info\" />\n    </Dropdown>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  menuHeader: css`\n    padding: ${theme.spacing(0.5, 1)};\n    white-space: nowrap;\n  `,\n  subTitle: css`\n    color: ${theme.colors.text.secondary};\n    font-size: ${theme.typography.bodySmall.fontSize};\n  `,\n});\n","import { css } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Stack, useStyles2 } from '@grafana/ui';\nimport { QueryAnalysisResult } from '@shared/components/QueryAnalysisTooltip/domain/QueryAnalysis';\nimport { QueryAnalysisTooltip } from '@shared/components/QueryAnalysisTooltip/QueryAnalysisTooltip';\nimport React, { memo, ReactNode } from 'react';\nimport { Helmet } from 'react-helmet';\n\nimport { PluginInfo } from './PluginInfo';\nimport { PyroscopeLogo } from './PyroscopeLogo';\n\ntype PageTitleProps = {\n  title: ReactNode;\n  queryAnalysis?: QueryAnalysisResult;\n};\n\nfunction PageTitleComponent({ title, queryAnalysis }: PageTitleProps) {\n  const styles = useStyles2(getStyles);\n  const fullTitle = typeof title === 'string' ? `${title} | Pyroscope` : 'Pyroscope';\n\n  return (\n    <>\n      <Helmet>\n        <title>{fullTitle}</title>\n      </Helmet>\n      <div className={styles.titleContainer}>\n        <Stack justifyContent=\"space-between\">\n          <div>\n            <PyroscopeLogo size=\"large\" />\n            <h1 className={styles.title} data-testid=\"page-title\">\n              {title}\n            </h1>\n          </div>\n          <div className={styles.infoArea}>\n            <PluginInfo />\n            {queryAnalysis ? <QueryAnalysisTooltip data={queryAnalysis} /> : null}\n          </div>\n        </Stack>\n      </div>\n    </>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  titleContainer: css`\n    height: ${theme.spacing(5)};\n    line-height: ${theme.spacing(5)};\n    margin-bottom: ${theme.spacing(3)};\n  `,\n  title: css`\n    font-size: ${theme.typography.h2.fontSize};\n    display: inline-block;\n    margin: 0;\n    position: relative;\n    top: 10px;\n    left: ${theme.spacing(1)};\n  `,\n  infoArea: css`\n    align-self: end;\n    margin-bottom: 0;\n    line-height: 20px;\n    text-align: right;\n  `,\n});\n\nexport const PageTitle = memo(PageTitleComponent);\n","import { PageLayoutType } from '@grafana/data';\nimport { PluginPage } from '@grafana/runtime';\nimport { Icon } from '@grafana/ui';\nimport { PageTitle } from '@shared/ui/PageTitle';\nimport React from 'react';\n\nexport function EmptyLoadingPage() {\n  return (\n    <PluginPage layout={PageLayoutType.Canvas}>\n      <PageTitle\n        title={\n          <span>\n            Loading... <Icon name=\"fa fa-spinner\" />\n          </span>\n        }\n      />\n    </PluginPage>\n  );\n}\n","import { css } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Icon, useStyles2 } from '@grafana/ui';\nimport React from 'react';\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  link: css`\n    color: ${theme.colors.text.link};\n    &:hover {\n      text-decoration: underline;\n    }\n  `,\n});\n\nexport function StyledLink({ href, children }: { href: string; children: React.ReactNode }) {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <a className={styles.link} href={href} target=\"_blank\" rel=\"noreferrer\">\n      {children} {<Icon name=\"external-link-alt\" />}\n    </a>\n  );\n}\n","import { PageLayoutType } from '@grafana/data';\nimport { PluginPage } from '@grafana/runtime';\nimport { Alert } from '@grafana/ui';\nimport { PageTitle } from '@shared/ui/PageTitle';\nimport React from 'react';\n\nimport { StyledLink } from './StyledLink';\n\nexport function NoDataSourcePage() {\n  return (\n    <PluginPage layout={PageLayoutType.Canvas}>\n      <PageTitle title=\"Grafana Profiles Drilldown\" />\n\n      <Alert severity=\"error\" title=\"Missing Pyroscope data source!\">\n        This plugin requires a Pyroscope data source. Please{' '}\n        <StyledLink href=\"/connections/datasources/new\">add and configure a Pyroscope data source</StyledLink> to your\n        Grafana instance.\n      </Alert>\n    </PluginPage>\n  );\n}\n","import { DomainHookReturnValue } from '@shared/types/DomainHookReturnValue';\nimport { useState } from 'react';\n\nimport { useFetchInstances } from '../infrastructure/useFetchInstances';\n\nexport function useOnboardingModal(): DomainHookReturnValue {\n  const { instances } = useFetchInstances();\n\n  const [settingsUrl, setSettingsUrl] = useState('https://grafana.com/auth/sign-in/');\n  const isCloud = /grafana(-dev|-ops)?\\.net/.test(window.location.host);\n\n  if (instances && instances.orgSlug && instances.hpInstanceId) {\n    const newSettingsUrl = `https://grafana.com/orgs/${instances.orgSlug}/hosted-profiles/${instances.hpInstanceId}`;\n\n    if (settingsUrl !== newSettingsUrl) {\n      setSettingsUrl(newSettingsUrl);\n    }\n  }\n\n  return {\n    data: {\n      settingsUrl,\n      isCloud,\n    },\n    actions: {},\n  };\n}\n","import { useQuery } from '@tanstack/react-query';\n\nexport function useFetchInstances() {\n  const { isFetching, error, data } = useQuery({\n    queryKey: ['instances'],\n    queryFn: () =>\n      fetch('/api/plugin-proxy/cloud-home-app/grafanacom-api/instances').then((response) => response.json()),\n  });\n\n  return {\n    isFetching,\n    error,\n    instances: data,\n  };\n}\n","import { css, cx } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport DecreaseLatency from '@img/decrease-latency.png';\nimport HeroImage from '@img/hero-image.png';\nimport ReduceCosts from '@img/reduce-costs.png';\nimport ResolveIncidents from '@img/resolve-incidents.png';\nimport React from 'react';\n\nimport { useOnboardingModal } from '../domain/useOnboardingModal';\nimport { StyledLink } from './StyledLink';\n\n/** This was extracted from the former `styles.module.scss` */\n// TODO Use more spacial and color parameters from `theme`\nconst getStyles = (theme: GrafanaTheme2) => ({\n  onboardingRow: css`\n    background: ${theme.colors.background.secondary};\n    display: flex;\n    margin-top: 16px;\n    gap: 20px;\n    padding: 20px;\n    margin-bottom: 2.5rem;\n  `,\n  onboardingParagraph: css`\n    padding: 20px 64px;\n    text-align: center;\n    line-height: 2;\n    flex: 1;\n    margin: 0;\n  `,\n  onboardingPanel: css`\n    flex: 1;\n    display: flex;\n    flex-flow: column wrap;\n    -webkit-box-align: center;\n    align-items: center;\n    margin-top: 16px;\n    text-align: center;\n  `,\n  onboardingPanelHeader: css`\n    line-height: 1.5;\n    margin-bottom: 1em;\n  `,\n  onboardingPanelImage: css`\n    width: 5rem;\n    margin-bottom: 1em;\n  `,\n  hero: css`\n    display: flex;\n    flex-direction: row;\n  `,\n  heroTitles: css`\n    flex: 1;\n  `,\n  heroImage: css`\n    width: 40%;\n    margin-left: 16px;\n    margin-top: 16px;\n    margin-bottom: 16px;\n    border-radius: 3px;\n  `,\n  onboardingPanelNumber: css`\n    color: rgb(236, 109, 19);\n    text-align: center;\n    display: grid;\n    place-items: center;\n    background-image: linear-gradient(135deg, currentcolor, 75%, rgb(204, 204, 220));\n    border-radius: 100%;\n    font-size: 2.5rem;\n    line-height: 5rem;\n    height: 5rem;\n    width: 5rem;\n    margin-bottom: 1em;\n  `,\n  // TODO use theme.colors\n  color2: css`\n    color: rgb(190, 85, 190);\n  `,\n  // TODO use theme.colors\n  color3: css`\n    color: rgb(126, 108, 218);\n  `,\n  // FIXME use theme.colors\n  onboardingPanelNumberSpan: css`\n    color: rgb(220, 220, 220);\n  `,\n  onboardingPanelDescription: css`\n    text-align: justify;\n    text-align: center;\n    line-height: 1.66;\n    margin-top: 0;\n  `,\n  title: css`\n    margin-bottom: 0.5em;\n    line-height: 1.5;\n  `,\n  subtitle: css`\n    margin-bottom: 1em;\n    line-height: 1.5;\n    font-size: 1.25rem;\n  `,\n});\n\nexport function OnboardingModal() {\n  const styles = useStyles2(getStyles);\n  const { data } = useOnboardingModal();\n\n  return (\n    <div data-testid=\"onboarding-modal\">\n      <div className={styles.hero} data-testid=\"hero\">\n        <div className={styles.heroTitles}>\n          <h1 className={styles.title}>Welcome to Grafana Profiles Drilldown</h1>\n          <h2 className={styles.subtitle}>\n            Optimize infrastructure spend, simplify debugging, and enhance application performance\n          </h2>\n          {/* <Button>Continue to Pyroscope</Button> */}\n        </div>\n        <img src={HeroImage} className={styles.heroImage}></img>\n      </div>\n\n      <div data-testid=\"what-you-can-do\">\n        <h3>What You Can Do</h3>\n        <div className={styles.onboardingRow}>\n          <div className={styles.onboardingPanel}>\n            <img className={styles.onboardingPanelImage} src={ReduceCosts}></img>\n            <h3 className={styles.onboardingPanelHeader}>Reduce Costs</h3>\n            <p className={styles.onboardingPanelDescription}>\n              Spot CPU spikes, memory leaks, and other inefficiencies with code-level visibility into resource usage.\n              Teams can then optimize their code and lower infrastructure costs.\n            </p>\n          </div>\n          <div className={styles.onboardingPanel}>\n            <img className={styles.onboardingPanelImage} src={DecreaseLatency}></img>\n            <h3 className={styles.onboardingPanelHeader}>Decrease Latency</h3>\n            <p className={styles.onboardingPanelDescription}>\n              Maintain high speed and efficiency and improve application performance. In a competitive digital world,\n              decreasing latency translates to increasing revenue.\n            </p>\n          </div>\n          <div className={styles.onboardingPanel}>\n            <img className={styles.onboardingPanelImage} src={ResolveIncidents}></img>\n            <h3 className={styles.onboardingPanelHeader}>Resolve Incidents Faster</h3>\n            <p className={styles.onboardingPanelDescription}>\n              Cut down the mean time to resolution (MTTR) by correlating continuous profiling data with metrics, logs,\n              and traces to quickly identify the root cause of any issue.\n            </p>\n          </div>\n        </div>\n      </div>\n\n      <div data-testid=\"how-to-get-started\">\n        <h3>How to Get Started</h3>\n        <div className={styles.onboardingRow}>\n          {data.isCloud ? (\n            <>\n              <div className={styles.onboardingPanel}>\n                <div className={styles.onboardingPanelNumber}>\n                  <span className={styles.onboardingPanelNumberSpan}>1</span>\n                </div>\n                <h3 className={styles.onboardingPanelHeader}>Add Profiling to Your Application</h3>\n                <p className={styles.onboardingPanelDescription}>\n                  Use{' '}\n                  <StyledLink href=\"https://grafana.com/docs/pyroscope/latest/configure-client/grafana-alloy/\">\n                    Grafana Alloy\n                  </StyledLink>{' '}\n                  or{' '}\n                  <StyledLink href=\"https://grafana.com/docs/pyroscope/next/configure-client/language-sdks/\">\n                    Pyroscope SDKs\n                  </StyledLink>{' '}\n                  to push profiles from your applications to Grafana Cloud.\n                </p>\n              </div>\n              <div className={styles.onboardingPanel}>\n                <div className={cx(styles.onboardingPanelNumber, styles.color2)}>\n                  <span className={styles.onboardingPanelNumberSpan}>2</span>\n                </div>\n                <h3 className={styles.onboardingPanelHeader}>Configure Your Applications</h3>\n                <p className={styles.onboardingPanelDescription}>\n                  Go to <StyledLink href={data.settingsUrl}>Grafana Cloud Stack settings</StyledLink> to find your\n                  Grafana Cloud Credentials.\n                </p>\n              </div>\n              <div className={styles.onboardingPanel}>\n                <div className={cx(styles.onboardingPanelNumber, styles.color3)}>\n                  <span className={styles.onboardingPanelNumberSpan}>3</span>\n                </div>\n                <h3 className={styles.onboardingPanelHeader}>Start Getting Performance Insights</h3>\n                <p className={styles.onboardingPanelDescription}>\n                  Once you&apos;re done with initial setup, refresh this page to see your profiling data.\n                </p>\n              </div>\n            </>\n          ) : (\n            <>\n              <div className={styles.onboardingPanel}>\n                <div className={styles.onboardingPanelNumber}>\n                  <span className={styles.onboardingPanelNumberSpan}>1</span>\n                </div>\n                <h3 className={styles.onboardingPanelHeader}>Set Up Your Pyroscope Server</h3>\n                <p className={styles.onboardingPanelDescription}>\n                  Install <StyledLink href=\"https://grafana.com/docs/pyroscope/latest/\">Pyroscope Server</StyledLink> on\n                  your infrastructure. Or if you want to use a hosted service, go to{' '}\n                  <StyledLink href={data.settingsUrl}>Grafana Cloud Stack settings</StyledLink> to find your Grafana\n                  Cloud Credentials.\n                </p>\n              </div>\n              <div className={styles.onboardingPanel}>\n                <div className={cx(styles.onboardingPanelNumber, styles.color2)}>\n                  <span className={styles.onboardingPanelNumberSpan}>2</span>\n                </div>\n                <h3 className={styles.onboardingPanelHeader}>Configure Grafana</h3>\n                <p className={styles.onboardingPanelDescription}>\n                  Add a new <StyledLink href=\"/connections/datasources/new\">Pyroscope datasource</StyledLink>. Use your\n                  Pyroscope server URL and appropriate security credentials if you use Grafana Cloud Profiles.\n                </p>\n              </div>\n              <div className={styles.onboardingPanel}>\n                <div className={cx(styles.onboardingPanelNumber, styles.color3)}>\n                  <span className={styles.onboardingPanelNumberSpan}>3</span>\n                </div>\n                <h3 className={styles.onboardingPanelHeader}>Add Profiling to Your Application</h3>\n                <p className={styles.onboardingPanelDescription}>\n                  Use{' '}\n                  <StyledLink href=\"https://grafana.com/docs/pyroscope/latest/configure-client/grafana-alloy/\">\n                    Grafana Alloy\n                  </StyledLink>{' '}\n                  or{' '}\n                  <StyledLink href=\"https://grafana.com/docs/pyroscope/next/configure-client/language-sdks/\">\n                    Pyroscope SDKs\n                  </StyledLink>{' '}\n                  to push profiles from your applications to Grafana Cloud.\n                </p>\n              </div>\n            </>\n          )}\n        </div>\n      </div>\n\n      {data.isCloud && (\n        <div data-testid=\"how-billing-works\">\n          <h3>How Billing Works</h3>\n          <div className={styles.onboardingRow}>\n            <p className={styles.onboardingParagraph}>\n              Usage of Grafana Cloud Profiles is subject to{' '}\n              <StyledLink href=\"https://grafana.com/pricing/\">Grafana Cloud Pricing</StyledLink> for Profiles.\n              <br></br>\n              For additional information, read the announcement&nbsp;\n              <StyledLink href=\"https://grafana.com/blog/2023/08/09/grafana-cloud-profiles-for-continuous-profiling/\">\n                blog post\n              </StyledLink>\n              .\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","import { css } from '@emotion/css';\nimport { GrafanaTheme2, PageLayoutType } from '@grafana/data';\nimport { PluginPage } from '@grafana/runtime';\nimport { useStyles2 } from '@grafana/ui';\nimport React from 'react';\n\nimport { OnboardingModal } from './OnboardingModal';\n\ntype OnboardingPageProps = {\n  onCloseModal: () => void;\n};\n\n/** This was extracted from the former `styles.module.scss` */\n// TODO Use more spacial and color parameters from `theme`\nconst getStyles = (theme: GrafanaTheme2) => ({\n  onboardingPage: css`\n    padding: 16px;\n    margin: 64px;\n    position: relative;\n    background-color: ${theme.colors.background.primary};\n  `,\n  closeButton: css`\n    position: absolute;\n    top: -30px;\n    opacity: 0.8;\n    right: -32px;\n    border: none;\n    border-radius: 50%;\n    width: 40px;\n    height: 40px;\n    line-height: 40px;\n    display: block;\n    padding: 0;\n    margin: 0;\n    font-size: 22px;\n  `,\n});\n\nconst pageNav = { text: 'Onboarding' };\n\nexport function OnboardingPage({ onCloseModal }: OnboardingPageProps) {\n  const styles = useStyles2(getStyles);\n\n  return (\n    // The use of `PluginPage` is to set a clear \"Onboarding\" breadcrumb\n    // Using `Custom` ensures that it takes up the whole page (and doesn't conflict with the other `PluginPage`)\n    <PluginPage pageNav={pageNav} layout={PageLayoutType.Custom}>\n      <div className={styles.onboardingPage}>\n        <button\n          className={styles.closeButton}\n          onClick={onCloseModal}\n          title=\"Close\"\n          data-testid=\"close-onboarding-modal\"\n        >\n          &times;\n        </button>\n        <OnboardingModal />\n      </div>\n    </PluginPage>\n  );\n}\n","import React from 'react';\n\nimport { useOnboarding } from './domain/useOnboarding';\nimport { EmptyLoadingPage } from './ui/EmptyLoadingPage';\nimport { NoDataSourcePage } from './ui/NoDataSourcePage';\nimport { OnboardingPage } from './ui/OnboardingPage';\n\ntype OnboardingProps = {\n  children: React.ReactNode;\n};\n\n/**\n * Displays an onboarding dialog instructing how to push data only when data is not present\n */\nexport function Onboarding({ children }: OnboardingProps) {\n  const { data, actions } = useOnboarding();\n\n  if (data.shouldShowLoadingPage) {\n    return <EmptyLoadingPage />;\n  }\n\n  if (data.shouldShowOnboardingPage) {\n    return <OnboardingPage onCloseModal={actions.closeModal} />;\n  }\n\n  if (data.shouldShowNoDataSourceBanner) {\n    return <NoDataSourcePage />;\n  }\n\n  return <>{children}</>;\n}\n","import { Button } from '@grafana/ui';\nimport React from 'react';\n\nexport function BackButton({ onClick }: { onClick?: () => void }) {\n  const callback = onClick ? onClick : () => history.back();\n  return (\n    <Button variant=\"secondary\" onClick={callback} aria-label=\"Back to Profiles Drilldown\">\n      Back to Profiles Drilldown\n    </Button>\n  );\n}\n","import { config, reportInteraction as grafanaReportInteraction } from '@grafana/runtime';\nimport { ScaleDistribution } from '@grafana/schema';\nimport { ActionType } from 'xstate';\n\nimport { PYROSCOPE_APP_ID, ROUTES } from '../../constants';\nimport { LayoutType } from '../../pages/ProfilesExplorerView/components/SceneByVariableRepeaterGrid/components/SceneLayoutSwitcher';\nimport { PanelType } from '../../pages/ProfilesExplorerView/components/SceneByVariableRepeaterGrid/components/ScenePanelTypeSwitcher';\nimport { GIT_COMMIT } from '../../version';\n\nexport type PageName = 'explore' | 'settings' | 'ad_hoc';\n\n// hey future dev: don't forget to add any new value to our features tracking dashboard!\nexport type Interactions = {\n  g_pyroscope_app_page_initialized: {\n    page: PageName;\n  };\n\n  g_pyroscope_app_ad_hoc_file_dropped: {\n    fileType: string;\n  };\n  g_pyroscope_app_ad_hoc_file_removed: {};\n  g_pyroscope_app_ad_hoc_profile_metric_selected: {};\n  g_pyroscope_app_ad_hoc_profile: {};\n  g_pyroscope_app_compare_link_clicked: {};\n  g_pyroscope_app_diff_auto_select_clicked: {};\n  g_pyroscope_app_diff_choose_preset_clicked: {};\n  g_pyroscope_app_diff_learn_how_clicked: {};\n  g_pyroscope_app_diff_preset_save_clicked: {};\n  g_pyroscope_app_diff_preset_selected: {\n    value: string;\n  };\n  g_pyroscope_app_exclude_action_clicked: {};\n  g_pyroscope_app_explain_flamegraph_clicked: {};\n  g_pyroscope_app_exploration_type_clicked: {\n    explorationType: string;\n  };\n  g_pyroscope_app_export_profile: {\n    format: 'png' | 'json' | 'pprof' | 'flamegraph.com';\n  };\n  g_pyroscope_app_fav_action_clicked: {\n    favAfterClick: boolean;\n  };\n  g_pyroscope_app_filters_changed: {\n    name: string;\n    count: number;\n    operators: string[];\n  };\n  g_pyroscope_app_function_details_clicked: {};\n  g_pyroscope_app_group_by_label_clicked: {};\n  g_pyroscope_app_hide_no_data_changed: {\n    hideNoData: 'on' | 'off';\n  };\n  g_pyroscope_app_include_action_clicked: {};\n  g_pyroscope_app_layout_changed: {\n    layout: LayoutType;\n  };\n  g_pyroscope_app_open_in_explore_clicked: {};\n  g_pyroscope_app_open_recording_rules_view: {};\n  g_pyroscope_app_optimize_code_clicked: {};\n  g_pyroscope_app_panel_type_changed: {\n    panelType: PanelType;\n  };\n  g_pyroscope_app_profile_metric_selected: {};\n  g_pyroscope_app_quick_filter_focused: {};\n  g_pyroscope_app_select_action_clicked: {\n    type: ActionType;\n  };\n  g_pyroscope_app_service_name_selected: {};\n  g_pyroscope_app_share_link_clicked: {};\n  g_pyroscope_app_timeseries_scale_changed: {\n    scale: ScaleDistribution;\n  };\n  g_pyroscope_app_upload_ad_hoc_clicked: {};\n  g_pyroscope_app_user_settings_clicked: {};\n};\n\nconst PROFILES_EXPLORER_PAGE_NAME = ROUTES.EXPLORE.slice(1);\n\nfunction getCurrentPage(): string {\n  const { pathname } = new URL(window.location.toString());\n  return pathname.split('/').pop() || '';\n}\n\nfunction getMetaProperties() {\n  const meta: Record<string, any> = {\n    // same naming as Faro (see src/shared/infrastructure/tracking/faro/faro.ts)\n    appRelease: config.apps[PYROSCOPE_APP_ID].version,\n    appVersion: GIT_COMMIT,\n    page: getCurrentPage(),\n  };\n\n  if (meta.page === PROFILES_EXPLORER_PAGE_NAME) {\n    // same naming as Faro (see src/shared/infrastructure/tracking/faro/faro.ts)\n    meta.view = new URLSearchParams(window.location.search).get('explorationType') || '';\n  }\n\n  return meta;\n}\n\nexport function reportInteraction<E extends keyof Interactions, P extends Interactions[E]>(\n  interactionName: E,\n  props?: P\n) {\n  grafanaReportInteraction(interactionName, {\n    props,\n    meta: getMetaProperties(),\n  });\n}\n","import { PageName, reportInteraction } from '@shared/domain/reportInteraction';\nimport { useEffect, useState } from 'react';\n\nexport function useReportPageInitialized(page: PageName) {\n  const [initialized, setInitialized] = useState(false);\n  useEffect(() => {\n    if (!initialized) {\n      setInitialized(true);\n      reportInteraction('g_pyroscope_app_page_initialized', { page });\n    }\n  }, [page, initialized]);\n}\n","import { css } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport React from 'react';\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  container: css`\n    display: flex;\n    justify-content: space-between;\n    align-items: flex-start;\n    gap: ${theme.spacing(1)};\n    width: 100%;\n  `,\n  column: css`\n    width: 50%;\n  `,\n});\n\ntype AdHocColumnsProps = {\n  left: React.ReactNode;\n  right: React.ReactNode;\n};\n\nexport function AdHocColumns({ left, right }: AdHocColumnsProps) {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.column}>{left}</div>\n      <div className={styles.column}>{right}</div>\n    </div>\n  );\n}\n","import { AppEvents } from '@grafana/data';\nimport { getAppEvents } from '@grafana/runtime';\nimport { logger } from '@shared/infrastructure/tracking/logger';\n\nexport function displayError(error: Error, msgs: string[]) {\n  const context = msgs.reduce((acc, msg, i) => ({ ...acc, [`info${i + 1}`]: msg }), { handheldBy: 'displayError' });\n\n  logger.error(error, context);\n\n  getAppEvents().publish({\n    type: AppEvents.alertError.name,\n    payload: msgs,\n  });\n}\n\nexport function displayWarning(msgs: string[]) {\n  logger.warn(msgs);\n\n  getAppEvents().publish({\n    type: AppEvents.alertWarning.name,\n    payload: msgs,\n  });\n}\n\nexport function displaySuccess(msgs: string[]) {\n  getAppEvents().publish({\n    type: AppEvents.alertSuccess.name,\n    payload: msgs,\n  });\n}\n","import { ApiClient } from '@shared/infrastructure/http/ApiClient';\n\nimport { AdHocProfile } from '../domain/AdHocProfile';\nimport { stripBase64Prefix } from './helpers/stripBase64Prefix';\n\nclass AdHocProfileClient extends ApiClient {\n  async get(profileId: string, profileType: string): Promise<AdHocProfile> {\n    const response = await this.fetch('/adhocprofiles.v1.AdHocProfileService/Get', {\n      method: 'POST',\n      body: JSON.stringify({\n        id: profileId,\n        profile_type: profileType,\n      }),\n    });\n\n    const json = await response.json();\n\n    return {\n      id: json.id,\n      name: json.name,\n      profileTypes: json.profileTypes,\n      profile: JSON.parse(json.flamebearerProfile),\n    };\n  }\n\n  async uploadSingle(file: File): Promise<AdHocProfile> {\n    const profile = await this._readProfileFile(file);\n\n    const response = await this.fetch('/adhocprofiles.v1.AdHocProfileService/Upload', {\n      method: 'POST',\n      body: JSON.stringify({\n        name: file.name,\n        profile,\n      }),\n    });\n\n    const json = await response.json();\n\n    return {\n      id: json.id,\n      name: file.name,\n      profileTypes: json.profileTypes,\n      // when the uploaded file contains multiple sample types, the 1st is always returned by the API\n      profile: JSON.parse(json.flamebearerProfile),\n    };\n  }\n\n  // TODO\n  async uploadDiff() {\n    return {\n      id: '?',\n      name: '??',\n      profileTypes: [],\n      profile: null,\n    };\n  }\n\n  async _readProfileFile(file: File): Promise<string> {\n    return new Promise((resolve, reject) => {\n      const fileReader = new FileReader();\n\n      fileReader.addEventListener('load', () => {\n        try {\n          resolve(stripBase64Prefix(fileReader.result as string));\n        } catch (error) {\n          reject(error);\n        }\n      });\n\n      fileReader.addEventListener('error', (/*event: ProgressEvent<FileReader>*/) => {\n        // TODO: upgrade TS lib compiler option to support latest JS features\n        // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/cause\n        reject(new Error(`Error while reading file \"${file.name}\"!` /*, { cause: event }*/));\n      });\n\n      fileReader.readAsDataURL(file);\n    });\n  }\n}\n\nexport const adHocProfileClient = new AdHocProfileClient();\n","export function stripBase64Prefix(fileContent: string): string {\n  const [, base64Content] = fileContent.split(';base64,');\n\n  if (!base64Content) {\n    throw new Error('No content after stripping the base64 prefix.');\n  }\n\n  if (fileContent === base64Content) {\n    throw new Error('No base64 prefix?!');\n  }\n\n  return base64Content;\n}\n","import { SelectableValue } from '@grafana/data';\nimport { displayError } from '@shared/domain/displayStatus';\nimport { useCallback, useEffect, useState } from 'react';\n\nimport { adHocProfileClient } from '../infrastructure/adHocProfileClient';\nimport { AdHocProfile } from './AdHocProfile';\n\nconst DEFAULT_PROFILE_DATA: AdHocProfile = {\n  id: '',\n  name: '',\n  profileTypes: [],\n  profile: null,\n};\n\nexport function useUploadFile() {\n  const [isLoading, setIsLoading] = useState(false);\n  const [profileData, setProfileData] = useState(DEFAULT_PROFILE_DATA);\n\n  useEffect(() => {\n    return () => {\n      adHocProfileClient.abort();\n    };\n  }, []);\n\n  const removeFile = useCallback(() => {\n    adHocProfileClient.abort();\n\n    setIsLoading(false);\n    setProfileData(DEFAULT_PROFILE_DATA);\n  }, []);\n\n  const processFile = useCallback(\n    async (file: File) => {\n      removeFile();\n\n      try {\n        setIsLoading(true);\n\n        const data = await adHocProfileClient.uploadSingle(file);\n\n        setProfileData(data);\n      } catch (error) {\n        setProfileData(DEFAULT_PROFILE_DATA);\n\n        if (!adHocProfileClient.isAbortError(error)) {\n          displayError(error as Error, ['Error while uploading profile!', (error as Error).message]);\n        }\n      }\n\n      setIsLoading(false);\n    },\n    [removeFile]\n  );\n\n  const removeProfile = () => {\n    adHocProfileClient.abort();\n\n    setIsLoading(false);\n    setProfileData((prevData) => ({ ...prevData, profile: null }));\n  };\n\n  const selectProfileType = useCallback(\n    async (option: SelectableValue<string>) => {\n      const profileType = option.value;\n\n      if (!profileType || !profileData.id || !profileData.profileTypes.includes(profileType)) {\n        return;\n      }\n\n      removeProfile();\n\n      setIsLoading(true);\n\n      try {\n        const data = await adHocProfileClient.get(profileData.id, profileType);\n\n        setProfileData((prevData) => ({\n          ...prevData,\n          profile: data.profile,\n        }));\n      } catch (error) {\n        if (!adHocProfileClient.isAbortError(error)) {\n          displayError(error as Error, ['Error while fetching profile!', (error as Error).message]);\n        }\n      }\n\n      setIsLoading(false);\n    },\n    [profileData.id, profileData.profileTypes]\n  );\n\n  return {\n    processFile,\n    profileTypes: profileData.profileTypes,\n    selectProfileType,\n    profile: profileData.profile,\n    removeFile,\n    isLoading,\n  };\n}\n","import { DropzoneFile, FileDropzone } from '@grafana/ui';\nimport { displayError } from '@shared/domain/displayStatus';\nimport React, { useCallback } from 'react';\n\nimport { ACCEPTED_FILE_TYPES } from '../domain/accepted-file-types';\n\nconst options = {\n  accept: ACCEPTED_FILE_TYPES,\n  multiple: false,\n  // maxSize: 42, // TODO?\n  onError(error: Error) {\n    displayError(error, ['Error while uploading file!', error.toString()]);\n  },\n};\n\ntype AdHocFileDropZoneProps = {\n  onFileDropped: (file: File) => void;\n  onFileRemove: (file: DropzoneFile) => void;\n};\n\nexport function AdHocFileDropZone({ onFileDropped, onFileRemove }: AdHocFileDropZoneProps) {\n  const onDropAccepted = useCallback(\n    function (files: File[]) {\n      onFileDropped(files[0]);\n    },\n    [onFileDropped]\n  );\n\n  return (\n    <FileDropzone\n      options={{\n        ...options,\n        onDropAccepted,\n      }}\n      onFileRemove={onFileRemove}\n    />\n  );\n}\n","export const ACCEPTED_FILE_TYPES = {\n  'application/gzip': ['.gz'],\n  'application/json': ['.json'],\n  'application/proto': ['.pb', '.pprof'],\n};\n","import { HttpClient } from '@shared/infrastructure/http/HttpClient';\nimport { FlamebearerProfile } from '@shared/types/FlamebearerProfile';\n\ntype UploadResponse = {\n  key: string;\n  url: string;\n  subProfiles: any[]; // TODO: define them, what are they?\n};\n\nclass FlamegraphDotComApiClient extends HttpClient {\n  constructor() {\n    super('https://flamegraph.com/api', {\n      'content-type': 'application/json',\n    });\n  }\n\n  async upload(name: string, profile: FlamebearerProfile): Promise<UploadResponse> {\n    const response = await this.fetch('/upload/v1', {\n      method: 'POST',\n      body: JSON.stringify({\n        name,\n        profile: btoa(JSON.stringify(profile)),\n        fileTypeData: {\n          units: profile.metadata.units,\n          spyName: profile.metadata.spyName,\n        },\n        type: 'json',\n      }),\n    });\n\n    const json = await response.json();\n\n    return json;\n  }\n}\n\nexport const flamegraphDotComApiClient = new FlamegraphDotComApiClient();\n","export enum CompareTarget {\n  BASELINE = 'baseline',\n  COMPARISON = 'comparison',\n}\n","import { dateTimeParse, TimeRange } from '@grafana/data';\n\nimport { CompareTarget } from '../../../../../pages/ProfilesExplorerView/components/SceneExploreDiffFlameGraph/domain/types';\n\ntype DateParts = {\n  year: string;\n  month: string;\n  day: string;\n  hour: string;\n  minute: string;\n  second: string;\n};\n\nconst DATETIME_FORMATTER = new Intl.DateTimeFormat('fr-CA', {\n  year: 'numeric',\n  month: '2-digit',\n  day: '2-digit',\n  hour12: false,\n  hour: '2-digit',\n  minute: '2-digit',\n  second: '2-digit',\n});\n\nfunction format(date: Date): string {\n  const parts = DATETIME_FORMATTER.formatToParts(date).reduce((acc, { type, value }) => {\n    acc[type as keyof DateParts] = value;\n    return acc;\n  }, {} as DateParts);\n\n  return `${parts.year}-${parts.month}-${parts.day}_${parts.hour}${parts.minute}`;\n}\n\nfunction dateForExportFilename(timeRange: TimeRange) {\n  const from = new Date(Math.round(timeRange.from.unix() * 1000));\n  const to = new Date(Math.round(timeRange.to.unix() * 1000));\n\n  return `${format(from)}-to-${format(to)}`;\n}\n\nfunction getTimeRange(target: CompareTarget) {\n  const [fromKey, toKey] = target === CompareTarget.BASELINE ? ['diffFrom', 'diffTo'] : ['diffFrom-2', 'diffTo-2'];\n\n  const searchParams = new URLSearchParams(window.location.search);\n  const from = searchParams.get(fromKey) as string;\n  const to = searchParams.get(toKey) as string;\n\n  return {\n    raw: { from, to },\n    from: dateTimeParse(from),\n    to: dateTimeParse(to),\n  };\n}\n\nexport function getExportFilename(appName?: string) {\n  const timeRanges = [\n    'baseline',\n    dateForExportFilename(getTimeRange(CompareTarget.BASELINE)),\n    'comparison',\n    dateForExportFilename(getTimeRange(CompareTarget.COMPARISON)),\n  ];\n\n  return appName ? [appName, ...timeRanges].join('_') : ['flamegraph', ...timeRanges].join('_');\n}\n","import { displayError } from '@shared/domain/displayStatus';\nimport { reportInteraction } from '@shared/domain/reportInteraction';\nimport 'compression-streams-polyfill';\nimport saveAs from 'file-saver';\n\nimport { ExportDataProps } from '../ExportData';\nimport { flamegraphDotComApiClient } from '../infrastructure/flamegraphDotComApiClient';\nimport { getExportFilename } from './getExportFilename';\n\n/* Note: no pprof export, as the underlying API only accepts a single query (see PprofApiClient) */\nexport function useExportMenu({ profile, enableFlameGraphDotComExport }: ExportDataProps) {\n  const downloadPng = () => {\n    reportInteraction('g_pyroscope_app_export_profile', { format: 'png' });\n\n    const customExportName = getExportFilename(profile.metadata.appName);\n    const filename = `${customExportName}.png`;\n\n    // TODO use ref, this won't work for comparison side by side (??!)\n    const canvasElement = document.querySelector('canvas[data-testid=\"flameGraph\"]') as HTMLCanvasElement;\n\n    canvasElement.toBlob((blob) => {\n      if (!blob) {\n        const error = new Error('No Blob, the image cannot be created.');\n        displayError(error, ['Failed to export to png!', error.message]);\n        return;\n      }\n\n      saveAs(blob, filename);\n    }, 'image/png');\n  };\n\n  const downloadJson = () => {\n    reportInteraction('g_pyroscope_app_export_profile', { format: 'json' });\n\n    const customExportName = getExportFilename(profile.metadata.appName);\n    const filename = `${customExportName}.json`;\n    const dataStr = `data:text/json;charset=utf-8,${encodeURIComponent(JSON.stringify(profile))}`;\n\n    try {\n      saveAs(dataStr, filename);\n    } catch (error) {\n      displayError(error as Error, ['Failed to export to JSON!', (error as Error).message]);\n      return;\n    }\n  };\n\n  const uploadToFlamegraphDotCom = async () => {\n    reportInteraction('g_pyroscope_app_export_profile', { format: 'flamegraph.com' });\n\n    const customExportName = getExportFilename(profile.metadata.appName);\n\n    let response;\n\n    try {\n      response = await flamegraphDotComApiClient.upload(customExportName, profile);\n    } catch (error) {\n      displayError(error as Error, ['Failed to export to flamegraph.com!', (error as Error).message]);\n      return;\n    }\n\n    const dlLink = document.createElement('a');\n    dlLink.target = '_blank';\n    dlLink.href = response.url;\n    document.body.appendChild(dlLink);\n    dlLink.click();\n    document.body.removeChild(dlLink);\n  };\n\n  return {\n    data: {\n      shouldDisplayFlamegraphDotCom: Boolean(enableFlameGraphDotComExport),\n    },\n    actions: {\n      downloadPng,\n      downloadJson,\n      uploadToFlamegraphDotCom,\n    },\n  };\n}\n","import { Menu } from '@grafana/ui';\nimport React from 'react';\n\nimport { useExportMenu } from './domain/useExportMenu';\nimport { ExportDataProps } from './ExportData';\n\nexport function ExportMenu(props: ExportDataProps) {\n  const { actions } = useExportMenu(props);\n\n  return (\n    <Menu>\n      <Menu.Item label=\"png\" onClick={actions.downloadPng} />\n      <Menu.Item label=\"json\" onClick={actions.downloadJson} />\n    </Menu>\n  );\n}\n","import { Button, Dropdown } from '@grafana/ui';\nimport { FlamebearerProfile } from '@shared/types/FlamebearerProfile';\nimport React, { memo } from 'react';\n\nimport { ExportMenu } from './ExportMenu';\n\nexport type ExportDataProps = {\n  profile: FlamebearerProfile;\n  enableFlameGraphDotComExport?: boolean;\n};\n\nfunction ExportDataComponent(props: ExportDataProps) {\n  const { profile, enableFlameGraphDotComExport } = props;\n\n  return (\n    <Dropdown overlay={<ExportMenu profile={profile} enableFlameGraphDotComExport={enableFlameGraphDotComExport} />}>\n      <Button\n        icon=\"download-alt\"\n        size=\"sm\"\n        variant=\"secondary\"\n        fill=\"outline\"\n        aria-label=\"Export profile data\"\n        tooltip=\"Export profile data\"\n      />\n    </Dropdown>\n  );\n}\n\nexport const ExportData = memo(ExportDataComponent);\n","import { createDataFrame, DataFrameDTO, FieldType } from '@grafana/data';\n\n// eslint-disable-next-line sonarjs/cognitive-complexity\nfunction getNodes(level: number[], names: string[], diff: boolean) {\n  const nodes = [];\n  const itemOffset = diff ? 7 : 4;\n\n  for (let i = 0; i < level.length; i += itemOffset) {\n    nodes.push({\n      level: 0,\n      label: diff ? names[level[i + 6]] : names[level[i + 3]],\n      offset: level[i],\n      val: level[i + 1],\n      self: level[i + 2],\n      selfRight: diff ? level[i + 5] : 0,\n      valRight: diff ? level[i + 4] : 0,\n      valTotal: diff ? level[i + 1] + level[i + 4] : level[i + 1],\n      offsetRight: diff ? level[i + 3] : 0,\n      offsetTotal: diff ? level[i] + level[i + 3] : level[i],\n      children: [],\n    });\n  }\n\n  return nodes;\n}\n\n// eslint-disable-next-line sonarjs/cognitive-complexity\nexport function flamebearerToDataFrameDTO(levels: number[][], names: string[], unit: string, diff: boolean) {\n  if (!levels.length) {\n    return;\n  }\n\n  const nodeLevels: any[][] = [];\n\n  for (let i = 0; i < levels.length; i++) {\n    nodeLevels[i] = [];\n\n    for (const node of getNodes(levels[i], names, diff)) {\n      node.level = i;\n      nodeLevels[i].push(node);\n\n      if (i > 0) {\n        const prevNodesInLevel = nodeLevels[i].slice(0, -1);\n        const currentNodeStart =\n          prevNodesInLevel.reduce((acc, n) => n.offsetTotal + n.valTotal + acc, 0) + node.offsetTotal;\n\n        const prevLevel = nodeLevels[i - 1];\n        let prevLevelOffset = 0;\n\n        for (const prevLevelNode of prevLevel) {\n          const parentNodeStart = prevLevelOffset + prevLevelNode.offsetTotal;\n          const parentNodeEnd = parentNodeStart + prevLevelNode.valTotal;\n\n          if (parentNodeStart <= currentNodeStart && parentNodeEnd > currentNodeStart) {\n            prevLevelNode.children.push(node);\n            break;\n          } else {\n            prevLevelOffset += prevLevelNode.offsetTotal + prevLevelNode.valTotal;\n          }\n        }\n      }\n    }\n  }\n\n  const root = nodeLevels[0][0];\n  const stack = [root];\n\n  const labelValues = [];\n  const levelValues = [];\n  const selfValues = [];\n  const valueValues = [];\n  const selfRightValues = [];\n  const valueRightValues = [];\n\n  while (stack.length) {\n    const node = stack.shift();\n    labelValues.push(node.label);\n    levelValues.push(node.level);\n    selfValues.push(node.self);\n    valueValues.push(node.val);\n    selfRightValues.push(node.selfRight);\n    valueRightValues.push(node.valRight);\n    stack.unshift(...node.children);\n  }\n\n  let valueUnit = 'short';\n\n  // See format.ts#getFormatter. We have to use Grafana unit string here though.\n  switch (unit) {\n    case 'samples':\n    case 'trace_samples':\n    case 'lock_nanoseconds':\n    case 'nanoseconds':\n      valueUnit = 'ns';\n      break;\n    case 'bytes':\n      valueUnit = 'bytes';\n      break;\n  }\n\n  const fields = [\n    { name: 'level', values: levelValues },\n    { name: 'label', values: labelValues, type: FieldType.string },\n    { name: 'self', values: selfValues, config: { unit: valueUnit } },\n    { name: 'value', values: valueValues, config: { unit: valueUnit } },\n  ];\n\n  if (diff) {\n    fields.push(\n      ...[\n        {\n          name: 'selfRight',\n          values: selfRightValues,\n          config: { unit: valueUnit },\n        },\n        {\n          name: 'valueRight',\n          values: valueRightValues,\n          config: { unit: valueUnit },\n        },\n      ]\n    );\n  }\n\n  const frame: DataFrameDTO = {\n    name: 'response',\n    meta: { preferredVisualisationType: 'flamegraph' },\n    fields,\n  };\n\n  return createDataFrame(frame);\n}\n","import { createTheme } from '@grafana/data';\nimport { FlameGraph as GrafanaFlameGraph, Props } from '@grafana/flamegraph';\nimport { useTheme2 } from '@grafana/ui';\nimport React, { memo, useMemo } from 'react';\n\nimport type { FlamebearerProfile } from '../../types/FlamebearerProfile';\nimport { ExportData } from './components/ExportData';\nimport { flamebearerToDataFrameDTO } from './domain/flamebearerToDataFrameDTO';\n\ntype FlameGraphProps = {\n  profile: FlamebearerProfile;\n  diff?: boolean;\n  vertical?: boolean;\n  enableFlameGraphDotComExport?: boolean;\n  collapsedFlamegraphs?: boolean;\n  getExtraContextMenuButtons?: Props['getExtraContextMenuButtons'];\n  showAnalyzeWithAssistant?: boolean;\n};\n\nfunction FlameGraphComponent({\n  profile,\n  diff,\n  vertical,\n  enableFlameGraphDotComExport,\n  collapsedFlamegraphs,\n  getExtraContextMenuButtons,\n  showAnalyzeWithAssistant,\n}: FlameGraphProps) {\n  const { isLight } = useTheme2();\n  const getTheme = () => createTheme({ colors: { mode: isLight ? 'light' : 'dark' } });\n\n  const dataFrame = useMemo(\n    () =>\n      flamebearerToDataFrameDTO(\n        profile.flamebearer.levels,\n        profile.flamebearer.names,\n        profile.metadata.units,\n        Boolean(diff)\n      ),\n    [profile, diff]\n  );\n\n  return (\n    <GrafanaFlameGraph\n      data={dataFrame as any}\n      disableCollapsing={!collapsedFlamegraphs}\n      extraHeaderElements={<ExportData profile={profile} enableFlameGraphDotComExport={enableFlameGraphDotComExport} />}\n      vertical={vertical}\n      getTheme={getTheme as any}\n      getExtraContextMenuButtons={getExtraContextMenuButtons}\n      keepFocusOnDataChange\n      showAnalyzeWithAssistant={showAnalyzeWithAssistant}\n    />\n  );\n}\n\nexport const FlameGraph = memo(FlameGraphComponent);\n","import { css } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport { FlameGraph } from '@shared/components/FlameGraph/FlameGraph';\nimport { FlamebearerProfile } from '@shared/types/FlamebearerProfile';\nimport React from 'react';\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  flamegraph: css`\n    margin-top: ${theme.spacing(2)};\n  `,\n});\n\nexport function AdHocFlameGraph({ profile, diff }: { profile: FlamebearerProfile; diff?: boolean }) {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.flamegraph} data-testid=\"flamegraph\">\n      <FlameGraph profile={profile} diff={diff} />\n    </div>\n  );\n}\n","import { css } from '@emotion/css';\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { InlineField, InlineFieldRow, Select, useStyles2 } from '@grafana/ui';\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\n\ntype ProfileSelectorProps = {\n  profileTypes: string[];\n  onChange: (options: SelectableValue<string>) => void;\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  selectorContainer: css`\n    display: flex;\n    justify-content: center;\n    margin-bottom: ${theme.spacing(2)};\n  `,\n});\n\nexport function AdHocProfileTypeSelector({ profileTypes, onChange }: ProfileSelectorProps) {\n  const styles = useStyles2(getStyles);\n\n  const options = useMemo(() => profileTypes.map((type) => ({ value: type, label: type })), [profileTypes]);\n  const [option, setOption] = useState<SelectableValue<string>>();\n\n  const _onChange = useCallback(\n    (o: SelectableValue<string>) => {\n      setOption(o);\n      onChange(o);\n    },\n    [onChange]\n  );\n\n  useEffect(() => {\n    // when the uploaded file contains multiple sample types, the 1st is always returned by the API\n    // so, we select it automatically\n    setOption(options[0]);\n  }, [options]);\n\n  return (\n    <div className={styles.selectorContainer}>\n      <InlineFieldRow>\n        <InlineField label=\"Profile\" disabled={!options.length} data-testid=\"profile-types-dropdown\">\n          {/* added a key to ensure the dropdown is properly reset */}\n          <Select key={option?.value} value={option} options={options} onChange={_onChange} width={16} />\n        </InlineField>\n      </InlineFieldRow>\n    </div>\n  );\n}\n","import { css } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Spinner, useStyles2 } from '@grafana/ui';\nimport React from 'react';\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  spinner: css`\n    text-align: center;\n    margin-top: ${theme.spacing(2)};\n  `,\n});\n\nexport function AdHocSpinner() {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.spinner}>\n      <Spinner size={36} />\n    </div>\n  );\n}\n","import { SelectableValue } from '@grafana/data';\nimport { reportInteraction } from '@shared/domain/reportInteraction';\nimport React, { memo } from 'react';\n\nimport { useUploadFile } from '../../domain/useUploadFile';\nimport { AdHocFileDropZone } from '../AdHocFileDropZone';\nimport { AdHocFlameGraph } from '../AdHocFlameGraph';\nimport { AdHocProfileTypeSelector } from '../AdHocProfileTypeSelector';\nimport { AdHocSpinner } from '../AdHocSpinner';\n\nfunction AdHocSingleComponent() {\n  const { processFile, profileTypes, selectProfileType, profile, removeFile, isLoading } = useUploadFile();\n\n  const onChangeProfileType = (options: SelectableValue<string>) => {\n    reportInteraction('g_pyroscope_app_ad_hoc_profile_metric_selected');\n    selectProfileType(options);\n  };\n\n  const onFileDropped = (file: File) => {\n    reportInteraction('g_pyroscope_app_ad_hoc_file_dropped', { fileType: file.type });\n    processFile(file);\n  };\n\n  const onFileRemoved = () => {\n    reportInteraction('g_pyroscope_app_ad_hoc_file_removed');\n    removeFile();\n  };\n\n  return (\n    <div>\n      <AdHocProfileTypeSelector profileTypes={profileTypes} onChange={onChangeProfileType} />\n      <AdHocFileDropZone onFileDropped={onFileDropped} onFileRemove={onFileRemoved} />\n      {isLoading && !profile ? <AdHocSpinner /> : null}\n      {profile && <AdHocFlameGraph profile={profile} />}\n    </div>\n  );\n}\n\nexport const AdHocSingle = memo(AdHocSingleComponent);\n","import React from 'react';\n\nimport { AdHocColumns } from '../AdHocColums';\nimport { AdHocSingle } from './AdHocSingle';\n\nexport function AdHocComparison() {\n  return <AdHocColumns left={<AdHocSingle />} right={<AdHocSingle />} />;\n}\n","import { css } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Tab, TabContent, TabsBar, useStyles2 } from '@grafana/ui';\nimport React, { useState } from 'react';\n\nimport { AdHocComparison } from './tabs/AdHocComparison';\nimport { AdHocSingle } from './tabs/AdHocSingle';\n\n// import { AdHocDiff } from './tabs/AdHocDiff';\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  tabContent: css`\n    padding: ${theme.spacing(2)};\n    margin: ${theme.spacing(2)};\n  `,\n});\n\nexport function AdHocTabs() {\n  const styles = useStyles2(getStyles);\n  const [activeTabIndex, setActiveTabIndex] = useState(0);\n\n  return (\n    <div>\n      <TabsBar>\n        <Tab label=\" Single view\" active={activeTabIndex === 0} onChangeTab={() => setActiveTabIndex(0)} />\n        <Tab label=\" Comparison view\" active={activeTabIndex === 1} onChangeTab={() => setActiveTabIndex(1)} />\n        {/* <Tab\n          label=\" Diff view\"\n          active={activeTabIndex === 2}\n          onChangeTab={onChangeTab(2)}\n        /> */}\n      </TabsBar>\n      <TabContent className={styles.tabContent}>\n        {activeTabIndex === 0 && <AdHocSingle />}\n        {activeTabIndex === 1 && <AdHocComparison />}\n        {/* {activeTabIndex === 2 && <AdHocDiff  />} */}\n      </TabContent>\n    </div>\n  );\n}\n","import { BackButton } from '@shared/components/Common/BackButton';\nimport { useReportPageInitialized } from '@shared/infrastructure/tracking/useReportPageInitialized';\nimport { PageTitle } from '@shared/ui/PageTitle';\nimport React from 'react';\n\nimport { AdHocTabs } from './ui/AdHocTabs';\n\nexport default function AdHocView() {\n  useReportPageInitialized('ad_hoc');\n  return (\n    <>\n      <PageTitle title=\"Ad hoc view\" />\n      <AdHocTabs />\n      <BackButton />\n    </>\n  );\n}\n","import { css } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Modal, Spinner, useStyles2 } from '@grafana/ui';\nimport React, { useState } from 'react';\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  loadingIcon: css`\n    color: ${theme.colors.primary.main};\n    font-size: 48px;\n    margin-bottom: ${theme.spacing(2)};\n    display: flex;\n    justify-content: center;\n  `,\n  loadingMessage: css`\n    text-align: center;\n    font-size: ${theme.typography.h4.fontSize};\n    margin-bottom: ${theme.spacing(2)};\n  `,\n  fullScreenModal: css`\n    width: 100vw !important;\n    height: 100vh !important;\n    max-width: none !important;\n    max-height: none !important;\n    margin: 0 !important;\n    top: 0 !important;\n    left: 0 !important;\n    right: 0 !important;\n    bottom: 0 !important;\n  `,\n});\n\nexport default function GitHubCallbackView() {\n  const styles = useStyles2(getStyles);\n  const [isModalOpen, setIsModalOpen] = useState(true);\n\n  const handleDismiss = () => {\n    setIsModalOpen(false);\n    window.close();\n  };\n\n  return (\n    <Modal\n      title=\"GitHub Login\"\n      isOpen={isModalOpen}\n      onDismiss={handleDismiss}\n      closeOnEscape={true}\n      closeOnBackdropClick={true}\n      className={styles.fullScreenModal}\n    >\n      <div className={styles.loadingMessage}>\n        <div className={styles.loadingIcon}>\n          <Spinner size=\"xl\" />\n        </div>\n        <p>Logging in to GitHub...</p>\n      </div>\n    </Modal>\n  );\n}\n","/**\n * Prepares browser history before a user action is called\n *\n * This can be called BEFORE a user action is triggered. It is expected that the app is using UrlSyncManager\n * and the user action will change at least one variable or state synced with the URL. Once any variable or\n * state synced with the URL is triggered, UrlSyncManager will take care of replacing the prepared history entry.\n */\nexport function prepareHistoryEntry() {\n  history.pushState(null, '');\n}\n","import { BusEventWithPayload, DataFrame } from '@grafana/data';\n\ninterface EventTimeseriesDataReceivedPayload {\n  series?: DataFrame[];\n}\n\nexport class EventTimeseriesDataReceived extends BusEventWithPayload<EventTimeseriesDataReceivedPayload> {\n  public static type = 'timeseries-data-received';\n}\n","import { State } from 'xstate';\n\nexport enum FilterKind {\n  'partial' = 'partial',\n  'attribute-operator-value' = 'attribute-operator-value',\n  'attribute-operator' = 'attribute-operator',\n}\n\nexport enum OperatorKind {\n  '=' = '=',\n  '!=' = '!=',\n  'in' = 'in',\n  'not-in' = 'not-in',\n  'is-empty' = 'is-empty',\n  '=~' = '=~',\n  '!~' = '!~',\n}\n\nexport type PartialFilter = {\n  id: string;\n  type: FilterKind;\n  attribute: Suggestion;\n  operator?: Suggestion;\n  value?: Suggestion;\n  active: boolean;\n};\n\nexport type CompleteFilter = {\n  id: string;\n  type: FilterKind;\n  attribute: Suggestion;\n  operator: Suggestion;\n  value: Suggestion;\n  active: boolean;\n};\n\nexport type Filter = PartialFilter | CompleteFilter;\n\nexport type CompleteFilters = CompleteFilter[];\n\nexport type Filters = [PartialFilter] | CompleteFilter[] | [...CompleteFilter[], PartialFilter];\n\nexport enum FilterPartKind {\n  attribute = 'attribute',\n  operator = 'operator',\n  value = 'value',\n}\n\nexport type Suggestion = {\n  value: string;\n  label: string;\n  description?: string;\n};\n\nexport type Suggestions = Suggestion[];\n\nexport enum SuggestionKind {\n  'attribute' = 'attribute',\n  'operator' = 'operator',\n  'value' = 'value',\n}\n\nexport type InputParams = {\n  query: string;\n  from: number;\n  to: number;\n  // TODO: after migrate the legacy comparison pages to Scenes, dataSourceUid will be mandatory\n  dataSourceUid?: string;\n};\n\nexport type Edition = {\n  filterId: string;\n  part: FilterPartKind;\n};\n\nexport type QueryBuilderContext = {\n  inputParams: InputParams;\n  query: string;\n  filters: Filters;\n  isQueryUpToDate: boolean;\n  edition: Edition | null;\n  suggestions: {\n    type: SuggestionKind | null;\n    items: Suggestions;\n    isVisible: boolean;\n    isLoading: boolean;\n    error: Error | null;\n    placeholder: string;\n    noOptionsMessage: string;\n    allowCustomValue: boolean;\n    multiple: boolean;\n    disabled: boolean;\n  };\n};\n\nexport type QueryBuilderSchema = {\n  states: {\n    idle: State<QueryBuilderContext, QueryBuilderEvent>;\n    loadLabels: State<QueryBuilderContext, QueryBuilderEvent>;\n    displayLabels: State<QueryBuilderContext, QueryBuilderEvent>;\n    loadLabelValues: State<QueryBuilderContext, QueryBuilderEvent>;\n    loadOperators: State<QueryBuilderContext, QueryBuilderEvent>;\n    displayOperators: State<QueryBuilderContext, QueryBuilderEvent>;\n    displayLabelValues: State<QueryBuilderContext, QueryBuilderEvent>;\n    autoSuggestProxy: State<QueryBuilderContext, QueryBuilderEvent>;\n  };\n};\n\ntype StartEvent = { type: 'START_INPUT' };\nexport type SelectEvent = { type: 'SELECT_SUGGESTION'; data: Suggestion };\ntype DiscardEvent = { type: 'DISCARD_SUGGESTIONS' };\nexport type EditEvent = { type: 'EDIT_FILTER'; data: Edition };\nexport type RemoveFilterEvent = { type: 'REMOVE_FILTER'; data: string }; // data = filterId\ntype RemoveLastFilterEvent = { type: 'REMOVE_LAST_FILTER' };\nexport type ChangeInputParamsEvent = { type: 'CHANGE_INPUT_PARAMS'; data: InputParams };\ntype ExecuteQueryEvent = { type: 'EXECUTE_QUERY' };\n\nexport type QueryBuilderEvent =\n  | StartEvent\n  | SelectEvent\n  | DiscardEvent\n  | EditEvent\n  | RemoveFilterEvent\n  | RemoveLastFilterEvent\n  | ChangeInputParamsEvent\n  | ExecuteQueryEvent;\n","import { config } from '@grafana/runtime';\nimport { HttpClient } from '@shared/infrastructure/http/HttpClient';\n\nexport class DataSourceProxyClient extends HttpClient {\n  dataSourceUid: string;\n\n  constructor(options: { dataSourceUid: string }) {\n    const { dataSourceUid } = options;\n\n    let { appSubUrl = '', bootData } = config;\n    if (appSubUrl?.at(-1) !== '/') {\n      // ensures that the API pathname is appended correctly (appUrl seems to always have it but better to be extra careful)\n      appSubUrl += '/';\n    }\n\n    super(`${appSubUrl}api/datasources/proxy/uid/${dataSourceUid}`, {\n      'content-type': 'application/json',\n      'X-Grafana-Org-Id': String(bootData?.user?.orgId || ''),\n    });\n\n    this.dataSourceUid = options.dataSourceUid;\n  }\n}\n","import { DataSourceProxyClient } from '../../series/http/DataSourceProxyClient';\n\nexport class LabelsApiClient extends DataSourceProxyClient {\n  static queryToMatchers(query: string) {\n    const labelsIndex = query.indexOf('{');\n\n    if (labelsIndex > 0) {\n      const profileTypeID = query.substring(0, labelsIndex);\n      return [`{__profile_type__=\\\"${profileTypeID}\\\", ${query.substring(labelsIndex + 1, query.length)}`];\n    }\n\n    if (labelsIndex === 0) {\n      return [query];\n    }\n\n    return [`{__profile_type__=\\\"${query}\\\"}`];\n  }\n\n  constructor(options: { dataSourceUid: string }) {\n    super(options);\n  }\n\n  async fetchLabels(query: string, from: number, to: number) {\n    return this._post('/querier.v1.QuerierService/LabelNames', {\n      matchers: LabelsApiClient.queryToMatchers(query),\n      start: from,\n      end: to,\n    }).then((response) => response.json());\n  }\n\n  async fetchLabelValues(labelId: string, query: string, from: number, to: number) {\n    return this._post('/querier.v1.QuerierService/LabelValues', {\n      name: labelId,\n      matchers: LabelsApiClient.queryToMatchers(query),\n      start: from,\n      end: to,\n    }).then((response) => response.json());\n  }\n\n  _post(pathname: string, body: Record<string, any>) {\n    return super.fetch(pathname, {\n      method: 'POST',\n      body: JSON.stringify(body),\n    });\n  }\n}\n","type CacheKeyable = { toString(): string };\n\nexport class MemoryCacheClient {\n  store = new Map<string, any>();\n\n  static buildCacheKey(args: CacheKeyable[]) {\n    let key = '';\n    for (const arg of args) {\n      key += String(arg);\n    }\n    return key;\n  }\n\n  get(args: CacheKeyable[]): any {\n    return this.store.get(MemoryCacheClient.buildCacheKey(args));\n  }\n\n  // TODO: TTL?\n  set(args: CacheKeyable[], data: any) {\n    this.store.set(MemoryCacheClient.buildCacheKey(args), data);\n  }\n\n  delete(args: CacheKeyable[]) {\n    this.store.delete(MemoryCacheClient.buildCacheKey(args));\n  }\n}\n","export function invariant(check: boolean, message: string): asserts check {\n  if (!check) {\n    throw new Error(message);\n  }\n}\n","import { ApiClient } from './http/ApiClient';\n\nexport abstract class AbstractRepository<T extends ApiClient, U> {\n  apiClient?: T;\n  cacheClient: U | undefined;\n\n  constructor(options: { apiClient?: T; cacheClient?: U }) {\n    this.apiClient = options.apiClient;\n    this.cacheClient = options?.cacheClient;\n  }\n\n  setApiClient(apiClient: T) {\n    this.apiClient = apiClient;\n  }\n\n  setCacheClient(cacheClient: U) {\n    this.cacheClient = cacheClient;\n  }\n\n  cancel(reason: any) {\n    this.apiClient!.abort(reason);\n  }\n}\n","import { ApiClient } from '@shared/infrastructure/http/ApiClient';\n\nexport class LabelsApiClient extends ApiClient {\n  static queryToMatchers(query: string) {\n    const labelsIndex = query.indexOf('{');\n\n    if (labelsIndex > 0) {\n      const profileTypeID = query.substring(0, labelsIndex);\n      return [`{__profile_type__=\\\"${profileTypeID}\\\", ${query.substring(labelsIndex + 1, query.length)}`];\n    }\n\n    if (labelsIndex === 0) {\n      return [query];\n    }\n\n    return [`{__profile_type__=\\\"${query}\\\"}`];\n  }\n\n  async fetchLabels(query: string, from: number, to: number) {\n    // all /querier requests: timerange in Unix time ms (unix * 1000)\n    return this._post('/querier.v1.QuerierService/LabelNames', {\n      matchers: LabelsApiClient.queryToMatchers(query),\n      start: from,\n      end: to,\n    }).then((response) => response.json());\n  }\n\n  async fetchLabelValues(labelId: string, query: string, from: number, to: number) {\n    // all /querier requests: timerange in Unix time ms (unix * 1000)\n    return this._post('/querier.v1.QuerierService/LabelValues', {\n      name: labelId,\n      matchers: LabelsApiClient.queryToMatchers(query),\n      start: from,\n      end: to,\n    }).then((response) => response.json());\n  }\n\n  _post(pathname: string, body: Record<string, any>) {\n    return super.fetch(pathname, {\n      method: 'POST',\n      body: JSON.stringify(body),\n    });\n  }\n}\n","import { MemoryCacheClient } from '@shared/infrastructure/MemoryCacheClient';\n\nimport { Suggestions } from '../../components/QueryBuilder/domain/types';\nimport { invariant } from '../../types/helpers/invariant';\nimport { AbstractRepository } from '../AbstractRepository';\nimport { LabelsApiClient } from './LabelsApiClient';\n\ntype ListLabelsOptions = {\n  query: string;\n  from: number;\n  to: number;\n};\n\ntype ListLabelValuesOptions = ListLabelsOptions & {\n  label: string;\n};\n\nclass LabelsRepository extends AbstractRepository<LabelsApiClient, MemoryCacheClient> {\n  cacheClient: MemoryCacheClient;\n\n  static isNotMetaLabelOrServiceName = (label: string) => !/^(__.+__|service_name)$/.test(label);\n\n  static parseLabelsResponse(json: Record<string, any>): Suggestions {\n    if (!Array.isArray(json.names)) {\n      return [];\n    }\n\n    const uniqueLabels: string[] = Array.from(new Set(json.names.filter(LabelsRepository.isNotMetaLabelOrServiceName)));\n\n    return uniqueLabels.map((label) => ({ value: label, label }));\n  }\n\n  static parseLabelValuesResponse(json: Record<string, any>): Suggestions {\n    if (!Array.isArray(json.names)) {\n      return [];\n    }\n\n    const labelValues: string[] = json.names;\n\n    return labelValues.map((label) => ({ value: label, label }));\n  }\n\n  constructor(options: { apiClient: LabelsApiClient; cacheClient: MemoryCacheClient }) {\n    super({ apiClient: options.apiClient });\n\n    this.cacheClient = options.cacheClient;\n  }\n\n  static assertParams(query: string, from: number, to: number) {\n    invariant(Boolean(query), 'Missing \"query\" parameter!');\n    invariant(from > 0 && to > 0 && to > from, 'Invalid timerange!');\n  }\n\n  async listLabels({ query, from, to }: ListLabelsOptions): Promise<Suggestions> {\n    LabelsRepository.assertParams(query, from, to);\n\n    const cacheParams = [this.apiClient!.baseUrl, query, from, to];\n\n    const labelsFromCacheP = this.cacheClient.get(cacheParams);\n    if (labelsFromCacheP) {\n      const json = await labelsFromCacheP;\n      const labels = LabelsRepository.parseLabelsResponse(json);\n\n      if (!labels.length) {\n        this.cacheClient.delete(cacheParams);\n      }\n\n      return labels;\n    }\n\n    const fetchP = this.apiClient!.fetchLabels(query, from, to);\n    this.cacheClient.set(cacheParams, fetchP);\n\n    try {\n      const json = await fetchP;\n      return LabelsRepository.parseLabelsResponse(json);\n    } catch (error) {\n      this.cacheClient.delete(cacheParams);\n      throw error;\n    }\n  }\n\n  async listLabelValues({ label, query, from, to }: ListLabelValuesOptions): Promise<Suggestions> {\n    LabelsRepository.assertParams(query, from, to);\n    invariant(Boolean(label), 'Missing label value!');\n\n    const cacheParams = [this.apiClient!.baseUrl, label, query, from, to];\n\n    const labelValuesFromCacheP = this.cacheClient.get(cacheParams);\n    if (labelValuesFromCacheP) {\n      const json = await labelValuesFromCacheP;\n      const labelValues = LabelsRepository.parseLabelsResponse(json);\n\n      if (!labelValues.length) {\n        this.cacheClient.delete(cacheParams);\n      }\n\n      return labelValues;\n    }\n\n    const fetchP = this.apiClient!.fetchLabelValues(label, query, from, to);\n    this.cacheClient.set(cacheParams, fetchP);\n\n    try {\n      const json = await fetchP;\n      return LabelsRepository.parseLabelValuesResponse(json);\n    } catch (error) {\n      this.cacheClient.delete(cacheParams);\n      throw error;\n    }\n  }\n}\n\nexport const labelsRepository = new LabelsRepository({\n  apiClient: new LabelsApiClient(),\n  cacheClient: new MemoryCacheClient(),\n});\n","import { FilterKind, Filters } from '../types';\n\nexport function areFiltersEqual(newFilters: Filters, previousFilters: Filters): boolean {\n  const newFiltersWithoutPartial = newFilters.filter(({ type }) => type !== FilterKind.partial);\n  const previousFiltersWithoutPartial = previousFilters.filter(({ type }) => type !== FilterKind.partial);\n\n  return (\n    newFiltersWithoutPartial.length === previousFiltersWithoutPartial.length &&\n    newFiltersWithoutPartial.every((filter) =>\n      previousFiltersWithoutPartial.find(\n        ({ type, attribute, operator, value }) =>\n          type === filter.type &&\n          attribute.value === filter.attribute.value &&\n          operator?.value === filter.operator?.value &&\n          value?.value === filter.value?.value\n      )\n    )\n  );\n}\n","import { Filter, FilterKind, OperatorKind } from '../types';\n\nconst IsEmptyFilter = {\n  type: FilterKind['attribute-operator'],\n  operator: {\n    value: OperatorKind['is-empty'],\n    label: 'is empty',\n  },\n  value: {\n    value: OperatorKind['is-empty'],\n    label: '',\n  },\n};\n\nexport const buildIsEmptyFilter = (filter: Filter) => ({ ...filter, ...IsEmptyFilter });\n","import { CompleteFilter, FilterKind, Filters, OperatorKind } from '../types';\n\nexport function filtersToQuery(query: string, filters: Filters) {\n  const labelsList = filters\n    .filter(({ type }) => type !== FilterKind.partial)\n    .map((filter) => {\n      const { attribute, operator, value } = filter as CompleteFilter;\n\n      switch (operator.value) {\n        case OperatorKind.in:\n          return `${attribute.value}=~\"${value.value}\"`;\n\n        case OperatorKind['not-in']:\n          return `${attribute.value}!~\"${value.value}\"`;\n\n        case OperatorKind['is-empty']:\n          return `${attribute.value}=\"\"`;\n\n        default:\n          return `${attribute.value}${operator.value}\"${value.value}\"`;\n      }\n    });\n\n  const [, serviceNameLabel] = query.match(/{.*(service_name=\"[^\"]*\").*}/) ?? [];\n\n  if (serviceNameLabel) {\n    labelsList.unshift(serviceNameLabel);\n  }\n\n  return query.replace(/{(.*)}$/, `{${labelsList.join(',')}}`);\n}\n","import { Filter, Filters } from '../types';\n\nexport const getLastFilter = (filters: Filters): Filter | null => filters.at(-1) || null;\n","import { OperatorKind } from '../types';\n\nexport const isMultipleValuesOperator = (operator: string | OperatorKind) =>\n  operator === OperatorKind['in'] || operator === OperatorKind['not-in'];\n","import { invariant } from '../../../../types/helpers/invariant';\nimport { Filter, FilterKind } from '../types';\n\nexport const isPartialFilter = (filter: Filter): boolean => {\n  invariant(Boolean(filter), 'The filter is falsy!');\n\n  return filter.type === FilterKind.partial;\n};\n","import { invariant } from '../../../../types/helpers/invariant';\nimport { Filter, OperatorKind } from '../types';\n\n/**\n * Determines if we switch from strict operators (=, !=) to loose ones (=~)\n *\n * This is used when/after editing a filter:\n * - to determine to which state to transition to (see states/loadOperators.ts and domain/guards.ts)\n * - to set the correct edition data after the switch (see domain/actions.ts - editFilterOperator)\n *\n * Returns true when the value should be edited after the switch\n */\nexport function isEditingOperatorMode(currentOperator: string, newOperator: string) {\n  if (currentOperator === newOperator) {\n    return false;\n  }\n\n  if (newOperator === OperatorKind['is-empty']) {\n    return false;\n  }\n\n  return (\n    [\n      OperatorKind['=~'],\n      OperatorKind['!~'],\n      OperatorKind['in'],\n      OperatorKind['not-in'],\n      OperatorKind['is-empty'],\n    ].includes(currentOperator as OperatorKind) ||\n    [OperatorKind['=~'], OperatorKind['!~'], OperatorKind['in'], OperatorKind['not-in']].includes(\n      newOperator as OperatorKind\n    )\n  );\n}\n\nexport function isSwitchingOperatorMode(filterUnderEdition: Filter, newOperator: string) {\n  invariant(typeof filterUnderEdition.operator !== 'undefined', 'No operator for the filter under edition!');\n\n  const currentOperator = filterUnderEdition.operator.value;\n\n  return isEditingOperatorMode(currentOperator, newOperator);\n}\n","import { nanoid } from 'nanoid';\n\nimport { FilterKind, Filters, OperatorKind } from '../types';\nimport { buildIsEmptyFilter } from './buildIsEmptyFilter';\n\nconst parseRawFilters = (rawFilters: string): string[][] => {\n  const matches = rawFilters.matchAll(/(\\w+)(=|!=|=~|!~)\"([^\"]*)\"/g);\n  return Array.from(matches).map(([, attribute, operator, value]) => [attribute, operator, value]);\n};\n\nconst LABELS_REGEX = /.+:[^{]+\\{(.+)\\}$/;\nconst REGEX_CHARS_REGEX = /.*(\\^|\\$|\\*|\\+|\\{|\\}|\\?).*/;\n\n// eslint-disable-next-line sonarjs/cognitive-complexity\nexport function queryToFilters(query: string): Filters {\n  // 'process_cpu:cpu:nanoseconds:cpu:nanoseconds{service_name=\"ebpf/gcp-logs-ops/grafana-agent\", namespace=\"gcp-logs-ops\"}'\n  if (!query) {\n    return [];\n  }\n\n  const rawLabels = query.match(LABELS_REGEX);\n  // [_, 'service_name=\"ebpf/gcp-logs-ops/grafana-agent\", namespace=\"gcp-logs-ops\"']\n  if (!rawLabels) {\n    return [];\n  }\n\n  const rawFilters = parseRawFilters(rawLabels[1]);\n\n  // [[service_name, =, ebpf/gcp-logs-ops/grafana-agent], [namespace, =, gcp-logs-ops]]\n\n  return (rawFilters as string[][])\n    .filter(([attribute]) => attribute !== 'service_name')\n    .map(([attribute, operator, value]) => {\n      const filter = {\n        id: nanoid(10),\n        type: FilterKind['attribute-operator-value'],\n        active: true,\n        attribute: { value: attribute, label: attribute },\n        operator: { value: operator, label: operator },\n        value: { value: value, label: value },\n      };\n\n      const shouldConvertToIsEmptyOperator = operator === OperatorKind['='] && value === '';\n      if (shouldConvertToIsEmptyOperator) {\n        return buildIsEmptyFilter(filter);\n      }\n\n      const shouldConvertToInNotInOperator =\n        [OperatorKind['=~'], OperatorKind['!~']].includes(operator as OperatorKind) && !REGEX_CHARS_REGEX.test(value);\n\n      if (shouldConvertToInNotInOperator) {\n        return {\n          ...filter,\n          operator:\n            operator === OperatorKind['=~']\n              ? { value: OperatorKind.in, label: 'in' }\n              : { value: OperatorKind['not-in'], label: 'not in' },\n          value: {\n            value: value,\n            label: value\n              .split('|')\n              .map((v) => v.trim())\n              .join(', '),\n          },\n        };\n      }\n\n      return filter;\n    });\n}\n","import { FilterKind, Filters } from '../types';\n\nexport const toggleCompleteFilters = (filters: Filters, active: boolean): Filters =>\n  filters.map((filter) => (filter.type !== FilterKind.partial ? { ...filter, active } : filter)) as Filters;\n","import { nanoid } from 'nanoid';\nimport { assign } from 'xstate';\n\nimport { LabelsApiClient } from '../../../../pages/ProfilesExplorerView/infrastructure/labels/http/LabelsApiClient';\nimport { labelsRepository } from '../../../infrastructure/labels/labelsRepository';\nimport { areFiltersEqual } from './helpers/areFiltersEqual';\nimport { buildIsEmptyFilter } from './helpers/buildIsEmptyFilter';\nimport { filtersToQuery } from './helpers/filtersToQuery';\nimport { getLastFilter } from './helpers/getLastFilter';\nimport { isMultipleValuesOperator } from './helpers/isMultipleValuesOperator';\nimport { isPartialFilter } from './helpers/isPartialFilter';\nimport { isEditingOperatorMode } from './helpers/isSwitchingOperatorMode';\nimport { queryToFilters } from './helpers/queryToFilters';\nimport { toggleCompleteFilters } from './helpers/toggleCompleteFilters';\nimport {\n  ChangeInputParamsEvent,\n  EditEvent,\n  FilterKind,\n  FilterPartKind,\n  Filters,\n  OperatorKind,\n  QueryBuilderContext,\n  RemoveFilterEvent,\n  SelectEvent,\n} from './types';\n\nfunction updateFiltersAndQuery(newFilters: Filters, context: QueryBuilderContext) {\n  const isQueryUpToDate = areFiltersEqual(newFilters, queryToFilters(context.inputParams.query));\n\n  return {\n    filters: isQueryUpToDate ? toggleCompleteFilters(newFilters, true) : newFilters,\n    query: filtersToQuery(context.query, newFilters),\n    isQueryUpToDate,\n  };\n}\n\nexport const actions: any = {\n  cancelAllLoad: () => {\n    labelsRepository.cancel('Discarded by user');\n  },\n  // FILTER ATTRIBUTES\n  setFilterAttribute: assign((context: QueryBuilderContext, event: SelectEvent) => {\n    const newFilters = [\n      ...context.filters,\n      { id: nanoid(10), type: FilterKind.partial, active: false, attribute: event.data },\n    ] as Filters;\n\n    return {\n      ...context,\n      filters: newFilters,\n      isQueryUpToDate: areFiltersEqual(newFilters, queryToFilters(context.inputParams.query)),\n    };\n  }),\n  editFilterAttribute: assign((context: QueryBuilderContext, event: SelectEvent) => {\n    if (context.edition === null) {\n      throw new Error('Cannot edit filter attribute without edition data!');\n    }\n\n    const { filterId } = context.edition;\n\n    const newFilters = context.filters.map((filter) =>\n      filter.id === filterId\n        ? {\n            ...filter,\n            attribute: event.data,\n            operator: undefined,\n            value: undefined,\n          }\n        : filter\n    ) as Filters;\n\n    return {\n      ...context,\n      filters: newFilters,\n      // note: we can only edit the attribute of partial filters, so no need to rebuild the query here\n      isQueryUpToDate: areFiltersEqual(newFilters, queryToFilters(context.inputParams.query)),\n      edition: null,\n    };\n  }),\n  // FILTER OPERATORS\n  setFilterOperator: assign((context: QueryBuilderContext, event: SelectEvent) => {\n    const newFilters = context.filters.map((filter) => {\n      if (!isPartialFilter(filter)) {\n        return filter;\n      }\n\n      const newOperator = event.data;\n\n      if (newOperator.value === OperatorKind['is-empty']) {\n        return buildIsEmptyFilter(filter);\n      }\n\n      return {\n        ...filter,\n        operator: newOperator,\n        value: undefined,\n      };\n    }) as Filters;\n\n    return {\n      ...context,\n      ...updateFiltersAndQuery(newFilters, context),\n    };\n  }),\n  // eslint-disable-next-line sonarjs/cognitive-complexity\n  editFilterOperator: assign((context: QueryBuilderContext, event: SelectEvent) => {\n    if (context.edition === null) {\n      throw new Error('Cannot edit filter operator without edition data!');\n    }\n\n    const { filterId } = context.edition;\n    const newOperator = event.data;\n    let newEdition = null;\n\n    const newFilters = context.filters.map((filter) => {\n      const previousOperator = filter.operator!.value;\n\n      if (filter.id !== filterId || previousOperator === newOperator.value) {\n        return filter;\n      }\n\n      if (newOperator.value === OperatorKind['is-empty']) {\n        return buildIsEmptyFilter({\n          ...filter,\n          active: false,\n        });\n      }\n\n      if (previousOperator === OperatorKind['is-empty']) {\n        filter.value = { value: '(no value)', label: '(no value)' };\n      }\n\n      if (!isPartialFilter(filter) && isEditingOperatorMode(previousOperator, newOperator.value)) {\n        newEdition = { ...context.edition, part: FilterPartKind.value };\n      }\n\n      return {\n        ...filter,\n        operator: newOperator,\n        value:\n          isMultipleValuesOperator(previousOperator) && !isMultipleValuesOperator(newOperator.value) && filter.value\n            ? {\n                value: filter.value.value.split('|').shift(),\n                label: filter.value.label.split(', ').shift(),\n              }\n            : filter.value,\n        active: false,\n      };\n    }) as Filters;\n\n    return {\n      ...context,\n      ...updateFiltersAndQuery(newFilters, context),\n      edition: newEdition,\n    };\n  }),\n  // FILTER VALUES\n  setFilterValue: assign((context: QueryBuilderContext, event: SelectEvent) => {\n    const newFilters = context.filters.map((filter) =>\n      isPartialFilter(filter)\n        ? {\n            ...filter,\n            type: FilterKind['attribute-operator-value'],\n            active: false,\n            value: event.data,\n          }\n        : filter\n    ) as Filters;\n\n    return {\n      ...context,\n      ...updateFiltersAndQuery(newFilters, context),\n    };\n  }),\n  editFilterValue: assign((context: QueryBuilderContext, event: SelectEvent) => {\n    if (context.edition === null) {\n      throw new Error('Cannot edit filter value without edition data!');\n    }\n\n    const { filterId } = context.edition;\n\n    const newFilters = context.filters.map((filter) =>\n      filter.id === filterId\n        ? {\n            ...filter,\n            type: FilterKind['attribute-operator-value'],\n            active: false,\n            value: event.data,\n          }\n        : filter\n    ) as Filters;\n\n    return {\n      ...context,\n      ...updateFiltersAndQuery(newFilters, context),\n      edition: null,\n    };\n  }),\n  // FILTER REMOVAL\n  removeFilter: assign((context: QueryBuilderContext, event: RemoveFilterEvent) => {\n    const filterId = event.data;\n    const newFilters = toggleCompleteFilters(context.filters.filter(({ id }) => id !== filterId) as Filters, false);\n\n    return {\n      ...context,\n      ...updateFiltersAndQuery(newFilters, context),\n    };\n  }),\n  removeLastFilter: assign((context: QueryBuilderContext) => {\n    const { filters } = context;\n\n    const lastFilter = getLastFilter(filters);\n    if (!lastFilter) {\n      return context;\n    }\n\n    if (isPartialFilter(lastFilter) && lastFilter.operator) {\n      const newFilters = filters.slice(0, filters.length - 1).concat({ ...lastFilter, operator: undefined }) as Filters;\n\n      return {\n        ...context,\n        filters: newFilters,\n        // query doesn't have to change\n        isQueryUpToDate: true,\n      };\n    }\n\n    const newFilters = filters.slice(0, filters.length - 1).map((filter) => ({ ...filter, active: false })) as Filters;\n\n    return {\n      ...context,\n      ...updateFiltersAndQuery(newFilters, context),\n    };\n  }),\n  // MISC\n  setEdition: assign({ edition: (context, event: EditEvent) => event.data }),\n  changeInputParams: assign((context: QueryBuilderContext, event: ChangeInputParamsEvent) => {\n    // TODO: remove this condition after migrating the legacy comparison pages to Scenes\n    // because dataSourceUid will always be provided\n    if (event.data.dataSourceUid) {\n      labelsRepository.setApiClient(new LabelsApiClient({ dataSourceUid: event.data.dataSourceUid }));\n    }\n\n    return {\n      inputParams: event.data,\n      query: event.data.query,\n      // See also buildStateMachine() in domain/stateMachine.ts\n      filters: queryToFilters(event.data.query),\n      isQueryUpToDate: true,\n    };\n  }),\n  activateFilters: assign((context: QueryBuilderContext) => ({\n    ...context,\n    ...updateFiltersAndQuery(context.filters, context),\n  })),\n};\n","import { invariant } from '../../../../types/helpers/invariant';\nimport { Filter, QueryBuilderContext } from '../types';\n\nexport function getFilterUnderEdition(context: QueryBuilderContext): Filter {\n  const { edition, filters } = context;\n\n  invariant(edition !== null, '\"edition\" is null!');\n\n  const filter = filters.find(({ id }) => id === edition.filterId);\n\n  invariant(filter !== undefined, 'Cannot find the filter under edition!');\n\n  return filter;\n}\n","import { getFilterUnderEdition } from './helpers/getFilterUnderEdition';\nimport { getLastFilter } from './helpers/getLastFilter';\nimport { isPartialFilter } from './helpers/isPartialFilter';\nimport { isSwitchingOperatorMode } from './helpers/isSwitchingOperatorMode';\nimport { EditEvent, FilterPartKind, QueryBuilderContext, QueryBuilderEvent, SelectEvent } from './types';\n\ntype CondFn<TContext, TEvent> = (context: TContext, event: TEvent) => boolean;\ntype Guards<TContext, TEvent> = Record<string, CondFn<TContext, TEvent>>;\n\nexport const guards: Guards<QueryBuilderContext, QueryBuilderEvent> = {\n  shouldSuggestAttributes: (context) => {\n    const lastFilter = getLastFilter(context.filters);\n    return !lastFilter || !isPartialFilter(lastFilter);\n  },\n  shouldSuggestOperators: (context) => {\n    return !getLastFilter(context.filters)?.operator;\n  },\n  shouldSuggestValues: (context) => {\n    const lastFilter = getLastFilter(context.filters);\n    return Boolean(lastFilter?.operator && !lastFilter?.value);\n  },\n  // edition only\n  isEditing: (context) => context.edition !== null,\n  shouldSuggestValuesAfterOperatorEdition: (context, event) => {\n    if (!context.edition) {\n      return false;\n    }\n\n    return isSwitchingOperatorMode(getFilterUnderEdition(context), (event as SelectEvent).data.value);\n  },\n  shouldNotSuggestValuesAfterOperatorEdition: (context, event) => {\n    if (!context.edition) {\n      return false;\n    }\n\n    return !isSwitchingOperatorMode(getFilterUnderEdition(context), (event as SelectEvent).data.value);\n  },\n  // after completion\n  hasPartialFilter: (context) => {\n    const lastFilter = getLastFilter(context.filters);\n    return Boolean(lastFilter && isPartialFilter(lastFilter));\n  },\n  shouldEditAttribute: (context, event) => (event as EditEvent).data.part === FilterPartKind.attribute,\n  shouldEditOperator: (context, event) => (event as EditEvent).data.part === FilterPartKind.operator,\n  shouldEditValue: (context, event) => (event as EditEvent).data.part === FilterPartKind.value,\n};\n","import { Suggestions } from '../domain/types';\n\nclass OperatorsRepository {\n  async list(): Promise<Suggestions> {\n    return [\n      { value: '=', label: '=' },\n      { value: '!=', label: '!=' },\n      { value: 'is-empty', label: 'is empty' },\n      { value: 'in', label: 'in', description: 'Is one of' },\n      { value: 'not-in', label: 'not in', description: 'Is not one of' },\n      { value: '=~', label: '=~', description: 'Matches regex' },\n      { value: '!~', label: '!~', description: 'Does not match regex' },\n    ];\n  }\n}\n\nexport const operatorsRepository = new OperatorsRepository();\n","export const isPrivateLabel = (label: string) => label.startsWith('__');\n","import { logger } from '@shared/infrastructure/tracking/logger';\n\nimport { labelsRepository } from '../../../infrastructure/labels/labelsRepository';\nimport { operatorsRepository } from '../infrastructure/operatorsRepository';\nimport { filtersToQuery } from './helpers/filtersToQuery';\nimport { getLastFilter } from './helpers/getLastFilter';\nimport { isPrivateLabel } from './helpers/isPrivateLabel';\nimport { FilterKind, Filters, QueryBuilderContext, QueryBuilderEvent, Suggestions } from './types';\n\ntype ServiceFn<TContext, TEvent> = (context: TContext, event: TEvent) => Promise<Suggestions | Error>;\ntype Services<TContext, TEvent> = Record<string, ServiceFn<TContext, TEvent>>;\n\nfunction handleError(error: Error, info: string) {\n  const isAbortError = error instanceof DOMException && error.name === 'AbortError';\n  if (isAbortError) {\n    return [];\n  }\n\n  logger.error(error, { info });\n  throw error;\n}\n\nexport const services: Services<QueryBuilderContext, QueryBuilderEvent> = {\n  fetchLabels: async (context) => {\n    const { from, to } = context.inputParams;\n\n    try {\n      const labels = await labelsRepository.listLabels({ query: context.query, from, to });\n\n      const publicLabels: Suggestions = [];\n      const privateLabels: Suggestions = [];\n\n      // place private labels at the bottom of the suggestions list\n      labels.forEach((label) => {\n        if (isPrivateLabel(label.value)) {\n          privateLabels.push(label);\n        } else {\n          publicLabels.push(label);\n        }\n      });\n\n      return [...publicLabels, ...privateLabels];\n    } catch (error) {\n      return handleError(error as Error, 'Error while fetching labels!');\n    }\n  },\n  fetchOperators: async () => {\n    try {\n      return await operatorsRepository.list();\n    } catch (error) {\n      return handleError(error as Error, 'Error while fetching operators!');\n    }\n  },\n  // TODO: refactor indeed\n  // eslint-disable-next-line sonarjs/cognitive-complexity\n  fetchLabelValues: async (context) => {\n    let { query, edition, suggestions } = context;\n    let targetFilter;\n\n    try {\n      if (edition) {\n        const filters = context.filters.filter((filter) => {\n          if (filter.id === edition!.filterId) {\n            targetFilter = filter;\n            return false;\n          }\n\n          return true;\n        }) as Filters;\n\n        if (!targetFilter) {\n          throw new Error(`Impossible to edit filter id=\"${edition.filterId}\": no filter found!`);\n        }\n\n        query = filtersToQuery(query, filters);\n      } else {\n        targetFilter = getLastFilter(context.filters);\n\n        if (targetFilter?.type !== FilterKind.partial) {\n          throw new Error('Impossible to load label values: no partial filter found!');\n        }\n      }\n\n      if (suggestions.disabled) {\n        return [];\n      }\n\n      const labelId = targetFilter.attribute.value;\n      const { from, to } = context.inputParams;\n\n      return await labelsRepository.listLabelValues({ label: labelId, query, from, to });\n    } catch (error) {\n      return handleError(error as Error, 'Error while fetching label values!');\n    }\n  },\n};\n","import { State, StateNodeConfig } from 'xstate';\n\nimport { QueryBuilderContext, QueryBuilderEvent } from '../types';\n\nexport const autoSuggestProxy: StateNodeConfig<\n  QueryBuilderContext,\n  State<QueryBuilderContext, QueryBuilderEvent>,\n  QueryBuilderEvent\n> = {\n  // epsilon transition to automatically suggests missing partial filter parts\n  always: [\n    {\n      cond: 'shouldSuggestOperators',\n      target: 'loadOperators',\n    },\n    {\n      cond: 'shouldSuggestValues',\n      target: 'loadLabelValues',\n    },\n    { target: 'idle' },\n  ],\n};\n","export const MESSAGES = {\n  FILTER_ADD: 'Filter by label values...',\n  SELECT_LABEL: 'Select a label...',\n  SELECT_OPERATOR: 'Select an operator...',\n  SELECT_VALUE: 'Select a value...',\n  SELECT_VALUES: 'Select values...',\n  TYPE_VALUE: 'Type a regex...',\n  LOADING: 'Loading...',\n  ERROR_LOAD: 'An unexpected error occurred while loading! Please try again.',\n  SUGGESTIONS_NONE: 'No suggestions available.',\n  SUGGESTIONS_DISABLED: 'Suggestions are disabled for this label.',\n};\n","import { OperatorKind } from '../types';\n\nexport const isRegexOperator = (operator: string | OperatorKind) =>\n  operator === OperatorKind['=~'] || operator === OperatorKind['!~'];\n","import { assign, State, StateNodeConfig } from 'xstate';\n\nimport { MESSAGES } from '../../ui/constants';\nimport { getLastFilter } from '../helpers/getLastFilter';\nimport { isMultipleValuesOperator } from '../helpers/isMultipleValuesOperator';\nimport { isPartialFilter } from '../helpers/isPartialFilter';\nimport { isRegexOperator } from '../helpers/isRegexOperator';\nimport { defaultContext } from '../stateMachine';\nimport { QueryBuilderContext, QueryBuilderEvent } from '../types';\n\nexport const idle: StateNodeConfig<\n  QueryBuilderContext,\n  State<QueryBuilderContext, QueryBuilderEvent>,\n  QueryBuilderEvent\n> = {\n  entry: [\n    'cancelAllLoad',\n    assign({\n      // eslint-disable-next-line sonarjs/cognitive-complexity\n      suggestions: (context) => {\n        let placeholder = MESSAGES.FILTER_ADD;\n        let allowCustomValue = false;\n        const lastFilter = getLastFilter(context.filters);\n\n        if (lastFilter && isPartialFilter(lastFilter)) {\n          if (!lastFilter.operator) {\n            placeholder = MESSAGES.SELECT_OPERATOR;\n          } else {\n            allowCustomValue = isRegexOperator(lastFilter.operator.value);\n\n            placeholder = isMultipleValuesOperator(lastFilter.operator.value)\n              ? MESSAGES.SELECT_VALUES\n              : allowCustomValue\n              ? MESSAGES.TYPE_VALUE\n              : MESSAGES.SELECT_VALUE;\n          }\n        }\n\n        return {\n          ...defaultContext.suggestions,\n          placeholder,\n          allowCustomValue,\n        };\n      },\n      edition: null,\n    }),\n  ],\n  on: {\n    START_INPUT: [\n      {\n        cond: 'shouldSuggestAttributes',\n        target: 'loadLabels',\n      },\n      {\n        cond: 'shouldSuggestOperators',\n        target: 'loadOperators',\n      },\n      {\n        cond: 'shouldSuggestValues',\n        target: 'loadLabelValues',\n      },\n    ],\n    EDIT_FILTER: [\n      {\n        cond: 'shouldEditAttribute',\n        target: 'loadLabels',\n        actions: ['setEdition'],\n      },\n      {\n        cond: 'shouldEditOperator',\n        target: 'loadOperators',\n        actions: ['setEdition'],\n      },\n      {\n        cond: 'shouldEditValue',\n        target: 'loadLabelValues',\n        actions: ['setEdition'],\n      },\n    ],\n    REMOVE_FILTER: [\n      {\n        cond: 'hasPartialFilter',\n        target: 'autoSuggestProxy',\n        actions: ['removeFilter'],\n      },\n      {\n        target: 'idle',\n        actions: ['removeFilter'],\n      },\n    ],\n    REMOVE_LAST_FILTER: {\n      target: 'idle',\n      actions: ['removeLastFilter'],\n    },\n    CHANGE_INPUT_PARAMS: {\n      target: 'idle',\n      actions: ['changeInputParams'],\n    },\n    EXECUTE_QUERY: {\n      target: 'idle',\n      actions: ['activateFilters'],\n    },\n  },\n};\n","import { assign, State, StateNodeConfig } from 'xstate';\n\nimport { MESSAGES } from '../../ui/constants';\nimport { defaultContext } from '../stateMachine';\nimport { QueryBuilderContext, QueryBuilderEvent, SuggestionKind, Suggestions } from '../types';\n\nexport const loadLabels: StateNodeConfig<\n  QueryBuilderContext,\n  State<QueryBuilderContext, QueryBuilderEvent>,\n  QueryBuilderEvent\n> = {\n  entry: assign({\n    suggestions: () => ({\n      ...defaultContext.suggestions,\n      isVisible: true,\n      isLoading: true,\n    }),\n  }),\n  invoke: {\n    id: 'fetchLabels',\n    src: 'fetchLabels',\n    onDone: {\n      target: 'displayLabels',\n      actions: assign({\n        suggestions: (context, event) => ({\n          ...context.suggestions,\n          items: (event.data as Suggestions).filter(\n            ({ value }) => !context.filters.some((filter) => filter.attribute?.value === value)\n          ),\n          isLoading: false,\n        }),\n      }),\n    },\n    onError: {\n      target: 'displayLabels',\n      actions: assign({\n        suggestions: (context, event) => ({\n          ...context.suggestions,\n          isLoading: false,\n          error: event.data,\n        }),\n      }),\n    },\n  },\n  on: {\n    DISCARD_SUGGESTIONS: 'idle',\n  },\n};\n\nexport const displayLabels: StateNodeConfig<\n  QueryBuilderContext,\n  State<QueryBuilderContext, QueryBuilderEvent>,\n  QueryBuilderEvent\n> = {\n  entry: assign({\n    suggestions: (context) => ({\n      ...context.suggestions,\n      type: SuggestionKind.attribute,\n      isVisible: true,\n      placeholder: MESSAGES.SELECT_LABEL,\n    }),\n  }),\n  on: {\n    DISCARD_SUGGESTIONS: 'idle',\n    SELECT_SUGGESTION: [\n      {\n        cond: 'isEditing',\n        target: 'loadOperators',\n        actions: ['editFilterAttribute'],\n      },\n      {\n        target: 'loadOperators',\n        actions: ['setFilterAttribute'],\n      },\n    ],\n    REMOVE_LAST_FILTER: {\n      target: 'idle',\n      actions: ['removeLastFilter'],\n    },\n  },\n};\n","import { assign, State, StateNodeConfig } from 'xstate';\n\nimport { invariant } from '../../../../types/helpers/invariant';\nimport { MESSAGES } from '../../ui/constants';\nimport { getFilterUnderEdition } from '../helpers/getFilterUnderEdition';\nimport { getLastFilter } from '../helpers/getLastFilter';\nimport { isMultipleValuesOperator } from '../helpers/isMultipleValuesOperator';\nimport { isPrivateLabel } from '../helpers/isPrivateLabel';\nimport { isRegexOperator } from '../helpers/isRegexOperator';\nimport { defaultContext } from '../stateMachine';\nimport { QueryBuilderContext, QueryBuilderEvent, SuggestionKind } from '../types';\n\nexport const loadLabelValues: StateNodeConfig<\n  QueryBuilderContext,\n  State<QueryBuilderContext, QueryBuilderEvent>,\n  QueryBuilderEvent\n> = {\n  entry: assign({\n    suggestions: (context) => {\n      const targetFilter = context.edition ? getFilterUnderEdition(context) : getLastFilter(context.filters);\n\n      invariant(typeof targetFilter?.operator !== undefined, 'No operator for the target filter!');\n\n      return {\n        ...defaultContext.suggestions,\n        disabled:\n          // don't fetch for these operators, an input will appear in the UI instead of a select\n          ['=~', '!~'].includes(targetFilter!.operator!.value) ||\n          // See https://github.com/grafana/pyroscope-app-plugin/issues/335\n          isPrivateLabel(targetFilter!.attribute!.value),\n        isVisible: true,\n        isLoading: true,\n      };\n    },\n  }),\n  invoke: {\n    id: 'fetchLabelValues',\n    src: 'fetchLabelValues',\n    onDone: {\n      target: 'displayLabelValues',\n      actions: assign({\n        suggestions: (context, event) => ({\n          ...context.suggestions,\n          items: event.data,\n          isLoading: false,\n        }),\n      }),\n    },\n    onError: {\n      target: 'displayLabelValues',\n      actions: assign({\n        suggestions: (context, event) => ({\n          ...context.suggestions,\n          items: [],\n          isLoading: false,\n          error: event.data,\n        }),\n      }),\n    },\n  },\n  on: {\n    DISCARD_SUGGESTIONS: 'idle',\n  },\n};\n\nexport const displayLabelValues: StateNodeConfig<\n  QueryBuilderContext,\n  State<QueryBuilderContext, QueryBuilderEvent>,\n  QueryBuilderEvent\n> = {\n  entry: assign({\n    // eslint-disable-next-line sonarjs/cognitive-complexity\n    suggestions: (context) => {\n      const targetFilter = context.edition ? getFilterUnderEdition(context) : getLastFilter(context.filters);\n\n      invariant(typeof targetFilter?.operator !== undefined, 'No operator for the target filter!');\n\n      const targetOperator = targetFilter!.operator!.value;\n\n      const allowCustomValue =\n        isRegexOperator(targetOperator) ||\n        // See https://github.com/grafana/pyroscope-app-plugin/issues/335\n        context.suggestions.disabled;\n\n      const multiple = isMultipleValuesOperator(targetOperator);\n\n      let placeholder: string;\n\n      if (allowCustomValue) {\n        placeholder = MESSAGES.TYPE_VALUE;\n      } else {\n        placeholder = multiple ? MESSAGES.SELECT_VALUES : MESSAGES.SELECT_VALUE;\n      }\n\n      let noOptionsMessage: string;\n\n      if (context.suggestions.error) {\n        noOptionsMessage = MESSAGES.ERROR_LOAD;\n      } else {\n        noOptionsMessage = context.suggestions.disabled ? MESSAGES.SUGGESTIONS_DISABLED : MESSAGES.SUGGESTIONS_NONE;\n      }\n\n      return {\n        ...context.suggestions,\n        type: SuggestionKind.value,\n        isVisible: true,\n        placeholder,\n        noOptionsMessage,\n        allowCustomValue,\n        multiple,\n      };\n    },\n  }),\n  on: {\n    DISCARD_SUGGESTIONS: 'idle',\n    SELECT_SUGGESTION: [\n      {\n        cond: 'isEditing',\n        target: 'autoSuggestProxy',\n        actions: ['editFilterValue'],\n      },\n      {\n        target: 'idle',\n        actions: ['setFilterValue'],\n      },\n    ],\n    REMOVE_LAST_FILTER: {\n      target: 'loadOperators',\n      actions: ['removeLastFilter'],\n    },\n  },\n};\n","import { assign, State, StateNodeConfig } from 'xstate';\n\nimport { MESSAGES } from '../../ui/constants';\nimport { defaultContext } from '../stateMachine';\nimport { QueryBuilderContext, QueryBuilderEvent, SuggestionKind } from '../types';\n\nexport const loadOperators: StateNodeConfig<\n  QueryBuilderContext,\n  State<QueryBuilderContext, QueryBuilderEvent>,\n  QueryBuilderEvent\n> = {\n  entry: assign({\n    suggestions: () => ({\n      ...defaultContext.suggestions,\n      isVisible: true,\n      isLoading: true,\n    }),\n  }),\n  invoke: {\n    id: 'fetchOperators',\n    src: 'fetchOperators',\n    onDone: {\n      target: 'displayOperators',\n      actions: assign({\n        suggestions: (context, event) => ({\n          ...context.suggestions,\n          items: event.data,\n          isLoading: false,\n        }),\n      }),\n    },\n    onError: {\n      target: 'displayOperators',\n      actions: assign({\n        suggestions: (context, event) => ({\n          ...context.suggestions,\n          items: [],\n          isLoading: false,\n          error: event.data,\n        }),\n      }),\n    },\n  },\n  on: {\n    DISCARD_SUGGESTIONS: 'idle',\n  },\n};\n\nexport const displayOperators: StateNodeConfig<\n  QueryBuilderContext,\n  State<QueryBuilderContext, QueryBuilderEvent>,\n  QueryBuilderEvent\n> = {\n  entry: assign({\n    suggestions: (context) => ({\n      ...context.suggestions,\n      type: SuggestionKind.operator,\n      isVisible: true,\n      placeholder: MESSAGES.SELECT_OPERATOR,\n      allowCustomValue: false,\n      multiple: false,\n    }),\n  }),\n  on: {\n    DISCARD_SUGGESTIONS: 'idle',\n    SELECT_SUGGESTION: [\n      // edition\n      {\n        cond: 'shouldSuggestValuesAfterOperatorEdition',\n        target: 'loadLabelValues',\n        actions: ['editFilterOperator'],\n      },\n      {\n        cond: 'shouldNotSuggestValuesAfterOperatorEdition',\n        target: 'autoSuggestProxy',\n        actions: ['editFilterOperator'],\n      },\n      // no edition\n      {\n        cond: 'hasPartialFilter',\n        target: 'autoSuggestProxy',\n        actions: ['setFilterOperator'],\n      },\n      {\n        target: 'loadLabelValues',\n        actions: ['setFilterOperator'],\n      },\n    ],\n    REMOVE_LAST_FILTER: {\n      target: 'loadLabels',\n      actions: ['removeLastFilter'],\n    },\n  },\n};\n","import { createMachine, interpret, Interpreter, type MachineConfig, type MachineOptions } from 'xstate';\n\nimport { actions } from './actions';\nimport { guards } from './guards';\nimport { queryToFilters } from './helpers/queryToFilters';\nimport { services } from './services';\nimport { autoSuggestProxy } from './states/autoSuggestProxy';\nimport { idle } from './states/idle';\nimport { displayLabels, loadLabels } from './states/loadLabels';\nimport { displayLabelValues, loadLabelValues } from './states/loadLabelValues';\nimport { displayOperators, loadOperators } from './states/loadOperators';\nimport { InputParams, QueryBuilderContext, QueryBuilderEvent, QueryBuilderSchema } from './types';\n\nexport const defaultContext: QueryBuilderContext = Object.freeze({\n  inputParams: {\n    query: '',\n    from: 0,\n    to: 0,\n  },\n  query: '',\n  filters: [],\n  isQueryUpToDate: true,\n  edition: null,\n  suggestions: {\n    type: null,\n    items: [],\n    isVisible: false,\n    isLoading: false,\n    error: null,\n    placeholder: '',\n    noOptionsMessage: '',\n    allowCustomValue: false,\n    multiple: false,\n    disabled: false,\n  },\n});\n\nconst config = (\n  context: QueryBuilderContext\n): MachineConfig<QueryBuilderContext, QueryBuilderSchema, QueryBuilderEvent> => ({\n  id: 'query-builder',\n  initial: 'idle',\n  context,\n  predictableActionArguments: true,\n  states: {\n    idle,\n    loadLabels,\n    displayLabels,\n    loadOperators,\n    displayOperators,\n    loadLabelValues,\n    displayLabelValues,\n    autoSuggestProxy,\n  },\n});\n\nconst options: MachineOptions<QueryBuilderContext, QueryBuilderEvent> = {\n  guards,\n  services,\n  actions,\n};\n\nexport type Actor = Interpreter<QueryBuilderContext, QueryBuilderSchema, QueryBuilderEvent>;\n\nexport function buildStateMachine(inputParams: InputParams) {\n  const { query } = inputParams;\n\n  const initialContext: QueryBuilderContext = {\n    ...defaultContext,\n    inputParams,\n    query,\n    // See changeInputParams() in domain/actions.ts\n    filters: queryToFilters(query),\n  };\n\n  const stateMachine = createMachine(config(initialContext), options);\n\n  const actor = interpret(stateMachine) as unknown as Actor;\n\n  return { actor, initialContext };\n}\n","const collator = new Intl.Collator('en', { sensitivity: 'case' });\n\nexport const localeCompare = collator.compare;\n","import { css } from '@emotion/css';\nimport { SelectableValue } from '@grafana/data';\nimport { MultiSelect, useStyles2 } from '@grafana/ui';\nimport { localeCompare } from '@shared/domain/localeCompare';\nimport React, { useCallback, useMemo, useState } from 'react';\n\nimport { Suggestion, Suggestions } from '../../domain/types';\nimport { MESSAGES } from '../constants';\n\ntype MultipleEditionSelectProps = {\n  selection: Suggestion;\n  suggestions: any;\n  onCloseMenu: (values: Suggestions) => void;\n};\n\nconst placeSelectedValuesFirst = (values: Suggestions) => (a: Suggestion, b: Suggestion) => {\n  const aIsSelected = values.some((v) => v.value === a.value);\n  const bIsSelected = values.some((v) => v.value === b.value);\n\n  if (aIsSelected && bIsSelected) {\n    return localeCompare(a.value, b.value);\n  }\n\n  if (bIsSelected) {\n    return +1;\n  }\n\n  if (aIsSelected) {\n    return -1;\n  }\n\n  return 0;\n};\n\nexport function MultipleEditionSelect({ selection, suggestions, onCloseMenu }: MultipleEditionSelectProps) {\n  const styles = useStyles2(getStyles);\n\n  const defaultValue = useMemo(() => {\n    const selectionValues = selection.value.split('|');\n    const selectionLabels = selection.label.split(', ');\n    return selectionValues.map((v, i) => ({ value: v, label: selectionLabels[i] }));\n  }, [selection]);\n\n  const [values, setValues] = useState<Suggestions>(defaultValue);\n\n  // we don't sort when values change so that, for long lists, the user keeps the context they're in\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const sortedOptions = useMemo(() => suggestions.items.sort(placeSelectedValuesFirst(values)), [suggestions.items]);\n\n  const onChange = useCallback((newValues: Array<SelectableValue<string>>) => {\n    setValues(newValues.map(({ value = '', label = '' }) => ({ value, label })));\n  }, []);\n\n  const onInternalCloseMenu = useCallback(() => {\n    onCloseMenu(values);\n  }, [onCloseMenu, values]);\n\n  return (\n    <MultiSelect\n      className={styles.editionSelect}\n      placeholder={suggestions.placeholder}\n      loadingMessage={MESSAGES.LOADING}\n      closeMenuOnSelect={false}\n      hideSelectedOptions={false}\n      backspaceRemovesValue\n      // auto focus required when switching from another operator type\n      autoFocus\n      value={values}\n      onChange={onChange}\n      onCloseMenu={onInternalCloseMenu}\n      options={sortedOptions}\n      isOpen\n      isLoading={suggestions.isLoading}\n      invalid={Boolean(suggestions.error)}\n      noOptionsMessage={suggestions.noOptionsMessage}\n    />\n  );\n}\n\nconst getStyles = () => ({\n  editionSelect: css`\n    position: absolute;\n    z-index: 1;\n\n    [aria-label='Remove'] svg {\n      display: none;\n    }\n  `,\n});\n","import { css, cx } from '@emotion/css';\nimport { SelectableValue } from '@grafana/data';\nimport { Input, useStyles2 } from '@grafana/ui';\nimport React, { useEffect, useRef, useState } from 'react';\n\ntype SingleEditionInputProps = {\n  placeholder: string;\n  onChange: (suggestion: SelectableValue<string>) => void;\n  onBlur: () => void;\n  defaultValue?: string;\n  onFocus?: () => void;\n};\n\nexport function SingleEditionInput({ placeholder, defaultValue, onFocus, onChange, onBlur }: SingleEditionInputProps) {\n  const styles = useStyles2(getStyles);\n\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [invalid, setInvalid] = useState(false);\n\n  const onKeyUp = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    const value = (e.target as HTMLInputElement).value.trim();\n\n    // TODO: introduce an \"is empty\" value to handle this case (so that the filter will be synced in the URL)?\n    // see https://github.com/grafana/profiles-drilldown/pull/205\n    if (e.code === 'Enter') {\n      if (value) {\n        onChange({ value, label: value });\n      } else {\n        setInvalid(true);\n      }\n    }\n  };\n\n  const onInternalBlur = (e: React.FocusEvent<HTMLInputElement>) => {\n    const value = (e.target as HTMLInputElement).value.trim();\n\n    // TODO: introduce an \"is empty\" value to handle this case (so that the filter will be synced in the URL)?\n    // see https://github.com/grafana/explore-profiles/pull/205\n    if (value) {\n      onChange({ value, label: value });\n    } else {\n      onBlur();\n    }\n  };\n\n  useEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, []);\n\n  return (\n    <Input\n      ref={inputRef}\n      className={cx(defaultValue && styles.edition)}\n      invalid={invalid}\n      placeholder={placeholder}\n      defaultValue={defaultValue}\n      onFocus={onFocus}\n      onKeyUp={onKeyUp}\n      onBlur={onInternalBlur}\n    />\n  );\n}\n\nconst getStyles = () => ({\n  edition: css`\n    position: absolute;\n    z-index: 1;\n  `,\n});\n","import { css } from '@emotion/css';\nimport { SelectableValue } from '@grafana/data';\nimport { Select, useStyles2 } from '@grafana/ui';\nimport React from 'react';\n\nimport { Suggestion } from '../../domain/types';\nimport { MESSAGES } from '../constants';\nimport { SingleEditionInput } from '../inputs/SingleEditionInput';\n\nconst getStyles = () => ({\n  editionSelect: css`\n    position: absolute;\n    z-index: 1;\n    min-width: 160px;\n    box-shadow: none;\n\n    & input:focus {\n      outline: none !important;\n    }\n  `,\n});\n\ntype EditionSelectProps = {\n  selection: Suggestion;\n  suggestions: any;\n  onChange: (suggestion: SelectableValue<string>) => void;\n  onCloseMenu: () => void;\n};\n\nexport function SingleEditionSelect({ selection, suggestions, onChange, onCloseMenu }: EditionSelectProps) {\n  const styles = useStyles2(getStyles);\n\n  if (suggestions.allowCustomValue) {\n    return (\n      <SingleEditionInput\n        defaultValue={selection.value}\n        placeholder={suggestions.placeholder}\n        onChange={onChange}\n        onBlur={onCloseMenu}\n      />\n    );\n  }\n\n  return (\n    <Select\n      className={styles.editionSelect}\n      placeholder={suggestions.placeholder}\n      loadingMessage={MESSAGES.LOADING}\n      closeMenuOnSelect={false}\n      autoFocus\n      value={selection.value}\n      onChange={onChange}\n      onCloseMenu={onCloseMenu}\n      options={suggestions.items}\n      isOpen\n      isLoading={suggestions.isLoading}\n      invalid={Boolean(suggestions.error)}\n      noOptionsMessage={suggestions.noOptionsMessage}\n    />\n  );\n}\n","import { cx } from '@emotion/css';\nimport { Tag, useStyles2 } from '@grafana/ui';\nimport React from 'react';\n\nimport { CompleteFilter, FilterPartKind } from '../../domain/types';\nimport { getStyles } from './Chiclet';\n\ntype ChicletAttributeOperatorValueProps = {\n  filter: CompleteFilter;\n  onClick: (event: React.MouseEvent<HTMLElement>, filter: CompleteFilter, part: FilterPartKind) => void;\n  onRemove: (event: React.MouseEvent<HTMLElement>, filter: CompleteFilter) => void;\n};\n\nconst noOp = () => {};\n\nexport const ChicletAttributeOperator = ({ filter, onClick, onRemove }: ChicletAttributeOperatorValueProps) => {\n  const styles = useStyles2(getStyles);\n\n  const { attribute, operator, active } = filter;\n  const className = active ? styles.chiclet : cx(styles.chiclet, styles.inactiveChiclet);\n\n  return (\n    <div className={className} aria-label=\"Filter\">\n      <Tag aria-label=\"Filter label\" className={styles.chicletAttribute} name={attribute.label} onClick={noOp} />\n\n      <Tag\n        aria-label=\"Filter operator\"\n        className={styles.chicletOperator}\n        name={operator.label}\n        onClick={(name, e) => onClick(e, filter, FilterPartKind.operator)}\n        tabIndex={0}\n      />\n\n      <Tag\n        aria-label=\"Remove filter\"\n        className={styles.chicletRemoveButton}\n        icon=\"times\"\n        name=\"\"\n        onClick={(name, e) => onRemove(e, filter)}\n        tabIndex={0}\n      />\n    </div>\n  );\n};\n","import { cx } from '@emotion/css';\nimport { Tag, Tooltip, useStyles2 } from '@grafana/ui';\nimport React from 'react';\n\nimport { CompleteFilter, FilterPartKind } from '../../domain/types';\nimport { getStyles } from './Chiclet';\n\ntype ChicletAttributeOperatorValueProps = {\n  filter: CompleteFilter;\n  onClick: (event: React.MouseEvent<HTMLElement>, filter: CompleteFilter, part: FilterPartKind) => void;\n  onRemove: (event: React.MouseEvent<HTMLElement>, filter: CompleteFilter) => void;\n};\n\nconst noOp = () => {};\n\nexport const ChicletAttributeOperatorValue = ({ filter, onClick, onRemove }: ChicletAttributeOperatorValueProps) => {\n  const styles = useStyles2(getStyles);\n\n  const { attribute, operator, value, active } = filter;\n  const className = active ? styles.chiclet : cx(styles.chiclet, styles.inactiveChiclet);\n\n  return (\n    <div className={className} aria-label=\"Filter\">\n      <Tag aria-label=\"Filter label\" className={styles.chicletAttribute} name={attribute.label} onClick={noOp} />\n\n      <Tag\n        aria-label=\"Filter operator\"\n        className={styles.chicletOperator}\n        name={operator.label}\n        onClick={(name, e) => onClick(e, filter, FilterPartKind.operator)}\n        tabIndex={0}\n      />\n\n      <Tooltip content={value.label}>\n        <Tag\n          aria-label=\"Filter value\"\n          name={value.label}\n          className={styles.chicletValue}\n          onClick={(name, e) => onClick(e, filter, FilterPartKind.value)}\n          tabIndex={0}\n        />\n      </Tooltip>\n\n      <Tag\n        aria-label=\"Remove filter\"\n        className={styles.chicletRemoveButton}\n        icon=\"times\"\n        name=\"\"\n        onClick={(name, e) => onRemove(e, filter)}\n        tabIndex={0}\n      />\n    </div>\n  );\n};\n","import { cx } from '@emotion/css';\nimport { Tag, useStyles2 } from '@grafana/ui';\nimport React from 'react';\n\nimport { FilterPartKind, PartialFilter } from '../../domain/types';\nimport { getStyles } from './Chiclet';\n\ntype PartialChicletProps = {\n  filter: PartialFilter;\n  onClick: (event: React.MouseEvent<HTMLElement>, filter: PartialFilter, part: FilterPartKind) => void;\n};\n\nexport const PartialChiclet = ({ filter, onClick }: PartialChicletProps) => {\n  const styles = useStyles2(getStyles);\n\n  const { attribute, operator } = filter;\n  if (!attribute && !operator) {\n    return null;\n  }\n\n  return (\n    <div className={cx(styles.chiclet, styles.partialChiclet)} aria-label=\"Partial filter\">\n      <Tag\n        colorIndex={9}\n        name={attribute.label}\n        title={`Edit \"${attribute.label}\"`}\n        onClick={(name, e) => onClick(e, filter, FilterPartKind.attribute)}\n        tabIndex={0}\n      />\n\n      {operator && (\n        <Tag\n          colorIndex={9}\n          name={operator.label}\n          title={`Edit \"${operator.label}\"`}\n          className={styles.chicletOperator}\n          onClick={(name, e) => onClick(e, filter, FilterPartKind.operator)}\n          tabIndex={0}\n        />\n      )}\n    </div>\n  );\n};\n","import { css } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport React, { memo } from 'react';\n\nimport { CompleteFilter, Filter, FilterKind, FilterPartKind } from '../../domain/types';\nimport { ChicletAttributeOperator } from './ChicletAttributeOperator';\nimport { ChicletAttributeOperatorValue } from './ChicletAttributeOperatorValue';\nimport { PartialChiclet } from './PartialChiclet';\n\ntype ChicletProps = {\n  filter: Filter;\n  onClick: (event: React.MouseEvent<HTMLElement>, filter: Filter, part: FilterPartKind) => void;\n  onRemove: (event: React.MouseEvent<HTMLElement>, filter: CompleteFilter) => void;\n};\n\nconst activeBackgroundColor = 'rgb(61, 113, 217)';\nconst activeTextColor = '#fff';\nconst inactiveBorderColor = '#4a4b52';\n\nexport const getStyles = (theme: GrafanaTheme2) => ({\n  chiclet: css`\n    display: flex;\n    align-items: center;\n    border: 1px solid ${activeBackgroundColor};\n    border-radius: 2px;\n\n    & > button {\n      height: 30px;\n      background-color: ${theme.colors.background.primary};\n      color: ${theme.colors.text.maxContrast};\n    }\n\n    & > :first-child {\n      background-color: ${activeBackgroundColor};\n      color: ${activeTextColor};\n      border-radius: 0;\n\n      &:hover {\n        cursor: not-allowed !important;\n      }\n    }\n\n    & > :last-child {\n      border-left: 1px solid ${activeBackgroundColor};\n      border-top-left-radius: 0;\n      border-bottom-left-radius: 0;\n    }\n  `,\n  partialChiclet: css`\n    border-color: ${inactiveBorderColor};\n    border-right: 0;\n    border-top-right-radius: 0;\n    border-bottom-right-radius: 0;\n\n    & > :first-child {\n      background-color: ${theme.colors.background.secondary};\n      color: ${theme.colors.text.maxContrast};\n      border-radius: 0;\n      border-left: 0;\n\n      &:hover {\n        cursor: pointer !important;\n      }\n    }\n\n    & > :last-child {\n      border-color: ${inactiveBorderColor};\n      color: ${theme.colors.text.maxContrast};\n    }\n  `,\n  inactiveChiclet: css`\n    border-color: ${inactiveBorderColor};\n\n    & > button {\n      color: ${theme.colors.text.maxContrast};\n    }\n\n    & > :first-child {\n      background-color: ${theme.colors.background.secondary};\n      color: ${theme.colors.text.maxContrast};\n    }\n\n    & > :last-child {\n      border-color: ${inactiveBorderColor};\n    }\n  `,\n  chicletAttribute: css`\n    &:hover {\n      opacity: 1 !important;\n    }\n  `,\n  chicletOperator: css`\n    &:hover {\n      background-color: ${theme.colors.background.secondary};\n    }\n  `,\n  chicletValue: css`\n    flex-grow: 1;\n    text-align: left;\n    max-width: 420px;\n    text-overflow: ellipsis;\n    text-wrap: nowrap;\n    overflow: hidden;\n\n    &:hover {\n      background-color: ${theme.colors.background.secondary};\n    }\n  `,\n  chicletRemoveButton: css`\n    &:hover {\n      background-color: ${theme.colors.background.secondary};\n    }\n\n    & svg {\n      width: 12px;\n      height: 12px;\n    }\n  `,\n});\n\nconst ChicletComponent = ({ filter, onClick, onRemove }: ChicletProps) => {\n  switch (filter.type) {\n    case FilterKind.partial:\n      return <PartialChiclet filter={filter} onClick={onClick} />;\n\n    case FilterKind['attribute-operator-value']:\n      return <ChicletAttributeOperatorValue filter={filter as CompleteFilter} onClick={onClick} onRemove={onRemove} />;\n\n    case FilterKind['attribute-operator']:\n      return <ChicletAttributeOperator filter={filter as CompleteFilter} onClick={onClick} onRemove={onRemove} />;\n\n    default:\n      throw new TypeError(`Unsupported filter type \"${filter.type}\" (${JSON.stringify(filter)})!`);\n  }\n};\n\nexport const Chiclet = memo(\n  ChicletComponent,\n  (prevProps, nextProps) => JSON.stringify(prevProps.filter) === JSON.stringify(nextProps.filter)\n);\n","import { css } from '@emotion/css';\nimport { SelectableValue } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport React, { memo } from 'react';\n\nimport {\n  CompleteFilter,\n  Edition,\n  Filter,\n  FilterPartKind,\n  Filters,\n  QueryBuilderContext,\n  Suggestion,\n  Suggestions,\n} from '../../domain/types';\nimport { MultipleEditionSelect } from '../selects/MultipleEditionSelect';\nimport { SingleEditionSelect } from '../selects/SingleEditionSelect';\nimport { Chiclet } from './Chiclet';\n\nconst getStyles = () => ({\n  chicletsList: css`\n    display: flex;\n    align-items: center;\n    flex-wrap: wrap;\n    gap: 4px;\n  `,\n  editChicletContainer: css`\n    position: relative;\n  `,\n});\n\ntype ChicletsListProps = {\n  filters: Filters;\n  onClickChiclet: (event: React.MouseEvent<HTMLElement>, filter: Filter, part: FilterPartKind) => void;\n  onRemoveChiclet: (event: React.MouseEvent<HTMLElement>, filter: CompleteFilter) => void;\n  edition: Edition | null;\n  suggestions: QueryBuilderContext['suggestions'];\n  onChangeSingleSuggestion: (suggestion: SelectableValue<string>) => void;\n  onCloseSingleSuggestionsMenu: () => void;\n  onCloseMultipleSuggestionsMenu: (values: Suggestions) => void;\n};\n\nfunction ChicletsListComponent({\n  filters,\n  onClickChiclet,\n  onRemoveChiclet,\n  edition,\n  suggestions,\n  onChangeSingleSuggestion,\n  onCloseSingleSuggestionsMenu,\n  onCloseMultipleSuggestionsMenu,\n}: ChicletsListProps) {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.chicletsList} data-testid=\"filtersList\">\n      {filters.map((filter) => (\n        <div key={filter.id} className={styles.editChicletContainer}>\n          <Chiclet filter={filter} onClick={onClickChiclet} onRemove={onRemoveChiclet} />\n\n          {edition?.filterId === filter.id ? (\n            !suggestions.multiple ? (\n              <SingleEditionSelect\n                // we add a key to force to unmount the component. this prevents the operator to stick when editing label values\n                key={edition.part}\n                selection={filter[edition.part] as Suggestion}\n                suggestions={suggestions}\n                onChange={onChangeSingleSuggestion}\n                onCloseMenu={onCloseSingleSuggestionsMenu}\n              />\n            ) : (\n              <MultipleEditionSelect\n                selection={filter[edition.part] as Suggestion}\n                suggestions={suggestions}\n                onCloseMenu={onCloseMultipleSuggestionsMenu}\n              />\n            )\n          ) : null}\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport const ChicletsList = memo(ChicletsListComponent);\n","import { css } from '@emotion/css';\nimport { SelectableValue } from '@grafana/data';\nimport { Select, useStyles2 } from '@grafana/ui';\nimport React, { useEffect, useState } from 'react';\n\nimport { MESSAGES } from '../constants';\nimport { SingleEditionInput } from '../inputs/SingleEditionInput';\n\nexport const getStyles = () => ({\n  select: css`\n    border-top-right-radius: 0;\n    border-bottom-right-radius: 0;\n  `,\n});\n\ntype SingleSelectProps = {\n  suggestions: any;\n  onFocus: () => void;\n  onChange: (suggestion: SelectableValue<string>) => void;\n  onKeyDown: (event: any) => void;\n  onCloseMenu: () => void;\n};\n\n// we use this hack to force the select to open after (e.g.) editing an existing attribute\n// in this case, regardless that the `isOpen` prop of the <Select /> component is true\n// the dropdown does not appear on the UI\n// it seems it's a bug from the <Select /> component itself\n// TODO: report it!\nfunction useEnsureIsOpenHack(isVisible: boolean) {\n  const [isOpen, setIsOpen] = useState(false);\n\n  useEffect(() => {\n    if (isVisible && !isOpen) {\n      setTimeout(() => setIsOpen(true), 0);\n      return;\n    }\n\n    if (isVisible !== isOpen) {\n      setIsOpen(isVisible);\n    }\n  }, [isOpen, isVisible]);\n\n  return isOpen;\n}\n\nexport function SingleSelect({ suggestions, onFocus, onChange, onKeyDown, onCloseMenu }: SingleSelectProps) {\n  const styles = useStyles2(getStyles);\n  const isOpen = useEnsureIsOpenHack(suggestions.isVisible);\n\n  if (suggestions.allowCustomValue) {\n    return (\n      <SingleEditionInput\n        placeholder={suggestions.placeholder}\n        onFocus={onFocus}\n        onChange={onChange}\n        onBlur={onCloseMenu}\n      />\n    );\n  }\n\n  return (\n    <Select\n      className={styles.select}\n      placeholder={suggestions.placeholder}\n      loadingMessage={MESSAGES.LOADING}\n      closeMenuOnSelect={false}\n      value={null}\n      onFocus={onFocus}\n      onKeyDown={onKeyDown}\n      onChange={onChange}\n      onCloseMenu={onCloseMenu}\n      options={suggestions.items}\n      isOpen={isOpen}\n      isLoading={suggestions.isLoading}\n      invalid={Boolean(suggestions.error)}\n      noOptionsMessage={suggestions.noOptionsMessage}\n    />\n  );\n}\n","import { Select, useStyles2 } from '@grafana/ui';\nimport React from 'react';\n\nimport { MESSAGES } from '../constants';\nimport { getStyles } from './SingleSelect';\n\nconst noOp = () => {};\n\nexport function DisabledSelect() {\n  const styles = useStyles2(getStyles);\n\n  return <Select disabled className={styles.select} placeholder={MESSAGES.FILTER_ADD} onChange={noOp} />;\n}\n","import { css } from '@emotion/css';\nimport { SelectableValue } from '@grafana/data';\nimport { MultiSelect, useStyles2 } from '@grafana/ui';\nimport React, { useCallback, useState } from 'react';\n\nimport { Suggestions } from '../../domain/types';\nimport { MESSAGES } from '../constants';\n\ntype MultipleSelectProps = {\n  suggestions: any;\n  onFocus: () => void;\n  onKeyDown: (event: any, values: Suggestions) => void;\n  onCloseMenu: (values: Suggestions) => void;\n};\n\nexport function MultipleSelect({ suggestions, onFocus, onKeyDown, onCloseMenu }: MultipleSelectProps) {\n  const styles = useStyles2(getStyles);\n  const [values, setValues] = useState<Suggestions>([]);\n\n  const onChange = useCallback((newValues: Array<SelectableValue<string>>) => {\n    setValues(newValues.map(({ value = '', label = '' }) => ({ value, label })));\n  }, []);\n\n  const onInternalKeyDown = useCallback(\n    (event: any) => {\n      onKeyDown(event, values);\n    },\n    [onKeyDown, values]\n  );\n\n  const onInternalCloseMenu = useCallback(() => {\n    onCloseMenu(values);\n  }, [onCloseMenu, values]);\n\n  return (\n    <MultiSelect\n      className={styles.select}\n      placeholder={suggestions.placeholder}\n      loadingMessage={MESSAGES.LOADING}\n      closeMenuOnSelect={false}\n      hideSelectedOptions={false}\n      backspaceRemovesValue\n      // auto focus required when switching from another operator type\n      autoFocus\n      value={values}\n      onFocus={onFocus}\n      onKeyDown={onInternalKeyDown}\n      onChange={onChange}\n      onCloseMenu={onInternalCloseMenu}\n      options={suggestions.items}\n      isOpen={suggestions.isVisible}\n      isLoading={suggestions.isLoading}\n      invalid={Boolean(suggestions.error)}\n      noOptionsMessage={suggestions.noOptionsMessage}\n    />\n  );\n}\n\nconst getStyles = () => ({\n  select: css`\n    [aria-label='Remove'] svg {\n      display: none;\n    }\n  `,\n});\n","import { css, cx } from '@emotion/css';\nimport { SelectableValue } from '@grafana/data';\nimport { Button, useStyles2 } from '@grafana/ui';\nimport { usePrevious } from '@shared/components/QueryBuilder/ui/hooks';\nimport React, { memo, useCallback, useEffect } from 'react';\nimport { StateListener } from 'xstate/lib/interpreter';\n\nimport { Actor } from './domain/stateMachine';\nimport {\n  CompleteFilter,\n  CompleteFilters,\n  Filter,\n  FilterPartKind,\n  QueryBuilderContext,\n  QueryBuilderEvent,\n  Suggestions,\n} from './domain/types';\nimport { useStateMachine } from './domain/useStateMachine';\nimport { ChicletsList } from './ui/chiclets/ChicletsList';\nimport { DisabledSelect } from './ui/selects/DisabledSelect';\nimport { MultipleSelect } from './ui/selects/MultipleSelect';\nimport { SingleSelect } from './ui/selects/SingleSelect';\n\nconst getStyles = () => ({\n  queryBuilder: css`\n    display: flex;\n    justify-content: flex-start;\n    align-items: flex-end;\n    flex-wrap: wrap;\n    gap: 4px;\n    width: 100%;\n  `,\n  controls: css`\n    display: flex;\n    align-self: flex-start;\n    flex-grow: 1;\n  `,\n  executeButton: css`\n    border-top-left-radius: 0;\n    border-bottom-left-radius: 0;\n  `,\n});\n\nexport type QueryBuilderProps = {\n  id: string;\n  // TODO: after migrate the legacy comparison pages to Scenes, dataSourceUid will be mandatory\n  dataSourceUid?: string;\n  query: string;\n  from: number;\n  to: number;\n  onChangeQuery: (newQuery: string, filters: CompleteFilters) => void;\n  className?: string;\n  autoExecute?: boolean;\n};\n\nfunction QueryBuilderComponent(props: QueryBuilderProps) {\n  const styles = useStyles2(getStyles);\n\n  const { actor, internalProps } = useStateMachine(props);\n  const { filters, edition, isQueryUpToDate, suggestions } = internalProps;\n\n  const { onClickChiclet, onRemoveChiclet } = useChicletHandlers(actor);\n\n  const {\n    onFocus,\n    onChangeSingleSuggestion,\n    onSingleSelectKeyDown,\n    onCloseSingleMenu,\n    onMultipleSelectKeyDown,\n    onCloseMultipleMenu,\n  } = useSelectHandlers(actor, suggestions, props.id);\n\n  const onClickExecute = useCallback(() => {\n    actor.send({ type: 'EXECUTE_QUERY' });\n  }, [actor]);\n\n  useEffect(() => {\n    if (!props.autoExecute) {\n      return;\n    }\n\n    const onTransition: StateListener<QueryBuilderContext, QueryBuilderEvent> = ({ value, context, event }) => {\n      if (value === 'idle' && !context.isQueryUpToDate && event.type !== 'EXECUTE_QUERY') {\n        actor.send({ type: 'EXECUTE_QUERY' });\n      }\n    };\n\n    actor.onTransition(onTransition);\n\n    return () => {\n      actor.off(onTransition);\n    };\n  }, [actor, props.autoExecute]);\n\n  return (\n    <div id={props.id} className={cx(styles.queryBuilder, props.className)}>\n      {filters.length > 0 ? (\n        <ChicletsList\n          filters={filters}\n          onClickChiclet={onClickChiclet}\n          onRemoveChiclet={onRemoveChiclet}\n          edition={edition}\n          suggestions={suggestions}\n          onChangeSingleSuggestion={onChangeSingleSuggestion}\n          onCloseSingleSuggestionsMenu={onCloseSingleMenu}\n          onCloseMultipleSuggestionsMenu={onCloseMultipleMenu}\n        />\n      ) : null}\n\n      <div className={styles.controls}>\n        {edition ? (\n          <DisabledSelect />\n        ) : suggestions.multiple ? (\n          <MultipleSelect\n            suggestions={suggestions}\n            onFocus={onFocus}\n            onKeyDown={onMultipleSelectKeyDown}\n            onCloseMenu={onCloseMultipleMenu}\n          />\n        ) : (\n          <SingleSelect\n            suggestions={suggestions}\n            onFocus={onFocus}\n            onChange={onChangeSingleSuggestion}\n            onKeyDown={onSingleSelectKeyDown}\n            onCloseMenu={onCloseSingleMenu}\n          />\n        )}\n\n        {!props.autoExecute && (\n          <Button\n            onClick={onClickExecute}\n            tooltip={!isQueryUpToDate ? 'Execute new query' : 'Nothing to execute, all filters applied'}\n            className={styles.executeButton}\n            disabled={isQueryUpToDate}\n          >\n            Execute\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n}\n\nfunction useChicletHandlers(actor: Actor) {\n  const onClickChiclet = useCallback(\n    (event: any, filter: Filter, part: FilterPartKind) => {\n      actor.send({ type: 'EDIT_FILTER', data: { filterId: filter.id, part } });\n    },\n    [actor]\n  );\n\n  const onRemoveChiclet = useCallback(\n    (event: any, filter: CompleteFilter) => {\n      actor.send({ type: 'REMOVE_FILTER', data: filter.id });\n    },\n    [actor]\n  );\n\n  return {\n    onClickChiclet,\n    onRemoveChiclet,\n  };\n}\n\n// eslint-disable-next-line sonarjs/cognitive-complexity\nfunction useSelectHandlers(actor: Actor, suggestions: QueryBuilderContext['suggestions'], queryBuilderId: string) {\n  /* single & multiple */\n  const onFocus = useCallback(() => {\n    actor.send({ type: 'START_INPUT' });\n  }, [actor]);\n\n  /* single only */\n  const onChangeSingleSuggestion = useCallback(\n    (suggestion: SelectableValue<string>) => {\n      const { value = '', label = '' } = suggestion;\n\n      actor.send({ type: 'SELECT_SUGGESTION', data: { value, label } });\n    },\n    [actor]\n  );\n\n  const onSingleSelectKeyDown = useCallback(\n    (event: any) => {\n      if (event.code === 'Backspace' && !event.target.value) {\n        actor.send({ type: 'REMOVE_LAST_FILTER' });\n      }\n    },\n    [actor]\n  );\n\n  const onCloseSingleMenu = useCallback(() => {\n    actor.send({ type: 'DISCARD_SUGGESTIONS' });\n  }, [actor]);\n\n  /* multiple only */\n  const onMultipleSelectKeyDown = useCallback(\n    (event: any, values: Suggestions) => {\n      if (event.code === 'Backspace' && !event.target.value && !values.length) {\n        actor.send({ type: 'REMOVE_LAST_FILTER' });\n      }\n    },\n\n    [actor]\n  );\n\n  const onCloseMultipleMenu = useCallback(\n    (values: Suggestions) => {\n      if (values.length) {\n        actor.send({\n          type: 'SELECT_SUGGESTION',\n          data: { value: values.map((v) => v.value).join('|'), label: values.map((v) => v.label).join(', ') },\n        });\n      } else {\n        actor.send({ type: 'DISCARD_SUGGESTIONS' });\n      }\n    },\n    [actor]\n  );\n\n  /* misc */\n\n  const previousSuggestionsIsVisible = usePrevious(suggestions.isVisible);\n\n  useEffect(() => {\n    if (!suggestions.isVisible && previousSuggestionsIsVisible) {\n      // ensures that the input is blurred when a filter has been completed.\n      // we could have used blurInputOnSelect but this allows us to handle properly the case of\n      // editing a complete filter operator from (e.g.) =~ to = (and vice-versa).\n      // indeed, in such cases, we know if the input should be blurred only after selecting a\n      // suggestion, when the select is already rendered.\n      (document.querySelector(`#${queryBuilderId} input`) as HTMLInputElement)?.blur();\n    }\n  }, [suggestions.isVisible, previousSuggestionsIsVisible, queryBuilderId]);\n\n  return {\n    onFocus,\n    onChangeSingleSuggestion,\n    onSingleSelectKeyDown,\n    onMultipleSelectKeyDown,\n    onCloseSingleMenu,\n    onCloseMultipleMenu,\n  };\n}\n\nexport const QueryBuilder = memo(QueryBuilderComponent);\n","import { useEffect, useMemo, useState } from 'react';\n\nimport { QueryBuilderProps } from '../QueryBuilder';\nimport { buildStateMachine } from './stateMachine';\nimport { CompleteFilters, QueryBuilderContext } from './types';\n\nexport function useStateMachine({ dataSourceUid, query, from, to, onChangeQuery }: QueryBuilderProps) {\n  const { actor, initialContext } = useMemo(\n    () => buildStateMachine({ query, from, to }),\n    // We don't want to build a new state machine when the props change, props change is handheld via the CHANGE_INPUT_PARAMS action below\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    []\n  );\n\n  useEffect(() => {\n    actor.send({ type: 'CHANGE_INPUT_PARAMS', data: { dataSourceUid, query, from, to } });\n  }, [actor, dataSourceUid, query, from, to]);\n\n  const [internalProps, setInternalProps] = useState<QueryBuilderContext>(initialContext);\n\n  useEffect(() => {\n    actor.start();\n\n    // actor.subscribe(({ value: state, event, context }) => {\n    //   logger.debug('*** %o', JSON.stringify(event));\n    //   logger.debug('***', JSON.stringify(context, null, 1));\n    //   logger.debug('*** ---------------------> \"%s\"', state);\n    actor.subscribe(({ event, context }) => {\n      if (event.type === 'EXECUTE_QUERY') {\n        onChangeQuery(context.query, context.filters as CompleteFilters);\n      }\n\n      setInternalProps(context);\n    });\n\n    return () => {\n      actor.stop();\n    };\n    // onChangeQuery is not a stable prop, we omit it to prevent multiple machine initializations that would end up in a broken UI\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [actor]);\n\n  return { actor, internalProps };\n}\n","/**\n * This is the same use react-use: usePrevious()\n * If more react-use like hooks are needed, we can consider adding react-use as a dependency\n */\nimport { useEffect, useRef } from 'react';\n\nexport function usePrevious<T>(state: T): T | undefined {\n  const ref = useRef<T>();\n\n  useEffect(() => {\n    ref.current = state;\n  });\n\n  return ref.current;\n}\n","import PROFILE_METRICS from './profile-metrics.json';\n\nexport type ProfileMetricId = keyof typeof PROFILE_METRICS;\n\nexport type ProfileMetric = {\n  id: ProfileMetricId;\n  description: string;\n  type: string;\n  group: string;\n  unit: string; // TODO: enum\n};\n\nexport function getProfileMetric(profileMetricId: ProfileMetricId): ProfileMetric {\n  if (PROFILE_METRICS[profileMetricId]) {\n    return PROFILE_METRICS[profileMetricId] as ProfileMetric;\n  }\n\n  const [group = '?', type = '?'] = profileMetricId ? profileMetricId.split(':') : [];\n\n  // TODO: add missing metrics (e.g. godeltaprof are not yet defined)\n  // logger.warn(`No profile metric found for id \"${profileMetricId}\"`);\n\n  return {\n    id: profileMetricId,\n    description: '',\n    type,\n    group,\n    unit: 'short',\n  };\n}\n","type DataSourceDef = {\n  type: string;\n  uid: string;\n};\n\nexport const PYROSCOPE_DATA_SOURCE: DataSourceDef = Object.freeze({\n  type: 'grafana-pyroscope-datasource',\n  uid: '$dataSource', // interpolated variable\n});\n\n/* Runtime data sources */\n\nexport const PYROSCOPE_SERIES_DATA_SOURCE: DataSourceDef = Object.freeze({\n  type: 'grafana-pyroscope-series-datasource',\n  uid: 'grafana-pyroscope-series-datasource',\n});\n\nexport const PYROSCOPE_FAVORITES_DATA_SOURCE: DataSourceDef = Object.freeze({\n  type: 'grafana-pyroscope-favorites-datasource',\n  uid: 'grafana-pyroscope-favorites-datasource',\n});\n\nexport const PYROSCOPE_LABELS_DATA_SOURCE: DataSourceDef = Object.freeze({\n  type: 'grafana-pyroscope-labels-datasource',\n  uid: 'grafana-pyroscope-labels-datasource',\n});\n","import { css } from '@emotion/css';\nimport { GrafanaTheme2, VariableRefresh } from '@grafana/data';\nimport { MultiValueVariable, QueryVariable, SceneComponentProps, VariableValueOption } from '@grafana/scenes';\nimport { Cascader, CascaderOption, Icon, Tooltip, useStyles2 } from '@grafana/ui';\nimport { localeCompare } from '@shared/domain/localeCompare';\nimport { prepareHistoryEntry } from '@shared/domain/prepareHistoryEntry';\nimport { reportInteraction } from '@shared/domain/reportInteraction';\nimport { getProfileMetric, ProfileMetricId } from '@shared/infrastructure/profile-metrics/getProfileMetric';\nimport { nanoid } from 'nanoid';\nimport React, { useMemo } from 'react';\nimport { lastValueFrom } from 'rxjs';\n\nimport { PYROSCOPE_SERIES_DATA_SOURCE } from '../../infrastructure/pyroscope-data-sources';\n\ntype ProfileMetricOptions = Array<{\n  value: string;\n  label: string;\n  type: string;\n  group: string;\n}>;\n\ntype ProfileMetricVariableState = {\n  query: string;\n  skipUrlSync: boolean;\n};\n\nexport class ProfileMetricVariable extends QueryVariable {\n  static DEFAULT_VALUE = 'process_cpu:cpu:nanoseconds:cpu:nanoseconds';\n\n  // hack: subscribe to changes of dataSource only\n  static QUERY_DEFAULT = '$dataSource and all profile metrics';\n\n  // hack: subscribe to changes of dataSource and serviceName to avoid showing options that don't have any data associated\n  static QUERY_SERVICE_NAME_DEPENDENT = '$dataSource and only $serviceName profile metrics';\n\n  constructor(state?: ProfileMetricVariableState) {\n    super({\n      key: 'profileMetricId',\n      name: 'profileMetricId',\n      label: 'Profile type',\n      datasource: PYROSCOPE_SERIES_DATA_SOURCE,\n      query: ProfileMetricVariable.QUERY_DEFAULT,\n      loading: true,\n      refresh: VariableRefresh.onTimeRangeChanged,\n      ...state,\n    });\n\n    this.changeValueTo = this.changeValueTo.bind(this);\n\n    this.addActivationHandler(this.onActivate.bind(this));\n  }\n\n  onActivate() {\n    if (!this.state.value) {\n      this.setState({ value: ProfileMetricVariable.DEFAULT_VALUE });\n    }\n  }\n\n  async update(force = false) {\n    if (!force && this.state.loading) {\n      return;\n    }\n\n    let options: VariableValueOption[] = [];\n    let error = null;\n\n    this.setState({ loading: true, options: [], error: null });\n\n    try {\n      options = await lastValueFrom(this.getValueOptions({}));\n    } catch (e) {\n      error = e;\n    } finally {\n      this.setState({ loading: false, options, error });\n    }\n  }\n\n  static buildCascaderOptions(options: ProfileMetricOptions): CascaderOption[] {\n    const optionsMap = new Map();\n\n    for (const { value } of options) {\n      const profileMetric = getProfileMetric(value as ProfileMetricId);\n      const { group, type } = profileMetric;\n\n      const nameSpaceServices = optionsMap.get(group) || {\n        value: group,\n        label: group,\n        items: [],\n      };\n\n      const items = nameSpaceServices.items || [];\n\n      items.push({\n        value,\n        label: type,\n      });\n\n      nameSpaceServices.items = items;\n\n      optionsMap.set(group, nameSpaceServices);\n    }\n\n    return Array.from(optionsMap.values()).sort((a, b) => localeCompare(b.label, a.label));\n  }\n\n  onSelect = (newValue: string) => {\n    reportInteraction('g_pyroscope_app_profile_metric_selected');\n\n    if (!this.state.skipUrlSync) {\n      prepareHistoryEntry();\n    }\n    this.changeValueTo(newValue);\n  };\n\n  static Component = ({ model }: SceneComponentProps<MultiValueVariable & { onSelect?: any }>) => {\n    const styles = useStyles2(getStyles);\n    const { loading, value, options, error } = model.useState();\n\n    const cascaderOptions = useMemo(() => {\n      return ProfileMetricVariable.buildCascaderOptions(options as ProfileMetricOptions);\n    }, [options]);\n\n    if (error) {\n      return (\n        <Tooltip theme=\"error\" content={error.toString()}>\n          <Icon className={styles.iconError} name=\"exclamation-triangle\" size=\"xl\" />\n        </Tooltip>\n      );\n    }\n\n    return (\n      <Cascader\n        // we add a key to ensure that the Cascader selects the initial value or available options properly when landing on the page\n        // and when switching exploration types, because the value might also be changed after the component has been rendered by SceneProfilesExplorer\n        key={nanoid(5)}\n        aria-label=\"Profile metrics list\"\n        width={24}\n        separator=\"/\"\n        displayAllSelectedLevels\n        placeholder={loading ? 'Loading...' : `Select a profile metric (${options.length})`}\n        options={cascaderOptions}\n        initialValue={value as string}\n        changeOnSelect={false}\n        onSelect={model.onSelect}\n      />\n    );\n  };\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  iconError: css`\n    height: 32px;\n    align-self: center;\n    color: ${theme.colors.error.text};\n  `,\n});\n","import { css } from '@emotion/css';\nimport { GrafanaTheme2, VariableRefresh } from '@grafana/data';\nimport { MultiValueVariable, QueryVariable, SceneComponentProps, VariableValueOption } from '@grafana/scenes';\nimport { Cascader, Icon, Tooltip, useStyles2 } from '@grafana/ui';\nimport { prepareHistoryEntry } from '@shared/domain/prepareHistoryEntry';\nimport { reportInteraction } from '@shared/domain/reportInteraction';\nimport { userStorage } from '@shared/infrastructure/userStorage';\nimport { nanoid } from 'nanoid';\nimport React, { useMemo } from 'react';\nimport { lastValueFrom } from 'rxjs';\n\nimport { PYROSCOPE_SERIES_DATA_SOURCE } from '../../../infrastructure/pyroscope-data-sources';\nimport { buildServiceNameCascaderOptions } from './domain/useBuildServiceNameOptions';\n\ntype ServiceNameVariableState = {\n  query: string;\n  skipUrlSync: boolean;\n};\n\nexport class ServiceNameVariable extends QueryVariable {\n  // hack: subscribe to changes of dataSource only\n  static QUERY_DEFAULT = '$dataSource and all services';\n\n  // hack: subscribe to changes of dataSource and profileMetricId\n  static QUERY_PROFILE_METRIC_DEPENDENT = '$dataSource and only $profileMetricId services';\n\n  constructor(state?: ServiceNameVariableState) {\n    super({\n      key: 'serviceName',\n      name: 'serviceName',\n      label: 'Service',\n      datasource: PYROSCOPE_SERIES_DATA_SOURCE,\n      query: ServiceNameVariable.QUERY_DEFAULT,\n      loading: true,\n      refresh: VariableRefresh.onTimeRangeChanged,\n      ...state,\n    });\n\n    this.addActivationHandler(this.onActivate.bind(this));\n  }\n\n  onActivate() {\n    const { serviceName: serviceNameFromStorage } = userStorage.get(userStorage.KEYS.PROFILES_EXPLORER) || {};\n\n    if (serviceNameFromStorage && !this.state.value) {\n      this.setState({ value: serviceNameFromStorage });\n    }\n\n    this.subscribeToState((newState, prevState) => {\n      if (newState.value && newState.value !== prevState.value) {\n        const storage = userStorage.get(userStorage.KEYS.PROFILES_EXPLORER) || {};\n        storage.serviceName = newState.value;\n        userStorage.set(userStorage.KEYS.PROFILES_EXPLORER, storage);\n      }\n    });\n  }\n\n  async update() {\n    if (this.state.loading) {\n      return;\n    }\n\n    let options: VariableValueOption[] = [];\n    let error = null;\n\n    this.setState({ loading: true, options: [], error: null });\n\n    try {\n      options = await lastValueFrom(this.getValueOptions({}));\n    } catch (e) {\n      error = e;\n    } finally {\n      this.setState({ loading: false, options, error });\n    }\n  }\n\n  selectNewValue = (newValue: string) => {\n    reportInteraction('g_pyroscope_app_service_name_selected');\n\n    if (!this.state.skipUrlSync) {\n      prepareHistoryEntry();\n    }\n\n    this.changeValueTo(newValue);\n  };\n\n  static Component = ({ model }: SceneComponentProps<MultiValueVariable & { selectNewValue?: any }>) => {\n    const styles = useStyles2(getStyles);\n    const { loading, value, options, error } = model.useState();\n\n    const cascaderOptions = useMemo(\n      () => buildServiceNameCascaderOptions(options.map(({ label }) => label)),\n      [options]\n    );\n\n    if (error) {\n      return (\n        <Tooltip theme=\"error\" content={error.toString()}>\n          <Icon className={styles.iconError} name=\"exclamation-triangle\" size=\"xl\" />\n        </Tooltip>\n      );\n    }\n\n    return (\n      <Cascader\n        // we add a key to ensure that the Cascader selects the initial value properly when landing on the page\n        // and when switching exploration types, because the value might also be changed after the component has been rendered by SceneProfilesExplorer\n        // (e.g. in SceneExploreServiceProfileTypes)\n        // it's also required for supporting the Investigations app when opening a link with a different data source\n        // than the one currently selected\n        key={nanoid(5)}\n        aria-label=\"Services list\"\n        width={32}\n        separator=\"/\"\n        displayAllSelectedLevels\n        placeholder={loading ? 'Loading services...' : `Select a service (${options.length})`}\n        options={cascaderOptions}\n        initialValue={value as string}\n        changeOnSelect={false}\n        onSelect={model.selectNewValue}\n      />\n    );\n  };\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  iconError: css`\n    height: 32px;\n    align-self: center;\n    color: ${theme.colors.error.text};\n  `,\n});\n","import { CascaderOption } from '@grafana/ui';\n\n// eslint-disable-next-line sonarjs/cognitive-complexity\nexport function buildServiceNameCascaderOptions(serviceNames: string[]) {\n  // Sort the service names to ensure consistent ordering\n  const sortedServiceNames = [...serviceNames].sort();\n\n  // Keep track of the root elements\n  const rootElements: CascaderOption[] = [];\n\n  // Create a map to store the hierarchy\n  const hierarchy = new Map<string, CascaderOption>();\n\n  for (const serviceId of sortedServiceNames) {\n    const parts = serviceId.split('/');\n    let currentPath = '';\n\n    for (let i = 0; i < parts.length; i++) {\n      const part = parts[i];\n      const previousPath = currentPath;\n      currentPath = currentPath ? `${currentPath}/${part}` : part;\n\n      const isComplete = i === parts.length - 1;\n\n      if (!hierarchy.has(currentPath) || isComplete) {\n        const option: CascaderOption = {\n          // the value needs to be different for a complete one vs the one that goes deeper otherwise it will not be selected.\n          value: isComplete ? currentPath : currentPath + '/',\n          label: part,\n          items: isComplete ? undefined : [],\n        };\n\n        // if the option is not complete it should be part of the hierachy\n        if (!isComplete) {\n          hierarchy.set(currentPath, option);\n        }\n\n        // Add to parent's items if not root level, other wise it will be added to the rootElements\n        if (previousPath) {\n          const parent = hierarchy.get(previousPath);\n          if (parent && parent.items) {\n            parent.items.push(option);\n          }\n        } else {\n          rootElements.push(option);\n        }\n      }\n    }\n  }\n  return rootElements;\n}\n","import { sceneGraph, SceneObject } from '@grafana/scenes';\nimport { useMemo } from 'react';\n\nimport { FiltersVariable } from './variables/FiltersVariable/FiltersVariable';\nimport { ProfileMetricVariable } from './variables/ProfileMetricVariable';\nimport { ServiceNameVariable } from './variables/ServiceNameVariable/ServiceNameVariable';\n\nexport function useBuildPyroscopeQuery(sceneObject: SceneObject, filterKey: string) {\n  const { value: serviceName } = sceneGraph\n    .findByKeyAndType(sceneObject, 'serviceName', ServiceNameVariable)\n    .useState();\n\n  const { value: profileMetricId } = sceneGraph\n    .findByKeyAndType(sceneObject, 'profileMetricId', ProfileMetricVariable)\n    .useState();\n\n  const { filterExpression } = sceneGraph.findByKeyAndType(sceneObject, filterKey, FiltersVariable).useState();\n\n  return useMemo(\n    () => `${profileMetricId}{service_name=\"${serviceName}\",${filterExpression}}`,\n    [filterExpression, profileMetricId, serviceName]\n  );\n}\n","import { DataSourceVariable } from '@grafana/scenes';\nimport { ApiClient } from '@shared/infrastructure/http/ApiClient';\nimport { userStorage } from '@shared/infrastructure/userStorage';\n\nexport class ProfilesDataSourceVariable extends DataSourceVariable {\n  constructor() {\n    super({\n      pluginId: 'grafana-pyroscope-datasource',\n      key: 'dataSource',\n      name: 'dataSource',\n      label: 'Data source',\n      skipUrlSync: true,\n      // we ensure that we'll always have the expected default data source (when the \"var-dataSource\" URL search param is missing, incorrect, etc.)\n      value: ApiClient.selectDefaultDataSource().uid,\n    });\n\n    this.addActivationHandler(this.onActivate.bind(this));\n  }\n\n  onActivate() {\n    this.setState({ skipUrlSync: false });\n\n    this.subscribeToState((newState, prevState) => {\n      if (newState.value && newState.value !== prevState.value) {\n        const storage = userStorage.get(userStorage.KEYS.PROFILES_EXPLORER) || {};\n        storage.dataSource = newState.value;\n        userStorage.set(userStorage.KEYS.PROFILES_EXPLORER, storage);\n      }\n    });\n  }\n}\n","import { AdHocVariableFilter } from '@grafana/data';\nimport { CompleteFilter, OperatorKind } from '@shared/components/QueryBuilder/domain/types';\n\nexport const convertPyroscopeToVariableFilter = (filter: CompleteFilter): AdHocVariableFilter => {\n  let newOperator = filter.operator.value;\n\n  if (filter.operator.value === OperatorKind['in']) {\n    newOperator = OperatorKind['=~'];\n  } else if (filter.operator.value === OperatorKind['not-in']) {\n    newOperator = OperatorKind['!~'];\n  }\n\n  return {\n    key: filter.attribute.value,\n    operator: newOperator,\n    value: filter.value.value,\n  };\n};\n\nfunction searchForFilter(filters: AdHocVariableFilter[], filterKey: string) {\n  let found: AdHocVariableFilter | undefined;\n\n  const filtersWithoutFound = filters.filter((f) => {\n    if (f.key === filterKey) {\n      found = f;\n      return false;\n    }\n\n    return true;\n  });\n\n  return { found, filtersWithoutFound };\n}\n\nconst addToFilters = (filters: AdHocVariableFilter[], filterToAdd: AdHocVariableFilter) => [...filters, filterToAdd];\n\nexport function includeLabelValue(\n  filters: AdHocVariableFilter[],\n  filterForInclude: AdHocVariableFilter\n): AdHocVariableFilter[] {\n  const { found, filtersWithoutFound } = searchForFilter(filters, filterForInclude.key);\n\n  if (!found) {\n    return addToFilters(filters, { ...filterForInclude, operator: '=~' });\n  }\n\n  if (['!~', '!='].includes(found.operator)) {\n    return addToFilters(filtersWithoutFound, { ...filterForInclude, operator: '=~' });\n  }\n\n  const foundValues = new Set(found.value.split('|'));\n\n  if (found.operator === '=~') {\n    return addToFilters(filtersWithoutFound, {\n      ...found,\n      value: Array.from(foundValues.add(filterForInclude.value)).join('|'),\n    });\n  }\n\n  // found.operator is '='\n  return found.value === filterForInclude.value\n    ? filters\n    : addToFilters(filtersWithoutFound, {\n        ...filterForInclude,\n        operator: '=~',\n        value: Array.from(foundValues.add(filterForInclude.value)).join('|'),\n      });\n}\n\nexport function excludeLabelValue(\n  filters: AdHocVariableFilter[],\n  filterForExclude: AdHocVariableFilter\n): AdHocVariableFilter[] {\n  const { found, filtersWithoutFound } = searchForFilter(filters, filterForExclude.key);\n\n  if (!found) {\n    return addToFilters(filters, { ...filterForExclude, operator: '!~' });\n  }\n\n  if (['=~', '='].includes(found.operator)) {\n    return addToFilters(filtersWithoutFound, { ...filterForExclude, operator: '!~' });\n  }\n\n  const foundValues = new Set(found.value.split('|'));\n\n  if (found.operator === '!~') {\n    return addToFilters(filtersWithoutFound, {\n      ...found,\n      value: Array.from(foundValues.add(filterForExclude.value)).join('|'),\n    });\n  }\n\n  // found.operator is '!='\n  return found.value === filterForExclude.value\n    ? filters\n    : addToFilters(filtersWithoutFound, {\n        ...filterForExclude,\n        operator: '!~',\n        value: Array.from(foundValues.add(filterForExclude.value)).join('|'),\n      });\n}\n\nexport function clearLabelValue(\n  filters: AdHocVariableFilter[],\n  filterForClear: AdHocVariableFilter\n): AdHocVariableFilter[] {\n  const { found, filtersWithoutFound } = searchForFilter(filters, filterForClear.key);\n\n  if (!found) {\n    return filters;\n  }\n\n  const filteredValues = found.value.split('|').filter((v) => v !== filterForClear.value);\n\n  if (filteredValues.length > 0) {\n    return addToFilters(filtersWithoutFound, {\n      ...found,\n      value: filteredValues.join('|'),\n    });\n  }\n\n  return [...filtersWithoutFound];\n}\n\nexport const isFilterValid = (filter: AdHocVariableFilter) => filter.operator in OperatorKind;\n","import { AdHocFiltersVariable, SceneComponentProps, sceneGraph, SceneObject } from '@grafana/scenes';\nimport { CompleteFilters, OperatorKind } from '@shared/components/QueryBuilder/domain/types';\nimport { QueryBuilder } from '@shared/components/QueryBuilder/QueryBuilder';\nimport { reportInteraction } from '@shared/domain/reportInteraction';\nimport { uniq } from 'lodash';\nimport React from 'react';\n\nimport { useBuildPyroscopeQuery } from '../../useBuildPyroscopeQuery';\nimport { ProfilesDataSourceVariable } from '../ProfilesDataSourceVariable';\nimport { convertPyroscopeToVariableFilter, isFilterValid } from './filters-ops';\n\nexport class FiltersVariable extends AdHocFiltersVariable {\n  static DEFAULT_VALUE = [];\n\n  constructor({ key }: { key: string }) {\n    super({\n      key,\n      name: key,\n      label: 'Filters',\n      filters: FiltersVariable.DEFAULT_VALUE,\n      expressionBuilder: (filters) =>\n        filters\n          // after parsing the URL search parameters the filters might end up having an invalid operator, which in turn, will\n          // generate an invalid query that will make the API requests fail - we prevent this to happen by sanitizing the filters here\n          .filter(isFilterValid)\n          .map(({ key, operator, value }) =>\n            operator === OperatorKind['is-empty'] ? `${key}=\"\"` : `${key}${operator}\"${value}\"`\n          )\n          .join(','),\n    });\n\n    this.addActivationHandler(this.onActivate.bind(this));\n  }\n\n  reset() {\n    this.setState({ filters: FiltersVariable.DEFAULT_VALUE });\n  }\n\n  static resetAll(sceneObject: SceneObject) {\n    ['filters', 'filtersBaseline', 'filtersComparison'].forEach((filterKey) => {\n      sceneGraph.findByKeyAndType(sceneObject, filterKey, FiltersVariable).reset();\n    });\n  }\n\n  onActivate() {\n    // VariableDependencyConfig does not work :man_shrug: (never called)\n    const dataSourceSub = sceneGraph\n      .findByKeyAndType(this, 'dataSource', ProfilesDataSourceVariable)\n      .subscribeToState(() => {\n        this.reset();\n      });\n\n    return () => {\n      dataSourceSub.unsubscribe();\n    };\n  }\n\n  onChangeQuery = (query: string, filters: CompleteFilters) => {\n    reportInteraction('g_pyroscope_app_filters_changed', {\n      name: this.state.name,\n      count: filters.length,\n      operators: uniq(filters.map((f) => f.operator.label)),\n    });\n\n    this.setState({\n      filters: filters.map(convertPyroscopeToVariableFilter),\n    });\n  };\n\n  static Component = ({ model }: SceneComponentProps<AdHocFiltersVariable & { onChangeQuery?: any }>) => {\n    const { key } = model.useState();\n\n    const query = useBuildPyroscopeQuery(model, key as string);\n\n    const { value: dataSourceUid } = sceneGraph\n      .findByKeyAndType(model, 'dataSource', ProfilesDataSourceVariable)\n      .useState();\n\n    const { from, to } = sceneGraph.getTimeRange(model).state.value;\n\n    return (\n      <QueryBuilder\n        id={`query-builder-${key}`}\n        autoExecute\n        dataSourceUid={dataSourceUid as string}\n        query={query}\n        from={from.unix() * 1000}\n        to={to.unix() * 1000}\n        onChangeQuery={model.onChangeQuery}\n      />\n    );\n  };\n}\n","import { sceneGraph, SceneObject } from '@grafana/scenes';\n\nexport function getSceneVariableValue(sceneObject: SceneObject, variableName: string): string {\n  return sceneGraph.lookupVariable(variableName, sceneObject)?.getValue() as string;\n}\n","import {\n  SceneComponentProps,\n  SceneObjectBase,\n  SceneObjectState,\n  SceneObjectUrlSyncConfig,\n  SceneObjectUrlValues,\n} from '@grafana/scenes';\nimport { RadioButtonGroup } from '@grafana/ui';\nimport { reportInteraction } from '@shared/domain/reportInteraction';\nimport React from 'react';\n\nexport enum PanelType {\n  TIMESERIES = 'time-series',\n  BARGAUGE = 'bar-gauge',\n  TABLE = 'table',\n  HISTOGRAM = 'histogram',\n}\n\nexport interface ScenePanelTypeSwitcherState extends SceneObjectState {\n  panelType: PanelType;\n  onChange?: (panelType: PanelType) => void;\n}\n\nexport class ScenePanelTypeSwitcher extends SceneObjectBase<ScenePanelTypeSwitcherState> {\n  protected _urlSync = new SceneObjectUrlSyncConfig(this, { keys: ['panelType'] });\n\n  static OPTIONS = [\n    { label: 'Time series', value: PanelType.TIMESERIES, icon: 'heart-rate' },\n    { label: 'Totals', value: PanelType.BARGAUGE, icon: 'align-left' },\n    { label: 'Maxima', value: PanelType.TABLE, icon: 'angle-double-up' },\n    { label: 'Histograms', value: PanelType.HISTOGRAM, icon: 'graph-bar' },\n  ];\n\n  static DEFAULT_PANEL_TYPE = PanelType.TIMESERIES;\n\n  constructor() {\n    super({\n      key: 'panel-type-switcher',\n      panelType: ScenePanelTypeSwitcher.DEFAULT_PANEL_TYPE,\n    });\n  }\n\n  getUrlState() {\n    return {\n      panelType: this.state.panelType,\n    };\n  }\n\n  updateFromUrl(values: SceneObjectUrlValues) {\n    const stateUpdate: Partial<ScenePanelTypeSwitcherState> = {};\n\n    if (typeof values.panelType === 'string' && values.panelType !== this.state.panelType) {\n      stateUpdate.panelType = Object.values(PanelType).includes(values.panelType as PanelType)\n        ? (values.panelType as PanelType)\n        : ScenePanelTypeSwitcher.DEFAULT_PANEL_TYPE;\n    }\n\n    this.setState(stateUpdate);\n  }\n\n  reset() {\n    this.setState({ panelType: ScenePanelTypeSwitcher.DEFAULT_PANEL_TYPE });\n  }\n\n  onChange = (panelType: PanelType) => {\n    reportInteraction('g_pyroscope_app_panel_type_changed', { panelType });\n\n    this.setState({ panelType });\n  };\n\n  static Component = ({ model }: SceneComponentProps<ScenePanelTypeSwitcher>) => {\n    const { panelType } = model.useState();\n\n    return (\n      <RadioButtonGroup\n        aria-label=\"Panel type switcher\"\n        options={ScenePanelTypeSwitcher.OPTIONS}\n        value={panelType}\n        onChange={model.onChange}\n        fullWidth={false}\n      />\n    );\n  };\n}\n","import { config } from '@grafana/runtime';\n\nexport function getColorByIndex(index: number) {\n  const visTheme = config.theme2.visualization;\n  return visTheme.getColorByName(visTheme.palette[index % 8]);\n}\n","import { Field } from '@grafana/data';\n\nexport const getSeriesLabelFieldName = (metricField: Field, label?: string) =>\n  metricField.labels?.[label as string] || '(no value)'; // metricField.labels can be empty when the ingested profiles do not have a label value set\n","import { DataFrame } from '@grafana/data';\n\nexport const getSeriesStatsValue = (series: DataFrame, displayName: string) =>\n  series.meta?.stats?.find((s) => s.displayName === displayName)?.value;\n","type ParsedQuery = {\n  serviceId: string;\n  profileMetricId: string;\n  labelsSelector: string;\n  labels: string[];\n};\n\nexport function parseQuery(query: string): ParsedQuery {\n  const [, serviceId = ''] = query.match(/.+\\{.*service_name=\"([^\"]+)\".*\\}/) || [];\n  const [, profileMetricId = ''] = query.match(/([^{]+)\\{.*}/) || [];\n\n  const labelsSelector = query.substring(query.indexOf('{'));\n\n  const labels = labelsSelector\n    .replace(/(\\{|\\})/, '')\n    .split(',')\n    .map((m) => m.match(/\\W*([^=!~]+)(=|!=|=~|!~)\"(.*)\"/)?.[0])\n    .filter((label) => label && !label.includes('service_name')) as string[];\n\n  return { serviceId, profileMetricId, labelsSelector, labels };\n}\n\ntype BuildQueryParams = {\n  serviceId: string;\n  profileMetricId: string;\n  labels?: string[];\n};\n\nexport const buildQuery = ({ serviceId, profileMetricId, labels }: BuildQueryParams): string =>\n  labels?.length\n    ? `${profileMetricId}{service_name=\"${serviceId}\",${labels.join()}}`\n    : `${profileMetricId}{service_name=\"${serviceId}\"}`;\n","import { LoadingState } from '@grafana/data';\nimport { sceneGraph, SceneQueryRunner } from '@grafana/scenes';\nimport { parseQuery } from '@shared/domain/url-params/parseQuery';\nimport { logger } from '@shared/infrastructure/tracking/logger';\n\nexport function withPreventInvalidQuery(queryRunner: SceneQueryRunner) {\n  queryRunner.addActivationHandler(() => {\n    const { profileTypeId, labelSelector } = queryRunner.state.queries[0];\n\n    if (!profileTypeId) {\n      queryRunner.setState({\n        queries: [{ refId: 'null' }],\n        data: buildErrorData(queryRunner, 'Missing profile type!'),\n      });\n      return;\n    }\n\n    if (!labelSelector) {\n      queryRunner.setState({\n        queries: [{ refId: 'null' }],\n        data: buildErrorData(queryRunner, 'Missing label selector!'),\n      });\n      return;\n    }\n\n    if (!sceneGraph.interpolate(queryRunner, '$profileMetricId')) {\n      queryRunner.setState({\n        queries: [{ refId: 'null' }],\n        data: buildErrorData(queryRunner, 'Missing profile type!'),\n      });\n      return;\n    }\n\n    const parsed = parseQuery(sceneGraph.interpolate(queryRunner, `$profileTypeId${labelSelector})`));\n\n    if (!parsed.serviceId) {\n      queryRunner.setState({\n        queries: [{ refId: 'null' }],\n        data: buildErrorData(queryRunner, 'Missing service name!'),\n      });\n    }\n  });\n\n  return queryRunner;\n}\n\nfunction buildErrorData(queryRunner: SceneQueryRunner, errorMsg: string) {\n  const error = new Error(errorMsg);\n\n  logger.error(error);\n\n  return {\n    state: LoadingState.Error,\n    errors: [error],\n    series: [],\n    timeRange: sceneGraph.getTimeRange(queryRunner).state.value,\n  };\n}\n","import { SceneQueryRunner } from '@grafana/scenes';\n\nimport { PYROSCOPE_DATA_SOURCE } from '../pyroscope-data-sources';\nimport { withPreventInvalidQuery } from '../withPreventInvalidQuery';\nimport { TimeSeriesQueryRunnerParams } from './TimeSeriesQueryRunnerParams';\n\nexport type TimeSeriesQuery = {\n  refId: string;\n  queryType: 'metrics';\n  profileTypeId: string;\n  labelSelector: string;\n  groupBy: string[];\n};\n\nexport function buildTimeSeriesQueryRunner(\n  { serviceName, profileMetricId, groupBy, filters }: TimeSeriesQueryRunnerParams,\n  limit?: number,\n  annotations?: boolean\n) {\n  const completeFilters = filters ? [...filters] : [];\n  completeFilters.unshift({ key: 'service_name', operator: '=', value: serviceName || '$serviceName' });\n\n  const selector = completeFilters.map(({ key, operator, value }) => `${key}${operator}\"${value}\"`).join(',');\n\n  const queryRunner = new SceneQueryRunner({\n    datasource: PYROSCOPE_DATA_SOURCE,\n    queries: [\n      {\n        refId: `${profileMetricId || '$profileMetricId'}-${selector}-${groupBy?.label || 'no-group-by'}`,\n        queryType: 'metrics',\n        profileTypeId: profileMetricId || '$profileMetricId',\n        labelSelector: `{${selector},$filters}`,\n        groupBy: groupBy?.label ? [groupBy.label] : [],\n        limit,\n        annotations,\n      },\n    ],\n  });\n\n  return withPreventInvalidQuery(queryRunner);\n}\n","import { DataFrame } from '@grafana/data';\nimport { merge } from 'lodash';\nimport { map, Observable } from 'rxjs';\n\n// General note: because (e.g.) SceneLabelValuesTimeseries sets the data provider in its constructor, data can come as undefined, hence all the optional chaining operators\n// in the transformers below\n\nexport const addRefId = () => (source: Observable<DataFrame[]>) =>\n  source.pipe(map((data: DataFrame[]) => data?.map((d, i) => merge(d, { refId: `${d.refId}-${i}` }))));\n\nexport const addStats = () => (source: Observable<DataFrame[]>) =>\n  source.pipe(\n    map((data: DataFrame[]) => {\n      const totalSeriesCount = data?.length;\n\n      // TODO: in case of a groupBy query, find a way to always add a rank to each label value (based on allValuesSum) so that we can use it as startColorIndex to\n      // always display each series consistently in the same color regardless of it's timseries, bar gauges with sums, or tables with maxima\n      return data?.map((d) => {\n        let maxValue = Number.NEGATIVE_INFINITY;\n\n        const allValuesSum = d.fields\n          ?.find((field) => field.type === 'number')\n          ?.values.reduce((acc: number, value: number) => {\n            if (value > maxValue) {\n              maxValue = value;\n            }\n            return acc + value;\n          }, 0);\n\n        return merge(d, {\n          meta: {\n            stats: [\n              {\n                displayName: 'totalSeriesCount',\n                value: totalSeriesCount,\n              },\n              {\n                displayName: 'allValuesSum',\n                value: allValuesSum,\n              },\n              {\n                displayName: 'maxValue',\n                value: maxValue,\n              },\n            ],\n          },\n        });\n      });\n    })\n  );\n","import { DataFrame, FieldMatcherID, LoadingState, ThresholdsMode, VizOrientation } from '@grafana/data';\nimport {\n  PanelBuilders,\n  SceneComponentProps,\n  SceneDataTransformer,\n  SceneObjectBase,\n  SceneObjectState,\n  VizPanel,\n  VizPanelState,\n} from '@grafana/scenes';\nimport { BarGaugeDisplayMode, BarGaugeNamePlacement, BarGaugeSizing, BarGaugeValueMode } from '@grafana/schema';\nimport React from 'react';\n\nimport { EventTimeseriesDataReceived } from '../domain/events/EventTimeseriesDataReceived';\nimport { getColorByIndex } from '../helpers/getColorByIndex';\nimport { getSeriesLabelFieldName } from '../infrastructure/helpers/getSeriesLabelFieldName';\nimport { getSeriesStatsValue } from '../infrastructure/helpers/getSeriesStatsValue';\nimport { buildTimeSeriesQueryRunner } from '../infrastructure/timeseries/buildTimeSeriesQueryRunner';\nimport { addRefId, addStats } from './SceneByVariableRepeaterGrid/infrastructure/data-transformations';\nimport { GridItemData } from './SceneByVariableRepeaterGrid/types/GridItemData';\n\ninterface SceneLabelValuesBarGaugeState extends SceneObjectState {\n  body: VizPanel;\n}\n\nexport class SceneLabelValuesBarGauge extends SceneObjectBase<SceneLabelValuesBarGaugeState> {\n  constructor({\n    item,\n    headerActions,\n  }: {\n    item: GridItemData;\n    headerActions: (item: GridItemData) => VizPanelState['headerActions'];\n  }) {\n    super({\n      key: 'bar-gauge-label-values',\n      body: PanelBuilders.bargauge()\n        .setTitle(item.label)\n        .setData(\n          new SceneDataTransformer({\n            $data: buildTimeSeriesQueryRunner(item.queryRunnerParams),\n            transformations: [addRefId, addStats],\n          })\n        )\n        .setHeaderActions(headerActions(item))\n        .build(),\n    });\n\n    this.addActivationHandler(this.onActivate.bind(this, item));\n  }\n\n  onActivate(item: GridItemData) {\n    const { body } = this.state;\n\n    const sub = (body.state.$data as SceneDataTransformer)!.subscribeToState((newState) => {\n      if (newState.data?.state !== LoadingState.Done) {\n        return;\n      }\n\n      const { series } = newState.data;\n\n      if (series?.length) {\n        body.setState(this.getConfig(item, series));\n      }\n\n      // we publish the event only after setting the new config so that the subscribers can modify it\n      this.publishEvent(new EventTimeseriesDataReceived({ series }), true);\n    });\n\n    return () => {\n      sub.unsubscribe();\n    };\n  }\n\n  getConfig(item: GridItemData, series: DataFrame[]) {\n    let max = Number.NEGATIVE_INFINITY;\n\n    for (const s of series) {\n      const allValuesSum = getSeriesStatsValue(s, 'allValuesSum') || 0;\n\n      if (allValuesSum > max) {\n        max = allValuesSum;\n      }\n    }\n\n    const groupByLabel = item.queryRunnerParams.groupBy?.label;\n\n    const description = groupByLabel ? 'This panel displays aggregate values over the current time period' : undefined;\n\n    return {\n      title: series.length > 1 ? `${item.label} (${series.length})` : item.label,\n      description,\n      options: {\n        reduceOptions: { values: false, calcs: ['sum'] },\n        orientation: VizOrientation.Horizontal,\n        displayMode: BarGaugeDisplayMode.Gradient,\n        valueMode: BarGaugeValueMode.Text,\n        showUnfilled: true,\n        sizing: BarGaugeSizing.Manual,\n        text: { titleSize: 13, valueSize: 13 },\n        namePlacement: BarGaugeNamePlacement.Top,\n        minVizHeight: 36,\n        maxVizHeight: 36,\n        legend: {\n          showLegend: false,\n        },\n      },\n      fieldConfig: {\n        defaults: {\n          // we force the label value because the overrides don't seem to work when we receive a single serie\n          displayName: series.length === 1 ? groupByLabel : undefined,\n          min: 0,\n          max,\n          thresholds: {\n            mode: ThresholdsMode.Percentage,\n            steps: [],\n          },\n        },\n        overrides: this.getOverrides(item, series),\n      },\n    };\n  }\n\n  getOverrides(item: GridItemData, series: DataFrame[]) {\n    const { index: startColorIndex, queryRunnerParams } = item;\n    const groupByLabel = queryRunnerParams.groupBy?.label;\n\n    return series.map((s, i) => ({\n      matcher: { id: FieldMatcherID.byFrameRefID, options: s.refId },\n      properties: [\n        {\n          id: 'displayName',\n          value: getSeriesLabelFieldName(s.fields[1], groupByLabel),\n        },\n        {\n          id: 'color',\n          value: { mode: 'fixed', fixedColor: getColorByIndex(startColorIndex + i) },\n        },\n      ],\n    }));\n  }\n\n  static Component({ model }: SceneComponentProps<SceneLabelValuesBarGauge>) {\n    const { body } = model.useState();\n\n    return <body.Component model={body} />;\n  }\n}\n","import { DataFrame, getValueFormat } from '@grafana/data';\n\nimport { getSeriesStatsValue } from '../infrastructure/helpers/getSeriesStatsValue';\n\nfunction isRateCalculatedByBackend(s: DataFrame): boolean {\n  const rateCalculated = s.meta?.custom?.rateCalculated;\n  return Boolean(rateCalculated);\n}\n\nexport function formatSingleSeriesDisplayName(label: string, s: DataFrame) {\n  const metricFieldUnit = s.fields[1]?.config?.unit || 'short';\n  const allValuesSum = getSeriesStatsValue(s, 'allValuesSum') || 0;\n  const maxValue = getSeriesStatsValue(s, 'maxValue') || 0;\n\n  const isRateCalculated = isRateCalculatedByBackend(s);\n\n  let displayValue: number;\n  let displayLabel: string;\n\n  if (isRateCalculated) {\n    // Show average of those rate values over the time period\n    const valueField = s.fields.find((f) => f.type === 'number');\n    const dataPointCount = valueField?.values?.length || 1;\n    displayValue = allValuesSum / dataPointCount;\n    displayLabel = 'avg';\n  } else {\n    // For instant profiles, show total\n    displayValue = allValuesSum;\n    displayLabel = 'total';\n  }\n\n  const displayFormatted = getValueFormat(metricFieldUnit)(displayValue);\n  const maxValueFormatted = getValueFormat(metricFieldUnit)(maxValue);\n\n  return `${displayLabel} ${label} = ${displayFormatted.text}${displayFormatted.suffix} / max = ${maxValueFormatted.text}${maxValueFormatted.suffix}`;\n}\n","import { DataFrame, FieldMatcherID, LoadingState } from '@grafana/data';\nimport {\n  PanelBuilders,\n  SceneComponentProps,\n  SceneDataTransformer,\n  SceneObjectBase,\n  SceneObjectState,\n  VizPanel,\n  VizPanelState,\n} from '@grafana/scenes';\nimport { SortOrder } from '@grafana/schema';\nimport { LegendDisplayMode, TooltipDisplayMode, VizLegendOptions } from '@grafana/ui';\nimport React from 'react';\n\nimport { EventTimeseriesDataReceived } from '../domain/events/EventTimeseriesDataReceived';\nimport { formatSingleSeriesDisplayName } from '../helpers/formatSingleSeriesDisplayName';\nimport { getColorByIndex } from '../helpers/getColorByIndex';\nimport { getSeriesLabelFieldName } from '../infrastructure/helpers/getSeriesLabelFieldName';\nimport { buildTimeSeriesQueryRunner } from '../infrastructure/timeseries/buildTimeSeriesQueryRunner';\nimport { addRefId, addStats } from './SceneByVariableRepeaterGrid/infrastructure/data-transformations';\nimport { GridItemData } from './SceneByVariableRepeaterGrid/types/GridItemData';\n\ninterface SceneLabelValuesHistogramState extends SceneObjectState {\n  body: VizPanel;\n  legendPlacement: VizLegendOptions['placement'];\n}\n\nexport class SceneLabelValuesHistogram extends SceneObjectBase<SceneLabelValuesHistogramState> {\n  constructor({\n    item,\n    headerActions,\n    legendPlacement,\n  }: {\n    item: GridItemData;\n    headerActions: (item: GridItemData) => VizPanelState['headerActions'];\n    legendPlacement?: SceneLabelValuesHistogramState['legendPlacement'];\n  }) {\n    super({\n      key: 'histogram-label-values',\n      legendPlacement: legendPlacement || 'bottom',\n      body: PanelBuilders.histogram()\n        .setTitle(item.label)\n        .setData(\n          new SceneDataTransformer({\n            $data: buildTimeSeriesQueryRunner(item.queryRunnerParams),\n            transformations: [addRefId, addStats],\n          })\n        )\n        .setHeaderActions(headerActions(item))\n        .build(),\n    });\n\n    this.addActivationHandler(this.onActivate.bind(this, item));\n  }\n\n  onActivate(item: GridItemData) {\n    const { body } = this.state;\n\n    const sub = (body.state.$data as SceneDataTransformer)!.subscribeToState((newState) => {\n      if (newState.data?.state !== LoadingState.Done) {\n        return;\n      }\n\n      const { series } = newState.data;\n\n      if (series?.length) {\n        body.setState(this.getConfig(item, series));\n      }\n\n      // we publish the event only after setting the new config so that the subscribers can modify it\n      this.publishEvent(new EventTimeseriesDataReceived({ series }), true);\n    });\n\n    return () => {\n      sub.unsubscribe();\n    };\n  }\n\n  getConfig(item: GridItemData, series: DataFrame[]) {\n    const { legendPlacement } = this.state;\n    const groupByLabel = item.queryRunnerParams.groupBy?.label;\n\n    return {\n      title: series.length > 1 ? `${item.label} (${series.length})` : item.label,\n      options: {\n        tooltip: {\n          mode: TooltipDisplayMode.Single,\n          sort: SortOrder.None,\n        },\n        legend: {\n          showLegend: true,\n          displayMode: LegendDisplayMode.List,\n          placement: legendPlacement,\n          calcs: [],\n        },\n      },\n      fieldConfig: {\n        defaults: {\n          // we force the label value because the overrides don't seem to work when we receive a single serie\n          displayName: series.length === 1 ? groupByLabel : undefined,\n          custom: {\n            lineWidth: 1,\n          },\n        },\n        overrides: this.getOverrides(item, series),\n      },\n    };\n  }\n\n  getOverrides(item: GridItemData, series: DataFrame[]) {\n    const { index: startColorIndex, queryRunnerParams } = item;\n    const groupByLabel = queryRunnerParams.groupBy?.label;\n\n    return series.map((s, i) => {\n      const metricField = s.fields[1];\n      let displayName = groupByLabel ? getSeriesLabelFieldName(metricField, groupByLabel) : metricField.name;\n\n      if (series.length === 1) {\n        displayName = formatSingleSeriesDisplayName(displayName, s);\n      }\n\n      return {\n        matcher: { id: FieldMatcherID.byFrameRefID, options: s.refId },\n        properties: [\n          {\n            id: 'displayName',\n            value: displayName,\n          },\n          {\n            id: 'color',\n            value: { mode: 'fixed', fixedColor: getColorByIndex(startColorIndex + i) },\n          },\n        ],\n      };\n    });\n  }\n\n  static Component({ model }: SceneComponentProps<SceneLabelValuesHistogram>) {\n    const { body } = model.useState();\n\n    return <body.Component model={body} />;\n  }\n}\n","import { css } from '@emotion/css';\nimport { DataFrame, DataTransformerID, LoadingState } from '@grafana/data';\nimport {\n  PanelBuilders,\n  SceneComponentProps,\n  SceneDataTransformer,\n  sceneGraph,\n  SceneObjectBase,\n  SceneObjectState,\n  VizPanel,\n  VizPanelState,\n} from '@grafana/scenes';\nimport { useStyles2 } from '@grafana/ui';\nimport { getProfileMetric, ProfileMetricId } from '@shared/infrastructure/profile-metrics/getProfileMetric';\nimport React from 'react';\n\nimport { EventTimeseriesDataReceived } from '../domain/events/EventTimeseriesDataReceived';\nimport { ProfileMetricVariable } from '../domain/variables/ProfileMetricVariable';\nimport { getColorByIndex } from '../helpers/getColorByIndex';\nimport { buildTimeSeriesQueryRunner } from '../infrastructure/timeseries/buildTimeSeriesQueryRunner';\nimport { GridItemData } from './SceneByVariableRepeaterGrid/types/GridItemData';\n\ninterface SceneLabelValuesTableState extends SceneObjectState {\n  body: VizPanel;\n}\n\nexport class SceneLabelValuesTable extends SceneObjectBase<SceneLabelValuesTableState> {\n  constructor({\n    item,\n    headerActions,\n  }: {\n    item: GridItemData;\n    headerActions: (item: GridItemData) => VizPanelState['headerActions'];\n  }) {\n    super({\n      key: 'table-label-values',\n      body: PanelBuilders.table()\n        .setTitle(item.label)\n        .setData(\n          new SceneDataTransformer({\n            $data: buildTimeSeriesQueryRunner(item.queryRunnerParams),\n            transformations: [\n              {\n                id: DataTransformerID.reduce,\n                options: {\n                  reducers: ['max'],\n                  labelsToFields: true,\n                },\n              },\n              {\n                id: DataTransformerID.filterFieldsByName,\n                options: {\n                  exclude: {\n                    names: ['Field'],\n                  },\n                },\n              },\n              {\n                id: DataTransformerID.renameByRegex,\n                options: {\n                  regex: 'Max',\n                  renamePattern: 'max',\n                },\n              },\n              {\n                id: DataTransformerID.sortBy,\n                options: {\n                  sort: [\n                    {\n                      field: 'max',\n                      desc: true,\n                    },\n                  ],\n                },\n              },\n            ],\n          })\n        )\n        .setHeaderActions(headerActions(item))\n        .build(),\n    });\n\n    this.addActivationHandler(this.onActivate.bind(this, item));\n  }\n\n  onActivate(item: GridItemData) {\n    const { body } = this.state;\n\n    const sub = (body.state.$data as SceneDataTransformer)!.subscribeToState((newState) => {\n      if (newState.data?.state !== LoadingState.Done) {\n        return;\n      }\n\n      const { series } = newState.data;\n\n      if (series?.length) {\n        body.setState(this.getConfig(item, series));\n      }\n\n      // we publish the event only after setting the new config so that the subscribers can modify it\n      this.publishEvent(new EventTimeseriesDataReceived({ series }), true);\n    });\n\n    return () => {\n      sub.unsubscribe();\n    };\n  }\n\n  getConfig(item: GridItemData, series: DataFrame[]) {\n    const cardinality = series[0].fields[0].values.length;\n\n    const profileMetricId = sceneGraph.findByKeyAndType(this, 'profileMetricId', ProfileMetricVariable).state\n      .value as ProfileMetricId;\n    const profileMetric = getProfileMetric(profileMetricId);\n    const unitValue = profileMetric.unit;\n\n    return {\n      title: cardinality > 1 ? `${item.label} (${cardinality})` : item.label,\n      fieldConfig: {\n        defaults: {\n          custom: {\n            filterable: true,\n            cellOptions: {},\n          },\n        },\n        overrides: [\n          {\n            matcher: {\n              id: 'byName',\n              options: 'max',\n            },\n            properties: [\n              {\n                id: 'unit',\n                value: unitValue,\n              },\n              {\n                id: 'custom.width',\n                value: 100,\n              },\n            ],\n          },\n        ],\n      },\n    };\n  }\n\n  static Component({ model }: SceneComponentProps<SceneLabelValuesTable>) {\n    const styles = useStyles2(getStyles); // eslint-disable-line react-hooks/rules-of-hooks\n    const { body } = model.useState();\n\n    return (\n      <span className={styles.container}>\n        <body.Component model={body} />\n      </span>\n    );\n  }\n}\n\nconst getStyles = () => ({\n  // couldn't find a better way just by configuring the table panel :man_shrug:\n  container: css`\n    [data-testid='data-testid table body'] [role='row']:first-child {\n      color: ${getColorByIndex(3)};\n      font-weight: 500;\n    }\n  `,\n});\n","import { TimeRange } from '@grafana/data';\n\nexport function computeRoundedTimeRange(timeRange: TimeRange) {\n  // round to 10s\n  return {\n    from: Math.floor((timeRange.from.valueOf() || 0) / 10000) * 10000,\n    to: Math.floor((timeRange.to.valueOf() || 0) / 10000) * 10000,\n  };\n}\n","import {\n  DataQueryResponse,\n  FieldType,\n  LegacyMetricFindQueryOptions,\n  LoadingState,\n  MetricFindValue,\n  TestDataSourceResponse,\n  TimeRange,\n} from '@grafana/data';\nimport { RuntimeDataSource, sceneGraph } from '@grafana/scenes';\nimport { isPrivateLabel } from '@shared/components/QueryBuilder/domain/helpers/isPrivateLabel';\nimport { labelsRepository } from '@shared/infrastructure/labels/labelsRepository';\nimport { logger } from '@shared/infrastructure/tracking/logger';\nimport pLimit from 'p-limit';\n\nimport { GroupByVariable } from '../../domain/variables/GroupByVariable/GroupByVariable';\nimport { computeRoundedTimeRange } from '../../helpers/computeRoundedTimeRange';\nimport { PYROSCOPE_LABELS_DATA_SOURCE } from '../pyroscope-data-sources';\nimport { LabelsApiClient } from './http/LabelsApiClient';\n\nconst MAX_CONCURRENT_LABEL_VALUES_REQUESTS = 20;\nconst limit = pLimit(MAX_CONCURRENT_LABEL_VALUES_REQUESTS);\n\nexport class LabelsDataSource extends RuntimeDataSource {\n  static MAX_TIMESERIES_LABEL_VALUES = 10;\n\n  constructor() {\n    super(PYROSCOPE_LABELS_DATA_SOURCE.type, PYROSCOPE_LABELS_DATA_SOURCE.uid);\n  }\n\n  async query(): Promise<DataQueryResponse> {\n    return {\n      state: LoadingState.Done,\n      data: [\n        {\n          name: 'Labels',\n          fields: [\n            {\n              name: 'Label',\n              type: FieldType.other,\n              values: [],\n              config: {},\n            },\n          ],\n          length: 0,\n        },\n      ],\n    };\n  }\n\n  getParams(options: LegacyMetricFindQueryOptions) {\n    const { scopedVars, range } = options;\n    const sceneObject = scopedVars?.__sceneObject?.value as GroupByVariable;\n\n    const dataSourceUid = sceneGraph.interpolate(sceneObject, '$dataSource');\n    const serviceName = sceneGraph.interpolate(sceneObject, '$serviceName');\n    const profileMetricId = sceneGraph.interpolate(sceneObject, '$profileMetricId');\n\n    // we could interpolate ad hoc filters, but the Labels exploration type would reload all labels each time they are modified\n    // const filters = sceneGraph.interpolate(sceneObject, '$filters');\n    // const pyroscopeQuery = `${profileMetricId}{service_name=\"${serviceName}\",${filters}}`;\n    const query = `${profileMetricId}{service_name=\"${serviceName}\"}`;\n\n    const { from, to } = computeRoundedTimeRange(range as TimeRange);\n\n    return {\n      dataSourceUid,\n      serviceName,\n      profileMetricId,\n      query,\n      from,\n      to,\n    };\n  }\n\n  async fetchLabels(dataSourceUid: string, query: string, from: number, to: number, variableName?: string) {\n    labelsRepository.setApiClient(new LabelsApiClient({ dataSourceUid }));\n\n    try {\n      return await labelsRepository.listLabels({ query, from, to });\n    } catch (error) {\n      logger.error(error as Error, {\n        info: 'Error while loading Pyroscope label names!',\n        variableName: variableName || '',\n      });\n\n      throw error;\n    }\n  }\n\n  async fetchLabelValues(\n    index: number,\n    query: string,\n    from: number,\n    to: number,\n    labelName: string,\n    variableName?: string\n  ) {\n    let values;\n\n    try {\n      values = await labelsRepository.listLabelValues({ query, from, to, label: labelName });\n    } catch (error) {\n      logger.error(error as Error, {\n        info: 'Error while loading Pyroscope label values!',\n        variableName: variableName || '',\n      });\n    }\n\n    const count = values ? values.length : -1;\n\n    return {\n      value: {\n        value: labelName,\n        groupBy: {\n          label: labelName,\n          values: values || [],\n        },\n      },\n      text: `${labelName} (${count > -1 ? count : '?'})`,\n      count,\n    };\n  }\n\n  async metricFindQuery(_: string, options: LegacyMetricFindQueryOptions): Promise<MetricFindValue[]> {\n    const sceneObject = options.scopedVars?.__sceneObject?.value as GroupByVariable;\n\n    // save bandwidth\n    // TODO: remove this when we can declare the GroupByVariable in the Scene it's used\n    // without messing up the variable URL sync\n    if (!sceneObject.isActive) {\n      return [];\n    }\n\n    const { dataSourceUid, serviceName, profileMetricId, query, from, to } = this.getParams(options);\n\n    if (!serviceName || !profileMetricId) {\n      logger.warn(\n        'LabelsDataSource: either serviceName=\"%s\" and/or profileMetricId=\"%s\" is empty! Discarding request.',\n        serviceName,\n        profileMetricId\n      );\n      return [];\n    }\n\n    const labels = await this.fetchLabels(dataSourceUid, query, from, to, options.variable?.name);\n\n    const labelsWithValuesAndCount = await Promise.all(\n      labels\n        .filter(({ value }) => !isPrivateLabel(value))\n        .map(({ value }, index) =>\n          limit(() => this.fetchLabelValues(index, query, from, to, value, options.variable?.name))\n        )\n    );\n\n    const sortedLabels = labelsWithValuesAndCount\n      .sort((a, b) => b.count - a.count)\n      .map(({ value, text }, index) => {\n        return {\n          // TODO: check if there's a better way\n          value: JSON.stringify({ ...value, index }),\n          text,\n        };\n      });\n\n    return [\n      // we do this here because GroupByVariable may set its default value to the 1st element automatically\n      {\n        value: 'all',\n        text: 'All',\n      },\n      ...sortedLabels,\n    ];\n  }\n\n  async testDatasource(): Promise<TestDataSourceResponse> {\n    return {\n      status: 'success',\n      message: 'OK',\n    };\n  }\n}\n","import { getProfileMetric, ProfileMetricId } from '@shared/infrastructure/profile-metrics/getProfileMetric';\n\nexport function getProfileMetricLabel(profileMetricId: string) {\n  const profileMetric = getProfileMetric(profileMetricId as ProfileMetricId);\n  return `${profileMetric.type} (${profileMetric.group})`;\n}\n","import { PanelMenuItem, PluginExtensionLink } from '@grafana/data';\nimport { reportInteraction } from '@grafana/runtime';\nimport {\n  SceneComponentProps,\n  SceneDataQuery,\n  sceneGraph,\n  SceneObjectBase,\n  SceneObjectState,\n  SceneQueryRunner,\n  VizPanelMenu,\n} from '@grafana/scenes';\nimport { ScaleDistribution, ScaleDistributionConfig } from '@grafana/schema';\nimport PyroscopeLogo from '@img/logo.svg';\nimport { parseQuery } from '@shared/domain/url-params/parseQuery';\nimport { nanoid } from 'nanoid';\nimport React, { useEffect, useMemo } from 'react';\n\nimport {\n  INVESTIGATIONS_APP_ID,\n  INVESTIGATIONS_EXTENSTION_POINT_ID,\n  useGetPluginExtensionLink,\n} from '../../domain/useGetPluginExtensionLink';\nimport { getExploreUrl } from '../../helpers/getExploreUrl';\nimport { getProfileMetricLabel } from '../../infrastructure/series/helpers/getProfileMetricLabel';\nimport { TimeSeriesQuery } from '../../infrastructure/timeseries/buildTimeSeriesQueryRunner';\nimport { SceneLabelValuesTimeseries } from './SceneLabelValuesTimeseries';\n\ninterface SceneTimeseriesMenuState extends SceneObjectState {\n  items?: PanelMenuItem[];\n  scaleType?: ScaleDistribution;\n}\n\nconst SCALE_TYPES = [\n  {\n    text: 'Linear',\n    scaleDistribution: { type: ScaleDistribution.Linear },\n  },\n  {\n    text: 'Log2',\n    scaleDistribution: { type: ScaleDistribution.Log, log: 2 },\n  },\n];\n\nexport class SceneTimeseriesMenu extends SceneObjectBase<SceneTimeseriesMenuState> {\n  constructor(state: SceneTimeseriesMenuState) {\n    super({\n      scaleType: ScaleDistribution.Linear,\n      ...state,\n    });\n\n    this.addActivationHandler(this.onActivate.bind(this));\n  }\n\n  onActivate() {\n    this.setState({ items: this.buildMenuItems() });\n  }\n\n  buildMenuItems(addToInvestigationLink?: PluginExtensionLink): PanelMenuItem[] {\n    const { items, scaleType } = this.state;\n\n    const menuItems: PanelMenuItem[] = [\n      {\n        text: 'Scale type',\n        type: 'group',\n        subMenu: SCALE_TYPES.map((option) => ({\n          text: `${scaleType === option.scaleDistribution.type ? '✔ ' : ''}${option.text}`,\n          onClick: () => this.onClickScaleOption(option),\n        })),\n      },\n      {\n        type: 'divider',\n        text: '',\n      },\n      {\n        iconClassName: 'compass',\n        text: 'Open in Explore',\n        onClick: () => this.onClickExplore(),\n      },\n    ];\n\n    if (addToInvestigationLink) {\n      menuItems.push({\n        iconClassName: 'plus-square',\n        text: 'Add to investigation (beta)',\n        onClick: () => {\n          addToInvestigationLink.onClick!();\n        },\n      });\n    } else {\n      const existingAddToInvestigationItem = items?.find((i) => i.text.includes('Add to investigation'));\n\n      if (existingAddToInvestigationItem) {\n        menuItems.push({ ...existingAddToInvestigationItem });\n      }\n    }\n\n    return menuItems;\n  }\n\n  onClickScaleOption(option: PanelMenuItem & { scaleDistribution: ScaleDistributionConfig }) {\n    const { scaleDistribution, text } = option;\n\n    reportInteraction('g_pyroscope_app_timeseries_scale_changed', { scale: scaleDistribution.type });\n\n    const timeseries = sceneGraph.getAncestor(this, SceneLabelValuesTimeseries);\n\n    timeseries.changeScale(scaleDistribution, text);\n\n    this.setState({\n      scaleType: scaleDistribution.type,\n      items: this.buildMenuItems(),\n    });\n  }\n\n  onClickExplore() {\n    reportInteraction('g_pyroscope_app_open_in_explore_clicked');\n\n    const rawTimeRange = sceneGraph.getTimeRange(this).state.value.raw;\n    const query = this.getInterpolatedQuery();\n    const datasource = sceneGraph.interpolate(this, '${dataSource}');\n\n    const exploreUrl = getExploreUrl(rawTimeRange, query, datasource);\n\n    window.open(exploreUrl, '_blank');\n  }\n\n  getInterpolatedQuery() {\n    const timeseries = sceneGraph.getAncestor(this, SceneLabelValuesTimeseries);\n    const queryRunner = timeseries.state.body.state.$data?.state.$data as SceneQueryRunner;\n    const nonInterpolatedQuery = queryRunner?.state.queries[0] as SceneDataQuery;\n\n    return Object.entries(nonInterpolatedQuery)\n      .map(([key, value]) => [key, typeof value === 'string' ? sceneGraph.interpolate(this, value) : value])\n      .reduce(\n        (acc, [key, value]) => ({\n          ...acc,\n          [key]: value,\n        }),\n        {}\n      ) as TimeSeriesQuery;\n  }\n\n  useGetInvestigationPluginLinkContext() {\n    const { refId, queryType, profileTypeId, labelSelector, groupBy } = this.getInterpolatedQuery();\n\n    const parsedQuery = parseQuery(`${profileTypeId}${labelSelector}`);\n    const titleParts = [parsedQuery.serviceId, getProfileMetricLabel(parsedQuery.profileMetricId)];\n\n    if (groupBy?.length) {\n      titleParts.push(groupBy[0]);\n    }\n\n    if (parsedQuery.labels.length) {\n      titleParts.push(parsedQuery.labels.join(', '));\n    }\n\n    const title = titleParts.join(' · ');\n    const datasource = sceneGraph.interpolate(this, '${dataSource}');\n    const timeRange = sceneGraph.getTimeRange(this).state.value;\n\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    return useMemo(() => {\n      return {\n        id: nanoid(),\n        origin: 'Grafana Profiles Drilldown',\n        url: window.location.href,\n        logoPath: PyroscopeLogo,\n        title,\n        type: 'timeseries',\n        timeRange: { ...timeRange },\n        queries: [{ refId, queryType, profileTypeId, labelSelector, groupBy }],\n        datasource,\n      };\n    }, [datasource, groupBy, labelSelector, profileTypeId, queryType, refId, timeRange, title]);\n  }\n\n  useUpdateMenuItems() {\n    const context = this.useGetInvestigationPluginLinkContext();\n\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const link = useGetPluginExtensionLink({\n      extensionPointId: INVESTIGATIONS_EXTENSTION_POINT_ID,\n      context,\n      pluginId: INVESTIGATIONS_APP_ID,\n    });\n\n    // wrapped in a useEffect to prevent a warning when clicking on the \"Add to investigation\" link\n    // (\"Cannot update a component while rendering a different component\")\n\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useEffect(() => {\n      if (link) {\n        this.setState({ items: this.buildMenuItems(link) });\n      }\n    }, [link]);\n  }\n\n  static Component({ model }: SceneComponentProps<SceneTimeseriesMenu>) {\n    model.useUpdateMenuItems();\n\n    return <VizPanelMenu.Component model={model as unknown as VizPanelMenu} />;\n  }\n}\n","import { RawTimeRange, toURLRange, urlUtil } from '@grafana/data';\nimport { config } from '@grafana/runtime';\n\nimport { TimeSeriesQuery } from '../infrastructure/timeseries/buildTimeSeriesQueryRunner';\n\nexport function getExploreUrl(rawTimeRange: RawTimeRange, query: TimeSeriesQuery, datasource: string): string {\n  const exploreState = JSON.stringify({\n    ['pyroscope-explore']: {\n      range: toURLRange(rawTimeRange),\n      queries: [{ ...query, datasource }],\n      panelsState: {},\n      datasource,\n    },\n  });\n\n  const subUrl = config.appSubUrl ?? '';\n\n  return urlUtil.renderUrl(`${subUrl}/explore`, {\n    panes: exploreState,\n    schemaVersion: 1,\n  });\n}\n","import { PluginExtensionLink } from '@grafana/data';\nimport { usePluginLinks } from '@grafana/runtime';\n\nexport const INVESTIGATIONS_EXTENSTION_POINT_ID = 'grafana-pyroscope-app/investigation/v1';\nexport const INVESTIGATIONS_APP_ID = 'grafana-investigations-app';\n\ntype UseGetPluginLinkParams = {\n  extensionPointId: string;\n  context?: object | Record<string | symbol, unknown>;\n  pluginId: string;\n};\n\nexport function useGetPluginExtensionLink({\n  extensionPointId,\n  context,\n  pluginId,\n}: UseGetPluginLinkParams): PluginExtensionLink | undefined {\n  const pluginLinks = usePluginLinks({ extensionPointId, context });\n\n  const [link] = pluginLinks.links.filter((link) => link.pluginId === pluginId);\n\n  return link;\n}\n","import { DataFrame, FieldMatcherID, LoadingState } from '@grafana/data';\nimport {\n  PanelBuilders,\n  SceneComponentProps,\n  SceneDataProvider,\n  SceneDataTransformer,\n  sceneGraph,\n  SceneObjectBase,\n  SceneObjectState,\n  SceneQueryRunner,\n  VizPanel,\n  VizPanelMenu,\n  VizPanelState,\n} from '@grafana/scenes';\nimport { GraphGradientMode, ScaleDistribution, ScaleDistributionConfig, SortOrder } from '@grafana/schema';\nimport { LegendDisplayMode, TooltipDisplayMode, VizLegendOptions } from '@grafana/ui';\nimport { isEqual, merge } from 'lodash';\nimport React from 'react';\n\nimport { EventTimeseriesDataReceived } from '../../domain/events/EventTimeseriesDataReceived';\nimport { ProfileMetricVariable } from '../../domain/variables/ProfileMetricVariable';\nimport { formatSingleSeriesDisplayName } from '../../helpers/formatSingleSeriesDisplayName';\nimport { getColorByIndex } from '../../helpers/getColorByIndex';\nimport { getSeriesLabelFieldName } from '../../infrastructure/helpers/getSeriesLabelFieldName';\nimport { LabelsDataSource } from '../../infrastructure/labels/LabelsDataSource';\nimport { buildTimeSeriesQueryRunner } from '../../infrastructure/timeseries/buildTimeSeriesQueryRunner';\nimport { addRefId, addStats } from '../SceneByVariableRepeaterGrid/infrastructure/data-transformations';\nimport { GridItemData } from '../SceneByVariableRepeaterGrid/types/GridItemData';\nimport { SceneTimeseriesMenu } from './SceneTimeseriesMenu';\n\ninterface SceneLabelValuesTimeseriesState extends SceneObjectState {\n  item: GridItemData;\n  headerActions: (item: GridItemData) => VizPanelState['headerActions'];\n  body: VizPanel;\n  displayAllValues: boolean;\n  legendPlacement: VizLegendOptions['placement'];\n  overrides?: (series: DataFrame[]) => VizPanelState['fieldConfig']['overrides'];\n}\n\nexport class SceneLabelValuesTimeseries extends SceneObjectBase<SceneLabelValuesTimeseriesState> {\n  constructor({\n    item,\n    headerActions,\n    displayAllValues,\n    legendPlacement,\n    data,\n    overrides,\n  }: {\n    item: SceneLabelValuesTimeseriesState['item'];\n    headerActions: SceneLabelValuesTimeseriesState['headerActions'];\n    displayAllValues?: SceneLabelValuesTimeseriesState['displayAllValues'];\n    legendPlacement?: SceneLabelValuesTimeseriesState['legendPlacement'];\n    data?: SceneDataTransformer;\n    overrides?: SceneLabelValuesTimeseriesState['overrides'];\n  }) {\n    super({\n      key: 'timeseries-label-values',\n      item,\n      headerActions,\n      displayAllValues: Boolean(displayAllValues),\n      legendPlacement: legendPlacement || 'bottom',\n      overrides,\n      body: PanelBuilders.timeseries()\n        .setTitle(item.label)\n        .setData(\n          data ||\n            new SceneDataTransformer({\n              $data: buildTimeSeriesQueryRunner(\n                item.queryRunnerParams,\n                displayAllValues ? undefined : LabelsDataSource.MAX_TIMESERIES_LABEL_VALUES,\n                true\n              ),\n              transformations: [addRefId, addStats],\n            })\n        )\n        .setHeaderActions(headerActions(item))\n        .setMenu(new SceneTimeseriesMenu({}) as unknown as VizPanelMenu)\n        .build(),\n    });\n\n    this.addActivationHandler(this.onActivate.bind(this));\n  }\n\n  onActivate() {\n    const { body } = this.state;\n\n    const dataSub = (body.state.$data as SceneDataProvider).subscribeToState(this.handleDataStateChange.bind(this));\n\n    const profileMetricSub = this.subscribeToProfileMetricChanges();\n\n    return () => {\n      dataSub.unsubscribe();\n      profileMetricSub?.unsubscribe();\n    };\n  }\n\n  private handleDataStateChange(newState: any, prevState: any) {\n    if (newState.data?.state !== LoadingState.Done) {\n      return;\n    }\n\n    this.retainPreviousAnnotations(newState, prevState);\n\n    const { series } = newState.data;\n\n    if (series?.length) {\n      this.updateBodyConfig(series);\n    }\n\n    this.publishEvent(new EventTimeseriesDataReceived({ series }), true);\n  }\n\n  private retainPreviousAnnotations(newState: any, prevState: any) {\n    if (!newState.data.annotations?.length && prevState.data?.annotations?.length) {\n      newState.data.annotations = prevState.data.annotations;\n    }\n  }\n\n  private updateBodyConfig(series: DataFrame[]) {\n    const { body } = this.state;\n    const config = this.state.displayAllValues ? this.getAllValuesConfig(series) : this.getConfig(series);\n    body.setState(merge({}, body.state, config));\n  }\n\n  private subscribeToProfileMetricChanges() {\n    try {\n      const profileMetricVariable = sceneGraph.findByKeyAndType(this, 'profileMetricId', ProfileMetricVariable);\n      return profileMetricVariable.subscribeToState((newState, prevState) => {\n        if (newState.value !== prevState.value) {\n          this.handleProfileMetricChange();\n        }\n      });\n    } catch (error) {\n      return null;\n    }\n  }\n\n  private handleProfileMetricChange() {\n    const { body } = this.state;\n    const currentData = (body.state.$data as SceneDataProvider).state.data;\n    if (currentData?.series?.length) {\n      this.updateBodyConfig(currentData.series);\n    }\n  }\n\n  getConfig(series: DataFrame[]) {\n    const { body, item, legendPlacement } = this.state;\n    let { title } = body.state;\n    let description;\n\n    if (item.queryRunnerParams.groupBy?.label) {\n      title = series.length > 1 ? `${item.label} (${series.length})` : item.label;\n      description = this.buildDescription(item.queryRunnerParams.groupBy!);\n    }\n\n    return {\n      title,\n      description,\n      options: {\n        tooltip: {\n          mode: 'single',\n          sort: 'none',\n        },\n        legend: {\n          showLegend: true,\n          displayMode: 'list',\n          placement: legendPlacement,\n        },\n      },\n      fieldConfig: {\n        defaults: {\n          min: 0,\n          custom: {\n            fillOpacity: series.length >= LabelsDataSource.MAX_TIMESERIES_LABEL_VALUES ? 0 : 9,\n            gradientMode: series.length === 1 ? GraphGradientMode.None : GraphGradientMode.Opacity,\n            pointSize: 3,\n          },\n        },\n        overrides: this.getOverrides(series),\n      },\n    };\n  }\n\n  buildDescription(groupBy: GridItemData['queryRunnerParams']['groupBy']) {\n    if (!groupBy) {\n      return '';\n    }\n\n    // this case is for favorites: they are stored in localStorage without the `values` array\n    if (!groupBy!.values) {\n      return `Showing only ${LabelsDataSource.MAX_TIMESERIES_LABEL_VALUES} series to preserve readability. To view all the series, click on the expand icon on this panel.`;\n    }\n\n    if (groupBy!.values.length > LabelsDataSource.MAX_TIMESERIES_LABEL_VALUES) {\n      return `Showing only ${LabelsDataSource.MAX_TIMESERIES_LABEL_VALUES} out of ~${\n        groupBy!.values.length\n      } series to preserve readability. To view all the series for the current filters, click on the expand icon on this panel.`;\n    }\n\n    return '';\n  }\n\n  getAllValuesConfig(series: DataFrame[]) {\n    const { legendPlacement } = this.state;\n\n    return {\n      options: {\n        tooltip: {\n          mode: TooltipDisplayMode.Single,\n          sort: SortOrder.None,\n        },\n        legend: {\n          showLegend: true,\n          displayMode: LegendDisplayMode.List,\n          placement: legendPlacement,\n          calcs: [],\n        },\n      },\n      fieldConfig: {\n        defaults: {\n          min: 0,\n          custom: {\n            fillOpacity: 0,\n            pointSize: 5,\n          },\n        },\n        overrides: this.getOverrides(series),\n      },\n    };\n  }\n\n  getOverrides(series: DataFrame[]) {\n    if (this.state.overrides) {\n      return this.state.overrides(series);\n    }\n\n    const { item } = this.state;\n    const groupByLabel = item.queryRunnerParams.groupBy?.label;\n\n    return series.map((s, i) => {\n      const metricField = s.fields[1];\n      let displayName = groupByLabel ? getSeriesLabelFieldName(metricField, groupByLabel) : metricField.name;\n\n      displayName = formatSingleSeriesDisplayName(displayName, s);\n\n      const properties = [\n        {\n          id: 'displayName',\n          value: displayName,\n        },\n        {\n          id: 'color',\n          value: { mode: 'fixed', fixedColor: getColorByIndex(item.index + i) },\n        },\n      ];\n\n      return {\n        matcher: { id: FieldMatcherID.byFrameRefID, options: s.refId },\n        properties,\n      };\n    });\n  }\n\n  updateItem(partialItem: Partial<GridItemData>) {\n    const { item, headerActions, body } = this.state;\n    const updatedItem = merge({}, item, partialItem);\n\n    if (partialItem.queryRunnerParams?.hasOwnProperty('groupBy')) {\n      if (partialItem.queryRunnerParams.groupBy === undefined) {\n        delete updatedItem.queryRunnerParams.groupBy;\n      } else {\n        // we completely replace groupBy because merge() above concatenates groupBy.values\n        updatedItem.queryRunnerParams.groupBy = partialItem.queryRunnerParams.groupBy;\n      }\n    }\n\n    if (\n      partialItem.queryRunnerParams?.hasOwnProperty('filters') &&\n      partialItem.queryRunnerParams.filters === undefined\n    ) {\n      delete updatedItem.queryRunnerParams.filters;\n    }\n\n    this.setState({ item: updatedItem });\n\n    body.setState({\n      title: partialItem.label,\n      description: this.buildDescription(updatedItem.queryRunnerParams.groupBy),\n      headerActions: headerActions(updatedItem),\n    });\n\n    if (!isEqual(item.queryRunnerParams, updatedItem.queryRunnerParams)) {\n      const { queries } = buildTimeSeriesQueryRunner(\n        updatedItem.queryRunnerParams,\n        LabelsDataSource.MAX_TIMESERIES_LABEL_VALUES\n      ).state;\n\n      const queryRunner = body.state.$data?.state.$data as SceneQueryRunner;\n\n      // this allows us not to have to subscribe to the data provider changes as we do in onActivate() above\n      queryRunner?.setState({ queries });\n      queryRunner?.runQueries();\n    }\n  }\n\n  changeScale(scaleDistribution: ScaleDistributionConfig, axisLabel: string) {\n    const { body } = this.state;\n\n    body.clearFieldConfigCache();\n\n    body.setState({\n      fieldConfig: merge({}, body.state.fieldConfig, {\n        defaults: {\n          custom: {\n            scaleDistribution,\n            axisLabel: scaleDistribution.type !== ScaleDistribution.Linear ? axisLabel : '',\n          },\n        },\n      }),\n    });\n  }\n\n  static Component({ model }: SceneComponentProps<SceneLabelValuesTimeseries>) {\n    const { body } = model.useState();\n\n    return <body.Component model={body} />;\n  }\n}\n","import { PanelType } from '../components/SceneByVariableRepeaterGrid/components/ScenePanelTypeSwitcher';\nimport { SceneLabelValuesBarGauge } from '../components/SceneLabelValuesBarGauge';\nimport { SceneLabelValuesHistogram } from '../components/SceneLabelValuesHistogram';\nimport { SceneLabelValuesTable } from '../components/SceneLabelValuesTable';\nimport { SceneLabelValuesTimeseries } from '../components/SceneLabelValuesTimeseries/SceneLabelValuesTimeseries';\n\nexport function vizPanelBuilder(panelType: PanelType, options: any) {\n  switch (panelType) {\n    case PanelType.BARGAUGE:\n      return new SceneLabelValuesBarGauge(options);\n\n    case PanelType.TABLE:\n      return new SceneLabelValuesTable(options);\n\n    case PanelType.HISTOGRAM:\n      return new SceneLabelValuesHistogram(options);\n\n    case PanelType.TIMESERIES:\n    default:\n      return new SceneLabelValuesTimeseries(options);\n  }\n}\n","import { throttle } from 'lodash';\nimport { useEffect, useState } from 'react';\n\ninterface MousePosition {\n  x: number | null;\n  y: number | null;\n}\n\n// For performance reasons, we throttle the mouse position updates\nconst DEFAULT_THROTTLE_INTERVAL_MS = 50;\n\nconst useMousePosition = (throttleInterval = DEFAULT_THROTTLE_INTERVAL_MS) => {\n  const [mousePosition, setMousePosition] = useState<MousePosition>({ x: null, y: null });\n\n  useEffect(() => {\n    const updateMousePosition = throttle((event: MouseEvent) => {\n      setMousePosition({ x: event.clientX, y: event.clientY });\n    }, throttleInterval);\n    window.addEventListener('mousemove', updateMousePosition);\n\n    return () => {\n      window.removeEventListener('mousemove', updateMousePosition);\n    };\n  }, [throttleInterval]);\n\n  return mousePosition;\n};\n\nexport default useMousePosition;\n","import { css } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2, useTheme2 } from '@grafana/ui';\nimport React, { SVGProps } from 'react';\nimport SVG from 'react-inlinesvg';\n\nimport dark404 from './img/grot-404-dark.svg';\nimport light404 from './img/grot-404-light.svg';\nimport useMousePosition from './useMousePosition';\n\nconst MIN_ARM_ROTATION = -20;\nconst MAX_ARM_ROTATION = 5;\nconst MIN_ARM_TRANSLATION = -5;\nconst MAX_ARM_TRANSLATION = 5;\n\ninterface Props {\n  width?: SVGProps<SVGElement>['width'];\n  height?: SVGProps<SVGElement>['height'];\n  show404?: boolean;\n}\n\nexport const GrotNotFound = ({ width = 'auto', height, show404 = false }: Props) => {\n  const theme = useTheme2();\n  const { x, y } = useMousePosition();\n  const styles = useStyles2(getStyles, x, y, show404);\n  return (\n    <SVG\n      src={(theme.isDark ? dark404 : light404) as unknown as string}\n      className={styles.svg}\n      height={height}\n      width={width}\n    />\n  );\n};\n\nGrotNotFound.displayName = 'GrotNotFound';\n\nconst getStyles = (theme: GrafanaTheme2, xPos: number | null, yPos: number | null, show404: boolean) => {\n  const { innerWidth, innerHeight } = window;\n  const heightRatio = yPos && yPos / innerHeight;\n  const widthRatio = xPos && xPos / innerWidth;\n  const rotation = heightRatio !== null ? getIntermediateValue(heightRatio, MIN_ARM_ROTATION, MAX_ARM_ROTATION) : 0;\n  const translation =\n    widthRatio !== null ? getIntermediateValue(widthRatio, MIN_ARM_TRANSLATION, MAX_ARM_TRANSLATION) : 0;\n\n  return {\n    svg: css({\n      '#grot-404-arm, #grot-404-magnifier': {\n        transform: `rotate(${rotation}deg) translateX(${translation}%)`,\n        transformOrigin: 'center',\n        transition: 'transform 50ms linear',\n      },\n      '#grot-404-text': {\n        display: show404 ? 'block' : 'none',\n      },\n    }),\n  };\n};\n\n/**\n * Given a start value, end value, and a ratio, return the intermediate value\n * Works with negative and inverted start/end values\n */\nconst getIntermediateValue = (ratio: number, start: number, end: number) => {\n  const value = ratio * (end - start) + start;\n  return value;\n};\n","import { css } from '@emotion/css';\nimport { Box, Stack, Text, useStyles2 } from '@grafana/ui';\nimport React from 'react';\n\nimport { GrotNotFound } from './GrotNotFound';\n\ninterface Props {\n  message: string;\n}\n\nexport const EmptyState = ({ message }: Props) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.container}>\n      <Box paddingY={8}>\n        <Stack direction=\"column\" alignItems=\"center\" gap={3}>\n          <GrotNotFound width={300} />\n          <Text variant=\"h5\">{message}</Text>\n        </Stack>\n      </Box>\n    </div>\n  );\n};\n\nEmptyState.displayName = 'EmptyState';\n\nfunction getStyles() {\n  return {\n    container: css({\n      width: '100%',\n      display: 'flex',\n      justifyContent: 'space-evenly',\n      flexDirection: 'column',\n    }),\n  };\n}\n","import { SceneComponentProps, SceneObjectBase, SceneObjectState } from '@grafana/scenes';\nimport React from 'react';\n\nimport { EmptyState } from './ui/EmptyState';\n\ninterface SceneEmptyStateState extends SceneObjectState {\n  message: string;\n}\n\nexport class SceneEmptyState extends SceneObjectBase<SceneEmptyStateState> {\n  public static Component = ({ model }: SceneComponentProps<SceneEmptyState>) => {\n    const { message } = model.useState();\n    return <EmptyState message={message} />;\n  };\n}\n","import { SceneComponentProps, SceneObjectBase, SceneObjectState } from '@grafana/scenes';\nimport { Alert } from '@grafana/ui';\nimport React from 'react';\n\ninterface SceneErrorStateState extends SceneObjectState {\n  message: string;\n}\n\nexport class SceneErrorState extends SceneObjectBase<SceneErrorStateState> {\n  public static Component = ({ model }: SceneComponentProps<SceneErrorState>) => {\n    const { message } = model.useState();\n    return (\n      <Alert title=\"Query error!\" severity=\"error\">\n        {message}\n      </Alert>\n    );\n  };\n}\n","import {\n  SceneComponentProps,\n  SceneObjectBase,\n  SceneObjectState,\n  SceneObjectUrlSyncConfig,\n  SceneObjectUrlValues,\n} from '@grafana/scenes';\nimport { RadioButtonGroup } from '@grafana/ui';\nimport { reportInteraction } from '@shared/domain/reportInteraction';\nimport React from 'react';\n\nexport enum LayoutType {\n  GRID = 'grid',\n  ROWS = 'rows',\n}\n\nexport interface SceneLayoutSwitcherState extends SceneObjectState {\n  layout: LayoutType;\n  onChange?: (layout: LayoutType) => void;\n}\n\nexport class SceneLayoutSwitcher extends SceneObjectBase<SceneLayoutSwitcherState> {\n  protected _urlSync = new SceneObjectUrlSyncConfig(this, { keys: ['layout'] });\n\n  static OPTIONS = [\n    { label: 'Grid', value: LayoutType.GRID },\n    { label: 'Rows', value: LayoutType.ROWS },\n  ];\n\n  static DEFAULT_LAYOUT = LayoutType.GRID;\n\n  constructor() {\n    super({\n      key: 'layout-switcher',\n      layout: SceneLayoutSwitcher.DEFAULT_LAYOUT,\n    });\n  }\n\n  getUrlState() {\n    return {\n      layout: this.state.layout,\n    };\n  }\n\n  updateFromUrl(values: SceneObjectUrlValues) {\n    const stateUpdate: Partial<SceneLayoutSwitcherState> = {};\n\n    if (typeof values.layout === 'string' && values.layout !== this.state.layout) {\n      stateUpdate.layout = Object.values(LayoutType).includes(values.layout as LayoutType)\n        ? (values.layout as LayoutType)\n        : SceneLayoutSwitcher.DEFAULT_LAYOUT;\n    }\n\n    this.setState(stateUpdate);\n  }\n\n  onChange = (layout: LayoutType) => {\n    reportInteraction('g_pyroscope_app_layout_changed', { layout });\n\n    this.setState({ layout });\n  };\n\n  static Component = ({ model }: SceneComponentProps<SceneLayoutSwitcher>) => {\n    const { layout } = model.useState();\n\n    return (\n      <RadioButtonGroup\n        aria-label=\"Layout switcher\"\n        options={SceneLayoutSwitcher.OPTIONS}\n        value={layout}\n        onChange={model.onChange}\n        fullWidth={false}\n      />\n    );\n  };\n}\n","import {\n  SceneComponentProps,\n  SceneObjectBase,\n  SceneObjectState,\n  SceneObjectUrlSyncConfig,\n  SceneObjectUrlValues,\n} from '@grafana/scenes';\nimport { InlineSwitch } from '@grafana/ui';\nimport { reportInteraction } from '@shared/domain/reportInteraction';\nimport React from 'react';\n\nexport interface SceneNoDataSwitcherState extends SceneObjectState {\n  hideNoData: string;\n  onChange?: (hideNoData: string) => void;\n}\n\nexport class SceneNoDataSwitcher extends SceneObjectBase<SceneNoDataSwitcherState> {\n  protected _urlSync = new SceneObjectUrlSyncConfig(this, { keys: ['hideNoData'] });\n\n  static DEFAULT_VALUE = 'off';\n\n  constructor() {\n    super({\n      key: 'no-data-switcher',\n      hideNoData: SceneNoDataSwitcher.DEFAULT_VALUE,\n    });\n  }\n\n  getUrlState() {\n    return {\n      hideNoData: this.state.hideNoData,\n    };\n  }\n\n  updateFromUrl(values: SceneObjectUrlValues) {\n    const stateUpdate: Partial<SceneNoDataSwitcherState> = {};\n\n    if (typeof values.hideNoData === 'string' && values.hideNoData !== this.state.hideNoData) {\n      stateUpdate.hideNoData = ['on', 'off'].includes(values.hideNoData)\n        ? values.hideNoData\n        : SceneNoDataSwitcher.DEFAULT_VALUE;\n    }\n\n    this.setState(stateUpdate);\n  }\n\n  onChange = (hideNoData: 'on' | 'off') => {\n    reportInteraction('g_pyroscope_app_hide_no_data_changed', { hideNoData });\n\n    this.setState({ hideNoData });\n  };\n\n  static Component = ({ model }: SceneComponentProps<SceneNoDataSwitcher>) => {\n    const { hideNoData } = model.useState();\n\n    return (\n      <InlineSwitch\n        data-testid=\"noDataSwitcher\"\n        showLabel\n        label=\"Hide panels without data\"\n        value={hideNoData === 'on'}\n        onChange={(event: React.ChangeEvent<HTMLInputElement>) => model.onChange(event.target.checked ? 'on' : 'off')}\n      />\n    );\n  };\n}\n","import { css } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport {\n  SceneComponentProps,\n  SceneObjectBase,\n  SceneObjectState,\n  SceneObjectUrlSyncConfig,\n  SceneObjectUrlValues,\n} from '@grafana/scenes';\nimport { Icon, IconButton, Input, Tag, useStyles2 } from '@grafana/ui';\nimport { reportInteraction } from '@shared/domain/reportInteraction';\nimport React from 'react';\n\nexport interface SceneQuickFilterState extends SceneObjectState {\n  placeholder: string;\n  searchText: string;\n  onChange?: (searchText: string) => void;\n  resultsCount: string;\n}\n\nexport class SceneQuickFilter extends SceneObjectBase<SceneQuickFilterState> {\n  protected _urlSync = new SceneObjectUrlSyncConfig(this, { keys: ['searchText'] });\n\n  static DEFAULT_SEARCH_TEXT = '';\n\n  static DEBOUNCE_DELAY = 250;\n\n  constructor({ placeholder }: { placeholder: string }) {\n    super({\n      key: 'quick-filter',\n      placeholder,\n      searchText: SceneQuickFilter.DEFAULT_SEARCH_TEXT,\n      resultsCount: '',\n    });\n  }\n\n  setPlaceholder(placeholder: string) {\n    this.setState({ placeholder });\n  }\n\n  setResultsCount(resultsCount: number) {\n    this.setState({ resultsCount: String(resultsCount) });\n  }\n\n  getUrlState() {\n    return {\n      searchText: this.state.searchText,\n    };\n  }\n\n  updateFromUrl(values: SceneObjectUrlValues) {\n    const stateUpdate: Partial<SceneQuickFilterState> = {};\n\n    if (typeof values.searchText === 'string' && values.searchText !== this.state.searchText) {\n      stateUpdate.searchText = values.searchText;\n    }\n\n    this.setState(stateUpdate);\n  }\n\n  onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ searchText: e.target.value });\n  };\n\n  reset() {\n    this.setState({ placeholder: '', searchText: '', resultsCount: '' });\n  }\n\n  clearSearchText = () => {\n    this.setState({ searchText: '' });\n  };\n\n  onFocus = () => {\n    reportInteraction('g_pyroscope_app_quick_filter_focused');\n  };\n\n  static Component = ({ model }: SceneComponentProps<SceneQuickFilter>) => {\n    const styles = useStyles2(getStyles);\n    const { placeholder, searchText, resultsCount } = model.useState();\n\n    return (\n      <Input\n        type=\"text\"\n        className=\"quick-filter\"\n        aria-label=\"Quick filter\"\n        placeholder={placeholder}\n        value={searchText}\n        prefix={<Icon name=\"search\" />}\n        suffix={\n          <>\n            {resultsCount !== '' && (\n              <Tag\n                className={styles.resultsCount}\n                name={resultsCount}\n                colorIndex={9}\n                data-testid=\"quick-filter-results-count\"\n              />\n            )}\n            <IconButton name=\"times\" aria-label=\"Clear search\" onClick={model.clearSearchText} />\n          </>\n        }\n        onChange={model.onChange}\n        onKeyDown={(e: React.KeyboardEvent<HTMLInputElement>) => {\n          if (e.key === 'Escape') {\n            model.clearSearchText();\n          }\n        }}\n        onFocus={model.onFocus}\n      />\n    );\n  };\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  resultsCount: css`\n    margin-right: ${theme.spacing(1)};\n    border-radius: 11px;\n    padding: 2px 8px;\n    color: ${theme.colors.text.primary};\n    background-color: ${theme.colors.background.secondary};\n  `,\n});\n","import {\n  AdHocVariableFilter,\n  DataQueryResponse,\n  FieldType,\n  LoadingState,\n  MetricFindValue,\n  TestDataSourceResponse,\n} from '@grafana/data';\nimport { RuntimeDataSource } from '@grafana/scenes';\nimport { userStorage } from '@shared/infrastructure/userStorage';\nimport { isEqual } from 'lodash';\n\nimport { PanelType } from '../../components/SceneByVariableRepeaterGrid/components/ScenePanelTypeSwitcher';\nimport { PYROSCOPE_FAVORITES_DATA_SOURCE } from '../pyroscope-data-sources';\nimport { getProfileMetricLabel } from '../series/helpers/getProfileMetricLabel';\n\nexport type Favorite = {\n  index: number; // for colouring purpose only\n  queryRunnerParams: {\n    serviceName: string;\n    profileMetricId: string;\n    groupBy?: {\n      label: string;\n    };\n    filters?: AdHocVariableFilter[];\n  };\n  panelType?: PanelType;\n};\n\nexport class FavoritesDataSource extends RuntimeDataSource {\n  static getAllFavorites() {\n    return userStorage.get(userStorage.KEYS.PROFILES_EXPLORER)?.favorites || [];\n  }\n\n  static areFavoritesEqual(f1: Favorite, f2: Favorite) {\n    return f1.panelType === f2.panelType && isEqual(f1.queryRunnerParams, f2.queryRunnerParams);\n  }\n\n  static exists(favorite: Favorite) {\n    return FavoritesDataSource.getAllFavorites().some((f: Favorite) =>\n      FavoritesDataSource.areFavoritesEqual(f, favorite)\n    );\n  }\n\n  static addFavorite(favorite: Favorite) {\n    const storage = userStorage.get(userStorage.KEYS.PROFILES_EXPLORER);\n    storage.favorites.push(favorite);\n    userStorage.set(userStorage.KEYS.PROFILES_EXPLORER, storage);\n  }\n\n  static removeFavorite(favorite: Favorite) {\n    const storage = userStorage.get(userStorage.KEYS.PROFILES_EXPLORER);\n    storage.favorites = storage.favorites.filter((f: Favorite) => !FavoritesDataSource.areFavoritesEqual(f, favorite));\n    userStorage.set(userStorage.KEYS.PROFILES_EXPLORER, storage);\n  }\n\n  constructor() {\n    super(PYROSCOPE_FAVORITES_DATA_SOURCE.type, PYROSCOPE_FAVORITES_DATA_SOURCE.uid);\n\n    const storage = userStorage.get(userStorage.KEYS.PROFILES_EXPLORER) || {};\n    storage.favorites ||= [];\n\n    // ensures backward compatibility for older favorites without panel type\n    storage.favorites = storage.favorites.map((f: Favorite) => ({\n      panelType: PanelType.TIMESERIES,\n      ...f,\n    }));\n\n    userStorage.set(userStorage.KEYS.PROFILES_EXPLORER, storage);\n  }\n\n  async query(): Promise<DataQueryResponse> {\n    return {\n      state: LoadingState.Done,\n      data: [\n        {\n          name: 'Favories',\n          fields: [\n            {\n              name: null,\n              type: FieldType.other,\n              values: [],\n              config: {},\n            },\n          ],\n          length: 0,\n        },\n      ],\n    };\n  }\n\n  async metricFindQuery(): Promise<MetricFindValue[]> {\n    return FavoritesDataSource.getAllFavorites().map((f: Favorite) => {\n      const { serviceName, profileMetricId, groupBy, filters } = f.queryRunnerParams || {};\n      const textParts = [serviceName, getProfileMetricLabel(profileMetricId)];\n\n      if (groupBy?.label) {\n        textParts.push(groupBy.label);\n      }\n\n      if (filters?.length) {\n        textParts.push(filters.map(({ key, operator, value }) => `${key}${operator}\"${value}\"`).join(', '));\n      }\n\n      return {\n        value: JSON.stringify({ value: JSON.stringify(f), ...f }),\n        text: textParts.join(' · '),\n      };\n    });\n  }\n\n  async testDatasource(): Promise<TestDataSourceResponse> {\n    return {\n      status: 'success',\n      message: 'OK',\n    };\n  }\n}\n","import { AdHocVariableFilter } from '@grafana/data';\nimport { sceneGraph, SceneObject } from '@grafana/scenes';\nimport { clone, defaults, uniqBy } from 'lodash';\n\nimport { GridItemData } from '../../components/SceneByVariableRepeaterGrid/types/GridItemData';\nimport { FiltersVariable } from '../../domain/variables/FiltersVariable/FiltersVariable';\nimport { getSceneVariableValue } from '../../helpers/getSceneVariableValue';\n\ntype InterpolatedQueryRunnerParams = GridItemData['queryRunnerParams'] & {\n  serviceName: string;\n  profileMetricId: string;\n  filters: AdHocVariableFilter[];\n};\n\nexport function interpolateQueryRunnerVariables(\n  sceneObject: SceneObject,\n  item: GridItemData\n): InterpolatedQueryRunnerParams {\n  const { queryRunnerParams } = item;\n\n  const interpolatedParams = defaults(clone(queryRunnerParams), {\n    serviceName: getSceneVariableValue(sceneObject, 'serviceName'),\n    profileMetricId: getSceneVariableValue(sceneObject, 'profileMetricId'),\n  });\n\n  // state.filters has the AdHocFilterWithLabels[] type so we get rid of keyLabel and valueLabel\n  const parsedFilters = (sceneGraph.lookupVariable('filters', sceneObject) as FiltersVariable).state.filters.map(\n    ({ key, operator, value }) => ({ key, operator, value })\n  );\n\n  interpolatedParams.filters = uniqBy(\n    [...(interpolatedParams.filters || []), ...parsedFilters],\n    ({ key, operator, value }) => `${key}${operator}${value}`\n  );\n\n  return interpolatedParams as InterpolatedQueryRunnerParams;\n}\n","import { css } from '@emotion/css';\nimport { SceneComponentProps, SceneObjectBase, SceneObjectState, VariableDependencyConfig } from '@grafana/scenes';\nimport { IconButton, useStyles2 } from '@grafana/ui';\nimport { reportInteraction } from '@shared/domain/reportInteraction';\nimport React from 'react';\n\nimport { GridItemData } from '../../components/SceneByVariableRepeaterGrid/types/GridItemData';\nimport { Favorite, FavoritesDataSource } from '../../infrastructure/favorites/FavoritesDataSource';\nimport { interpolateQueryRunnerVariables } from '../../infrastructure/helpers/interpolateQueryRunnerVariables';\n\ninterface FavActionState extends SceneObjectState {\n  item: GridItemData;\n  isFav?: boolean;\n  skipVariablesInterpolation?: boolean;\n}\n\nexport class FavAction extends SceneObjectBase<FavActionState> {\n  protected _variableDependency = new VariableDependencyConfig(this, {\n    variableNames: ['serviceName', 'profileMetricId', 'filters'],\n    onReferencedVariableValueChanged: () => {\n      this.update();\n    },\n  });\n\n  constructor(state: FavActionState) {\n    super(state);\n\n    this.addActivationHandler(() => this.update());\n  }\n\n  update() {\n    this.setState({ isFav: this.isStored() });\n  }\n\n  isStored() {\n    return FavoritesDataSource.exists(this.buildFavorite());\n  }\n\n  static buildFavorite(item: GridItemData): Favorite {\n    const { index, queryRunnerParams, panelType } = item;\n\n    const favorite: Favorite = {\n      index,\n      queryRunnerParams: {\n        serviceName: queryRunnerParams.serviceName as string,\n        profileMetricId: queryRunnerParams.profileMetricId as string,\n      },\n      panelType,\n    };\n\n    // we don't store values, we'll fetch all timeseries by using the `groupBy` parameter\n    if (queryRunnerParams.groupBy) {\n      favorite.queryRunnerParams.groupBy = {\n        label: queryRunnerParams.groupBy.label,\n      };\n    }\n\n    // we don't store filters if empty\n    if (queryRunnerParams.filters?.length) {\n      favorite.queryRunnerParams.filters = queryRunnerParams.filters;\n    }\n\n    return favorite;\n  }\n\n  buildFavorite(): Favorite {\n    const { item, skipVariablesInterpolation } = this.state;\n\n    return FavAction.buildFavorite({\n      index: item.index,\n      queryRunnerParams: skipVariablesInterpolation\n        ? item.queryRunnerParams\n        : interpolateQueryRunnerVariables(this, item),\n      panelType: item.panelType,\n    } as GridItemData);\n  }\n\n  public onClick = () => {\n    reportInteraction('g_pyroscope_app_fav_action_clicked', { favAfterClick: !this.state.isFav });\n\n    if (!this.state.isFav) {\n      FavoritesDataSource.addFavorite(this.buildFavorite());\n    } else {\n      FavoritesDataSource.removeFavorite(this.buildFavorite());\n    }\n\n    this.setState({ isFav: !this.state.isFav });\n  };\n\n  public static Component = ({ model }: SceneComponentProps<FavAction>) => {\n    const styles = useStyles2(getStyles);\n    const { isFav } = model.useState();\n\n    return (\n      <IconButton\n        className={isFav ? styles.favedButton : styles.notFavedbutton}\n        name={isFav ? 'favorite' : 'star'}\n        variant=\"secondary\"\n        size=\"sm\"\n        aria-label={isFav ? 'Unfavorite' : 'Favorite'}\n        tooltip={isFav ? 'Unfavorite' : 'Favorite'}\n        tooltipPlacement=\"top\"\n        onClick={model.onClick}\n      />\n    );\n  };\n}\n\nconst getStyles = () => ({\n  favedButton: css`\n    color: #f2cc0d;\n    margin: 0;\n  `,\n  notFavedbutton: css`\n    margin: 0;\n  `,\n});\n","import { localeCompare } from '@shared/domain/localeCompare';\n\nimport { FavAction } from '../../..//domain/actions/FavAction';\nimport { FavoritesDataSource } from '../../../infrastructure/favorites/FavoritesDataSource';\nimport { GridItemData } from '../types/GridItemData';\n\nexport const sortFavGridItems: (a: GridItemData, b: GridItemData) => number = function (a, b) {\n  const aIsFav = FavoritesDataSource.exists(FavAction.buildFavorite(a));\n  const bIsFav = FavoritesDataSource.exists(FavAction.buildFavorite(b));\n\n  if (aIsFav && bIsFav) {\n    return localeCompare(a.label, b.label);\n  }\n\n  if (bIsFav) {\n    return +1;\n  }\n\n  if (aIsFav) {\n    return -1;\n  }\n\n  return 0;\n};\n","import { DashboardCursorSync, VariableRefresh } from '@grafana/data';\nimport {\n  behaviors,\n  EmbeddedSceneState,\n  QueryVariable,\n  SceneComponentProps,\n  SceneCSSGridItem,\n  SceneCSSGridLayout,\n  sceneGraph,\n  SceneObjectBase,\n  VariableValueOption,\n  VizPanelState,\n} from '@grafana/scenes';\nimport { Spinner } from '@grafana/ui';\nimport { noOp } from '@shared/domain/noOp';\nimport { logger } from '@shared/infrastructure/tracking/logger';\nimport { debounce, isEqual } from 'lodash';\nimport React from 'react';\n\nimport { EventTimeseriesDataReceived } from '../../domain/events/EventTimeseriesDataReceived';\nimport { FiltersVariable } from '../../domain/variables/FiltersVariable/FiltersVariable';\nimport { getSceneVariableValue } from '../../helpers/getSceneVariableValue';\nimport { vizPanelBuilder } from '../../helpers/vizPanelBuilder';\nimport { SceneLabelValuesBarGauge } from '../SceneLabelValuesBarGauge';\nimport { SceneLabelValuesHistogram } from '../SceneLabelValuesHistogram';\nimport { SceneLabelValuesTable } from '../SceneLabelValuesTable';\nimport { SceneLabelValuesTimeseries } from '../SceneLabelValuesTimeseries/SceneLabelValuesTimeseries';\nimport { SceneEmptyState } from './components/SceneEmptyState/SceneEmptyState';\nimport { SceneErrorState } from './components/SceneErrorState/SceneErrorState';\nimport { LayoutType, SceneLayoutSwitcher, SceneLayoutSwitcherState } from './components/SceneLayoutSwitcher';\nimport { SceneNoDataSwitcher, SceneNoDataSwitcherState } from './components/SceneNoDataSwitcher';\nimport { ScenePanelTypeSwitcher } from './components/ScenePanelTypeSwitcher';\nimport { SceneQuickFilter, SceneQuickFilterState } from './components/SceneQuickFilter';\nimport { sortFavGridItems } from './domain/sortFavGridItems';\nimport { GridItemData } from './types/GridItemData';\n\ninterface SceneByVariableRepeaterGridState extends EmbeddedSceneState {\n  variableName: string;\n  items: GridItemData[];\n  headerActions: (item: GridItemData, items: GridItemData[]) => VizPanelState['headerActions'];\n  mapOptionToItem: (\n    option: VariableValueOption,\n    index: number,\n    variablesValues: Record<string, string>\n  ) => GridItemData | null;\n  sortItemsFn: (a: GridItemData, b: GridItemData) => number;\n  hideNoData: boolean;\n}\n\nconst GRID_TEMPLATE_COLUMNS = 'repeat(auto-fit, minmax(400px, 1fr))';\nconst GRID_TEMPLATE_ROWS = '1fr';\nconst GRID_AUTO_ROWS = '240px';\n\nexport class SceneByVariableRepeaterGrid extends SceneObjectBase<SceneByVariableRepeaterGridState> {\n  static buildGridItemKey(item: GridItemData) {\n    return `grid-item-${item.index}-${item.value}`;\n  }\n\n  static getGridColumnsTemplate(layout: LayoutType) {\n    return layout === LayoutType.ROWS ? GRID_TEMPLATE_ROWS : GRID_TEMPLATE_COLUMNS;\n  }\n\n  constructor({\n    key,\n    variableName,\n    headerActions,\n    mapOptionToItem,\n    sortItemsFn,\n  }: {\n    key: string;\n    variableName: SceneByVariableRepeaterGridState['variableName'];\n    headerActions: SceneByVariableRepeaterGridState['headerActions'];\n    mapOptionToItem: SceneByVariableRepeaterGridState['mapOptionToItem'];\n    sortItemsFn?: SceneByVariableRepeaterGridState['sortItemsFn'];\n  }) {\n    super({\n      key,\n      variableName,\n      items: [],\n      headerActions,\n      mapOptionToItem,\n      sortItemsFn: sortItemsFn || sortFavGridItems,\n      hideNoData: false,\n      body: new SceneCSSGridLayout({\n        templateColumns: SceneByVariableRepeaterGrid.getGridColumnsTemplate(SceneLayoutSwitcher.DEFAULT_LAYOUT),\n        autoRows: GRID_AUTO_ROWS,\n        isLazy: true,\n        $behaviors: [\n          new behaviors.CursorSync({\n            key: 'metricCrosshairSync',\n            sync: DashboardCursorSync.Crosshair,\n          }),\n        ],\n        children: [],\n      }),\n    });\n\n    this.addActivationHandler(this.onActivate.bind(this));\n  }\n\n  onActivate() {\n    // here we try to emulate VariableDependencyConfig.onVariableUpdateCompleted\n    const variable = sceneGraph.lookupVariable(this.state.variableName, this) as QueryVariable & { update: () => void };\n\n    const variableSub = variable.subscribeToState((newState, prevState) => {\n      if (!newState.loading && prevState.loading) {\n        this.renderGridItems();\n      }\n    });\n\n    // if the variable is inactive, the data source will not fetch the options\n    // so we force an update here to be sure we have the latest values\n    variable.update();\n\n    const refreshSub = this.subscribeToRefreshClick();\n    const quickFilterSub = this.subscribeToQuickFilterChange();\n    const layoutChangeSub = this.subscribeToLayoutChange();\n    const hideNoDataSub = this.subscribeToHideNoDataChange();\n    const filtersSub = this.subscribeToFiltersChange();\n\n    return () => {\n      filtersSub.unsubscribe();\n      hideNoDataSub.unsubscribe();\n      layoutChangeSub.unsubscribe();\n      quickFilterSub.unsubscribe();\n      refreshSub.unsubscribe();\n\n      variableSub.unsubscribe();\n    };\n  }\n\n  subscribeToRefreshClick() {\n    const variable = sceneGraph.lookupVariable(this.state.variableName, this) as QueryVariable & { update: () => void };\n    const originalRefresh = variable.state.refresh;\n\n    variable.setState({ refresh: VariableRefresh.never });\n\n    const onClickRefresh = () => {\n      variable.update();\n    };\n\n    // start of hack, for a better UX: we disable the variable \"refresh\" option and we allow the user to reload the list only by clicking on the \"Refresh\" button\n    // if we don't do this, every time the time range changes (even with auto-refresh on),\n    // all the timeseries present on the screen would be re-created, resulting in blinking and a poor UX\n    const refreshButton = document.querySelector(\n      '[data-testid=\"data-testid RefreshPicker run button\"]'\n    ) as HTMLButtonElement;\n\n    if (!refreshButton) {\n      logger.error(\n        new Error('SceneByVariableRepeaterGrid: Refresh button not found! The list of items will never be updated.')\n      );\n    }\n\n    refreshButton?.addEventListener('click', onClickRefresh);\n    refreshButton?.setAttribute('title', 'Click to completely refresh all the panels present on the screen');\n    // end of hack\n\n    return {\n      unsubscribe() {\n        refreshButton?.removeAttribute('title');\n        refreshButton?.removeEventListener('click', onClickRefresh);\n        variable.setState({ refresh: originalRefresh });\n      },\n    };\n  }\n\n  subscribeToQuickFilterChange() {\n    const quickFilter = sceneGraph.findByKeyAndType(this, 'quick-filter', SceneQuickFilter);\n\n    this.subscribeToState((newState, prevState) => {\n      if (newState.items.length !== prevState.items.length) {\n        quickFilter.setResultsCount(newState.items.length);\n      }\n    });\n\n    const onChangeState = (newState: SceneQuickFilterState, prevState?: SceneQuickFilterState) => {\n      if (newState.searchText !== prevState?.searchText) {\n        this.renderGridItems();\n      }\n    };\n\n    return quickFilter.subscribeToState(debounce(onChangeState, SceneQuickFilter.DEBOUNCE_DELAY));\n  }\n\n  subscribeToLayoutChange() {\n    const layoutSwitcher = sceneGraph.findByKeyAndType(this, 'layout-switcher', SceneLayoutSwitcher);\n\n    const body = this.state.body as SceneCSSGridLayout;\n\n    const onChangeState = (newState: SceneLayoutSwitcherState, prevState?: SceneLayoutSwitcherState) => {\n      if (newState.layout !== prevState?.layout) {\n        body.setState({\n          templateColumns: SceneByVariableRepeaterGrid.getGridColumnsTemplate(newState.layout),\n        });\n      }\n    };\n\n    onChangeState(layoutSwitcher.state);\n\n    return layoutSwitcher.subscribeToState(onChangeState);\n  }\n\n  subscribeToHideNoDataChange() {\n    const noDataSwitcher = sceneGraph.findByKeyAndType(this, 'no-data-switcher', SceneNoDataSwitcher);\n\n    if (!noDataSwitcher.isActive) {\n      this.setState({ hideNoData: false });\n\n      return {\n        unsubscribe: noOp,\n      };\n    }\n\n    const onChangeState = (newState: SceneNoDataSwitcherState, prevState?: SceneNoDataSwitcherState) => {\n      if (newState.hideNoData !== prevState?.hideNoData) {\n        this.setState({ hideNoData: newState.hideNoData === 'on' });\n\n        // we force render because this.state.items certainly have not changed but we want to update the UI panels anyway\n        this.renderGridItems(true);\n      }\n    };\n\n    onChangeState(noDataSwitcher.state);\n\n    return noDataSwitcher.subscribeToState(onChangeState);\n  }\n\n  subscribeToFiltersChange() {\n    const filtersVariable = sceneGraph.findByKeyAndType(this, 'filters', FiltersVariable);\n    const noDataSwitcher = sceneGraph.findByKeyAndType(this, 'no-data-switcher', SceneNoDataSwitcher);\n\n    // the handler will be called each time a filter is added/removed/modified\n    return filtersVariable.subscribeToState(() => {\n      if (noDataSwitcher.state.hideNoData === 'on') {\n        // to be sure the list is updated we force render because the filters only influence the query made in each panel\n        this.renderGridItems(true);\n      }\n    });\n  }\n\n  buildItemsData(variable: QueryVariable) {\n    const { mapOptionToItem } = this.state;\n\n    const variableValues = {\n      serviceName: getSceneVariableValue(this, 'serviceName'),\n      profileMetricId: getSceneVariableValue(this, 'profileMetricId'),\n      panelType: sceneGraph.findByKeyAndType(this, 'panel-type-switcher', ScenePanelTypeSwitcher).state.panelType,\n    };\n\n    const items = variable.state.options\n      .map((option, i) => mapOptionToItem(option, i, variableValues))\n      .filter(Boolean) as GridItemData[];\n\n    return this.filterItems(items).sort(this.state.sortItemsFn);\n  }\n\n  shouldRenderItems(newItems: SceneByVariableRepeaterGridState['items']) {\n    const { items } = this.state;\n\n    if (!newItems.length || items.length !== newItems.length) {\n      return true;\n    }\n\n    return !isEqual(items, newItems);\n  }\n\n  renderGridItems(forceRender = false) {\n    const variable = sceneGraph.lookupVariable(this.state.variableName, this) as QueryVariable;\n\n    if (variable.state.loading) {\n      return;\n    }\n\n    if (variable.state.error) {\n      this.renderErrorState(variable.state.error);\n      return;\n    }\n\n    const newItems = this.buildItemsData(variable);\n\n    if (!forceRender && !this.shouldRenderItems(newItems)) {\n      return;\n    }\n\n    this.setState({ items: newItems });\n\n    if (!this.state.items.length) {\n      this.renderEmptyState();\n      return;\n    }\n\n    const gridItems = this.state.items.map((item) => {\n      const vizPanel = vizPanelBuilder(item.panelType, {\n        item,\n        headerActions: this.state.headerActions.bind(null, item, this.state.items),\n      });\n\n      if (this.state.hideNoData) {\n        this.setupHideNoData(vizPanel);\n      }\n\n      return new SceneCSSGridItem({\n        key: SceneByVariableRepeaterGrid.buildGridItemKey(item),\n        body: vizPanel,\n      });\n    });\n\n    (this.state.body as SceneCSSGridLayout).setState({\n      autoRows: GRID_AUTO_ROWS, // required to have the correct grid items height\n      children: gridItems,\n    });\n  }\n\n  setupHideNoData(\n    vizPanel: SceneLabelValuesTimeseries | SceneLabelValuesBarGauge | SceneLabelValuesHistogram | SceneLabelValuesTable\n  ) {\n    const sub = vizPanel.subscribeToEvent(EventTimeseriesDataReceived, (event) => {\n      if (event.payload.series?.length) {\n        return;\n      }\n\n      const gridItem = sceneGraph.getAncestor(vizPanel, SceneCSSGridItem);\n      const { key: gridItemKey } = gridItem.state;\n      const grid = sceneGraph.getAncestor(gridItem, SceneCSSGridLayout);\n\n      const filteredChildren = grid.state.children.filter((c) => c.state.key !== gridItemKey);\n\n      if (!filteredChildren.length) {\n        this.renderEmptyState();\n      } else {\n        grid.setState({ children: filteredChildren });\n      }\n    });\n\n    vizPanel.addActivationHandler(() => {\n      return () => {\n        sub.unsubscribe();\n      };\n    });\n  }\n\n  filterItems(items: SceneByVariableRepeaterGridState['items']) {\n    const quickFilterScene = sceneGraph.findByKeyAndType(this, 'quick-filter', SceneQuickFilter);\n    const { searchText } = quickFilterScene.state;\n\n    if (!searchText) {\n      return items;\n    }\n\n    const regexes = searchText\n      .split(',')\n      .map((t) => t.trim())\n      .filter(Boolean)\n      .map((r) => {\n        try {\n          return new RegExp(r);\n        } catch {\n          return null;\n        }\n      })\n      .filter(Boolean) as RegExp[];\n\n    return items.filter(({ label }) => regexes.some((r) => r.test(label)));\n  }\n\n  renderEmptyState() {\n    (this.state.body as SceneCSSGridLayout).setState({\n      autoRows: '480px',\n      children: [\n        new SceneCSSGridItem({\n          body: new SceneEmptyState({\n            message: 'No results',\n          }),\n        }),\n      ],\n    });\n  }\n\n  renderErrorState(error: Error) {\n    (this.state.body as SceneCSSGridLayout).setState({\n      autoRows: '480px',\n      children: [\n        new SceneCSSGridItem({\n          body: new SceneErrorState({\n            message: error.message || error.toString(),\n          }),\n        }),\n      ],\n    });\n  }\n\n  static Component({ model }: SceneComponentProps<SceneByVariableRepeaterGrid>) {\n    const { body, variableName } = model.useState();\n    const { loading } = (sceneGraph.lookupVariable(variableName, model) as QueryVariable)?.useState();\n\n    return loading ? <Spinner /> : <body.Component model={body} />;\n  }\n}\n","import { BusEventWithPayload } from '@grafana/data';\n\nimport { GridItemData } from '../../components/SceneByVariableRepeaterGrid/types/GridItemData';\n\nexport interface EventExpandPanelPayload {\n  item: GridItemData;\n}\n\nexport class EventExpandPanel extends BusEventWithPayload<EventExpandPanelPayload> {\n  public static type = 'expand-panel';\n}\n","import { BusEventWithPayload } from '@grafana/data';\n\nimport { GridItemData } from '../../components/SceneByVariableRepeaterGrid/types/GridItemData';\n\nexport interface EventSelectLabelPayload {\n  item: GridItemData;\n}\n\nexport class EventSelectLabel extends BusEventWithPayload<EventSelectLabelPayload> {\n  public static type = 'select-label';\n}\n","import { BusEventWithPayload } from '@grafana/data';\n\nimport { GridItemData } from '../../components/SceneByVariableRepeaterGrid/types/GridItemData';\n\nexport interface EventViewServiceFlameGraphPayload {\n  item: GridItemData;\n}\n\nexport class EventViewServiceFlameGraph extends BusEventWithPayload<EventViewServiceFlameGraphPayload> {\n  public static type = 'view-service-flame-graph';\n}\n","import { BusEventWithPayload } from '@grafana/data';\n\nimport { GridItemData } from '../../components/SceneByVariableRepeaterGrid/types/GridItemData';\n\nexport interface EventViewServiceLabelsPayload {\n  item: GridItemData;\n}\n\nexport class EventViewServiceLabels extends BusEventWithPayload<EventViewServiceLabelsPayload> {\n  public static type = 'view-service-labels';\n}\n","import { BusEventWithPayload } from '@grafana/data';\n\nimport { GridItemData } from '../../components/SceneByVariableRepeaterGrid/types/GridItemData';\n\nexport interface EventViewServiceProfilesPayload {\n  item: GridItemData;\n}\n\nexport class EventViewServiceProfiles extends BusEventWithPayload<EventViewServiceProfilesPayload> {\n  public static type = 'view-service-profiles';\n}\n","import { css } from '@emotion/css';\nimport { SceneComponentProps, SceneObject, SceneObjectBase, SceneObjectState } from '@grafana/scenes';\nimport { Button, IconName, useStyles2 } from '@grafana/ui';\nimport { reportInteraction } from '@shared/domain/reportInteraction';\nimport { getProfileMetric, ProfileMetricId } from '@shared/infrastructure/profile-metrics/getProfileMetric';\nimport { merge } from 'lodash';\nimport React from 'react';\n\nimport { GridItemData } from '../../components/SceneByVariableRepeaterGrid/types/GridItemData';\nimport { getSceneVariableValue } from '../../helpers/getSceneVariableValue';\nimport { interpolateQueryRunnerVariables } from '../../infrastructure/helpers/interpolateQueryRunnerVariables';\nimport { EventExpandPanel, EventExpandPanelPayload } from '../events/EventExpandPanel';\nimport { EventSelectLabel, EventSelectLabelPayload } from '../events/EventSelectLabel';\nimport { EventViewServiceFlameGraph, EventViewServiceFlameGraphPayload } from '../events/EventViewServiceFlameGraph';\nimport { EventViewServiceLabels, EventViewServiceLabelsPayload } from '../events/EventViewServiceLabels';\nimport { EventViewServiceProfiles, EventViewServiceProfilesPayload } from '../events/EventViewServiceProfiles';\n\ntype ActionType = 'expand-panel' | 'select-label' | 'view-flame-graph' | 'view-labels' | 'view-profiles';\n\ntype EventLookup = {\n  icon?: IconName;\n  label?: string;\n  ariaLabel?: string;\n  tooltip: (item: GridItemData, model: SceneObject) => string;\n  EventConstructor:\n    | (new (payload: EventExpandPanelPayload) => EventExpandPanel)\n    | (new (payload: EventSelectLabelPayload) => EventSelectLabel)\n    | (new (payload: EventViewServiceFlameGraphPayload) => EventViewServiceFlameGraph)\n    | (new (payload: EventViewServiceLabelsPayload) => EventViewServiceLabels)\n    | (new (payload: EventViewServiceProfilesPayload) => EventViewServiceProfiles);\n};\n\nconst Events = new Map<ActionType, EventLookup>([\n  [\n    'expand-panel',\n    Object.freeze({\n      ariaLabel: 'Expand panel',\n      icon: 'expand-arrows',\n      tooltip: () => 'Expand this panel to view all the data for the current filters',\n      EventConstructor: EventExpandPanel,\n    }),\n  ],\n  [\n    'select-label',\n    Object.freeze({\n      label: 'Select',\n      tooltip: ({ queryRunnerParams }) => `View \"${queryRunnerParams.groupBy?.label}\" values breakdown`,\n      EventConstructor: EventSelectLabel,\n    }),\n  ],\n  [\n    'view-flame-graph',\n    Object.freeze({\n      label: 'Flame graph',\n      tooltip: ({ queryRunnerParams }, model) => {\n        const serviceName = queryRunnerParams.serviceName || getSceneVariableValue(model, 'serviceName');\n        const profileMetricId = queryRunnerParams.profileMetricId || getSceneVariableValue(model, 'profileMetricId');\n        return `View the \"${getProfileMetric(profileMetricId as ProfileMetricId).type}\" flame graph of ${serviceName}`;\n      },\n      EventConstructor: EventViewServiceFlameGraph,\n    }),\n  ],\n  [\n    'view-labels',\n    Object.freeze({\n      label: 'Labels',\n      tooltip: ({ queryRunnerParams }, model) => {\n        const serviceName = queryRunnerParams.serviceName || getSceneVariableValue(model, 'serviceName');\n        return `Explore the labels of ${serviceName}`;\n      },\n      EventConstructor: EventViewServiceLabels,\n    }),\n  ],\n  [\n    'view-profiles',\n    Object.freeze({\n      label: 'Profile types',\n      tooltip: ({ queryRunnerParams }, model) => {\n        const serviceName = queryRunnerParams.serviceName || getSceneVariableValue(model, 'serviceName');\n        return `View the profile types of ${serviceName}`;\n      },\n      EventConstructor: EventViewServiceProfiles,\n    }),\n  ],\n]);\n\ninterface SelectActionState extends SceneObjectState {\n  type: ActionType;\n  EventConstructor: EventLookup['EventConstructor'];\n  item: GridItemData;\n  label?: string;\n  ariaLabel?: string;\n  icon?: IconName;\n  tooltip?: EventLookup['tooltip'];\n  skipVariablesInterpolation?: boolean;\n}\n\nexport class SelectAction extends SceneObjectBase<SelectActionState> {\n  constructor({\n    type,\n    item,\n    tooltip,\n    skipVariablesInterpolation,\n  }: {\n    type: ActionType;\n    item: SelectActionState['item'];\n    tooltip?: SelectActionState['tooltip'];\n    skipVariablesInterpolation?: SelectActionState['skipVariablesInterpolation'];\n  }) {\n    const lookup = Events.get(type);\n    if (!lookup) {\n      throw new TypeError(`Unknown event type=\"${type}\"!`);\n    }\n\n    super({ type, item, ...merge({}, lookup, { tooltip, skipVariablesInterpolation }) });\n  }\n\n  public onClick = () => {\n    reportInteraction('g_pyroscope_app_select_action_clicked', { type: this.state.type });\n\n    this.publishEvent(this.buildEvent(), true);\n  };\n\n  buildEvent() {\n    const { EventConstructor, item, skipVariablesInterpolation } = this.state;\n\n    const completeItem = {\n      ...item,\n      queryRunnerParams: skipVariablesInterpolation\n        ? item.queryRunnerParams\n        : interpolateQueryRunnerVariables(this, item),\n    };\n\n    return new EventConstructor({\n      item: completeItem,\n    });\n  }\n\n  public static Component = ({ model }: SceneComponentProps<SelectAction>) => {\n    const styles = useStyles2(getStyles);\n    const { ariaLabel, label, icon, tooltip, item } = model.useState();\n\n    return (\n      <Button\n        className={styles.selectButton}\n        aria-label={ariaLabel || label}\n        variant=\"primary\"\n        size=\"sm\"\n        fill=\"text\"\n        onClick={model.onClick}\n        icon={icon}\n        tooltip={tooltip?.(item, model)}\n        tooltipPlacement=\"top\"\n      >\n        {label}\n      </Button>\n    );\n  };\n}\n\nconst getStyles = () => ({\n  selectButton: css`\n    margin: 0;\n    padding: 0;\n  `,\n});\n","import {\n  EmbeddedSceneState,\n  SceneComponentProps,\n  sceneGraph,\n  SceneObjectBase,\n  SceneVariableSet,\n} from '@grafana/scenes';\nimport React from 'react';\n\nimport { SceneByVariableRepeaterGrid } from '../../components/SceneByVariableRepeaterGrid/SceneByVariableRepeaterGrid';\nimport { FavAction } from '../../domain/actions/FavAction';\nimport { SelectAction } from '../../domain/actions/SelectAction';\nimport { ProfileMetricVariable } from '../../domain/variables/ProfileMetricVariable';\nimport { ServiceNameVariable } from '../../domain/variables/ServiceNameVariable/ServiceNameVariable';\nimport { SceneLayoutSwitcher } from '../SceneByVariableRepeaterGrid/components/SceneLayoutSwitcher';\nimport { PanelType } from '../SceneByVariableRepeaterGrid/components/ScenePanelTypeSwitcher';\nimport { SceneQuickFilter } from '../SceneByVariableRepeaterGrid/components/SceneQuickFilter';\n\ninterface SceneExploreAllServicesState extends EmbeddedSceneState {}\n\nexport class SceneExploreAllServices extends SceneObjectBase<SceneExploreAllServicesState> {\n  constructor() {\n    super({\n      key: 'explore-all-services',\n      $variables: new SceneVariableSet({\n        variables: [\n          // we use a custom instance of ServiceNameVariable to display only the services associated to the selected profile metric\n          new ServiceNameVariable({\n            query: ServiceNameVariable.QUERY_PROFILE_METRIC_DEPENDENT,\n            skipUrlSync: true,\n          }),\n        ],\n      }),\n      body: new SceneByVariableRepeaterGrid({\n        key: 'all-services-grid',\n        variableName: 'serviceName',\n        mapOptionToItem: (option, index, { profileMetricId }) => ({\n          index,\n          value: option.value as string,\n          label: option.label,\n          queryRunnerParams: {\n            serviceName: option.value as string,\n            profileMetricId,\n          },\n          panelType: PanelType.TIMESERIES,\n        }),\n        headerActions: (item) => [\n          new SelectAction({ type: 'view-profiles', item }),\n          new SelectAction({ type: 'view-labels', item }),\n          new SelectAction({ type: 'view-flame-graph', item }),\n          new FavAction({ item }),\n        ],\n      }),\n    });\n\n    this.addActivationHandler(this.onActivate.bind(this));\n  }\n\n  onActivate() {\n    sceneGraph\n      .findByKeyAndType(this, 'quick-filter', SceneQuickFilter)\n      .setPlaceholder('Search services (comma-separated regexes are supported)');\n  }\n\n  // see SceneProfilesExplorer\n  getVariablesAndGridControls() {\n    return {\n      variables: [sceneGraph.findByKeyAndType(this, 'profileMetricId', ProfileMetricVariable)],\n      gridControls: [\n        sceneGraph.findByKeyAndType(this, 'quick-filter', SceneQuickFilter),\n        sceneGraph.findByKeyAndType(this, 'layout-switcher', SceneLayoutSwitcher),\n      ],\n    };\n  }\n\n  static Component({ model }: SceneComponentProps<SceneExploreAllServices>) {\n    const { body } = model.useState();\n\n    return <body.Component model={body} />;\n  }\n}\n","import { SceneComponentProps, SceneObject, SceneObjectBase, SceneObjectState } from '@grafana/scenes';\nimport { Drawer } from '@grafana/ui';\nimport React from 'react';\n\ninterface SceneDrawerState extends SceneObjectState {\n  key?: string;\n  isOpen?: boolean;\n  title?: string;\n  subTitle?: string;\n  body?: SceneObject;\n}\n\nexport class SceneDrawer extends SceneObjectBase<SceneDrawerState> {\n  constructor(state?: SceneDrawerState) {\n    super({\n      key: 'drawer',\n      isOpen: false,\n      ...state,\n    });\n  }\n\n  open = ({\n    title,\n    subTitle,\n    body,\n  }: {\n    title?: SceneDrawerState['title'];\n    subTitle?: SceneDrawerState['subTitle'];\n    body?: SceneDrawerState['body'];\n  }) => {\n    this.setState({ ...this.state, isOpen: true, title, subTitle, body });\n  };\n\n  close = () => {\n    this.setState({ isOpen: false });\n  };\n\n  static Component = ({ model }: SceneComponentProps<SceneDrawer>) => {\n    const { isOpen, title, subTitle, body } = model.useState();\n\n    return (\n      <>\n        {body && isOpen && (\n          <Drawer size=\"lg\" title={title} subtitle={subTitle} closeOnMaskClick onClose={model.close}>\n            <body.Component model={body} />\n          </Drawer>\n        )}\n      </>\n    );\n  };\n}\n","import { VariableRefresh } from '@grafana/data';\nimport { QueryVariable, VariableValueOption } from '@grafana/scenes';\nimport { lastValueFrom } from 'rxjs';\n\nimport { PYROSCOPE_FAVORITES_DATA_SOURCE } from '../../infrastructure/pyroscope-data-sources';\n\nexport class FavoriteVariable extends QueryVariable {\n  constructor() {\n    super({\n      name: 'favorite',\n      label: '🔖 Favorite',\n      datasource: PYROSCOPE_FAVORITES_DATA_SOURCE,\n      // \"hack\": we want to subscribe to changes of dataSource\n      query: '$dataSource',\n      loading: true,\n      refresh: VariableRefresh.never,\n      skipUrlSync: true,\n    });\n  }\n\n  async update() {\n    if (this.state.loading) {\n      return;\n    }\n\n    let options: VariableValueOption[] = [];\n    let error = null;\n\n    this.setState({ loading: true, options: [], error: null });\n\n    try {\n      options = await lastValueFrom(this.getValueOptions({}));\n    } catch (e) {\n      error = e;\n    } finally {\n      this.setState({ loading: false, options, error });\n    }\n  }\n}\n","import {\n  EmbeddedSceneState,\n  SceneComponentProps,\n  sceneGraph,\n  SceneObjectBase,\n  SceneVariableSet,\n} from '@grafana/scenes';\nimport { localeCompare } from '@shared/domain/localeCompare';\nimport React from 'react';\n\nimport { SceneByVariableRepeaterGrid } from '../../components/SceneByVariableRepeaterGrid/SceneByVariableRepeaterGrid';\nimport { GridItemData } from '../../components/SceneByVariableRepeaterGrid/types/GridItemData';\nimport { SceneDrawer } from '../../components/SceneDrawer';\nimport { FavAction } from '../../domain/actions/FavAction';\nimport { SelectAction } from '../../domain/actions/SelectAction';\nimport { EventExpandPanel } from '../../domain/events/EventExpandPanel';\nimport { FavoriteVariable } from '../../domain/variables/FavoriteVariable';\nimport { vizPanelBuilder } from '../../helpers/vizPanelBuilder';\nimport { SceneLayoutSwitcher } from '../SceneByVariableRepeaterGrid/components/SceneLayoutSwitcher';\nimport { SceneNoDataSwitcher } from '../SceneByVariableRepeaterGrid/components/SceneNoDataSwitcher';\nimport { SceneQuickFilter } from '../SceneByVariableRepeaterGrid/components/SceneQuickFilter';\n\ninterface SceneExploreFavoritesState extends EmbeddedSceneState {\n  drawer: SceneDrawer;\n}\n\nexport class SceneExploreFavorites extends SceneObjectBase<SceneExploreFavoritesState> {\n  constructor() {\n    super({\n      key: 'explore-favorites',\n      $variables: new SceneVariableSet({ variables: [new FavoriteVariable()] }),\n      body: new SceneByVariableRepeaterGrid({\n        key: 'favorites-grid',\n        variableName: 'favorite',\n        mapOptionToItem: (option) => {\n          // see FavoritesDataSource.ts\n          const { index, value, panelType, queryRunnerParams } = JSON.parse(option.value as string);\n\n          return {\n            index,\n            value,\n            label: option.label,\n            queryRunnerParams,\n            panelType,\n          };\n        },\n        sortItemsFn: (a, b) => localeCompare(a.label, b.label),\n        headerActions: (item) => {\n          const actions: Array<SelectAction | FavAction> = [\n            new SelectAction({ type: 'view-labels', item, skipVariablesInterpolation: true }),\n            new SelectAction({ type: 'view-flame-graph', item, skipVariablesInterpolation: true }),\n          ];\n\n          if (item.queryRunnerParams.groupBy) {\n            actions.push(\n              new SelectAction({\n                type: 'expand-panel',\n                item,\n                tooltip: () => 'Expand panel to view all the data',\n                skipVariablesInterpolation: true,\n              })\n            );\n          }\n\n          actions.push(new FavAction({ item, skipVariablesInterpolation: true }));\n\n          return actions;\n        },\n      }),\n      drawer: new SceneDrawer(),\n    });\n\n    this.addActivationHandler(this.onActivate.bind(this));\n  }\n\n  onActivate() {\n    sceneGraph\n      .findByKeyAndType(this, 'quick-filter', SceneQuickFilter)\n      .setPlaceholder('Search favorites (comma-separated regexes are supported)');\n\n    const expandPanelSub = this.subscribeToEvent(EventExpandPanel, async (event) => {\n      this.openExpandedPanelDrawer(event.payload.item);\n    });\n\n    return () => {\n      expandPanelSub.unsubscribe();\n    };\n  }\n\n  // see SceneProfilesExplorer\n  getVariablesAndGridControls() {\n    return {\n      variables: [],\n      gridControls: [\n        sceneGraph.findByKeyAndType(this, 'quick-filter', SceneQuickFilter),\n        sceneGraph.findByKeyAndType(this, 'layout-switcher', SceneLayoutSwitcher),\n        sceneGraph.findByKeyAndType(this, 'no-data-switcher', SceneNoDataSwitcher),\n      ],\n    };\n  }\n\n  openExpandedPanelDrawer(item: GridItemData) {\n    const headerActions = () => [\n      new SelectAction({ type: 'view-labels', item }),\n      new SelectAction({ type: 'view-flame-graph', item }),\n    ];\n\n    this.state.drawer.open({\n      title: item.label,\n      body: vizPanelBuilder(item.panelType, {\n        displayAllValues: true,\n        legendPlacement: 'right',\n        item,\n        headerActions,\n      }),\n    });\n  }\n\n  static Component({ model }: SceneComponentProps<SceneExploreFavorites>) {\n    const { body, drawer } = model.useState();\n\n    return (\n      <>\n        <body.Component model={body} />\n        <drawer.Component model={drawer} />\n      </>\n    );\n  }\n}\n","import { css } from '@emotion/css';\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { Field, measureText, RadioButtonGroup, RefreshPicker, Select, useStyles2, useTheme2 } from '@grafana/ui';\nimport { useResizeObserver } from '@react-aria/utils';\nimport { noOp } from '@shared/domain/noOp';\nimport React, { useEffect, useRef, useState } from 'react';\n\nimport { GroupByVariable } from './GroupByVariable';\n\ntype Props = {\n  options: Array<SelectableValue<string>>;\n  mainLabels: string[];\n  value?: string;\n  onChange: (label: string) => void;\n  onRefresh: () => void;\n};\n\nexport function GroupBySelector({ options, mainLabels, value, onChange, onRefresh }: Props) {\n  const styles = useStyles2(getStyles);\n  const theme = useTheme2();\n\n  const [labelSelectorRequiredWidth, setLabelSelectorRequiredWidth] = useState<number>(0);\n  const [availableWidth, setAvailableWidth] = useState<number>(0);\n\n  const useHorizontalLabelSelector = availableWidth > labelSelectorRequiredWidth;\n\n  const controlsContainer = useRef<HTMLDivElement>(null);\n\n  useResizeObserver({\n    ref: controlsContainer,\n    onResize: () => {\n      const element = controlsContainer.current;\n      if (element) {\n        setAvailableWidth(element.clientWidth);\n      }\n    },\n  });\n\n  const mainOptions = options.filter((o) => mainLabels.includes(o.value as string));\n  const otherOptions = options.filter((o) => !mainLabels.includes(o.value as string));\n\n  useEffect(() => {\n    const { fontSize } = theme.typography;\n    const text = mainOptions.map((option) => option.label || option.text || '').join(' ');\n    const textWidth = measureText(text, fontSize).width;\n    const additionalWidthPerItem = 70;\n    setLabelSelectorRequiredWidth(textWidth + additionalWidthPerItem * mainOptions.length);\n  }, [mainOptions, theme]);\n\n  return (\n    <Field label=\"Group by labels\">\n      <div ref={controlsContainer} className={styles.container}>\n        {useHorizontalLabelSelector ? (\n          <>\n            <RadioButtonGroup aria-label=\"Labels selector\" options={mainOptions} value={value} onChange={onChange} />\n            <Select\n              aria-label=\"Other labels selector\"\n              className={styles.select}\n              placeholder=\"Other labels\"\n              options={otherOptions}\n              value={value && otherOptions.some((x) => x.value === value) ? value : null} // remove value from select when radio button clicked\n              onChange={(selected) => onChange(selected?.value ?? 'all')}\n              isClearable\n            />\n          </>\n        ) : (\n          <Select\n            aria-label=\"Labels selector\"\n            className={styles.select}\n            value={value}\n            placeholder=\"Select label\"\n            options={options}\n            onChange={(selected) => onChange(selected?.value || GroupByVariable.DEFAULT_VALUE)}\n            isClearable\n          />\n        )}\n        <RefreshPicker\n          noIntervalPicker\n          onRefresh={onRefresh}\n          isOnCanvas={false}\n          onIntervalChanged={noOp}\n          tooltip=\"Click to refresh all labels\"\n        />\n      </div>\n    </Field>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  container: css`\n    display: flex;\n    gap: ${theme.spacing(1)};\n  `,\n  select: css`\n    max-width: ${theme.spacing(22)};\n  `,\n});\n","import { css } from '@emotion/css';\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { MultiValueVariable, QueryVariable, SceneComponentProps, VariableValueOption } from '@grafana/scenes';\nimport { Field, Icon, RefreshPicker, Spinner, Tooltip, useStyles2 } from '@grafana/ui';\nimport { noOp } from '@shared/domain/noOp';\nimport { prepareHistoryEntry } from '@shared/domain/prepareHistoryEntry';\nimport { reportInteraction } from '@shared/domain/reportInteraction';\nimport React, { useMemo } from 'react';\nimport { lastValueFrom } from 'rxjs';\nimport { GridItemData } from 'src/pages/ProfilesExplorerView/components/SceneByVariableRepeaterGrid/types/GridItemData';\n\nimport { PYROSCOPE_LABELS_DATA_SOURCE } from '../../../infrastructure/pyroscope-data-sources';\nimport { GroupBySelector } from './GroupBySelector';\n\nexport type OptionWithIndex = VariableValueOption & {\n  index: number;\n  value: string;\n  label: string;\n  groupBy: GridItemData['queryRunnerParams']['groupBy'];\n};\n\nexport class GroupByVariable extends QueryVariable {\n  static DEFAULT_VALUE = 'all';\n\n  static MAX_MAIN_LABELS = 8;\n\n  constructor() {\n    super({\n      key: 'groupBy',\n      name: 'groupBy',\n      label: 'Group by labels',\n      datasource: PYROSCOPE_LABELS_DATA_SOURCE,\n      // \"hack\": we want to subscribe to changes of dataSource, serviceName and profileMetricId\n      // we could also add filters, but the Service labels exploration type would reload all labels each time they are modified\n      // which wouldn't be great UX\n      query: '$dataSource and $profileMetricId{service_name=\"$serviceName\"}',\n      loading: true,\n    });\n\n    this.changeValueTo = this.changeValueTo.bind(this);\n\n    this.addActivationHandler(this.onActivate.bind(this));\n  }\n\n  onActivate() {\n    if (!this.state.value) {\n      this.setState({ value: GroupByVariable.DEFAULT_VALUE });\n    }\n  }\n\n  update = async () => {\n    if (this.state.loading) {\n      return;\n    }\n\n    let options: VariableValueOption[] = [];\n    let error = null;\n\n    this.setState({ loading: true, options: [], error: null });\n\n    try {\n      options = await lastValueFrom(this.getValueOptions({}));\n    } catch (e) {\n      error = e;\n    } finally {\n      this.setState({ loading: false, options, error });\n    }\n  };\n\n  onChange = (newValue: string) => {\n    reportInteraction('g_pyroscope_app_group_by_label_clicked');\n\n    prepareHistoryEntry();\n    this.changeValueTo(newValue);\n  };\n\n  findCurrentOption(): OptionWithIndex {\n    const { value } = this.state;\n\n    // See LabelsDataSource.ts\n    const option = this.state.options\n      .filter((o) => o.value !== 'all')\n      .find((o) => JSON.parse(o.value as string).value === value);\n\n    if (option) {\n      const parsedValue = JSON.parse(option.value as string);\n      return {\n        index: parsedValue.index,\n        value: parsedValue.value,\n        label: parsedValue.value,\n        groupBy: parsedValue.groupBy,\n      };\n    }\n\n    return {\n      index: 0,\n      value: value as string,\n      label: value as string,\n      groupBy: undefined,\n    };\n  }\n\n  static Component = ({ model }: SceneComponentProps<MultiValueVariable & { update?: any; onChange?: any }>) => {\n    const styles = useStyles2(getStyles);\n    const { loading, value, options, error } = model.useState();\n\n    const groupByOptions = useMemo(\n      () =>\n        options.map(({ label, value }) => {\n          return value === 'all'\n            ? { label, value }\n            : {\n                label,\n                // see src/pages/ProfilesExplorerView/data/labels/LabelsDataSource.ts\n                value: JSON.parse(String(value)).value,\n              };\n        }),\n      [options]\n    );\n\n    if (loading) {\n      return (\n        <Field label=\"Group by labels\">\n          <Spinner className={styles.spinner} />\n        </Field>\n      );\n    }\n\n    if (error) {\n      return (\n        <Field label=\"Group by labels\">\n          <div className={styles.groupByErrorContainer}>\n            <Tooltip theme=\"error\" content={error.toString()}>\n              <Icon className={styles.iconError} name=\"exclamation-triangle\" size=\"xl\" />\n            </Tooltip>\n            <RefreshPicker noIntervalPicker onRefresh={model.update} isOnCanvas={false} onIntervalChanged={noOp} />\n          </div>\n        </Field>\n      );\n    }\n\n    const getMainLabels = (groupByOptions: Array<SelectableValue<string>>) => {\n      return groupByOptions.slice(0, GroupByVariable.MAX_MAIN_LABELS).map(({ value }) => value as string);\n    };\n\n    return (\n      <GroupBySelector\n        options={groupByOptions}\n        value={value as string}\n        mainLabels={getMainLabels(groupByOptions)}\n        onChange={model.onChange}\n        onRefresh={model.update}\n      />\n    );\n  };\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  spinner: css`\n    height: 32px;\n    line-height: 32px;\n  `,\n  groupByErrorContainer: css`\n    display: flex;\n  `,\n  iconError: css`\n    height: 32px;\n    align-self: center;\n    color: ${theme.colors.error.text};\n  `,\n});\n","import {\n  SceneComponentProps,\n  SceneDataTransformer,\n  sceneGraph,\n  SceneObjectBase,\n  SceneObjectState,\n  SceneQueryRunner,\n  VariableDependencyConfig,\n  VizPanelState,\n} from '@grafana/scenes';\nimport { getProfileMetric, ProfileMetricId } from '@shared/infrastructure/profile-metrics/getProfileMetric';\nimport React from 'react';\n\nimport { FiltersVariable } from '../domain/variables/FiltersVariable/FiltersVariable';\nimport { GroupByVariable } from '../domain/variables/GroupByVariable/GroupByVariable';\nimport { ProfileMetricVariable } from '../domain/variables/ProfileMetricVariable';\nimport { ServiceNameVariable } from '../domain/variables/ServiceNameVariable/ServiceNameVariable';\nimport { getSceneVariableValue } from '../helpers/getSceneVariableValue';\nimport { PYROSCOPE_DATA_SOURCE } from '../infrastructure/pyroscope-data-sources';\nimport { getProfileMetricLabel } from '../infrastructure/series/helpers/getProfileMetricLabel';\nimport { PanelType } from './SceneByVariableRepeaterGrid/components/ScenePanelTypeSwitcher';\nimport { addRefId, addStats } from './SceneByVariableRepeaterGrid/infrastructure/data-transformations';\nimport { GridItemData } from './SceneByVariableRepeaterGrid/types/GridItemData';\nimport { SceneLabelValuesTimeseries } from './SceneLabelValuesTimeseries/SceneLabelValuesTimeseries';\n\ninterface SceneMainServiceTimeseriesState extends SceneObjectState {\n  headerActions: (item: GridItemData) => VizPanelState['headerActions'];\n  body?: SceneLabelValuesTimeseries;\n}\n\nexport class SceneMainServiceTimeseries extends SceneObjectBase<SceneMainServiceTimeseriesState> {\n  static MIN_HEIGHT = 240;\n\n  protected _variableDependency = new VariableDependencyConfig(this, {\n    variableNames: ['serviceName', 'profileMetricId'],\n    onReferencedVariableValueChanged: (variable) => {\n      this.resetTimeseries(variable.state.name === 'serviceName');\n    },\n  });\n\n  constructor({\n    item,\n    headerActions,\n    supportGroupBy,\n  }: {\n    item?: GridItemData;\n    headerActions: SceneMainServiceTimeseriesState['headerActions'];\n    supportGroupBy?: boolean;\n  }) {\n    super({\n      headerActions,\n      body: undefined,\n    });\n\n    this.addActivationHandler(this.onActivate.bind(this, item, supportGroupBy));\n  }\n\n  onActivate(item?: GridItemData, supportGroupBy?: boolean) {\n    if (item) {\n      this.initVariables(item);\n    }\n\n    this.setState({ body: this.buildTimeseries(item, supportGroupBy) });\n\n    if (supportGroupBy) {\n      this.subscribeToGroupByStateChanges(item);\n    }\n  }\n\n  initVariables(item: GridItemData) {\n    const { serviceName, profileMetricId, filters } = item.queryRunnerParams;\n\n    if (serviceName) {\n      const serviceNameVariable = sceneGraph.findByKeyAndType(this, 'serviceName', ServiceNameVariable);\n      serviceNameVariable.changeValueTo(serviceName);\n    }\n\n    if (profileMetricId) {\n      const profileMetricVariable = sceneGraph.findByKeyAndType(this, 'profileMetricId', ProfileMetricVariable);\n      profileMetricVariable.changeValueTo(profileMetricId);\n    }\n\n    if (filters) {\n      const filtersVariable = sceneGraph.findByKeyAndType(this, 'filters', FiltersVariable);\n      filtersVariable.setState({ filters });\n    }\n  }\n\n  buildTimeseries(item?: GridItemData, supportGroupBy?: boolean) {\n    const { headerActions } = this.state;\n\n    const timeseriesItem: GridItemData = {\n      index: 0,\n      value: '',\n      queryRunnerParams: {}, // let interpolation happen\n      label: this.buildTitle(),\n      panelType: PanelType.TIMESERIES,\n    };\n\n    if (item && supportGroupBy) {\n      timeseriesItem.queryRunnerParams.groupBy = item.queryRunnerParams.groupBy;\n    }\n\n    const groupBy = sceneGraph.findByKeyAndType(this, 'groupBy', GroupByVariable).state.value;\n\n    return new SceneLabelValuesTimeseries({\n      item: timeseriesItem,\n      headerActions,\n      // we pass data for the scenarios where we land on the page from a shared link\n      // we do this to prevent rendering a timeseries without groupBy for a second then with groupBy\n      // and also to directly render something when there's no groupBy in the URL\n      data:\n        !item && supportGroupBy && groupBy && groupBy !== 'all'\n          ? new SceneDataTransformer({\n              $data: new SceneQueryRunner({ datasource: PYROSCOPE_DATA_SOURCE, queries: [] }),\n              transformations: [addRefId, addStats],\n            })\n          : undefined,\n    });\n  }\n\n  subscribeToGroupByStateChanges(item?: GridItemData) {\n    const groupByVariable = sceneGraph.findByKeyAndType(this, 'groupBy', GroupByVariable);\n\n    this._subs.add(\n      groupByVariable.subscribeToState((newState, prevState) => {\n        if (newState.loading || !newState.options.length) {\n          return;\n        }\n\n        // First load:\n        // here we check for the item to prevent two queries to occur when coming from (e.g) favorites and\n        // selecting an item with a different profile metric than the current ProfileMetricVariable value\n        if (!item && prevState.loading) {\n          this.onGroupByChanged(groupByVariable);\n          return;\n        }\n\n        if (newState.value !== prevState.value) {\n          this.onGroupByChanged(groupByVariable);\n        }\n      })\n    );\n  }\n\n  onGroupByChanged(groupByVariable: GroupByVariable) {\n    if (!groupByVariable.state.value || groupByVariable.state.value === 'all') {\n      this.resetTimeseries();\n      return;\n    }\n\n    const { index, value, groupBy } = groupByVariable.findCurrentOption();\n\n    (this.state.body as SceneLabelValuesTimeseries)?.updateItem({\n      index,\n      label: `${this.buildTitle()}, grouped by ${value}`,\n      queryRunnerParams: { groupBy },\n    });\n  }\n\n  resetTimeseries(resetFilters = false) {\n    if (resetFilters) {\n      sceneGraph.findByKeyAndType(this, 'filters', FiltersVariable).reset();\n    }\n\n    (this.state.body as SceneLabelValuesTimeseries)?.updateItem({\n      index: 0,\n      label: this.buildTitle(),\n      queryRunnerParams: { groupBy: undefined },\n    });\n  }\n\n  buildTitle() {\n    const profileMetricId = getSceneVariableValue(this, 'profileMetricId');\n    const { description } = getProfileMetric(profileMetricId as ProfileMetricId);\n    return description || getProfileMetricLabel(profileMetricId);\n  }\n\n  static Component({ model }: SceneComponentProps<SceneMainServiceTimeseries>) {\n    const { body } = model.useState();\n\n    return body && <body.Component model={body} />;\n  }\n}\n","import { AdHocVariableFilter, BusEventWithPayload } from '@grafana/data';\n\ninterface EventViewDiffFlameGraphPayload {\n  useAncestorTimeRange: boolean;\n  clearDiffRange: boolean;\n  baselineFilters: AdHocVariableFilter[];\n  comparisonFilters: AdHocVariableFilter[];\n}\n\nexport class EventViewDiffFlameGraph extends BusEventWithPayload<EventViewDiffFlameGraphPayload> {\n  public static type = 'view-diff-flame-graph';\n}\n","import { BusEventWithPayload } from '@grafana/data';\n\nimport { GridItemData } from '../../../../../SceneByVariableRepeaterGrid/types/GridItemData';\nimport { CompareTarget } from '../../../../../SceneExploreDiffFlameGraph/domain/types';\n\ninterface EventSelectForComparePayload {\n  compareTarget: CompareTarget;\n  item: GridItemData;\n}\n\nexport class EventSelectForCompare extends BusEventWithPayload<EventSelectForComparePayload> {\n  public static type = 'select-for-compare';\n}\n","import { css, cx } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Checkbox, Tooltip, useStyles2 } from '@grafana/ui';\nimport React, { useEffect, useRef, useState } from 'react';\n\nimport { CompareTarget } from '../../../../../../../../SceneExploreDiffFlameGraph/domain/types';\n\ntype CompareActionProps = {\n  option: {\n    label: string;\n    value: CompareTarget;\n    description: string;\n  };\n  checked: boolean;\n  onChange: (compareTarget: CompareTarget) => void;\n};\n\nexport function CompareAction({ option, checked, onChange }: CompareActionProps) {\n  const styles = useStyles2(getStyles);\n\n  const [showTooltip, setShowTooltip] = useState(false);\n  const checkboxRef = useRef<HTMLInputElement>(null);\n  const label = (checkboxRef.current as HTMLInputElement)?.closest('label');\n\n  // we write custom code to provide the tooltips because wrapping our checkbox into the <Tooltip> component does not work\n  useEffect(() => {\n    if (!label || checked) {\n      setShowTooltip(false);\n      return;\n    }\n\n    const onMouseEnter = () => {\n      setShowTooltip(true);\n    };\n\n    const onMouseLeave = () => {\n      setShowTooltip(false);\n    };\n\n    label.addEventListener('mouseenter', onMouseEnter);\n    label.addEventListener('mouseleave', onMouseLeave);\n\n    return () => {\n      label.removeEventListener('mouseleave', onMouseLeave);\n      label.removeEventListener('mouseenter', onMouseEnter);\n    };\n  }, [checked, label]);\n\n  return (\n    <>\n      <Tooltip content={option.description} show={!checked && showTooltip} placement=\"top\">\n        <span className={styles.tooltipAnchor} />\n      </Tooltip>\n      <Checkbox\n        ref={checkboxRef}\n        className={cx(styles.checkbox, 'checkbox', checked && 'checked')}\n        checked={checked}\n        label={option.label}\n        onChange={() => onChange(option.value)}\n      />\n    </>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  tooltipAnchor: css`\n    position: relative;\n    left: 42px;\n  `,\n  checkbox: css`\n    column-gap: 4px;\n\n    &:last-child {\n      & :nth-child(1) {\n        grid-column-start: 2;\n      }\n      & :nth-child(2) {\n        grid-column-start: 1;\n      }\n    }\n\n    span {\n      color: ${theme.colors.text.secondary};\n    }\n    span:hover {\n      color: ${theme.colors.text.primary};\n    }\n\n    &.checked span {\n      color: ${theme.colors.text.primary};\n    }\n  `,\n});\n","import { css } from '@emotion/css';\nimport { getValueFormat, GrafanaTheme2 } from '@grafana/data';\nimport { Spinner, useStyles2 } from '@grafana/ui';\nimport React, { useMemo } from 'react';\n\nimport { GridItemData } from '../../../../../../../../../components/SceneByVariableRepeaterGrid/types/GridItemData';\nimport { getColorByIndex } from '../../../../../../../../../helpers/getColorByIndex';\nimport { CompareTarget } from '../../../../../../../../SceneExploreDiffFlameGraph/domain/types';\nimport { ItemStats } from '../SceneStatsPanel';\nimport { CompareAction } from './CompareAction';\n\ntype StatsPanelProps = {\n  item: GridItemData;\n  itemStats?: ItemStats;\n  statsDescription: string;\n  compareActionChecks: boolean[];\n  onChangeCompareTarget: (compareTarget: CompareTarget) => void;\n};\n\nexport function StatsPanel({\n  item,\n  itemStats,\n  statsDescription,\n  compareActionChecks,\n  onChangeCompareTarget,\n}: StatsPanelProps) {\n  const styles = useStyles2(getStyles);\n\n  const { index, value } = item;\n\n  const color = getColorByIndex(index);\n\n  const total = useMemo(() => {\n    if (!itemStats) {\n      return <Spinner inline />;\n    }\n\n    const { allValuesSum, unit } = itemStats;\n    const { text, suffix } = getValueFormat(unit)(allValuesSum);\n\n    return `${text}${suffix}`;\n  }, [itemStats]);\n\n  const options = useMemo(\n    () => [\n      {\n        label: 'Baseline',\n        value: CompareTarget.BASELINE,\n        description: !compareActionChecks[0] ? `Click to select \"${value}\" as baseline for comparison` : '',\n      },\n      {\n        label: 'Comparison',\n        value: CompareTarget.COMPARISON,\n        description: !compareActionChecks[1] ? `Click to select \"${value}\" as target for comparison` : '',\n      },\n    ],\n    [compareActionChecks, value]\n  );\n\n  return (\n    <div className={styles.container} data-testid={`stats-panel-${value}`}>\n      <h1 style={{ color }} className={styles.title} title={`${statsDescription}: ${total}`}>\n        {total}\n      </h1>\n\n      <div className={styles.compareActions}>\n        <CompareAction option={options[0]} checked={compareActionChecks[0]} onChange={onChangeCompareTarget} />\n        <CompareAction option={options[1]} checked={compareActionChecks[1]} onChange={onChangeCompareTarget} />\n      </div>\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  container: css`\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    width: 100%;\n    background-color: ${theme.colors.background.canvas};\n    padding: ${theme.spacing(1)};\n    border: 1px solid ${theme.colors.border.weak};\n    border-right: none;\n    border-radius: 2px 0 0 2px;\n  `,\n  title: css`\n    font-size: 24px;\n    width: 100%;\n    text-align: center;\n    margin-top: ${theme.spacing(5)};\n  `,\n  compareActions: css`\n    display: flex;\n    justify-content: space-between;\n    font-size: 11px;\n    border-top: 1px solid ${theme.colors.border.weak};\n    padding: ${theme.spacing(1)} 0 0 0;\n\n    & .checkbox:nth-child(2) {\n      padding-right: 4px;\n      border-right: 1px solid ${theme.colors.border.strong};\n    }\n    & .checkbox:nth-child(4) {\n      padding-left: 4px;\n    }\n  `,\n});\n","import { SceneComponentProps, sceneGraph, SceneObjectBase, SceneObjectState } from '@grafana/scenes';\nimport { getProfileMetric, ProfileMetricId } from '@shared/infrastructure/profile-metrics/getProfileMetric';\nimport React from 'react';\nimport { getSceneVariableValue } from 'src/pages/ProfilesExplorerView/helpers/getSceneVariableValue';\nimport { getProfileMetricLabel } from 'src/pages/ProfilesExplorerView/infrastructure/series/helpers/getProfileMetricLabel';\n\nimport { GridItemData } from '../../../../../../../SceneByVariableRepeaterGrid/types/GridItemData';\nimport { CompareTarget } from '../../../../../../../SceneExploreDiffFlameGraph/domain/types';\nimport { EventSelectForCompare } from '../../../../domain/events/EventSelectForCompare';\nimport { SceneGroupByLabels } from '../../../../SceneGroupByLabels';\nimport { StatsPanel } from './ui/StatsPanel';\n\nexport type ItemStats = {\n  allValuesSum: number;\n  unit: string;\n};\n\ninterface SceneStatsPanelState extends SceneObjectState {\n  item: GridItemData;\n  itemStats?: ItemStats;\n  compareActionChecks: boolean[];\n  statsDescription: string;\n}\n\nexport class SceneStatsPanel extends SceneObjectBase<SceneStatsPanelState> {\n  static WIDTH_IN_PIXELS = 186;\n\n  constructor({ item }: { item: GridItemData }) {\n    super({\n      item,\n      itemStats: undefined,\n      compareActionChecks: [false, false],\n      statsDescription: '',\n    });\n\n    this.addActivationHandler(this.onActivate.bind(this));\n  }\n\n  onActivate() {\n    const compare = sceneGraph.findByKeyAndType(this, 'group-by-labels', SceneGroupByLabels).getCompare();\n\n    this.updateCompareActions(compare.get(CompareTarget.BASELINE), compare.get(CompareTarget.COMPARISON));\n\n    this.setState({ statsDescription: this.getStatsDescription() });\n  }\n\n  updateCompareActions(baselineItem?: GridItemData, comparisonItem?: GridItemData) {\n    const { item } = this.state;\n\n    this.setState({\n      compareActionChecks: [baselineItem?.value === item.value, comparisonItem?.value === item.value],\n    });\n  }\n\n  getStatsDescription() {\n    const profileMetricId = getSceneVariableValue(this, 'profileMetricId');\n    const { description } = getProfileMetric(profileMetricId as ProfileMetricId);\n    return description || getProfileMetricLabel(profileMetricId);\n  }\n\n  onChangeCompareTarget = (compareTarget: CompareTarget) => {\n    this.publishEvent(\n      new EventSelectForCompare({\n        compareTarget,\n        item: this.state.item,\n      }),\n      true\n    );\n  };\n\n  getStats() {\n    return this.state.itemStats;\n  }\n\n  updateStats(itemStats: ItemStats) {\n    this.setState({ itemStats });\n  }\n\n  static Component({ model }: SceneComponentProps<SceneStatsPanel>) {\n    const { item, itemStats, statsDescription, compareActionChecks } = model.useState();\n\n    return (\n      <StatsPanel\n        item={item}\n        itemStats={itemStats}\n        statsDescription={statsDescription}\n        compareActionChecks={compareActionChecks}\n        onChangeCompareTarget={model.onChangeCompareTarget}\n      />\n    );\n  }\n}\n","import { css, cx } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { SceneComponentProps, SceneObjectBase, SceneObjectState, VizPanelState } from '@grafana/scenes';\nimport { useStyles2 } from '@grafana/ui';\nimport React from 'react';\n\nimport { EventTimeseriesDataReceived } from '../../../../../../../domain/events/EventTimeseriesDataReceived';\nimport { getSeriesStatsValue } from '../../../../../../../infrastructure/helpers/getSeriesStatsValue';\nimport { GridItemData } from '../../../../../../SceneByVariableRepeaterGrid/types/GridItemData';\nimport { SceneLabelValuesTimeseries } from '../../../../../../SceneLabelValuesTimeseries/SceneLabelValuesTimeseries';\nimport { GRID_AUTO_ROWS } from '../SceneLabelValuesGrid';\nimport { SceneStatsPanel } from './SceneStatsPanel/SceneStatsPanel';\n\ninterface SceneLabelValuesStatAndTimeseriesState extends SceneObjectState {\n  statsPanel: SceneStatsPanel;\n  timeseriesPanel: SceneLabelValuesTimeseries;\n}\n\nexport class SceneLabelValuePanel extends SceneObjectBase<SceneLabelValuesStatAndTimeseriesState> {\n  static buildPanelKey(item: GridItemData) {\n    return `compare-panel-${item.value}`;\n  }\n\n  constructor({\n    item,\n    headerActions,\n  }: {\n    item: GridItemData;\n    headerActions: (item: GridItemData) => VizPanelState['headerActions'];\n  }) {\n    super({\n      key: 'label-value-panel',\n      statsPanel: new SceneStatsPanel({ item }),\n      timeseriesPanel: new SceneLabelValuesTimeseries({ item, headerActions }),\n    });\n\n    this.addActivationHandler(this.onActivate.bind(this));\n  }\n\n  onActivate() {\n    const { statsPanel, timeseriesPanel } = this.state;\n\n    const timeseriesSub = timeseriesPanel.subscribeToEvent(EventTimeseriesDataReceived, (event) => {\n      const s = event.payload.series?.[0];\n\n      if (!s) {\n        statsPanel.updateStats({ allValuesSum: 0, unit: 'short' });\n        return;\n      }\n\n      const allValuesSum = getSeriesStatsValue(s, 'allValuesSum') || 0;\n\n      if (statsPanel.getStats()?.allValuesSum !== allValuesSum) {\n        statsPanel.updateStats({\n          allValuesSum,\n          unit: s.fields[1].config.unit || 'short',\n        });\n      }\n    });\n\n    return () => {\n      timeseriesSub.unsubscribe();\n    };\n  }\n\n  static Component({ model }: SceneComponentProps<SceneLabelValuePanel>) {\n    const styles = useStyles2(getStyles); // eslint-disable-line react-hooks/rules-of-hooks\n    const { statsPanel, timeseriesPanel } = model.useState();\n    const { compareActionChecks } = statsPanel.useState();\n    const isSelected = compareActionChecks[0] || compareActionChecks[1];\n\n    return (\n      <div className={cx(styles.container, isSelected && 'selected')}>\n        <div className={styles.statsPanel}>\n          <statsPanel.Component model={statsPanel} />\n        </div>\n        <div className={styles.timeseriesPanel}>\n          <timeseriesPanel.Component model={timeseriesPanel} />\n        </div>\n      </div>\n    );\n  }\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  container: css`\n    display: flex;\n    min-width: 0px;\n    min-height: ${GRID_AUTO_ROWS};\n    flex-flow: row;\n\n    box-sizing: border-box;\n    border: 1px solid transparent;\n    &.selected {\n      border: 1px solid ${theme.colors.primary.main};\n    }\n\n    & > div {\n      display: flex;\n      position: relative;\n      flex-direction: row;\n      align-self: stretch;\n      min-height: ${GRID_AUTO_ROWS};\n    }\n  `,\n  statsPanel: css`\n    width: ${SceneStatsPanel.WIDTH_IN_PIXELS}px;\n  `,\n  timeseriesPanel: css`\n    flex-grow: 1;\n\n    & [data-viz-panel-key] > * {\n      border-top-left-radius: 0;\n      border-bottom-left-radius: 0;\n    }\n  `,\n});\n","import { SceneQueryRunner } from '@grafana/scenes';\n\nimport { PYROSCOPE_DATA_SOURCE } from '../../../../../../../infrastructure/pyroscope-data-sources';\n\nexport function buildLabelValuesGridQueryRunner({ label }: { label: string }) {\n  const selector = 'service_name=\"$serviceName\"';\n\n  return new SceneQueryRunner({\n    datasource: PYROSCOPE_DATA_SOURCE,\n    queries: [\n      {\n        refId: `$profileMetricId-${selector}-${label}`,\n        queryType: 'metrics',\n        profileTypeId: '$profileMetricId',\n        labelSelector: `{${selector}}`,\n        groupBy: [label],\n      },\n    ],\n  });\n}\n","import { DashboardCursorSync, DataFrame, LoadingState } from '@grafana/data';\nimport {\n  behaviors,\n  EmbeddedSceneState,\n  SceneComponentProps,\n  SceneCSSGridItem,\n  SceneCSSGridLayout,\n  SceneDataProvider,\n  SceneDataTransformer,\n  sceneGraph,\n  SceneObjectBase,\n  VizPanelState,\n} from '@grafana/scenes';\nimport { Spinner } from '@grafana/ui';\nimport { logger } from '@shared/infrastructure/tracking/logger';\nimport { debounce, isEqual } from 'lodash';\nimport React from 'react';\n\nimport { EventTimeseriesDataReceived } from '../../../../../../domain/events/EventTimeseriesDataReceived';\nimport { FiltersVariable } from '../../../../../../domain/variables/FiltersVariable/FiltersVariable';\nimport { GroupByVariable } from '../../../../../../domain/variables/GroupByVariable/GroupByVariable';\nimport { getSceneVariableValue } from '../../../../../../helpers/getSceneVariableValue';\nimport { getSeriesLabelFieldName } from '../../../../../../infrastructure/helpers/getSeriesLabelFieldName';\nimport { SceneEmptyState } from '../../../../../SceneByVariableRepeaterGrid/components/SceneEmptyState/SceneEmptyState';\nimport { SceneErrorState } from '../../../../../SceneByVariableRepeaterGrid/components/SceneErrorState/SceneErrorState';\nimport {\n  LayoutType,\n  SceneLayoutSwitcher,\n  SceneLayoutSwitcherState,\n} from '../../../../../SceneByVariableRepeaterGrid/components/SceneLayoutSwitcher';\nimport {\n  SceneNoDataSwitcher,\n  SceneNoDataSwitcherState,\n} from '../../../../../SceneByVariableRepeaterGrid/components/SceneNoDataSwitcher';\nimport { PanelType } from '../../../../../SceneByVariableRepeaterGrid/components/ScenePanelTypeSwitcher';\nimport {\n  SceneQuickFilter,\n  SceneQuickFilterState,\n} from '../../../../../SceneByVariableRepeaterGrid/components/SceneQuickFilter';\nimport { sortFavGridItems } from '../../../../../SceneByVariableRepeaterGrid/domain/sortFavGridItems';\nimport { addRefId, addStats } from '../../../../../SceneByVariableRepeaterGrid/infrastructure/data-transformations';\nimport { GridItemData } from '../../../../../SceneByVariableRepeaterGrid/types/GridItemData';\nimport { SceneLabelValuePanel } from './components/SceneLabelValuePanel';\nimport { buildLabelValuesGridQueryRunner } from './infrastructure/buildLabelValuesGridQueryRunner';\n\ninterface SceneLabelValuesGridState extends EmbeddedSceneState {\n  $data: SceneDataProvider;\n  isLoading: boolean;\n  items: GridItemData[];\n  label: string;\n  startColorIndex: number;\n  headerActions: (item: GridItemData, items: GridItemData[]) => VizPanelState['headerActions'];\n  sortItemsFn: (a: GridItemData, b: GridItemData) => number;\n  hideNoData: boolean;\n}\n\nconst GRID_TEMPLATE_COLUMNS = 'repeat(auto-fit, minmax(600px, 1fr))';\nconst GRID_TEMPLATE_ROWS = '1fr';\nexport const GRID_AUTO_ROWS = '160px';\n\nexport class SceneLabelValuesGrid extends SceneObjectBase<SceneLabelValuesGridState> {\n  static buildGridItemKey(item: GridItemData) {\n    return `grid-item-${item.index}-${item.value}`;\n  }\n\n  constructor({\n    key,\n    label,\n    startColorIndex,\n    headerActions,\n  }: {\n    key: string;\n    label: SceneLabelValuesGridState['label'];\n    startColorIndex: SceneLabelValuesGridState['startColorIndex'];\n    headerActions: SceneLabelValuesGridState['headerActions'];\n  }) {\n    super({\n      key,\n      label,\n      startColorIndex,\n      items: [],\n      isLoading: true,\n      $data: new SceneDataTransformer({\n        $data: buildLabelValuesGridQueryRunner({ label }),\n        transformations: [addRefId, addStats],\n      }),\n      hideNoData: false,\n      headerActions,\n      sortItemsFn: sortFavGridItems,\n      body: new SceneCSSGridLayout({\n        templateColumns: GRID_TEMPLATE_ROWS,\n        autoRows: GRID_AUTO_ROWS,\n        isLazy: true,\n        $behaviors: [\n          new behaviors.CursorSync({\n            key: 'metricCrosshairSync',\n            sync: DashboardCursorSync.Crosshair,\n          }),\n        ],\n        children: [],\n      }),\n    });\n\n    this.addActivationHandler(this.onActivate.bind(this));\n  }\n\n  onActivate() {\n    this.subscribeOnceToDataChange();\n\n    const groupBySub = this.subscribeToGroupByChange();\n\n    const refreshSub = this.subscribeToRefreshClick();\n    const quickFilterSub = this.subscribeToQuickFilterChange();\n    const layoutChangeSub = this.subscribeToLayoutChange();\n    const hideNoDataSub = this.subscribeToHideNoDataChange();\n    const filtersSub = this.subscribeToFiltersChange();\n\n    return () => {\n      filtersSub.unsubscribe();\n      hideNoDataSub.unsubscribe();\n      layoutChangeSub.unsubscribe();\n      quickFilterSub.unsubscribe();\n      refreshSub.unsubscribe();\n      groupBySub.unsubscribe();\n    };\n  }\n\n  subscribeOnceToDataChange(forceRender = false) {\n    const dataSub = this.state.$data.subscribeToState((newState) => {\n      if (newState.data?.state === LoadingState.Loading) {\n        return;\n      }\n\n      dataSub.unsubscribe();\n\n      this.renderGridItems(forceRender);\n\n      this.setState({ isLoading: false });\n    });\n  }\n\n  subscribeToGroupByChange() {\n    const groupByVariable = sceneGraph.findByKeyAndType(this, 'groupBy', GroupByVariable);\n\n    return groupByVariable.subscribeToState((newState, prevState) => {\n      if (!newState.loading && prevState.loading) {\n        this.refetchData();\n      }\n    });\n  }\n\n  subscribeToRefreshClick() {\n    const onClickRefresh = () => {\n      this.refetchData();\n    };\n\n    // start of hack, for a better UX: we disable the variable \"refresh\" option and we allow the user to reload the list only by clicking on the \"Refresh\" button\n    // if we don't do this, every time the time range changes (even with auto-refresh on),\n    // all the timeseries present on the screen would be re-created, resulting in blinking and a poor UX\n    const refreshButton = document.querySelector(\n      '[data-testid=\"data-testid RefreshPicker run button\"]'\n    ) as HTMLButtonElement;\n\n    if (!refreshButton) {\n      logger.error(\n        new Error('SceneByVariableRepeaterGrid: Refresh button not found! The list of items will never be updated.')\n      );\n    }\n\n    refreshButton?.addEventListener('click', onClickRefresh);\n    refreshButton?.setAttribute('title', 'Click to completely refresh all the panels present on the screen');\n    // end of hack\n\n    return {\n      unsubscribe() {\n        refreshButton?.removeAttribute('title');\n        refreshButton?.removeEventListener('click', onClickRefresh);\n      },\n    };\n  }\n\n  subscribeToQuickFilterChange() {\n    const quickFilter = sceneGraph.findByKeyAndType(this, 'quick-filter', SceneQuickFilter);\n\n    this.subscribeToState((newState, prevState) => {\n      if (newState.items.length !== prevState.items.length) {\n        quickFilter.setResultsCount(newState.items.length);\n      }\n    });\n\n    const onChangeState = (newState: SceneQuickFilterState, prevState?: SceneQuickFilterState) => {\n      if (newState.searchText !== prevState?.searchText) {\n        this.renderGridItems();\n      }\n    };\n\n    return quickFilter.subscribeToState(debounce(onChangeState, SceneQuickFilter.DEBOUNCE_DELAY));\n  }\n\n  subscribeToLayoutChange() {\n    const layoutSwitcher = sceneGraph.findByKeyAndType(this, 'layout-switcher', SceneLayoutSwitcher);\n    const body = this.state.body as SceneCSSGridLayout;\n\n    const onChangeState = (newState: SceneLayoutSwitcherState, prevState?: SceneLayoutSwitcherState) => {\n      if (newState.layout !== prevState?.layout) {\n        body.setState({\n          templateColumns: newState.layout === LayoutType.ROWS ? GRID_TEMPLATE_ROWS : GRID_TEMPLATE_COLUMNS,\n        });\n      }\n    };\n\n    onChangeState(layoutSwitcher.state);\n\n    return layoutSwitcher.subscribeToState(onChangeState);\n  }\n\n  subscribeToHideNoDataChange() {\n    const noDataSwitcher = sceneGraph.findByKeyAndType(this, 'no-data-switcher', SceneNoDataSwitcher);\n\n    this.setState({ hideNoData: noDataSwitcher.state.hideNoData === 'on' });\n\n    const onChangeState = (newState: SceneNoDataSwitcherState, prevState?: SceneNoDataSwitcherState) => {\n      if (newState.hideNoData !== prevState?.hideNoData) {\n        this.setState({ hideNoData: newState.hideNoData === 'on' });\n\n        this.refetchData(true);\n      }\n    };\n\n    return noDataSwitcher.subscribeToState(onChangeState);\n  }\n\n  subscribeToFiltersChange() {\n    const filtersVariable = sceneGraph.findByKeyAndType(this, 'filters', FiltersVariable);\n    const noDataSwitcher = sceneGraph.findByKeyAndType(this, 'no-data-switcher', SceneNoDataSwitcher);\n\n    // the handler will be called each time a filter is added/removed/modified\n    return filtersVariable.subscribeToState(() => {\n      if (noDataSwitcher.state.hideNoData === 'on') {\n        // to be sure the list is updated we refetch because the filters only influence the query made in each panel\n        this.refetchData();\n      }\n    });\n  }\n\n  refetchData(forceRender = false) {\n    this.setState({\n      isLoading: true,\n      $data: new SceneDataTransformer({\n        $data: buildLabelValuesGridQueryRunner({ label: this.state.label }),\n        transformations: [addRefId, addStats],\n      }),\n    });\n\n    this.subscribeOnceToDataChange(forceRender);\n  }\n\n  shouldRenderItems(newItems: SceneLabelValuesGridState['items']) {\n    const { items } = this.state;\n\n    if (!newItems.length || items.length !== newItems.length) {\n      return true;\n    }\n\n    return !isEqual(items, newItems);\n  }\n\n  buildItemsData(series: DataFrame[]) {\n    const serviceName = getSceneVariableValue(this, 'serviceName');\n    const profileMetricId = getSceneVariableValue(this, 'profileMetricId');\n\n    const { label, startColorIndex, sortItemsFn } = this.state;\n\n    // the series are already sorted by the data transformation\n    const items = series.map((s, index) => {\n      const metricField = s.fields[1];\n      const labelValue = metricField.labels?.[label] || '';\n      const labelName = getSeriesLabelFieldName(metricField, label);\n\n      return {\n        index: startColorIndex + index,\n        value: labelValue,\n        label: labelName,\n        queryRunnerParams: {\n          serviceName,\n          profileMetricId,\n          // defaults to an \"is empty\" operator in the UI when the label value is not set\n          filters: [{ key: label, operator: '=', value: labelValue }],\n        },\n        panelType: PanelType.TIMESERIES,\n      };\n    });\n\n    return this.filterItems(items).sort(sortItemsFn);\n  }\n\n  renderGridItems(forceRender = false) {\n    if (!this.state.$data.state.data) {\n      return;\n    }\n\n    const { state: loadingState, series, errors } = this.state.$data.state.data;\n\n    if (loadingState === LoadingState.Loading) {\n      return;\n    }\n\n    if (loadingState === LoadingState.Error) {\n      // TODO: check if we need https://github.com/grafana/grafana/blob/d7f7cd1e61eac1e0103e0ca1e2122264aa831ffd/public/app/plugins/datasource/azuremonitor/utils/messageFromError.ts#L30\n      this.renderErrorState(errors?.[0] as Error);\n      return;\n    }\n\n    const newItems = this.buildItemsData(series);\n\n    if (!forceRender && !this.shouldRenderItems(newItems)) {\n      return;\n    }\n\n    this.setState({ items: newItems });\n\n    if (!this.state.items.length) {\n      this.renderEmptyState();\n      return;\n    }\n\n    const gridItems = newItems.map((item) => {\n      return new SceneCSSGridItem({\n        key: SceneLabelValuesGrid.buildGridItemKey(item),\n        body: this.buildVizPanel(item),\n      });\n    });\n\n    (this.state.body as SceneCSSGridLayout).setState({\n      autoRows: GRID_AUTO_ROWS, // required to have the correct grid items height\n      children: gridItems,\n    });\n  }\n\n  buildVizPanel(item: GridItemData) {\n    const vizPanel = new SceneLabelValuePanel({\n      item,\n      headerActions: this.state.headerActions.bind(null, item, this.state.items),\n    });\n\n    const sub = vizPanel.subscribeToEvent(EventTimeseriesDataReceived, (event) => {\n      if (!this.state.hideNoData || event.payload.series?.length) {\n        return;\n      }\n\n      const gridItem = sceneGraph.getAncestor(vizPanel, SceneCSSGridItem);\n      const { key: gridItemKey } = gridItem.state;\n      const grid = sceneGraph.getAncestor(gridItem, SceneCSSGridLayout);\n\n      const filteredChildren = grid.state.children.filter((c) => c.state.key !== gridItemKey);\n\n      if (!filteredChildren.length) {\n        this.renderEmptyState();\n      } else {\n        grid.setState({ children: filteredChildren });\n      }\n    });\n\n    vizPanel.addActivationHandler(() => {\n      return () => {\n        sub.unsubscribe();\n      };\n    });\n\n    return vizPanel;\n  }\n\n  filterItems(items: SceneLabelValuesGridState['items']) {\n    const quickFilterScene = sceneGraph.findByKeyAndType(this, 'quick-filter', SceneQuickFilter);\n    const { searchText } = quickFilterScene.state;\n\n    if (!searchText) {\n      return items;\n    }\n\n    const regexes = searchText\n      .split(',')\n      .map((t) => t.trim())\n      .filter(Boolean)\n      .map((r) => {\n        try {\n          return new RegExp(r);\n        } catch {\n          return null;\n        }\n      })\n      .filter(Boolean) as RegExp[];\n\n    return items.filter(({ label }) => regexes.some((r) => r.test(label)));\n  }\n\n  renderEmptyState() {\n    (this.state.body as SceneCSSGridLayout).setState({\n      autoRows: '480px',\n      children: [\n        new SceneCSSGridItem({\n          body: new SceneEmptyState({\n            message: 'No results',\n          }),\n        }),\n      ],\n    });\n  }\n\n  renderErrorState(error: Error) {\n    (this.state.body as SceneCSSGridLayout).setState({\n      autoRows: '480px',\n      children: [\n        new SceneCSSGridItem({\n          body: new SceneErrorState({\n            message: error.message || error.toString(),\n          }),\n        }),\n      ],\n    });\n  }\n\n  static Component({ model }: SceneComponentProps<SceneLabelValuesGrid>) {\n    const { body, isLoading } = model.useState();\n\n    return isLoading ? (\n      <Spinner />\n    ) : (\n      <div style={{ marginBottom: '2px' }}>\n        <body.Component model={body} />\n      </div>\n    );\n  }\n}\n","import { BusEventWithPayload } from '@grafana/data';\n\nimport { GridItemData } from '../../../../../SceneByVariableRepeaterGrid/types/GridItemData';\n\nexport interface EventClearLabelFromFiltersPayload {\n  item: GridItemData;\n}\n\nexport class EventClearLabelFromFilters extends BusEventWithPayload<EventClearLabelFromFiltersPayload> {\n  public static type = 'clear-label-from-filters';\n}\n","import { BusEventWithPayload } from '@grafana/data';\n\nimport { GridItemData } from '../../../../../SceneByVariableRepeaterGrid/types/GridItemData';\n\nexport interface EventExcludeLabelFromFiltersPayload {\n  item: GridItemData;\n}\n\nexport class EventExcludeLabelFromFilters extends BusEventWithPayload<EventExcludeLabelFromFiltersPayload> {\n  public static type = 'exclude-label-from-filters';\n}\n","import { BusEventWithPayload } from '@grafana/data';\n\nimport { GridItemData } from '../../../../../SceneByVariableRepeaterGrid/types/GridItemData';\n\nexport interface EventIncludeLabelInFiltersPayload {\n  item: GridItemData;\n}\n\nexport class EventIncludeLabelInFilters extends BusEventWithPayload<EventIncludeLabelInFiltersPayload> {\n  public static type = 'include-label-in-filters';\n}\n\nexport interface EventExcludeLabelFromFiltersPayload {\n  item: GridItemData;\n}\n","import { css, cx } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, useStyles2 } from '@grafana/ui';\nimport React, { memo } from 'react';\n\ntype FilterButtonsProps = {\n  label: string;\n  status: 'included' | 'excluded' | 'clear';\n  onInclude: () => void;\n  onExclude: () => void;\n  onClear: () => void;\n};\n\nfunction getStatus({ status, label, onInclude, onExclude, onClear }: FilterButtonsProps) {\n  const isIncludeSelected = status === 'included';\n  const includeTooltip = !isIncludeSelected ? `Include \"${label}\" in the filters` : `Clear \"${label}\" from the filters`;\n\n  const isExcludeSelected = status === 'excluded';\n  const excludeTooltip = !isExcludeSelected ? `Exclude \"${label}\" in the filters` : `Clear \"${label}\" from the filters`;\n\n  return {\n    include: {\n      isSelected: isIncludeSelected,\n      tooltip: includeTooltip,\n      onClick: isIncludeSelected ? onClear : onInclude,\n    },\n    exclude: {\n      isSelected: isExcludeSelected,\n      tooltip: excludeTooltip,\n      onClick: isExcludeSelected ? onClear : onExclude,\n    },\n  };\n}\n\n// Kindly borrowed and adapted from https://github.com/grafana/explore-logs/blob/main/src/Components/FilterButton.tsx :)\nconst FilterButtonsComponent = (props: FilterButtonsProps) => {\n  const styles = useStyles2(getStyles);\n\n  const { include, exclude } = getStatus(props);\n\n  return (\n    <div className={styles.container}>\n      <Button\n        size=\"sm\"\n        fill=\"outline\"\n        variant={include.isSelected ? 'primary' : 'secondary'}\n        aria-selected={include.isSelected}\n        className={cx(styles.includeButton, include.isSelected && 'selected')}\n        onClick={include.onClick}\n        tooltip={include.tooltip}\n        tooltipPlacement=\"top\"\n        data-testid=\"filter-button-include\"\n      >\n        Include\n      </Button>\n      <Button\n        size=\"sm\"\n        fill=\"outline\"\n        variant={exclude.isSelected ? 'primary' : 'secondary'}\n        aria-selected={exclude.isSelected}\n        className={cx(styles.excludeButton, exclude.isSelected && 'selected')}\n        onClick={exclude.onClick}\n        tooltip={exclude.tooltip}\n        tooltipPlacement=\"top\"\n        data-testid=\"filter-button-exclude\"\n      >\n        Exclude\n      </Button>\n    </div>\n  );\n};\n\nexport const FilterButtons = memo(FilterButtonsComponent);\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css`\n      display: flex;\n      justify-content: center;\n    `,\n    includeButton: css`\n      border-radius: ${theme.shape.radius.default} 0 0 ${theme.shape.radius.default};\n\n      &:not(.selected) {\n        border-right: none;\n      }\n    `,\n    excludeButton: css`\n      border-radius: 0 ${theme.shape.radius.default} ${theme.shape.radius.default} 0;\n\n      &:not(.selected) {\n        border-left: none;\n      }\n    `,\n  };\n};\n","import { AdHocVariableFilter } from '@grafana/data';\nimport { SceneComponentProps, sceneGraph, SceneObjectBase, SceneObjectState } from '@grafana/scenes';\nimport { isRegexOperator } from '@shared/components/QueryBuilder/domain/helpers/isRegexOperator';\nimport { reportInteraction } from '@shared/domain/reportInteraction';\nimport React, { useMemo } from 'react';\n\nimport { FiltersVariable } from '../../../../../../../domain/variables/FiltersVariable/FiltersVariable';\nimport { GridItemData } from '../../../../../../SceneByVariableRepeaterGrid/types/GridItemData';\nimport { EventClearLabelFromFilters } from '../../events/EventClearLabelFromFilters';\nimport { EventExcludeLabelFromFilters } from '../../events/EventExcludeLabelFromFilters';\nimport { EventIncludeLabelInFilters } from '../../events/EventIncludeLabelInFilters';\nimport { FilterButtons } from './ui/FilterButtons';\n\nexport interface IncludeExcludeActionState extends SceneObjectState {\n  item: GridItemData;\n}\n\nexport class IncludeExcludeAction extends SceneObjectBase<IncludeExcludeActionState> {\n  constructor({ item }: IncludeExcludeActionState) {\n    super({ item });\n  }\n\n  getStatus(filters: AdHocVariableFilter[]) {\n    const { key, value } = this.state.item.queryRunnerParams.filters![0];\n\n    const found = filters.find((f) => f.key === key);\n    if (!found) {\n      return 'clear';\n    }\n\n    if (isRegexOperator(found.operator) && found.value.split('|').includes(value)) {\n      return found.operator === '=~' ? 'included' : 'excluded';\n    }\n\n    // found.operator is '=' or '!='\n    if (found.value === value) {\n      return found.operator === '=' ? 'included' : 'excluded';\n    }\n\n    return 'clear';\n  }\n\n  onInclude = () => {\n    reportInteraction('g_pyroscope_app_include_action_clicked');\n\n    this.publishEvent(new EventIncludeLabelInFilters({ item: this.state.item }), true);\n  };\n\n  onExclude = () => {\n    reportInteraction('g_pyroscope_app_exclude_action_clicked');\n\n    this.publishEvent(new EventExcludeLabelFromFilters({ item: this.state.item }), true);\n  };\n\n  onClear = () => {\n    this.publishEvent(new EventClearLabelFromFilters({ item: this.state.item }), true);\n  };\n\n  public static Component = ({ model }: SceneComponentProps<IncludeExcludeAction>) => {\n    const { item } = model.useState();\n\n    const { filters } = (sceneGraph.findByKeyAndType(model, 'filters', FiltersVariable) as FiltersVariable).useState();\n    const status = useMemo(() => model.getStatus(filters), [filters, model]);\n\n    return (\n      <FilterButtons\n        label={item.value}\n        status={status}\n        onInclude={model.onInclude}\n        onExclude={model.onExclude}\n        onClear={model.onClear}\n      />\n    );\n  };\n}\n","import { css, cx } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, useStyles2 } from '@grafana/ui';\nimport { noOp } from '@shared/domain/noOp';\nimport React, { useMemo } from 'react';\n\nimport { CompareTarget } from '../../../../SceneExploreDiffFlameGraph/domain/types';\nimport { SceneStatsPanel } from '../components/SceneLabelValuesGrid/components/SceneStatsPanel/SceneStatsPanel';\nimport { SceneGroupByLabelsState } from '../SceneGroupByLabels';\n\ntype CompareButtonProps = {\n  compare: SceneGroupByLabelsState['compare'];\n  onClickCompare: () => void;\n  onClickClear: () => void;\n};\n\nexport function CompareControls({ compare, onClickCompare, onClickClear }: CompareButtonProps) {\n  const styles = useStyles2(getStyles);\n  const compareIsDisabled = compare.size < 2;\n  const hasSelection = compare.size > 0;\n\n  const tooltip = useMemo(() => {\n    if (compare.size === 2) {\n      return `Compare \"${compare.get(CompareTarget.BASELINE)?.label}\" vs \"${\n        compare.get(CompareTarget.COMPARISON)?.label\n      }\"`;\n    }\n    if (compare.size === 0) {\n      return 'Select both a baseline and a comparison panel to compare their flame graphs';\n    }\n\n    return compare.has(CompareTarget.BASELINE)\n      ? `Select another panel to compare against \"${compare.get(CompareTarget.BASELINE)?.label}\"`\n      : `Select another panel to compare against \"${compare.get(CompareTarget.COMPARISON)?.label}\"`;\n  }, [compare]);\n\n  return (\n    <div className={styles.container}>\n      <Button\n        arial-label=\"Compare\"\n        className={styles.compareButton}\n        variant=\"primary\"\n        disabled={compareIsDisabled}\n        onClick={compareIsDisabled ? noOp : onClickCompare}\n        tooltip={tooltip}\n      >\n        Compare ({compare.size}/2)\n      </Button>\n\n      <Button\n        data-testid=\"clearComparison\"\n        className={cx(styles.clearButton, !compareIsDisabled ? styles.clearButtonActive : undefined)}\n        icon=\"times\"\n        variant=\"secondary\"\n        tooltip={hasSelection ? 'Clear comparison selection' : ''}\n        disabled={!hasSelection}\n        onClick={!hasSelection ? noOp : onClickClear}\n      />\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  container: css`\n    display: flex;\n    align-items: center;\n    width: ${SceneStatsPanel.WIDTH_IN_PIXELS}px;\n  `,\n  compareButton: css`\n    width: ${SceneStatsPanel.WIDTH_IN_PIXELS - 32}px;\n    border-right: none;\n    border-top-right-radius: 0;\n    border-bottom-right-radius: 0;\n  `,\n  clearButton: css`\n    box-sizing: border-box;\n    width: 32px !important;\n    height: 32px !important;\n    color: ${theme.colors.text.secondary};\n    background-color: transparent;\n    border-left: none !important;\n    border-top-left-radius: 0;\n    border-bottom-left-radius: 0;\n\n    &:not([disabled]),\n    &:not([disabled]):hover {\n      background-color: transparent;\n      box-shadow: none;\n    }\n  `,\n  clearButtonActive: css`\n    border-color: ${theme.colors.border.medium};\n\n    &:hover {\n      border-color: ${theme.colors.border.medium};\n    }\n  `,\n});\n","import { css } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { SceneComponentProps, sceneGraph, SceneObject, SceneObjectBase, SceneObjectState } from '@grafana/scenes';\nimport { Stack, useStyles2 } from '@grafana/ui';\nimport { prepareHistoryEntry } from '@shared/domain/prepareHistoryEntry';\nimport { reportInteraction } from '@shared/domain/reportInteraction';\nimport { getProfileMetric, ProfileMetricId } from '@shared/infrastructure/profile-metrics/getProfileMetric';\nimport React, { useMemo } from 'react';\nimport { Unsubscribable } from 'rxjs';\nimport { EventViewDiffFlameGraph } from 'src/pages/ProfilesExplorerView/domain/events/EventViewDiffFlameGraph';\n\nimport { FavAction } from '../../../../domain/actions/FavAction';\nimport { SelectAction } from '../../../../domain/actions/SelectAction';\nimport { EventSelectLabel } from '../../../../domain/events/EventSelectLabel';\nimport {\n  clearLabelValue,\n  excludeLabelValue,\n  includeLabelValue,\n} from '../../../../domain/variables/FiltersVariable/filters-ops';\nimport { FiltersVariable } from '../../../../domain/variables/FiltersVariable/FiltersVariable';\nimport { GroupByVariable } from '../../../../domain/variables/GroupByVariable/GroupByVariable';\nimport { getSceneVariableValue } from '../../../../helpers/getSceneVariableValue';\nimport { interpolateQueryRunnerVariables } from '../../../../infrastructure/helpers/interpolateQueryRunnerVariables';\nimport { SceneLayoutSwitcher } from '../../../SceneByVariableRepeaterGrid/components/SceneLayoutSwitcher';\nimport { SceneNoDataSwitcher } from '../../../SceneByVariableRepeaterGrid/components/SceneNoDataSwitcher';\nimport {\n  PanelType,\n  ScenePanelTypeSwitcher,\n  ScenePanelTypeSwitcherState,\n} from '../../../SceneByVariableRepeaterGrid/components/ScenePanelTypeSwitcher';\nimport { SceneQuickFilter } from '../../../SceneByVariableRepeaterGrid/components/SceneQuickFilter';\nimport { SceneByVariableRepeaterGrid } from '../../../SceneByVariableRepeaterGrid/SceneByVariableRepeaterGrid';\nimport { GridItemData } from '../../../SceneByVariableRepeaterGrid/types/GridItemData';\nimport { CompareTarget } from '../../../SceneExploreDiffFlameGraph/domain/types';\nimport { SceneProfilesExplorer } from '../../../SceneProfilesExplorer/SceneProfilesExplorer';\nimport { SceneStatsPanel } from './components/SceneLabelValuesGrid/components/SceneStatsPanel/SceneStatsPanel';\nimport { SceneLabelValuesGrid } from './components/SceneLabelValuesGrid/SceneLabelValuesGrid';\nimport { IncludeExcludeAction } from './domain/actions/IncludeExcludeAction/IncludeExcludeAction';\nimport { EventClearLabelFromFilters } from './domain/events/EventClearLabelFromFilters';\nimport { EventExcludeLabelFromFilters } from './domain/events/EventExcludeLabelFromFilters';\nimport { EventIncludeLabelInFilters } from './domain/events/EventIncludeLabelInFilters';\nimport { EventSelectForCompare } from './domain/events/EventSelectForCompare';\nimport { CompareControls } from './ui/CompareControls';\n\nexport interface SceneGroupByLabelsState extends SceneObjectState {\n  body?: SceneObject;\n  compare: Map<CompareTarget, GridItemData>;\n  panelTypeChangeSub?: Unsubscribable;\n}\n\nexport class SceneGroupByLabels extends SceneObjectBase<SceneGroupByLabelsState> {\n  constructor({ item }: { item?: GridItemData }) {\n    super({\n      key: 'group-by-labels',\n      body: undefined,\n      compare: new Map(),\n      panelTypeChangeSub: undefined,\n    });\n\n    this.addActivationHandler(() => {\n      this.onActivate(item);\n    });\n  }\n\n  async onActivate(item?: GridItemData) {\n    // initial load\n    const groupByVariable = sceneGraph.findByKeyAndType(this, 'groupBy', GroupByVariable);\n    await groupByVariable.update();\n\n    if (item) {\n      this.initVariablesAndControls(item);\n    }\n\n    this.renderBody(groupByVariable);\n\n    const groupBySub = this.subscribeToGroupByChange();\n    const panelEventsSub = this.subscribeToPanelEvents();\n\n    return () => {\n      panelEventsSub.unsubscribe();\n      groupBySub.unsubscribe();\n\n      this.state.panelTypeChangeSub?.unsubscribe();\n    };\n  }\n\n  initVariablesAndControls(item: GridItemData) {\n    const { queryRunnerParams, panelType } = item;\n    const { groupBy } = queryRunnerParams;\n\n    if (groupBy?.label) {\n      const groupByVariable = sceneGraph.findByKeyAndType(this, 'groupBy', GroupByVariable);\n      groupByVariable.changeValueTo(groupBy.label);\n    }\n\n    if (panelType) {\n      const panelTypeSwitcher = sceneGraph.findByKeyAndType(this, 'panel-type-switcher', ScenePanelTypeSwitcher);\n      panelTypeSwitcher.setState({ panelType });\n    }\n  }\n\n  subscribeToGroupByChange() {\n    const groupByVariable = sceneGraph.findByKeyAndType(this, 'groupBy', GroupByVariable);\n    const quickFilter = sceneGraph.findByKeyAndType(this, 'quick-filter', SceneQuickFilter);\n\n    return groupByVariable.subscribeToState((newState, prevState) => {\n      if (newState.value !== prevState?.value) {\n        quickFilter.clearSearchText();\n\n        this.renderBody(groupByVariable);\n      }\n    });\n  }\n\n  subscribeToPanelEvents() {\n    const selectLabelSub = this.subscribeToEvent(EventSelectLabel, (event) => {\n      this.selectLabel(event.payload.item);\n    });\n\n    const selectForCompareSub = this.subscribeToEvent(EventSelectForCompare, (event) => {\n      const { compareTarget, item } = event.payload;\n      this.selectForCompare(compareTarget, item);\n    });\n\n    const includeFilterSub = this.subscribeToEvent(EventIncludeLabelInFilters, (event) => {\n      this.includeLabelValueInFilters(event.payload.item);\n    });\n\n    const excludeFilterSub = this.subscribeToEvent(EventExcludeLabelFromFilters, (event) => {\n      this.excludeLabelValueFromFilters(event.payload.item);\n    });\n\n    const clearFilterSub = this.subscribeToEvent(EventClearLabelFromFilters, (event) => {\n      this.clearLabelValueFromFilters(event.payload.item);\n    });\n\n    return {\n      unsubscribe() {\n        clearFilterSub.unsubscribe();\n        excludeFilterSub.unsubscribe();\n        includeFilterSub.unsubscribe();\n        selectForCompareSub.unsubscribe();\n        selectLabelSub.unsubscribe();\n      },\n    };\n  }\n\n  subscribeToPanelTypeChange() {\n    const panelTypeSwitcher = sceneGraph.findByKeyAndType(this, 'panel-type-switcher', ScenePanelTypeSwitcher);\n\n    return panelTypeSwitcher.subscribeToState(\n      (newState: ScenePanelTypeSwitcherState, prevState?: ScenePanelTypeSwitcherState) => {\n        if (newState.panelType !== prevState?.panelType) {\n          (this.state.body as SceneByVariableRepeaterGrid)?.renderGridItems();\n        }\n      }\n    );\n  }\n\n  renderBody(groupByVariable: GroupByVariable) {\n    this.state.panelTypeChangeSub?.unsubscribe();\n\n    if (groupByVariable.state.value === 'all') {\n      // we have to resubscribe every time because the subscription is removed every time the ScenePanelTypeSwitcher UI component is unmounted\n      this.setState({ panelTypeChangeSub: this.subscribeToPanelTypeChange() });\n\n      this.switchToLabelNamesGrid();\n    } else {\n      this.switchToLabelValuesGrid(groupByVariable);\n    }\n  }\n\n  switchToLabelNamesGrid() {\n    sceneGraph\n      .findByKeyAndType(this, 'quick-filter', SceneQuickFilter)\n      .setPlaceholder('Search labels (comma-separated regexes are supported)');\n\n    this.setState({\n      body: this.buildSceneLabelNamesGrid(),\n    });\n  }\n\n  buildSceneLabelNamesGrid() {\n    return new SceneByVariableRepeaterGrid({\n      key: 'service-labels-grid',\n      variableName: 'groupBy',\n      mapOptionToItem: (option, index, { serviceName, profileMetricId, panelType }) => {\n        if (option.value === 'all') {\n          return null;\n        }\n\n        // see LabelsDataSource.ts\n        const { value, groupBy } = JSON.parse(option.value as string);\n\n        return {\n          index: index - 1, // the 'all' option has been removed ;)\n          value,\n          // remove the count in parenthesis that exists in option.label\n          // it'll be set by SceneLabelValuesTimeseries or SceneLabelValuesBarGauge\n          label: value,\n          queryRunnerParams: {\n            serviceName,\n            profileMetricId,\n            groupBy,\n            filters: [],\n          },\n          panelType: panelType as PanelType,\n        };\n      },\n      headerActions: (item) => [\n        new SelectAction({ type: 'select-label', item }),\n        new SelectAction({ type: 'expand-panel', item }),\n        new FavAction({ item }),\n      ],\n    });\n  }\n\n  switchToLabelValuesGrid(groupByVariable: GroupByVariable) {\n    sceneGraph\n      .findByKeyAndType(this, 'quick-filter', SceneQuickFilter)\n      .setPlaceholder('Search label values (comma-separated regexes are supported)');\n\n    this.clearCompare();\n\n    const { index, value } = groupByVariable.findCurrentOption();\n\n    this.setState({\n      body: this.buildSceneLabelValuesGrid(value, index),\n    });\n  }\n\n  buildSceneLabelValuesGrid(label: string, startColorIndex: number) {\n    return new SceneLabelValuesGrid({\n      key: 'service-label-values-grid',\n      startColorIndex,\n      label,\n      headerActions: (item) => [\n        new SelectAction({\n          type: 'view-flame-graph',\n          item,\n          tooltip: (item, model) => {\n            const { queryRunnerParams, label } = item;\n            const profileMetricId =\n              queryRunnerParams.profileMetricId || getSceneVariableValue(model, 'profileMetricId');\n            const groupByValue = getSceneVariableValue(model, 'groupBy');\n\n            return `View the \"${\n              getProfileMetric(profileMetricId as ProfileMetricId).type\n            }\" flame graph for \"${groupByValue}=${label}\"`;\n          },\n        }),\n        new IncludeExcludeAction({ item }),\n        new FavAction({ item }),\n      ],\n    });\n  }\n\n  selectLabel({ queryRunnerParams }: GridItemData) {\n    const labelValue = queryRunnerParams!.groupBy!.label;\n    const groupByVariable = sceneGraph.findByKeyAndType(this, 'groupBy', GroupByVariable);\n\n    prepareHistoryEntry();\n    groupByVariable.changeValueTo(labelValue);\n  }\n\n  includeLabelValueInFilters(item: GridItemData) {\n    const [filterToInclude] = item.queryRunnerParams.filters!;\n    const filtersVariable = sceneGraph.findByKeyAndType(this, 'filters', FiltersVariable);\n\n    filtersVariable.setState({ filters: includeLabelValue(filtersVariable.state.filters, filterToInclude) });\n  }\n\n  excludeLabelValueFromFilters(item: GridItemData) {\n    const filtersVariable = sceneGraph.findByKeyAndType(this, 'filters', FiltersVariable);\n    const [filterToExclude] = item.queryRunnerParams.filters!;\n\n    filtersVariable.setState({ filters: excludeLabelValue(filtersVariable.state.filters, filterToExclude) });\n  }\n\n  clearLabelValueFromFilters(item: GridItemData) {\n    const filtersVariable = sceneGraph.findByKeyAndType(this, 'filters', FiltersVariable);\n    const [filterToClear] = item.queryRunnerParams.filters!;\n\n    filtersVariable.setState({ filters: clearLabelValue(filtersVariable.state.filters, filterToClear) });\n  }\n\n  selectForCompare(compareTarget: CompareTarget, item: GridItemData) {\n    const compare = new Map(this.state.compare);\n\n    if (compare.get(compareTarget)?.value === item.value) {\n      compare.delete(compareTarget);\n    } else {\n      compare.set(compareTarget, item);\n    }\n\n    this.setState({ compare });\n\n    this.updateStatsPanels();\n  }\n\n  updateStatsPanels() {\n    const { compare } = this.state;\n    const baselineItem = compare.get(CompareTarget.BASELINE);\n    const comparisonItem = compare.get(CompareTarget.COMPARISON);\n\n    const statsPanels = sceneGraph.findAllObjects(this, (o) => o instanceof SceneStatsPanel) as SceneStatsPanel[];\n\n    // TODO: optimize if needed\n    // we can remove the loop if we clear the current selection in the UI before updating the compare map (see selectForCompare() and onClickClearCompareButton())\n    for (const panel of statsPanels) {\n      panel.updateCompareActions(baselineItem, comparisonItem);\n    }\n  }\n\n  getCompare() {\n    return this.state.compare;\n  }\n\n  clearCompare() {\n    this.setState({ compare: new Map() });\n  }\n\n  onClickCompareButton = () => {\n    reportInteraction('g_pyroscope_app_compare_link_clicked');\n\n    const { compare } = this.state;\n\n    const { filters: baselineFilters } = interpolateQueryRunnerVariables(\n      this,\n      compare.get(CompareTarget.BASELINE) as GridItemData\n    );\n\n    const { filters: comparisonFilters } = interpolateQueryRunnerVariables(\n      this,\n      compare.get(CompareTarget.COMPARISON) as GridItemData\n    );\n\n    this.publishEvent(\n      new EventViewDiffFlameGraph({\n        useAncestorTimeRange: true,\n        clearDiffRange: true,\n        baselineFilters,\n        comparisonFilters,\n      }),\n      true\n    );\n  };\n\n  onClickClearCompareButton = () => {\n    this.clearCompare();\n    this.updateStatsPanels();\n  };\n\n  static Component = ({ model }: SceneComponentProps<SceneGroupByLabels>) => {\n    const styles = useStyles2(getStyles);\n\n    const { body, compare } = model.useState();\n\n    const groupByVariable = sceneGraph.findByKeyAndType(model, 'groupBy', GroupByVariable);\n    const { value: groupByVariableValue } = groupByVariable.useState();\n\n    const gridControls = useMemo(\n      () =>\n        groupByVariableValue === 'all'\n          ? sceneGraph.findByKeyAndType(model, 'profiles-explorer', SceneProfilesExplorer).state.gridControls\n          : ([\n              sceneGraph.findByKeyAndType(model, 'quick-filter', SceneQuickFilter),\n              sceneGraph.findByKeyAndType(model, 'layout-switcher', SceneLayoutSwitcher),\n              sceneGraph.findByKeyAndType(model, 'no-data-switcher', SceneNoDataSwitcher),\n            ] as SceneObject[]),\n      [groupByVariableValue, model]\n    );\n\n    return (\n      <div className={styles.container} data-testid=\"groupByLabelsContainer\">\n        <groupByVariable.Component model={groupByVariable} />\n\n        <div className={styles.sceneControls}>\n          <Stack wrap=\"wrap\">\n            {groupByVariableValue !== 'all' && (\n              <CompareControls\n                compare={compare}\n                onClickCompare={model.onClickCompareButton}\n                onClickClear={model.onClickClearCompareButton}\n              />\n            )}\n\n            {gridControls.map((control) => (\n              <control.Component key={control.state.key} model={control} />\n            ))}\n          </Stack>\n        </div>\n\n        {body && <body.Component model={body} />}\n      </div>\n    );\n  };\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  container: css`\n    margin-top: ${theme.spacing(1)};\n  `,\n  sceneControls: css`\n    margin-bottom: ${theme.spacing(1)};\n\n    & .quick-filter {\n      flex: 1;\n      min-width: 112px;\n    }\n  `,\n});\n","import { DashboardCursorSync } from '@grafana/data';\nimport {\n  behaviors,\n  SceneComponentProps,\n  SceneFlexItem,\n  SceneFlexLayout,\n  sceneGraph,\n  SceneObjectBase,\n  SceneObjectState,\n} from '@grafana/scenes';\nimport { getProfileMetric, ProfileMetricId } from '@shared/infrastructure/profile-metrics/getProfileMetric';\nimport React from 'react';\n\nimport { SceneMainServiceTimeseries } from '../../components/SceneMainServiceTimeseries';\nimport { FavAction } from '../../domain/actions/FavAction';\nimport { SelectAction } from '../../domain/actions/SelectAction';\nimport { EventExpandPanel } from '../../domain/events/EventExpandPanel';\nimport { EventSelectLabel } from '../../domain/events/EventSelectLabel';\nimport { FiltersVariable } from '../../domain/variables/FiltersVariable/FiltersVariable';\nimport { ProfileMetricVariable } from '../../domain/variables/ProfileMetricVariable';\nimport { ServiceNameVariable } from '../../domain/variables/ServiceNameVariable/ServiceNameVariable';\nimport { getSceneVariableValue } from '../../helpers/getSceneVariableValue';\nimport { vizPanelBuilder } from '../../helpers/vizPanelBuilder';\nimport { getProfileMetricLabel } from '../../infrastructure/series/helpers/getProfileMetricLabel';\nimport { GridItemData } from '../SceneByVariableRepeaterGrid/types/GridItemData';\nimport { SceneDrawer } from '../SceneDrawer';\nimport { SceneGroupByLabels } from './components/SceneGroupByLabels/SceneGroupByLabels';\n\ninterface SceneExploreServiceLabelsState extends SceneObjectState {\n  body: SceneFlexLayout;\n  drawer: SceneDrawer;\n}\n\nexport class SceneExploreServiceLabels extends SceneObjectBase<SceneExploreServiceLabelsState> {\n  constructor({ item }: { item?: GridItemData }) {\n    super({\n      key: 'explore-service-labels',\n      body: new SceneFlexLayout({\n        direction: 'column',\n        $behaviors: [\n          new behaviors.CursorSync({\n            key: 'metricCrosshairSync',\n            sync: DashboardCursorSync.Crosshair,\n          }),\n        ],\n        children: [\n          new SceneFlexItem({\n            minHeight: SceneMainServiceTimeseries.MIN_HEIGHT,\n            body: new SceneMainServiceTimeseries({\n              item,\n              headerActions: (item) => {\n                return item.queryRunnerParams.groupBy\n                  ? [\n                      new SelectAction({ type: 'view-flame-graph', item }),\n                      new SelectAction({\n                        type: 'expand-panel',\n                        item,\n                      }),\n                      new FavAction({ item }),\n                    ]\n                  : [new SelectAction({ type: 'view-flame-graph', item }), new FavAction({ item })];\n              },\n              supportGroupBy: true,\n            }),\n          }),\n          new SceneFlexItem({\n            body: new SceneGroupByLabels({ item }),\n          }),\n        ],\n      }),\n      drawer: new SceneDrawer(),\n    });\n\n    this.addActivationHandler(this.onActivate.bind(this, item));\n  }\n\n  onActivate(item?: GridItemData) {\n    if (item) {\n      this.initVariables(item);\n    }\n\n    const profileMetricVariable = sceneGraph.findByKeyAndType(this, 'profileMetricId', ProfileMetricVariable);\n\n    profileMetricVariable.setState({ query: ProfileMetricVariable.QUERY_SERVICE_NAME_DEPENDENT });\n    profileMetricVariable.update(true);\n\n    const panelEventsSub = this.subscribeToPanelEvents();\n\n    return () => {\n      panelEventsSub.unsubscribe();\n      profileMetricVariable.setState({ query: ProfileMetricVariable.QUERY_DEFAULT });\n      profileMetricVariable.update(true);\n    };\n  }\n\n  initVariables(item: GridItemData) {\n    const { queryRunnerParams } = item;\n    const { serviceName, profileMetricId, filters } = queryRunnerParams;\n\n    if (serviceName) {\n      const serviceNameVariable = sceneGraph.findByKeyAndType(this, 'serviceName', ServiceNameVariable);\n      serviceNameVariable.changeValueTo(serviceName);\n    }\n\n    if (profileMetricId) {\n      const profileMetricVariable = sceneGraph.findByKeyAndType(this, 'profileMetricId', ProfileMetricVariable);\n      profileMetricVariable.changeValueTo(profileMetricId);\n    }\n\n    if (filters) {\n      const filtersVariable = sceneGraph.findByKeyAndType(this, 'filters', FiltersVariable);\n      filtersVariable.setState({ filters });\n    }\n  }\n\n  subscribeToPanelEvents() {\n    const expandPanelSub = this.subscribeToEvent(EventExpandPanel, async (event) => {\n      this.openExpandedPanelDrawer(event.payload.item);\n    });\n\n    const selectLabelSub = this.subscribeToEvent(EventSelectLabel, () => {\n      // the event may be published from an expanded panel in the drawer\n      this.state.drawer.close();\n    });\n\n    return {\n      unsubscribe() {\n        selectLabelSub.unsubscribe();\n        expandPanelSub.unsubscribe();\n      },\n    };\n  }\n\n  // see SceneProfilesExplorer\n  getVariablesAndGridControls() {\n    return {\n      variables: [\n        sceneGraph.findByKeyAndType(this, 'serviceName', ServiceNameVariable),\n        sceneGraph.findByKeyAndType(this, 'profileMetricId', ProfileMetricVariable),\n        sceneGraph.findByKeyAndType(this, 'filters', FiltersVariable),\n      ],\n      gridControls: [],\n    };\n  }\n\n  openExpandedPanelDrawer(item: GridItemData) {\n    const title = getSceneVariableValue(this, 'serviceName');\n\n    const profileMetricId = getSceneVariableValue(this, 'profileMetricId');\n    const profileMetricDescription =\n      getProfileMetric(profileMetricId as ProfileMetricId).description || getProfileMetricLabel(profileMetricId);\n    const timeseriesTitle = `${profileMetricDescription}, grouped by ${item.queryRunnerParams.groupBy?.label || '?'}`;\n\n    this.state.drawer.open({\n      title,\n      body: vizPanelBuilder(item.panelType, {\n        displayAllValues: true,\n        legendPlacement: 'right',\n        item: { ...item, label: timeseriesTitle },\n        headerActions: () => [new SelectAction({ type: 'select-label', item }), new FavAction({ item })],\n      }),\n    });\n  }\n\n  static Component({ model }: SceneComponentProps<SceneExploreServiceLabels>) {\n    const { body, drawer } = model.useState();\n\n    return (\n      <>\n        <body.Component model={body} />\n        <drawer.Component model={drawer} />\n      </>\n    );\n  }\n}\n","import {\n  EmbeddedSceneState,\n  SceneComponentProps,\n  sceneGraph,\n  SceneObjectBase,\n  SceneVariableSet,\n} from '@grafana/scenes';\nimport React from 'react';\n\nimport { SceneByVariableRepeaterGrid } from '../../components/SceneByVariableRepeaterGrid/SceneByVariableRepeaterGrid';\nimport { FavAction } from '../../domain/actions/FavAction';\nimport { SelectAction } from '../../domain/actions/SelectAction';\nimport { ProfileMetricVariable } from '../../domain/variables/ProfileMetricVariable';\nimport { ServiceNameVariable } from '../../domain/variables/ServiceNameVariable/ServiceNameVariable';\nimport { SceneLayoutSwitcher } from '../SceneByVariableRepeaterGrid/components/SceneLayoutSwitcher';\nimport { PanelType } from '../SceneByVariableRepeaterGrid/components/ScenePanelTypeSwitcher';\nimport { SceneQuickFilter } from '../SceneByVariableRepeaterGrid/components/SceneQuickFilter';\nimport { GridItemData } from '../SceneByVariableRepeaterGrid/types/GridItemData';\n\ninterface SceneExploreServiceProfileTypesState extends EmbeddedSceneState {}\n\nexport class SceneExploreServiceProfileTypes extends SceneObjectBase<SceneExploreServiceProfileTypesState> {\n  constructor({ item }: { item?: GridItemData }) {\n    super({\n      key: 'explore-service-profile-types',\n      $variables: new SceneVariableSet({\n        variables: [\n          // we use a custom instance of ProfileMetricVariable to display only the profile metrics associated to the selected service\n          new ProfileMetricVariable({\n            query: ProfileMetricVariable.QUERY_SERVICE_NAME_DEPENDENT,\n            skipUrlSync: true,\n          }),\n        ],\n      }),\n      body: new SceneByVariableRepeaterGrid({\n        key: 'profile-metrics-grid',\n        variableName: 'profileMetricId',\n        mapOptionToItem: (option, index, { serviceName }) => ({\n          index,\n          value: option.value as string,\n          label: option.label,\n          queryRunnerParams: {\n            serviceName,\n            profileMetricId: option.value as string,\n          },\n          panelType: PanelType.TIMESERIES,\n        }),\n        headerActions: (item) => [\n          new SelectAction({ type: 'view-labels', item }),\n          new SelectAction({ type: 'view-flame-graph', item }),\n          new FavAction({ item }),\n        ],\n      }),\n    });\n\n    this.addActivationHandler(this.onActivate.bind(this, item));\n  }\n\n  onActivate(item?: GridItemData) {\n    sceneGraph\n      .findByKeyAndType(this, 'quick-filter', SceneQuickFilter)\n      .setPlaceholder('Search profile types (comma-separated regexes are supported)');\n\n    if (item) {\n      this.initVariables(item);\n    }\n  }\n\n  initVariables(item: GridItemData) {\n    if (item.queryRunnerParams.serviceName) {\n      const serviceNameVariable = sceneGraph.findByKeyAndType(this, 'serviceName', ServiceNameVariable);\n      serviceNameVariable.changeValueTo(item.queryRunnerParams.serviceName);\n    }\n  }\n\n  // see SceneProfilesExplorer\n  getVariablesAndGridControls() {\n    return {\n      variables: [sceneGraph.findByKeyAndType(this, 'serviceName', ServiceNameVariable)],\n      gridControls: [\n        sceneGraph.findByKeyAndType(this, 'quick-filter', SceneQuickFilter),\n        sceneGraph.findByKeyAndType(this, 'layout-switcher', SceneLayoutSwitcher),\n      ],\n    };\n  }\n\n  static Component({ model }: SceneComponentProps<SceneExploreServiceProfileTypes>) {\n    const { body } = model.useState();\n\n    return <body.Component model={body} />;\n  }\n}\n","import { dateTimeParse } from '@grafana/data';\nimport { SceneTimeRangeState } from '@grafana/scenes';\n\nexport function buildTimeRange(from: string, to: string): SceneTimeRangeState {\n  return {\n    from,\n    to,\n    value: {\n      from: dateTimeParse(from),\n      to: dateTimeParse(to),\n      raw: { from, to },\n    },\n  };\n}\n\nexport const getDefaultTimeRange = () => buildTimeRange('now-30m', 'now');\n","import { CustomVariable } from '@grafana/scenes';\n\nexport class SpanSelectorVariable extends CustomVariable {\n  constructor() {\n    super({\n      key: 'spanSelector',\n      name: 'spanSelector',\n      label: 'Span selector',\n      value: undefined,\n    });\n  }\n\n  reset() {\n    this.setState({ value: undefined });\n  }\n}\n","import { MetricFindValue } from '@grafana/data';\nimport { localeCompare } from '@shared/domain/localeCompare';\nimport { getProfileMetric, ProfileMetricId } from '@shared/infrastructure/profile-metrics/getProfileMetric';\n\nimport { PyroscopeSeries } from './http/SeriesApiClient';\n\nexport function formatSeriesToProfileMetrics(\n  pyroscopeSeries: PyroscopeSeries,\n  serviceName?: string\n): MetricFindValue[] {\n  if (serviceName) {\n    const profileMetricsMap = pyroscopeSeries.services.get(serviceName) || new Map();\n\n    return Array.from(profileMetricsMap.values())\n      .sort((a, b) => localeCompare(b.group, a.group))\n      .map(({ id, type, group }) => ({\n        value: id,\n        text: `${type} (${group})`,\n      }));\n  }\n\n  return Array.from(pyroscopeSeries.profileMetrics.keys())\n    .map((id) => getProfileMetric(id as ProfileMetricId))\n    .sort((a, b) => localeCompare(b.group, a.group))\n    .map(({ id, type, group }) => ({\n      value: id,\n      text: `${type} (${group})`,\n    }));\n}\n","import { MetricFindValue } from '@grafana/data';\nimport { localeCompare } from '@shared/domain/localeCompare';\n\nimport { PyroscopeSeries } from './http/SeriesApiClient';\n\nexport function formatSeriesToServices(pyroscopeSeries: PyroscopeSeries, profileMetricId?: string): MetricFindValue[] {\n  if (profileMetricId) {\n    const servicesSet = pyroscopeSeries.profileMetrics.get(profileMetricId) || new Set();\n\n    return Array.from(servicesSet)\n      .sort(localeCompare)\n      .map((serviceName) => ({\n        text: serviceName,\n        value: serviceName,\n      }));\n  }\n\n  return Array.from(pyroscopeSeries.services.keys())\n    .sort(localeCompare)\n    .map((serviceName) => ({\n      text: serviceName,\n      value: serviceName,\n    }));\n}\n","import { DataSourceProxyClient } from './DataSourceProxyClient';\n\nexport class DataSourceProxyClientBuilder {\n  private static cache = new Map<string, DataSourceProxyClient>();\n\n  static build<ApiClentType>(\n    dataSourceUid: string,\n    ApiClientClass: { new (options: { dataSourceUid: string }): ApiClentType }\n  ) {\n    const cacheKey = `${dataSourceUid}-${ApiClientClass.name}`;\n\n    const cachedInstance = DataSourceProxyClientBuilder.cache.get(cacheKey);\n    if (cachedInstance instanceof ApiClientClass) {\n      return cachedInstance;\n    }\n\n    const clientInstance = new ApiClientClass({ dataSourceUid });\n\n    DataSourceProxyClientBuilder.cache.set(cacheKey, clientInstance as DataSourceProxyClient);\n\n    return clientInstance;\n  }\n}\n","import { getProfileMetric, ProfileMetricId } from '@shared/infrastructure/profile-metrics/getProfileMetric';\nimport { logger } from '@shared/infrastructure/tracking/logger';\n\nimport { PyroscopeSeries } from './SeriesApiClient';\n\ntype Labels = Array<{ name: string; value: string }>;\n\nfunction findServiceNameAndProfileMetricId(labels: Labels) {\n  let serviceName;\n  let profileMetricId;\n\n  for (const { name, value } of labels) {\n    if (name === 'service_name') {\n      serviceName = value;\n    }\n\n    if (name === '__profile_type__') {\n      profileMetricId = value;\n    }\n\n    if (serviceName && profileMetricId) {\n      return [serviceName, profileMetricId];\n    }\n  }\n\n  return [];\n}\n\nexport function formatSeriesResponse(data: { labelsSet: Array<{ labels: Labels }> }): PyroscopeSeries {\n  const services: PyroscopeSeries['services'] = new Map();\n  const profileMetrics: PyroscopeSeries['profileMetrics'] = new Map();\n\n  if (!data.labelsSet) {\n    logger.warn('Pyroscope SeriesApiClient: no data received!');\n    return { services, profileMetrics };\n  }\n\n  for (const { labels } of data.labelsSet) {\n    const [serviceName, profileMetricId] = findServiceNameAndProfileMetricId(labels);\n\n    if (!serviceName || !profileMetricId) {\n      logger.warn(\n        'Pyroscope ServicesApiClient: \"service_name\" and/or \"__profile_type__\" are missing in the labels received!',\n        labels\n      );\n      continue;\n    }\n\n    const serviceProfileMetrics = services.get(serviceName) || new Map();\n    serviceProfileMetrics.set(profileMetricId, getProfileMetric(profileMetricId as ProfileMetricId));\n    services.set(serviceName, serviceProfileMetrics);\n\n    const profileMetricServices = profileMetrics.get(profileMetricId) || new Set();\n    profileMetricServices.add(serviceName);\n    profileMetrics.set(profileMetricId, profileMetricServices);\n  }\n\n  return { services, profileMetrics };\n}\n","import { ProfileMetric } from '@shared/infrastructure/profile-metrics/getProfileMetric';\n\nimport { DataSourceProxyClient } from './DataSourceProxyClient';\nimport { formatSeriesResponse } from './formatSeriesResponse';\n\ntype ProfileMetricsMap = Map<ProfileMetric['id'], ProfileMetric>;\ntype ServiceToProfileMetricsMap = Map<string, ProfileMetricsMap>;\n\ntype ServicesSet = Set<string>;\ntype ProfileMetricToServicesSet = Map<string, ServicesSet>;\n\nexport type PyroscopeSeries = { services: ServiceToProfileMetricsMap; profileMetrics: ProfileMetricToServicesSet };\n\nexport class SeriesApiClient extends DataSourceProxyClient {\n  constructor(options: { dataSourceUid: string }) {\n    super(options);\n  }\n\n  async list(options: { from: number; to: number }): Promise<PyroscopeSeries> {\n    const { from, to } = options;\n\n    return this.fetch('/querier.v1.QuerierService/Series', {\n      method: 'POST',\n      body: JSON.stringify({\n        start: from,\n        end: to,\n        labelNames: ['service_name', '__profile_type__'],\n        matchers: [],\n      }),\n    })\n      .then((response) => response.json())\n      .then(formatSeriesResponse);\n  }\n}\n","import { TimeRange } from '@grafana/data';\nimport { AbstractRepository } from '@shared/infrastructure/AbstractRepository';\nimport { MemoryCacheClient } from '@shared/infrastructure/MemoryCacheClient';\n\nimport { computeRoundedTimeRange } from '../../../helpers/computeRoundedTimeRange';\nimport { PyroscopeSeries, SeriesApiClient } from './SeriesApiClient';\n\nclass SeriesRepository extends AbstractRepository<SeriesApiClient, MemoryCacheClient> {\n  constructor(options: { cacheClient: MemoryCacheClient }) {\n    super(options);\n  }\n\n  async list(options: { timeRange: TimeRange }): Promise<PyroscopeSeries> {\n    const { from, to } = computeRoundedTimeRange(options.timeRange);\n\n    const cacheParams = [this.apiClient!.baseUrl, from, to];\n\n    const responseFromCacheP = this.cacheClient!.get(cacheParams);\n    if (responseFromCacheP) {\n      const { services, profileMetrics } = await responseFromCacheP;\n\n      if (!services.size && !profileMetrics.size) {\n        this.cacheClient!.delete(cacheParams);\n      }\n\n      return { services, profileMetrics };\n    }\n\n    const fetchP = this.apiClient!.list({ from, to });\n    this.cacheClient!.set(cacheParams, fetchP);\n\n    try {\n      const { services, profileMetrics } = await fetchP;\n      return { services, profileMetrics };\n    } catch (error) {\n      this.cacheClient!.delete(cacheParams);\n      throw error;\n    }\n  }\n}\n\nexport const seriesRepository = new SeriesRepository({\n  cacheClient: new MemoryCacheClient(),\n});\n","import {\n  DataQueryResponse,\n  FieldType,\n  LegacyMetricFindQueryOptions,\n  LoadingState,\n  MetricFindValue,\n  TestDataSourceResponse,\n  TimeRange,\n} from '@grafana/data';\nimport { RuntimeDataSource, sceneGraph } from '@grafana/scenes';\nimport { logger } from '@shared/infrastructure/tracking/logger';\n\nimport { PYROSCOPE_SERIES_DATA_SOURCE } from '../pyroscope-data-sources';\nimport { formatSeriesToProfileMetrics } from './formatSeriesToProfileMetrics';\nimport { formatSeriesToServices } from './formatSeriesToServices';\nimport { DataSourceProxyClientBuilder } from './http/DataSourceProxyClientBuilder';\nimport { SeriesApiClient } from './http/SeriesApiClient';\nimport { seriesRepository } from './http/seriesRepository';\n\nexport class SeriesDataSource extends RuntimeDataSource {\n  constructor() {\n    super(PYROSCOPE_SERIES_DATA_SOURCE.type, PYROSCOPE_SERIES_DATA_SOURCE.uid);\n  }\n\n  async fetchSeries(dataSourceUid: string, timeRange: TimeRange, variableName?: string) {\n    seriesRepository.setApiClient(DataSourceProxyClientBuilder.build(dataSourceUid, SeriesApiClient));\n\n    try {\n      return await seriesRepository.list({ timeRange });\n    } catch (error) {\n      logger.error(error as Error, {\n        info: 'Error while loading Pyroscope series!',\n        variableName: variableName || '',\n      });\n\n      throw error;\n    }\n  }\n\n  async query(): Promise<DataQueryResponse> {\n    return {\n      state: LoadingState.Done,\n      data: [\n        {\n          name: 'PyroscopeSeries',\n          fields: [\n            {\n              name: 'PyroscopeSeries',\n              type: FieldType.other,\n              values: [],\n              config: {},\n            },\n          ],\n          length: 0,\n        },\n      ],\n    };\n  }\n\n  async metricFindQuery(query: string, options: LegacyMetricFindQueryOptions): Promise<MetricFindValue[]> {\n    const sceneObject = options.scopedVars?.__sceneObject?.value;\n\n    const dataSourceUid = sceneGraph.interpolate(sceneObject, '$dataSource');\n    const serviceName = sceneGraph.interpolate(sceneObject, '$serviceName');\n    const profileMetricId = sceneGraph.interpolate(sceneObject, '$profileMetricId');\n\n    const pyroscopeSeries = await this.fetchSeries(dataSourceUid, options.range as TimeRange, options.variable?.name);\n\n    switch (query) {\n      // queries that depend only on the selected data source\n      case '$dataSource and all services':\n        return formatSeriesToServices(pyroscopeSeries);\n\n      case '$dataSource and all profile metrics':\n        return formatSeriesToProfileMetrics(pyroscopeSeries);\n\n      // queries that depend on the selected profile metric or the selected service\n      case '$dataSource and only $profileMetricId services':\n        return formatSeriesToServices(pyroscopeSeries, profileMetricId);\n\n      case '$dataSource and only $serviceName profile metrics':\n        return formatSeriesToProfileMetrics(pyroscopeSeries, serviceName);\n\n      default:\n        throw new TypeError(`Unsupported query \"${query}\"!`);\n    }\n  }\n\n  async testDatasource(): Promise<TestDataSourceResponse> {\n    return {\n      status: 'success',\n      message: 'OK',\n    };\n  }\n}\n","// @generated by protoc-gen-es v2.2.3 with parameter \"target=ts\"\n// @generated from file types/v1/types.proto (package types.v1, syntax proto3)\n/* eslint-disable */\n\nimport type { GenEnum, GenFile, GenMessage } from \"@bufbuild/protobuf/codegenv1\";\nimport { enumDesc, fileDesc, messageDesc } from \"@bufbuild/protobuf/codegenv1\";\nimport type { Message } from \"@bufbuild/protobuf\";\n\n/**\n * Describes the file types/v1/types.proto.\n */\nexport const file_types_v1_types: GenFile = /*@__PURE__*/\n  fileDesc(\"ChR0eXBlcy92MS90eXBlcy5wcm90bxIIdHlwZXMudjEiKAoJTGFiZWxQYWlyEgwKBG5hbWUYASABKAkSDQoFdmFsdWUYAiABKAkiewoLUHJvZmlsZVR5cGUSCgoCSUQYASABKAkSDAoEbmFtZRgCIAEoCRITCgtzYW1wbGVfdHlwZRgEIAEoCRITCgtzYW1wbGVfdW5pdBgFIAEoCRITCgtwZXJpb2RfdHlwZRgGIAEoCRITCgtwZXJpb2RfdW5pdBgHIAEoCSItCgZMYWJlbHMSIwoGbGFiZWxzGAEgAygLMhMudHlwZXMudjEuTGFiZWxQYWlyIk4KBlNlcmllcxIjCgZsYWJlbHMYASADKAsyEy50eXBlcy52MS5MYWJlbFBhaXISHwoGcG9pbnRzGAIgAygLMg8udHlwZXMudjEuUG9pbnQiWwoFUG9pbnQSDQoFdmFsdWUYASABKAESEQoJdGltZXN0YW1wGAIgASgDEjAKC2Fubm90YXRpb25zGAMgAygLMhsudHlwZXMudjEuUHJvZmlsZUFubm90YXRpb24iLwoRUHJvZmlsZUFubm90YXRpb24SCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJIlAKEkxhYmVsVmFsdWVzUmVxdWVzdBIMCgRuYW1lGAEgASgJEhAKCG1hdGNoZXJzGAIgAygJEg0KBXN0YXJ0GAMgASgDEgsKA2VuZBgEIAEoAyIkChNMYWJlbFZhbHVlc1Jlc3BvbnNlEg0KBW5hbWVzGAEgAygJIkEKEUxhYmVsTmFtZXNSZXF1ZXN0EhAKCG1hdGNoZXJzGAEgAygJEg0KBXN0YXJ0GAIgASgDEgsKA2VuZBgDIAEoAyIjChJMYWJlbE5hbWVzUmVzcG9uc2USDQoFbmFtZXMYASADKAkikQEKCUJsb2NrSW5mbxIMCgR1bGlkGAEgASgJEhAKCG1pbl90aW1lGAIgASgDEhAKCG1heF90aW1lGAMgASgDEi0KCmNvbXBhY3Rpb24YBCABKAsyGS50eXBlcy52MS5CbG9ja0NvbXBhY3Rpb24SIwoGbGFiZWxzGAUgAygLMhMudHlwZXMudjEuTGFiZWxQYWlyIkIKD0Jsb2NrQ29tcGFjdGlvbhINCgVsZXZlbBgBIAEoBRIPCgdzb3VyY2VzGAIgAygJEg8KB3BhcmVudHMYAyADKAkiXAoSU3RhY2tUcmFjZVNlbGVjdG9yEiUKCWNhbGxfc2l0ZRgBIAMoCzISLnR5cGVzLnYxLkxvY2F0aW9uEh8KBmdvX3BnbxgCIAEoCzIPLnR5cGVzLnYxLkdvUEdPIhgKCExvY2F0aW9uEgwKBG5hbWUYASABKAkiOgoFR29QR08SFgoOa2VlcF9sb2NhdGlvbnMYASABKA0SGQoRYWdncmVnYXRlX2NhbGxlZXMYAiABKAgiGAoWR2V0UHJvZmlsZVN0YXRzUmVxdWVzdCJqChdHZXRQcm9maWxlU3RhdHNSZXNwb25zZRIVCg1kYXRhX2luZ2VzdGVkGAEgASgIEhsKE29sZGVzdF9wcm9maWxlX3RpbWUYAiABKAMSGwoTbmV3ZXN0X3Byb2ZpbGVfdGltZRgDIAEoAyprChlUaW1lU2VyaWVzQWdncmVnYXRpb25UeXBlEiQKIFRJTUVfU0VSSUVTX0FHR1JFR0FUSU9OX1RZUEVfU1VNEAASKAokVElNRV9TRVJJRVNfQUdHUkVHQVRJT05fVFlQRV9BVkVSQUdFEAFiBnByb3RvMw\");\n\n/**\n * @generated from message types.v1.LabelPair\n */\nexport type LabelPair = Message<\"types.v1.LabelPair\"> & {\n  /**\n   * @generated from field: string name = 1;\n   */\n  name: string;\n\n  /**\n   * @generated from field: string value = 2;\n   */\n  value: string;\n};\n\n/**\n * Describes the message types.v1.LabelPair.\n * Use `create(LabelPairSchema)` to create a new message.\n */\nexport const LabelPairSchema: GenMessage<LabelPair> = /*@__PURE__*/\n  messageDesc(file_types_v1_types, 0);\n\n/**\n * @generated from message types.v1.ProfileType\n */\nexport type ProfileType = Message<\"types.v1.ProfileType\"> & {\n  /**\n   * @generated from field: string ID = 1;\n   */\n  ID: string;\n\n  /**\n   * @generated from field: string name = 2;\n   */\n  name: string;\n\n  /**\n   * @generated from field: string sample_type = 4;\n   */\n  sampleType: string;\n\n  /**\n   * @generated from field: string sample_unit = 5;\n   */\n  sampleUnit: string;\n\n  /**\n   * @generated from field: string period_type = 6;\n   */\n  periodType: string;\n\n  /**\n   * @generated from field: string period_unit = 7;\n   */\n  periodUnit: string;\n};\n\n/**\n * Describes the message types.v1.ProfileType.\n * Use `create(ProfileTypeSchema)` to create a new message.\n */\nexport const ProfileTypeSchema: GenMessage<ProfileType> = /*@__PURE__*/\n  messageDesc(file_types_v1_types, 1);\n\n/**\n * @generated from message types.v1.Labels\n */\nexport type Labels = Message<\"types.v1.Labels\"> & {\n  /**\n   * LabelPair is the key value pairs to identify the corresponding profile\n   *\n   * @generated from field: repeated types.v1.LabelPair labels = 1;\n   */\n  labels: LabelPair[];\n};\n\n/**\n * Describes the message types.v1.Labels.\n * Use `create(LabelsSchema)` to create a new message.\n */\nexport const LabelsSchema: GenMessage<Labels> = /*@__PURE__*/\n  messageDesc(file_types_v1_types, 2);\n\n/**\n * @generated from message types.v1.Series\n */\nexport type Series = Message<\"types.v1.Series\"> & {\n  /**\n   * @generated from field: repeated types.v1.LabelPair labels = 1;\n   */\n  labels: LabelPair[];\n\n  /**\n   * @generated from field: repeated types.v1.Point points = 2;\n   */\n  points: Point[];\n};\n\n/**\n * Describes the message types.v1.Series.\n * Use `create(SeriesSchema)` to create a new message.\n */\nexport const SeriesSchema: GenMessage<Series> = /*@__PURE__*/\n  messageDesc(file_types_v1_types, 3);\n\n/**\n * @generated from message types.v1.Point\n */\nexport type Point = Message<\"types.v1.Point\"> & {\n  /**\n   * @generated from field: double value = 1;\n   */\n  value: number;\n\n  /**\n   * Milliseconds unix timestamp\n   *\n   * @generated from field: int64 timestamp = 2;\n   */\n  timestamp: bigint;\n\n  /**\n   * @generated from field: repeated types.v1.ProfileAnnotation annotations = 3;\n   */\n  annotations: ProfileAnnotation[];\n};\n\n/**\n * Describes the message types.v1.Point.\n * Use `create(PointSchema)` to create a new message.\n */\nexport const PointSchema: GenMessage<Point> = /*@__PURE__*/\n  messageDesc(file_types_v1_types, 4);\n\n/**\n * @generated from message types.v1.ProfileAnnotation\n */\nexport type ProfileAnnotation = Message<\"types.v1.ProfileAnnotation\"> & {\n  /**\n   * @generated from field: string key = 1;\n   */\n  key: string;\n\n  /**\n   * @generated from field: string value = 2;\n   */\n  value: string;\n};\n\n/**\n * Describes the message types.v1.ProfileAnnotation.\n * Use `create(ProfileAnnotationSchema)` to create a new message.\n */\nexport const ProfileAnnotationSchema: GenMessage<ProfileAnnotation> = /*@__PURE__*/\n  messageDesc(file_types_v1_types, 5);\n\n/**\n * @generated from message types.v1.LabelValuesRequest\n */\nexport type LabelValuesRequest = Message<\"types.v1.LabelValuesRequest\"> & {\n  /**\n   * @generated from field: string name = 1;\n   */\n  name: string;\n\n  /**\n   * @generated from field: repeated string matchers = 2;\n   */\n  matchers: string[];\n\n  /**\n   * @generated from field: int64 start = 3;\n   */\n  start: bigint;\n\n  /**\n   * @generated from field: int64 end = 4;\n   */\n  end: bigint;\n};\n\n/**\n * Describes the message types.v1.LabelValuesRequest.\n * Use `create(LabelValuesRequestSchema)` to create a new message.\n */\nexport const LabelValuesRequestSchema: GenMessage<LabelValuesRequest> = /*@__PURE__*/\n  messageDesc(file_types_v1_types, 6);\n\n/**\n * @generated from message types.v1.LabelValuesResponse\n */\nexport type LabelValuesResponse = Message<\"types.v1.LabelValuesResponse\"> & {\n  /**\n   * @generated from field: repeated string names = 1;\n   */\n  names: string[];\n};\n\n/**\n * Describes the message types.v1.LabelValuesResponse.\n * Use `create(LabelValuesResponseSchema)` to create a new message.\n */\nexport const LabelValuesResponseSchema: GenMessage<LabelValuesResponse> = /*@__PURE__*/\n  messageDesc(file_types_v1_types, 7);\n\n/**\n * @generated from message types.v1.LabelNamesRequest\n */\nexport type LabelNamesRequest = Message<\"types.v1.LabelNamesRequest\"> & {\n  /**\n   * @generated from field: repeated string matchers = 1;\n   */\n  matchers: string[];\n\n  /**\n   * @generated from field: int64 start = 2;\n   */\n  start: bigint;\n\n  /**\n   * @generated from field: int64 end = 3;\n   */\n  end: bigint;\n};\n\n/**\n * Describes the message types.v1.LabelNamesRequest.\n * Use `create(LabelNamesRequestSchema)` to create a new message.\n */\nexport const LabelNamesRequestSchema: GenMessage<LabelNamesRequest> = /*@__PURE__*/\n  messageDesc(file_types_v1_types, 8);\n\n/**\n * @generated from message types.v1.LabelNamesResponse\n */\nexport type LabelNamesResponse = Message<\"types.v1.LabelNamesResponse\"> & {\n  /**\n   * @generated from field: repeated string names = 1;\n   */\n  names: string[];\n};\n\n/**\n * Describes the message types.v1.LabelNamesResponse.\n * Use `create(LabelNamesResponseSchema)` to create a new message.\n */\nexport const LabelNamesResponseSchema: GenMessage<LabelNamesResponse> = /*@__PURE__*/\n  messageDesc(file_types_v1_types, 9);\n\n/**\n * @generated from message types.v1.BlockInfo\n */\nexport type BlockInfo = Message<\"types.v1.BlockInfo\"> & {\n  /**\n   * @generated from field: string ulid = 1;\n   */\n  ulid: string;\n\n  /**\n   * @generated from field: int64 min_time = 2;\n   */\n  minTime: bigint;\n\n  /**\n   * @generated from field: int64 max_time = 3;\n   */\n  maxTime: bigint;\n\n  /**\n   * @generated from field: types.v1.BlockCompaction compaction = 4;\n   */\n  compaction?: BlockCompaction;\n\n  /**\n   * @generated from field: repeated types.v1.LabelPair labels = 5;\n   */\n  labels: LabelPair[];\n};\n\n/**\n * Describes the message types.v1.BlockInfo.\n * Use `create(BlockInfoSchema)` to create a new message.\n */\nexport const BlockInfoSchema: GenMessage<BlockInfo> = /*@__PURE__*/\n  messageDesc(file_types_v1_types, 10);\n\n/**\n * @generated from message types.v1.BlockCompaction\n */\nexport type BlockCompaction = Message<\"types.v1.BlockCompaction\"> & {\n  /**\n   * @generated from field: int32 level = 1;\n   */\n  level: number;\n\n  /**\n   * @generated from field: repeated string sources = 2;\n   */\n  sources: string[];\n\n  /**\n   * @generated from field: repeated string parents = 3;\n   */\n  parents: string[];\n};\n\n/**\n * Describes the message types.v1.BlockCompaction.\n * Use `create(BlockCompactionSchema)` to create a new message.\n */\nexport const BlockCompactionSchema: GenMessage<BlockCompaction> = /*@__PURE__*/\n  messageDesc(file_types_v1_types, 11);\n\n/**\n * StackTraceSelector is used for filtering stack traces by locations.\n *\n * @generated from message types.v1.StackTraceSelector\n */\nexport type StackTraceSelector = Message<\"types.v1.StackTraceSelector\"> & {\n  /**\n   * Stack trace of the call site. Root at call_site[0].\n   * Only stack traces having the prefix provided will be selected.\n   * If empty, the filter is ignored.\n   *\n   * @generated from field: repeated types.v1.Location call_site = 1;\n   */\n  callSite: Location[];\n\n  /**\n   * Stack trace selector for profiles purposed for Go PGO.\n   * If set, call_site is ignored.\n   *\n   * @generated from field: types.v1.GoPGO go_pgo = 2;\n   */\n  goPgo?: GoPGO;\n};\n\n/**\n * Describes the message types.v1.StackTraceSelector.\n * Use `create(StackTraceSelectorSchema)` to create a new message.\n */\nexport const StackTraceSelectorSchema: GenMessage<StackTraceSelector> = /*@__PURE__*/\n  messageDesc(file_types_v1_types, 12);\n\n/**\n * @generated from message types.v1.Location\n */\nexport type Location = Message<\"types.v1.Location\"> & {\n  /**\n   * @generated from field: string name = 1;\n   */\n  name: string;\n};\n\n/**\n * Describes the message types.v1.Location.\n * Use `create(LocationSchema)` to create a new message.\n */\nexport const LocationSchema: GenMessage<Location> = /*@__PURE__*/\n  messageDesc(file_types_v1_types, 13);\n\n/**\n * @generated from message types.v1.GoPGO\n */\nexport type GoPGO = Message<\"types.v1.GoPGO\"> & {\n  /**\n   * Specifies the number of leaf locations to keep.\n   *\n   * @generated from field: uint32 keep_locations = 1;\n   */\n  keepLocations: number;\n\n  /**\n   * Aggregate callees causes the leaf location line number to be ignored,\n   * thus aggregating all callee samples (but not callers).\n   *\n   * @generated from field: bool aggregate_callees = 2;\n   */\n  aggregateCallees: boolean;\n};\n\n/**\n * Describes the message types.v1.GoPGO.\n * Use `create(GoPGOSchema)` to create a new message.\n */\nexport const GoPGOSchema: GenMessage<GoPGO> = /*@__PURE__*/\n  messageDesc(file_types_v1_types, 14);\n\n/**\n * @generated from message types.v1.GetProfileStatsRequest\n */\nexport type GetProfileStatsRequest = Message<\"types.v1.GetProfileStatsRequest\"> & {\n};\n\n/**\n * Describes the message types.v1.GetProfileStatsRequest.\n * Use `create(GetProfileStatsRequestSchema)` to create a new message.\n */\nexport const GetProfileStatsRequestSchema: GenMessage<GetProfileStatsRequest> = /*@__PURE__*/\n  messageDesc(file_types_v1_types, 15);\n\n/**\n * @generated from message types.v1.GetProfileStatsResponse\n */\nexport type GetProfileStatsResponse = Message<\"types.v1.GetProfileStatsResponse\"> & {\n  /**\n   * Whether we received any data at any time in the past.\n   *\n   * @generated from field: bool data_ingested = 1;\n   */\n  dataIngested: boolean;\n\n  /**\n   * Milliseconds since epoch.\n   *\n   * @generated from field: int64 oldest_profile_time = 2;\n   */\n  oldestProfileTime: bigint;\n\n  /**\n   * Milliseconds since epoch.\n   *\n   * @generated from field: int64 newest_profile_time = 3;\n   */\n  newestProfileTime: bigint;\n};\n\n/**\n * Describes the message types.v1.GetProfileStatsResponse.\n * Use `create(GetProfileStatsResponseSchema)` to create a new message.\n */\nexport const GetProfileStatsResponseSchema: GenMessage<GetProfileStatsResponse> = /*@__PURE__*/\n  messageDesc(file_types_v1_types, 16);\n\n/**\n * @generated from enum types.v1.TimeSeriesAggregationType\n */\nexport enum TimeSeriesAggregationType {\n  /**\n   * @generated from enum value: TIME_SERIES_AGGREGATION_TYPE_SUM = 0;\n   */\n  SUM = 0,\n\n  /**\n   * @generated from enum value: TIME_SERIES_AGGREGATION_TYPE_AVERAGE = 1;\n   */\n  AVERAGE = 1,\n}\n\n/**\n * Describes the enum types.v1.TimeSeriesAggregationType.\n */\nexport const TimeSeriesAggregationTypeSchema: GenEnum<TimeSeriesAggregationType> = /*@__PURE__*/\n  enumDesc(file_types_v1_types, 0);\n\n","// @generated by protoc-gen-es v2.2.3 with parameter \"target=ts\"\n// @generated from file settings/v1/recording_rules.proto (package settings.v1, syntax proto3)\n/* eslint-disable */\n\nimport type { GenEnum, GenFile, GenMessage, GenService } from \"@bufbuild/protobuf/codegenv1\";\nimport { enumDesc, fileDesc, messageDesc, serviceDesc } from \"@bufbuild/protobuf/codegenv1\";\nimport type { LabelPair } from \"../../types/v1/types_pb\";\nimport { file_types_v1_types } from \"../../types/v1/types_pb\";\nimport type { Message } from \"@bufbuild/protobuf\";\n\n/**\n * Describes the file settings/v1/recording_rules.proto.\n */\nexport const file_settings_v1_recording_rules: GenFile = /*@__PURE__*/\n  fileDesc(\"CiFzZXR0aW5ncy92MS9yZWNvcmRpbmdfcnVsZXMucHJvdG8SC3NldHRpbmdzLnYxIiUKF0dldFJlY29yZGluZ1J1bGVSZXF1ZXN0EgoKAmlkGAEgASgJIkQKGEdldFJlY29yZGluZ1J1bGVSZXNwb25zZRIoCgRydWxlGAEgASgLMhouc2V0dGluZ3MudjEuUmVjb3JkaW5nUnVsZSIbChlMaXN0UmVjb3JkaW5nUnVsZXNSZXF1ZXN0IkcKGkxpc3RSZWNvcmRpbmdSdWxlc1Jlc3BvbnNlEikKBXJ1bGVzGAEgAygLMhouc2V0dGluZ3MudjEuUmVjb3JkaW5nUnVsZSL4AQoaVXBzZXJ0UmVjb3JkaW5nUnVsZVJlcXVlc3QSCgoCaWQYASABKAkSEwoLbWV0cmljX25hbWUYAiABKAkSEAoIbWF0Y2hlcnMYAyADKAkSEAoIZ3JvdXBfYnkYBCADKAkSLAoPZXh0ZXJuYWxfbGFiZWxzGAUgAygLMhMudHlwZXMudjEuTGFiZWxQYWlyEhIKCmdlbmVyYXRpb24YBiABKAMSPQoRc3RhY2t0cmFjZV9maWx0ZXIYByABKAsyHS5zZXR0aW5ncy52MS5TdGFja3RyYWNlRmlsdGVySACIAQFCFAoSX3N0YWNrdHJhY2VfZmlsdGVyIkcKG1Vwc2VydFJlY29yZGluZ1J1bGVSZXNwb25zZRIoCgRydWxlGAEgASgLMhouc2V0dGluZ3MudjEuUmVjb3JkaW5nUnVsZSIoChpEZWxldGVSZWNvcmRpbmdSdWxlUmVxdWVzdBIKCgJpZBgBIAEoCSIdChtEZWxldGVSZWNvcmRpbmdSdWxlUmVzcG9uc2UilgIKDVJlY29yZGluZ1J1bGUSCgoCaWQYASABKAkSEwoLbWV0cmljX25hbWUYAiABKAkSFAoMcHJvZmlsZV90eXBlGAMgASgJEhAKCG1hdGNoZXJzGAQgAygJEhAKCGdyb3VwX2J5GAUgAygJEiwKD2V4dGVybmFsX2xhYmVscxgGIAMoCzITLnR5cGVzLnYxLkxhYmVsUGFpchISCgpnZW5lcmF0aW9uGAcgASgDEj0KEXN0YWNrdHJhY2VfZmlsdGVyGAggASgLMh0uc2V0dGluZ3MudjEuU3RhY2t0cmFjZUZpbHRlckgAiAEBEhMKC3Byb3Zpc2lvbmVkGAkgASgIQhQKEl9zdGFja3RyYWNlX2ZpbHRlciJrChBTdGFja3RyYWNlRmlsdGVyEkUKDWZ1bmN0aW9uX25hbWUYASABKAsyKS5zZXR0aW5ncy52MS5TdGFja3RyYWNlRmlsdGVyRnVuY3Rpb25OYW1lSACIAQFCEAoOX2Z1bmN0aW9uX25hbWUiYwocU3RhY2t0cmFjZUZpbHRlckZ1bmN0aW9uTmFtZRIVCg1mdW5jdGlvbl9uYW1lGAEgASgJEiwKC21ldHJpY190eXBlGAIgASgOMhcuc2V0dGluZ3MudjEuTWV0cmljVHlwZSKQAgoSUmVjb3JkaW5nUnVsZVN0b3JlEgoKAmlkGAEgASgJEhMKC21ldHJpY19uYW1lGAIgASgJEh4KFnByb21ldGhldXNfZGF0YV9zb3VyY2UYAyABKAkSEAoIbWF0Y2hlcnMYBCADKAkSEAoIZ3JvdXBfYnkYBSADKAkSLAoPZXh0ZXJuYWxfbGFiZWxzGAYgAygLMhMudHlwZXMudjEuTGFiZWxQYWlyEhIKCmdlbmVyYXRpb24YByABKAMSPQoRc3RhY2t0cmFjZV9maWx0ZXIYCCABKAsyHS5zZXR0aW5ncy52MS5TdGFja3RyYWNlRmlsdGVySACIAQFCFAoSX3N0YWNrdHJhY2VfZmlsdGVyIlkKE1JlY29yZGluZ1J1bGVzU3RvcmUSLgoFcnVsZXMYASADKAsyHy5zZXR0aW5ncy52MS5SZWNvcmRpbmdSdWxlU3RvcmUSEgoKZ2VuZXJhdGlvbhgCIAEoAyoXCgpNZXRyaWNUeXBlEgkKBVRPVEFMEAAyuwMKFVJlY29yZGluZ1J1bGVzU2VydmljZRJhChBHZXRSZWNvcmRpbmdSdWxlEiQuc2V0dGluZ3MudjEuR2V0UmVjb3JkaW5nUnVsZVJlcXVlc3QaJS5zZXR0aW5ncy52MS5HZXRSZWNvcmRpbmdSdWxlUmVzcG9uc2UiABJnChJMaXN0UmVjb3JkaW5nUnVsZXMSJi5zZXR0aW5ncy52MS5MaXN0UmVjb3JkaW5nUnVsZXNSZXF1ZXN0Gicuc2V0dGluZ3MudjEuTGlzdFJlY29yZGluZ1J1bGVzUmVzcG9uc2UiABJqChNVcHNlcnRSZWNvcmRpbmdSdWxlEicuc2V0dGluZ3MudjEuVXBzZXJ0UmVjb3JkaW5nUnVsZVJlcXVlc3QaKC5zZXR0aW5ncy52MS5VcHNlcnRSZWNvcmRpbmdSdWxlUmVzcG9uc2UiABJqChNEZWxldGVSZWNvcmRpbmdSdWxlEicuc2V0dGluZ3MudjEuRGVsZXRlUmVjb3JkaW5nUnVsZVJlcXVlc3QaKC5zZXR0aW5ncy52MS5EZWxldGVSZWNvcmRpbmdSdWxlUmVzcG9uc2UiAGIGcHJvdG8z\", [file_types_v1_types]);\n\n/**\n * @generated from message settings.v1.GetRecordingRuleRequest\n */\nexport type GetRecordingRuleRequest = Message<\"settings.v1.GetRecordingRuleRequest\"> & {\n  /**\n   * @generated from field: string id = 1;\n   */\n  id: string;\n};\n\n/**\n * Describes the message settings.v1.GetRecordingRuleRequest.\n * Use `create(GetRecordingRuleRequestSchema)` to create a new message.\n */\nexport const GetRecordingRuleRequestSchema: GenMessage<GetRecordingRuleRequest> = /*@__PURE__*/\n  messageDesc(file_settings_v1_recording_rules, 0);\n\n/**\n * @generated from message settings.v1.GetRecordingRuleResponse\n */\nexport type GetRecordingRuleResponse = Message<\"settings.v1.GetRecordingRuleResponse\"> & {\n  /**\n   * @generated from field: settings.v1.RecordingRule rule = 1;\n   */\n  rule?: RecordingRule;\n};\n\n/**\n * Describes the message settings.v1.GetRecordingRuleResponse.\n * Use `create(GetRecordingRuleResponseSchema)` to create a new message.\n */\nexport const GetRecordingRuleResponseSchema: GenMessage<GetRecordingRuleResponse> = /*@__PURE__*/\n  messageDesc(file_settings_v1_recording_rules, 1);\n\n/**\n * @generated from message settings.v1.ListRecordingRulesRequest\n */\nexport type ListRecordingRulesRequest = Message<\"settings.v1.ListRecordingRulesRequest\"> & {\n};\n\n/**\n * Describes the message settings.v1.ListRecordingRulesRequest.\n * Use `create(ListRecordingRulesRequestSchema)` to create a new message.\n */\nexport const ListRecordingRulesRequestSchema: GenMessage<ListRecordingRulesRequest> = /*@__PURE__*/\n  messageDesc(file_settings_v1_recording_rules, 2);\n\n/**\n * @generated from message settings.v1.ListRecordingRulesResponse\n */\nexport type ListRecordingRulesResponse = Message<\"settings.v1.ListRecordingRulesResponse\"> & {\n  /**\n   * @generated from field: repeated settings.v1.RecordingRule rules = 1;\n   */\n  rules: RecordingRule[];\n};\n\n/**\n * Describes the message settings.v1.ListRecordingRulesResponse.\n * Use `create(ListRecordingRulesResponseSchema)` to create a new message.\n */\nexport const ListRecordingRulesResponseSchema: GenMessage<ListRecordingRulesResponse> = /*@__PURE__*/\n  messageDesc(file_settings_v1_recording_rules, 3);\n\n/**\n * @generated from message settings.v1.UpsertRecordingRuleRequest\n */\nexport type UpsertRecordingRuleRequest = Message<\"settings.v1.UpsertRecordingRuleRequest\"> & {\n  /**\n   * The unique id of the recording rule. If an id is not provided, this will\n   * create a new recording rule. If an id is provided, it will replace the\n   * existing recording rule.\n   *\n   * @generated from field: string id = 1;\n   */\n  id: string;\n\n  /**\n   * @generated from field: string metric_name = 2;\n   */\n  metricName: string;\n\n  /**\n   * @generated from field: repeated string matchers = 3;\n   */\n  matchers: string[];\n\n  /**\n   * @generated from field: repeated string group_by = 4;\n   */\n  groupBy: string[];\n\n  /**\n   * @generated from field: repeated types.v1.LabelPair external_labels = 5;\n   */\n  externalLabels: LabelPair[];\n\n  /**\n   * The observed generation of this recording rule. If this value does not\n   * match the generation stored in the database, this upsert will be rejected.\n   *\n   * @generated from field: int64 generation = 6;\n   */\n  generation: bigint;\n\n  /**\n   * @generated from field: optional settings.v1.StacktraceFilter stacktrace_filter = 7;\n   */\n  stacktraceFilter?: StacktraceFilter;\n};\n\n/**\n * Describes the message settings.v1.UpsertRecordingRuleRequest.\n * Use `create(UpsertRecordingRuleRequestSchema)` to create a new message.\n */\nexport const UpsertRecordingRuleRequestSchema: GenMessage<UpsertRecordingRuleRequest> = /*@__PURE__*/\n  messageDesc(file_settings_v1_recording_rules, 4);\n\n/**\n * @generated from message settings.v1.UpsertRecordingRuleResponse\n */\nexport type UpsertRecordingRuleResponse = Message<\"settings.v1.UpsertRecordingRuleResponse\"> & {\n  /**\n   * @generated from field: settings.v1.RecordingRule rule = 1;\n   */\n  rule?: RecordingRule;\n};\n\n/**\n * Describes the message settings.v1.UpsertRecordingRuleResponse.\n * Use `create(UpsertRecordingRuleResponseSchema)` to create a new message.\n */\nexport const UpsertRecordingRuleResponseSchema: GenMessage<UpsertRecordingRuleResponse> = /*@__PURE__*/\n  messageDesc(file_settings_v1_recording_rules, 5);\n\n/**\n * @generated from message settings.v1.DeleteRecordingRuleRequest\n */\nexport type DeleteRecordingRuleRequest = Message<\"settings.v1.DeleteRecordingRuleRequest\"> & {\n  /**\n   * @generated from field: string id = 1;\n   */\n  id: string;\n};\n\n/**\n * Describes the message settings.v1.DeleteRecordingRuleRequest.\n * Use `create(DeleteRecordingRuleRequestSchema)` to create a new message.\n */\nexport const DeleteRecordingRuleRequestSchema: GenMessage<DeleteRecordingRuleRequest> = /*@__PURE__*/\n  messageDesc(file_settings_v1_recording_rules, 6);\n\n/**\n * @generated from message settings.v1.DeleteRecordingRuleResponse\n */\nexport type DeleteRecordingRuleResponse = Message<\"settings.v1.DeleteRecordingRuleResponse\"> & {\n};\n\n/**\n * Describes the message settings.v1.DeleteRecordingRuleResponse.\n * Use `create(DeleteRecordingRuleResponseSchema)` to create a new message.\n */\nexport const DeleteRecordingRuleResponseSchema: GenMessage<DeleteRecordingRuleResponse> = /*@__PURE__*/\n  messageDesc(file_settings_v1_recording_rules, 7);\n\n/**\n * @generated from message settings.v1.RecordingRule\n */\nexport type RecordingRule = Message<\"settings.v1.RecordingRule\"> & {\n  /**\n   * The unique id of the recording rule.\n   *\n   * @generated from field: string id = 1;\n   */\n  id: string;\n\n  /**\n   * The name of the recording rule, this does not necessarily need to be\n   * unique.\n   *\n   * @generated from field: string metric_name = 2;\n   */\n  metricName: string;\n\n  /**\n   * Used in the UI to display what type of profile type this recording rule is\n   * generated from.\n   *\n   * This should be the standard format of:\n   *\n   *   <name>:<sample-type>:<sample-unit>:<period-type>:<period-unit>\n   *\n   * For example:\n   *\n   *   process_cpu:cpu:nanoseconds:cpu:nanoseconds\n   *\n   * @generated from field: string profile_type = 3;\n   */\n  profileType: string;\n\n  /**\n   * @generated from field: repeated string matchers = 4;\n   */\n  matchers: string[];\n\n  /**\n   * @generated from field: repeated string group_by = 5;\n   */\n  groupBy: string[];\n\n  /**\n   * @generated from field: repeated types.v1.LabelPair external_labels = 6;\n   */\n  externalLabels: LabelPair[];\n\n  /**\n   * The observed generation of this recording rule. This value should be\n   * provided when making updates to this record, to avoid conflicting\n   * concurrent updates.\n   *\n   * @generated from field: int64 generation = 7;\n   */\n  generation: bigint;\n\n  /**\n   * The stacktrace filter allows filtering on particular function names in the stacktrace.\n   * This allows recording rules to focus on specific functions and calculate their \"total\"\n   * resource usage.\n   *\n   * @generated from field: optional settings.v1.StacktraceFilter stacktrace_filter = 8;\n   */\n  stacktraceFilter?: StacktraceFilter;\n\n  /**\n   * Provisioned rules are added by config and can't be Upsert or Deleted\n   *\n   * @generated from field: bool provisioned = 9;\n   */\n  provisioned: boolean;\n};\n\n/**\n * Describes the message settings.v1.RecordingRule.\n * Use `create(RecordingRuleSchema)` to create a new message.\n */\nexport const RecordingRuleSchema: GenMessage<RecordingRule> = /*@__PURE__*/\n  messageDesc(file_settings_v1_recording_rules, 8);\n\n/**\n * @generated from message settings.v1.StacktraceFilter\n */\nexport type StacktraceFilter = Message<\"settings.v1.StacktraceFilter\"> & {\n  /**\n   * @generated from field: optional settings.v1.StacktraceFilterFunctionName function_name = 1;\n   */\n  functionName?: StacktraceFilterFunctionName;\n};\n\n/**\n * Describes the message settings.v1.StacktraceFilter.\n * Use `create(StacktraceFilterSchema)` to create a new message.\n */\nexport const StacktraceFilterSchema: GenMessage<StacktraceFilter> = /*@__PURE__*/\n  messageDesc(file_settings_v1_recording_rules, 9);\n\n/**\n * @generated from message settings.v1.StacktraceFilterFunctionName\n */\nexport type StacktraceFilterFunctionName = Message<\"settings.v1.StacktraceFilterFunctionName\"> & {\n  /**\n   * @generated from field: string function_name = 1;\n   */\n  functionName: string;\n\n  /**\n   * @generated from field: settings.v1.MetricType metric_type = 2;\n   */\n  metricType: MetricType;\n};\n\n/**\n * Describes the message settings.v1.StacktraceFilterFunctionName.\n * Use `create(StacktraceFilterFunctionNameSchema)` to create a new message.\n */\nexport const StacktraceFilterFunctionNameSchema: GenMessage<StacktraceFilterFunctionName> = /*@__PURE__*/\n  messageDesc(file_settings_v1_recording_rules, 10);\n\n/**\n * @generated from message settings.v1.RecordingRuleStore\n */\nexport type RecordingRuleStore = Message<\"settings.v1.RecordingRuleStore\"> & {\n  /**\n   * @generated from field: string id = 1;\n   */\n  id: string;\n\n  /**\n   * @generated from field: string metric_name = 2;\n   */\n  metricName: string;\n\n  /**\n   * @generated from field: string prometheus_data_source = 3;\n   */\n  prometheusDataSource: string;\n\n  /**\n   * @generated from field: repeated string matchers = 4;\n   */\n  matchers: string[];\n\n  /**\n   * @generated from field: repeated string group_by = 5;\n   */\n  groupBy: string[];\n\n  /**\n   * @generated from field: repeated types.v1.LabelPair external_labels = 6;\n   */\n  externalLabels: LabelPair[];\n\n  /**\n   * @generated from field: int64 generation = 7;\n   */\n  generation: bigint;\n\n  /**\n   * @generated from field: optional settings.v1.StacktraceFilter stacktrace_filter = 8;\n   */\n  stacktraceFilter?: StacktraceFilter;\n};\n\n/**\n * Describes the message settings.v1.RecordingRuleStore.\n * Use `create(RecordingRuleStoreSchema)` to create a new message.\n */\nexport const RecordingRuleStoreSchema: GenMessage<RecordingRuleStore> = /*@__PURE__*/\n  messageDesc(file_settings_v1_recording_rules, 11);\n\n/**\n * @generated from message settings.v1.RecordingRulesStore\n */\nexport type RecordingRulesStore = Message<\"settings.v1.RecordingRulesStore\"> & {\n  /**\n   * @generated from field: repeated settings.v1.RecordingRuleStore rules = 1;\n   */\n  rules: RecordingRuleStore[];\n\n  /**\n   * @generated from field: int64 generation = 2;\n   */\n  generation: bigint;\n};\n\n/**\n * Describes the message settings.v1.RecordingRulesStore.\n * Use `create(RecordingRulesStoreSchema)` to create a new message.\n */\nexport const RecordingRulesStoreSchema: GenMessage<RecordingRulesStore> = /*@__PURE__*/\n  messageDesc(file_settings_v1_recording_rules, 12);\n\n/**\n * @generated from enum settings.v1.MetricType\n */\nexport enum MetricType {\n  /**\n   * @generated from enum value: TOTAL = 0;\n   */\n  TOTAL = 0,\n}\n\n/**\n * Describes the enum settings.v1.MetricType.\n */\nexport const MetricTypeSchema: GenEnum<MetricType> = /*@__PURE__*/\n  enumDesc(file_settings_v1_recording_rules, 0);\n\n/**\n * @generated from service settings.v1.RecordingRulesService\n */\nexport const RecordingRulesService: GenService<{\n  /**\n   * @generated from rpc settings.v1.RecordingRulesService.GetRecordingRule\n   */\n  getRecordingRule: {\n    methodKind: \"unary\";\n    input: typeof GetRecordingRuleRequestSchema;\n    output: typeof GetRecordingRuleResponseSchema;\n  },\n  /**\n   * @generated from rpc settings.v1.RecordingRulesService.ListRecordingRules\n   */\n  listRecordingRules: {\n    methodKind: \"unary\";\n    input: typeof ListRecordingRulesRequestSchema;\n    output: typeof ListRecordingRulesResponseSchema;\n  },\n  /**\n   * @generated from rpc settings.v1.RecordingRulesService.UpsertRecordingRule\n   */\n  upsertRecordingRule: {\n    methodKind: \"unary\";\n    input: typeof UpsertRecordingRuleRequestSchema;\n    output: typeof UpsertRecordingRuleResponseSchema;\n  },\n  /**\n   * @generated from rpc settings.v1.RecordingRulesService.DeleteRecordingRule\n   */\n  deleteRecordingRule: {\n    methodKind: \"unary\";\n    input: typeof DeleteRecordingRuleRequestSchema;\n    output: typeof DeleteRecordingRuleResponseSchema;\n  },\n}> = /*@__PURE__*/\n  serviceDesc(file_settings_v1_recording_rules, 0);\n\n","import { create } from '@bufbuild/protobuf';\nimport { ApiClient } from '@shared/infrastructure/http/ApiClient';\nimport {\n  ListRecordingRulesResponse,\n  MetricType,\n  RecordingRule,\n  StacktraceFilterFunctionNameSchema,\n  StacktraceFilterSchema,\n  UpsertRecordingRuleRequest,\n} from '@shared/pyroscope-api/settings/v1/recording_rules_pb';\nimport { RecordingRuleViewModel } from '@shared/types/RecordingRuleViewModel';\n\nfunction mapRuleToRecordingRuleViewModel(rule: RecordingRule): RecordingRuleViewModel {\n  let serviceName = '';\n  for (let matcher of rule.matchers || []) {\n    if (matcher.includes('service_name=')) {\n      serviceName = matcher?.match(/service_name=\"([^\"]+)\"/)?.[1] || '';\n      break;\n    }\n  }\n\n  const functionName = rule.stacktraceFilter?.functionName?.functionName;\n\n  return {\n    id: rule.id,\n    metricName: rule.metricName,\n    serviceName,\n    profileType: rule.profileType,\n    matchers: rule.matchers,\n    groupBy: rule.groupBy || [],\n    functionName,\n    readonly: rule.provisioned,\n  };\n}\n\nclass RecordingRulesApiClient extends ApiClient {\n  async get(): Promise<RecordingRuleViewModel[]> {\n    return super\n      .fetch('/settings.v1.RecordingRulesService/ListRecordingRules', {\n        method: 'POST',\n        body: JSON.stringify({}),\n      })\n      .then((response) => response.json())\n      .then((json: ListRecordingRulesResponse) => {\n        if (!json.rules) {\n          return [];\n        }\n        return json.rules.map((rule: RecordingRule) => {\n          return mapRuleToRecordingRuleViewModel(rule);\n        });\n      });\n  }\n\n  async create(rule: RecordingRuleViewModel): Promise<void> {\n    let requestBody: UpsertRecordingRuleRequest = {\n      metricName: rule.metricName,\n      matchers: [\n        `{ service_name=\"${rule.serviceName}\" }`,\n        `{ __profile_type__=\"${rule.profileType}\"}`,\n        ...(rule.matchers || []),\n      ],\n      groupBy: rule.groupBy || [],\n    } as UpsertRecordingRuleRequest;\n\n    // Add stacktrace filter if function name is provided\n    if (rule.functionName) {\n      requestBody.stacktraceFilter = create(StacktraceFilterSchema, {\n        functionName: create(StacktraceFilterFunctionNameSchema, {\n          functionName: rule.functionName,\n          metricType: MetricType.TOTAL,\n        }),\n      });\n    }\n\n    return super\n      .fetch('/settings.v1.RecordingRulesService/UpsertRecordingRule', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n      })\n      .then((response) => response.json());\n  }\n\n  async remove(rule: RecordingRuleViewModel): Promise<void> {\n    return super\n      .fetch('/settings.v1.RecordingRulesService/DeleteRecordingRule', {\n        method: 'POST',\n        body: JSON.stringify({\n          id: rule.id,\n        }),\n      })\n      .then((response) => response.json());\n  }\n}\n\nexport const recordingRulesApiClient = new RecordingRulesApiClient();\n","import { HttpClientError } from '@shared/infrastructure/http/HttpClientError';\nimport { recordingRulesApiClient } from '@shared/infrastructure/recording-rules/recordingRulesApiClient';\nimport { RecordingRuleViewModel } from '@shared/types/RecordingRuleViewModel';\nimport { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\n\ntype FetchParams = {\n  enabled?: boolean;\n};\n\ntype FetchResponse = {\n  isFetching: boolean;\n  error: HttpClientError | null;\n  recordingRules?: RecordingRuleViewModel[];\n  mutate: (rule: RecordingRuleViewModel) => Promise<void>;\n  remove: (rule: RecordingRuleViewModel) => Promise<void>;\n};\n\nexport function useFetchRecordingRules({ enabled }: FetchParams = {}): FetchResponse {\n  const queryClient = useQueryClient();\n\n  const { isFetching, error, data } = useQuery<RecordingRuleViewModel[], HttpClientError>({\n    enabled,\n    queryKey: ['recording_rules'],\n    queryFn: () => recordingRulesApiClient.get(),\n  });\n\n  const { mutateAsync: mutate } = useMutation({\n    mutationFn: (rule: RecordingRuleViewModel) => recordingRulesApiClient.create(rule),\n    networkMode: 'always',\n  });\n\n  const { mutateAsync: remove } = useMutation({\n    mutationFn: async (rule: RecordingRuleViewModel) => {\n      await recordingRulesApiClient.remove(rule);\n      await queryClient.invalidateQueries({ queryKey: ['recording_rules'] });\n    },\n    networkMode: 'always',\n  });\n\n  return {\n    isFetching,\n    error: recordingRulesApiClient.isAbortError(error) ? null : error,\n    recordingRules: data,\n    mutate,\n    remove,\n  };\n}\n","import { displayError, displaySuccess } from '@shared/domain/displayStatus';\nimport { useFetchRecordingRules } from '@shared/infrastructure/recording-rules/useFetchRecordingRules';\nimport { RecordingRuleViewModel } from '@shared/types/RecordingRuleViewModel';\n\nexport function useCreateRecordingRule() {\n  const { recordingRules, error: fetchError, mutate } = useFetchRecordingRules();\n\n  return {\n    data: {\n      recordingRules,\n      fetchError,\n    },\n    actions: {\n      async save(rule: RecordingRuleViewModel) {\n        try {\n          await mutate(rule);\n          displaySuccess([`Recording rule ${rule.metricName} created successfully!`]);\n        } catch (e) {\n          displayError(e as Error, [`Failed to save recording rule ${rule.metricName}.`]);\n        }\n      },\n    },\n  };\n}\n","import { css } from '@emotion/css';\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { SceneComponentProps, sceneGraph, SceneObjectBase, SceneObjectState } from '@grafana/scenes';\nimport { Button, Divider, Field, Input, Modal, MultiSelect, Text, useStyles2 } from '@grafana/ui';\nimport { labelsRepository } from '@shared/infrastructure/labels/labelsRepository';\nimport { getProfileMetric, ProfileMetricId } from '@shared/infrastructure/profile-metrics/getProfileMetric';\nimport { RecordingRuleViewModel } from '@shared/types/RecordingRuleViewModel';\nimport React, { useEffect, useState } from 'react';\nimport { Controller, FieldError, SubmitHandler, useForm } from 'react-hook-form';\n\nimport { FiltersVariable } from '../../domain/variables/FiltersVariable/FiltersVariable';\nimport { ProfileMetricVariable } from '../../domain/variables/ProfileMetricVariable';\nimport { ServiceNameVariable } from '../../domain/variables/ServiceNameVariable/ServiceNameVariable';\nimport { ExplorationType, SceneProfilesExplorer } from '../SceneProfilesExplorer/SceneProfilesExplorer';\nimport { useCreateRecordingRule } from './domain/useCreateRecordingRule';\n\nconst METRIC_NAME_PREFIX = 'profiles_recorded_';\n\ninterface RecordingRuleForm {\n  metricName: string;\n  labels: Array<SelectableValue<string>>;\n  serviceName: string;\n  profileType: string;\n  matcher: string;\n  functionName?: string;\n}\n\ninterface SceneCreateRecordingRuleModalState extends SceneObjectState {}\n\n/**\n * Returns the service name if a service name dropdown is visible on the screen for the user.\n *\n * In \"All services\" and \"Favorites\" exploration types, the service name is not shown on the screen,\n * though the variable is still present in the URL so we need to check explicitly what's the current\n * exploration type instead of just reading the variable name.\n */\nfunction useCurrentServiceName(model: SceneCreateRecordingRuleModal) {\n  const serviceNameVariable = sceneGraph.findByKeyAndType(model, 'serviceName', ServiceNameVariable);\n  const serviceName = serviceNameVariable.state.value;\n\n  const explorationType = sceneGraph\n    .findByKeyAndType(model, 'profiles-explorer', SceneProfilesExplorer)\n    .useState().explorationType;\n  return explorationType === ExplorationType.ALL_SERVICES || explorationType === ExplorationType.FAVORITES\n    ? undefined\n    : serviceName;\n}\n\nexport class SceneCreateRecordingRuleModal extends SceneObjectBase<SceneCreateRecordingRuleModalState> {\n  constructor() {\n    super({});\n  }\n\n  static Component = ({\n    model,\n    isModalOpen,\n    onDismiss,\n    onCreated,\n    functionName,\n  }: SceneComponentProps<SceneCreateRecordingRuleModal> & {\n    isModalOpen: boolean;\n    onDismiss: () => void;\n    onCreated: () => void;\n    functionName?: string;\n  }) => {\n    const [options, setOptions] = useState<string[]>([]);\n\n    const { actions } = useCreateRecordingRule();\n\n    const profileMetricVariable = sceneGraph.findByKeyAndType(model, 'profileMetricId', ProfileMetricVariable);\n    const profileMetric = getProfileMetric(profileMetricVariable.state.value as ProfileMetricId);\n\n    const serviceName = useCurrentServiceName(model);\n\n    const filtersVariable = sceneGraph.findByKeyAndType(model, 'filters', FiltersVariable);\n    const filters = filtersVariable.state.filters;\n    const filterQuery = filters.map((filter) => `${filter.key}${filter.operator}\"${filter.value}\"`).join(', ');\n\n    const {\n      register,\n      handleSubmit,\n      control,\n      formState: { errors },\n    } = useForm<RecordingRuleForm>({\n      mode: 'onChange',\n      shouldUnregister: true,\n      values: {\n        functionName,\n        metricName: '',\n        labels: [],\n        serviceName: serviceName?.toString() || '',\n        matcher: '',\n        profileType: profileMetric.id,\n      },\n    });\n\n    const onSubmit: SubmitHandler<RecordingRuleForm> = async (data) => {\n      const rule: RecordingRuleViewModel = {\n        id: '',\n        metricName: METRIC_NAME_PREFIX + data.metricName,\n        serviceName: data.serviceName,\n        profileType: data.profileType,\n        matchers: [`{${filterQuery}}`],\n        groupBy: data.labels ? data.labels.map((label) => label.value ?? '') : [],\n        functionName: data.functionName,\n        readonly: false,\n      };\n      await actions.save(rule);\n      onCreated();\n    };\n\n    useEffect(() => {\n      const timeRange = sceneGraph.getTimeRange(model).state.value;\n      labelsRepository\n        .listLabels({\n          query: `{${filterQuery}}`,\n          from: timeRange.from.unix() * 1000,\n          to: timeRange.to.unix() * 1000,\n        })\n        .then((suggestions) => {\n          setOptions(suggestions.map((s) => s.value));\n        });\n    }, [filterQuery, model]);\n\n    return (\n      <Modal\n        title=\"Create recording rule\"\n        isOpen={isModalOpen}\n        onDismiss={onDismiss}\n        data-testid=\"Create recording rule modal\"\n      >\n        <form onSubmit={handleSubmit(onSubmit)}>\n          <Field\n            label=\"Metric name\"\n            description={`Prometheus metric name (automatically prefixed with ${METRIC_NAME_PREFIX}).`}\n            error={MetricNameErrorComponent(errors.metricName)}\n            invalid={!!errors.metricName}\n          >\n            <div className={css({ display: 'flex' })}>\n              <div className={css({ alignContent: 'center', fontFamily: 'monospace' })}>{METRIC_NAME_PREFIX}</div>\n              <Input\n                className={css({ input: { fontFamily: 'monospace', paddingLeft: 0 } })}\n                placeholder={`${profileMetric.type}_${(serviceName || 'name')\n                  .toString()\n                  .replace(/[^a-zA-Z0-9_]/g, '_')}`}\n                aria-label=\"Metric name\"\n                required\n                autoFocus\n                {...register('metricName', {\n                  required: 'Metric name is required.',\n                  // This pattern was pulled from here: https://prometheus.io/docs/concepts/data_model/#metric-names-and-labels\n                  pattern: {\n                    value: /^[a-zA-Z_][a-zA-Z0-9_]*$/,\n                    message: 'Invalid metric name.',\n                  },\n                })}\n              />\n            </div>\n          </Field>\n\n          <Field label=\"Additional labels\" description=\"Additional profiling labels to forward to the metric\">\n            <Controller\n              name=\"labels\"\n              control={control}\n              render={({ field }) => (\n                <MultiSelect\n                  {...field}\n                  options={options.map((opt) => ({ label: opt, value: opt }))}\n                  toggleAllOptions={{\n                    enabled: true,\n                  }}\n                  closeMenuOnSelect={false}\n                  hideSelectedOptions={false}\n                />\n              )}\n            />\n          </Field>\n\n          <Divider />\n\n          <Field label=\"Service name\" data-testid=\"Create recording rule modal service name field\">\n            {serviceName ? (\n              <div>{`${serviceName}`}</div>\n            ) : (\n              <Text element=\"span\" color=\"secondary\">\n                All services\n              </Text>\n            )}\n          </Field>\n\n          <input type=\"text\" hidden {...register('serviceName')} />\n\n          <Field label=\"Profile type\">\n            <div>{`${profileMetric.group}/${profileMetric.type}`}</div>\n          </Field>\n          <input type=\"text\" hidden {...register('profileType')} />\n\n          <Field label=\"Function name\" description=\"Optional function name to filter the recording rule\">\n            <Input\n              aria-label=\"Function name\"\n              placeholder=\"Leave empty for total aggregation\"\n              {...register('functionName')}\n            />\n          </Field>\n\n          <Field label=\"Filters\" description=\"Filters selected in the main view will be applied to this rule\">\n            <div>{filters.length === 0 ? 'No filters selected' : filterQuery}</div>\n          </Field>\n\n          <Modal.ButtonRow>\n            <Button variant=\"secondary\" fill=\"outline\" onClick={onDismiss} aria-label=\"Cancel\">\n              Cancel\n            </Button>\n            <Button variant=\"primary\" type=\"submit\">\n              Create\n            </Button>\n          </Modal.ButtonRow>\n        </form>\n      </Modal>\n    );\n  };\n}\n\nconst MetricNameErrorComponent = (error: FieldError | undefined) => {\n  const styles = useStyles2(getStyles);\n\n  if (error === undefined || error.message === undefined) {\n    return undefined;\n  }\n\n  if (error.type === 'pattern') {\n    return (\n      <span>\n        <span>Metric name is invalid, it must have the following properties:</span>\n        <ul className={styles.errorList}>\n          <li>Only contain alphanumeric characters or underscores</li>\n          <li>Must not begin with a number</li>\n        </ul>\n      </span>\n    );\n  }\n\n  return <span>{error.message}</span>;\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  errorList: css`\n    padding-left: ${theme.spacing(2)};\n  `,\n});\n","import { BusEventWithPayload, TimeRange } from '@grafana/data';\nimport { SceneTimeRangeState } from '@grafana/scenes';\n\nimport { CompareTarget } from '../../../../domain/types';\n\ninterface EventEnableSyncTimeRangesPayload {\n  source: CompareTarget;\n  enable: boolean;\n  timeRange: SceneTimeRangeState;\n  annotationTimeRange: TimeRange;\n}\n\nexport class EventEnableSyncTimeRanges extends BusEventWithPayload<EventEnableSyncTimeRangesPayload> {\n  public static type = 'enable-sync-timeranges';\n}\n","import { BusEventWithPayload } from '@grafana/data';\n\nimport { CompareTarget } from '../../../../domain/types';\n\ninterface EventSyncRefreshPayload {\n  source: CompareTarget;\n}\n\nexport class EventSyncRefresh extends BusEventWithPayload<EventSyncRefreshPayload> {\n  public static type = 'sync-refresh';\n}\n","import { BusEventWithPayload, TimeRange } from '@grafana/data';\nimport { SceneTimeRangeState } from '@grafana/scenes';\n\nimport { CompareTarget } from '../../../../domain/types';\n\ninterface EventSyncTimeRangesPayload {\n  source: CompareTarget;\n  timeRange?: SceneTimeRangeState;\n  annotationTimeRange?: TimeRange;\n}\n\nexport class EventSyncTimeRanges extends BusEventWithPayload<EventSyncTimeRangesPayload> {\n  public static type = 'sync-timeranges';\n}\n","import { SceneComponentProps, sceneGraph, SceneTimePicker } from '@grafana/scenes';\nimport { TimeRangePicker } from '@grafana/ui';\nimport React from 'react';\n\nexport class SceneTimePickerWithoutSync extends SceneTimePicker {\n  public static Component = function SceneTimePickerRenderer({\n    model,\n  }: SceneComponentProps<SceneTimePickerWithoutSync>) {\n    const { hidePicker, isOnCanvas } = model.useState();\n    const timeRange = sceneGraph.getTimeRange(model);\n    const timeZone = timeRange.getTimeZone();\n    const timeRangeState = timeRange.useState();\n\n    if (hidePicker) {\n      return null;\n    }\n\n    return (\n      <TimeRangePicker\n        isOnCanvas={isOnCanvas ?? true}\n        value={timeRangeState.value}\n        onChange={timeRange.onTimeRangeChange}\n        timeZone={timeZone}\n        fiscalYearStartMonth={timeRangeState.fiscalYearStartMonth}\n        onMoveBackward={model.onMoveBackward}\n        onMoveForward={model.onMoveForward}\n        onZoom={model.onZoom}\n        onChangeTimeZone={timeRange.onTimeZoneChange}\n        onChangeFiscalYearStartMonth={model.onChangeFiscalYearStartMonth}\n        // disable the sync\n        isSynced={false}\n      />\n    );\n  };\n}\n","import { toUtc } from '@grafana/data';\nimport { SceneObjectUrlValue } from '@grafana/scenes';\n\nconst INTERVAL_STRING_REGEX = /^\\d+[yYmMsSwWhHdD]$/;\n\n/* Copied from https://github.com/grafana/scenes/blob/main/packages/scenes/src/utils/parseUrlParam.ts */\n\n// eslint-disable-next-line sonarjs/cognitive-complexity\nexport function parseUrlParam(value: SceneObjectUrlValue): string | null {\n  if (typeof value !== 'string') {\n    return null;\n  }\n\n  if (value.indexOf('now') !== -1) {\n    return value;\n  }\n\n  if (INTERVAL_STRING_REGEX.test(value)) {\n    return value;\n  }\n\n  if (value.length === 8) {\n    const utcValue = toUtc(value, 'YYYYMMDD');\n    if (utcValue.isValid()) {\n      return utcValue.toISOString();\n    }\n  } else if (value.length === 15) {\n    const utcValue = toUtc(value, 'YYYYMMDDTHHmmss');\n    if (utcValue.isValid()) {\n      return utcValue.toISOString();\n    }\n  } else if (value.length === 24) {\n    const utcValue = toUtc(value);\n    return utcValue.toISOString();\n  }\n\n  const epoch = parseInt(value, 10);\n  if (!isNaN(epoch)) {\n    return toUtc(epoch).toISOString();\n  }\n\n  return null;\n}\n","import { FieldType, MutableDataFrame } from '@grafana/data';\n\nexport class RangeAnnotation extends MutableDataFrame {\n  constructor() {\n    super();\n    [\n      {\n        name: 'time',\n        type: FieldType.time,\n      },\n      {\n        name: 'timeEnd',\n        type: FieldType.time,\n      },\n      {\n        name: 'isRegion',\n        type: FieldType.boolean,\n      },\n      {\n        name: 'color',\n        type: FieldType.other,\n      },\n      {\n        name: 'text',\n        type: FieldType.string,\n      },\n    ].forEach((field) => this.addField(field));\n  }\n\n  addRange(entry: { time: number; timeEnd: number; color?: string; text: string }) {\n    this.add({ ...entry, isRegion: true });\n  }\n}\n","import { DateTime, dateTime, LoadingState, TimeRange } from '@grafana/data';\nimport {\n  sceneGraph,\n  SceneObjectBase,\n  SceneObjectUrlSyncConfig,\n  SceneObjectUrlValues,\n  SceneTimeRangeLike,\n  SceneTimeRangeState,\n  VariableDependencyConfig,\n  VizPanel,\n} from '@grafana/scenes';\nimport { omit } from 'lodash';\n\nimport { evaluateTimeRange } from '../domain/evaluateTimeRange';\nimport { parseUrlParam } from '../domain/parseUrlParam';\nimport { RangeAnnotation } from '../domain/RangeAnnotation';\n\nexport enum TimeRangeWithAnnotationsMode {\n  ANNOTATIONS = 'annotations',\n  DEFAULT = 'default',\n}\n\ninterface SceneTimeRangeWithAnnotationsState extends SceneTimeRangeState {\n  annotationTimeRange: TimeRange;\n  mode: TimeRangeWithAnnotationsMode;\n  annotationColor: string;\n  annotationTitle: string;\n}\n\nconst TIMERANGE_NIL = {\n  from: dateTime(0),\n  to: dateTime(0),\n  raw: { from: '', to: '' },\n};\n\n/**\n * This custom SceneTimeRange class provides the ability to draw annotations on timeseries vizualisations.\n * Indeed, timeseries visualizations don't support drawing annotations by dragging (it's only supported when holding ctrl/command key) so we need to hijack the zooming event to emulate drawing.\n * At the same time, the only way to hijack it is by passing custom $timeRange because TimeSeries vizualization handles zooming internally by looking for the nearest time range object.\n * @see https://github.com/grafana/scenes/pull/744\n */\nexport class SceneTimeRangeWithAnnotations\n  extends SceneObjectBase<SceneTimeRangeWithAnnotationsState>\n  implements SceneTimeRangeLike\n{\n  protected _variableDependency = new VariableDependencyConfig(this, {\n    variableNames: ['dataSource', 'serviceName'],\n    onReferencedVariableValueChanged: () => {\n      this.nullifyAnnotationTimeRange();\n      this.updateTimeseriesAnnotation();\n    },\n  });\n\n  protected _urlSync = new SceneObjectUrlSyncConfig(this, { keys: ['diffFrom', 'diffTo'] });\n\n  constructor(options: {\n    key: string;\n    mode: TimeRangeWithAnnotationsMode;\n    annotationColor: string;\n    annotationTitle: string;\n  }) {\n    super({\n      from: TIMERANGE_NIL.raw.from,\n      to: TIMERANGE_NIL.raw.to,\n      value: TIMERANGE_NIL,\n      annotationTimeRange: TIMERANGE_NIL,\n      ...options,\n    });\n\n    this.addActivationHandler(this.onActivate.bind(this));\n  }\n\n  onActivate() {\n    this.setState(omit(this.getAncestorTimeRange().state, 'key'));\n\n    this._subs.add(\n      this.getAncestorTimeRange().subscribeToState((newState) => {\n        this.setState(omit(newState, 'key'));\n      })\n    );\n\n    this._subs.add(\n      this.getTimeseries().state.$data?.subscribeToState((newState, prevState) => {\n        if (!newState.data || newState.data.state !== LoadingState.Done) {\n          return;\n        }\n\n        // add annotation for the first time\n        if (!newState.data.annotations?.length && !prevState.data?.annotations?.length) {\n          this.updateTimeseriesAnnotation();\n          return;\n        }\n\n        // ensure we retain the previous annotations, if they exist\n        if (!newState.data.annotations?.length && prevState.data?.annotations?.length) {\n          newState.data.annotations = prevState.data.annotations;\n        }\n      })\n    );\n  }\n\n  protected getAncestorTimeRange(): SceneTimeRangeLike {\n    if (!this.parent || !this.parent.parent) {\n      throw new Error(typeof this + ' must be used within $timeRange scope');\n    }\n\n    return sceneGraph.getTimeRange(this.parent.parent);\n  }\n\n  protected getTimeseries(): VizPanel {\n    try {\n      const vizPanel = sceneGraph.getAncestor(this, VizPanel);\n\n      if (vizPanel.state.pluginId !== 'timeseries') {\n        throw new TypeError('Incorrect VizPanel type!');\n      }\n\n      return vizPanel;\n    } catch (error) {\n      throw new Error('Ancestor timeseries panel not found!');\n    }\n  }\n\n  updateTimeseriesAnnotation() {\n    const { annotationTimeRange, annotationColor, annotationTitle } = this.state;\n\n    const { $data } = this.getTimeseries().state;\n\n    const data = $data?.state.data;\n    if (!data) {\n      return;\n    }\n\n    const annotation = new RangeAnnotation();\n\n    annotation.addRange({\n      color: annotationColor,\n      text: annotationTitle,\n      time: annotationTimeRange.from.unix() * 1000,\n      timeEnd: annotationTimeRange.to.unix() * 1000,\n    });\n\n    // tradeoff: this will notify all the $data subscribers even though the data itself hasn't changed\n    $data?.setState({\n      data: {\n        ...data,\n        annotations: [annotation],\n      },\n    });\n  }\n\n  setAnnotationTimeRange(annotationTimeRange: TimeRange, updateTimeseries = false) {\n    this.setState({ annotationTimeRange });\n\n    if (updateTimeseries) {\n      this.updateTimeseriesAnnotation();\n    }\n  }\n\n  nullifyAnnotationTimeRange() {\n    this.setAnnotationTimeRange(TIMERANGE_NIL);\n  }\n\n  getUrlState() {\n    const { annotationTimeRange } = this.state;\n\n    return {\n      diffFrom:\n        typeof annotationTimeRange.raw.from === 'string'\n          ? annotationTimeRange.raw.from\n          : annotationTimeRange.raw.from.toISOString(),\n      diffTo:\n        typeof annotationTimeRange.raw.to === 'string'\n          ? annotationTimeRange.raw.to\n          : annotationTimeRange.raw.to.toISOString(),\n    };\n  }\n\n  updateFromUrl(values: SceneObjectUrlValues) {\n    const { diffFrom, diffTo } = values;\n\n    if (!diffTo && !diffFrom) {\n      return;\n    }\n\n    const { annotationTimeRange } = this.state;\n\n    this.setAnnotationTimeRange(\n      this.buildAnnotationTimeRange(\n        parseUrlParam(diffFrom) ?? annotationTimeRange.from,\n        parseUrlParam(diffTo) ?? annotationTimeRange.to\n      )\n    );\n  }\n\n  buildAnnotationTimeRange(diffFrom: string | DateTime, diffTo: string | DateTime) {\n    return evaluateTimeRange(\n      diffFrom,\n      diffTo,\n      this.getTimeZone(),\n      this.state.fiscalYearStartMonth,\n      this.state.UNSAFE_nowDelay\n    );\n  }\n\n  onTimeRangeChange(timeRange: TimeRange): void {\n    const { mode } = this.state;\n\n    if (mode === TimeRangeWithAnnotationsMode.DEFAULT) {\n      this.getAncestorTimeRange().onTimeRangeChange(timeRange);\n      return;\n    }\n\n    // this triggers a timeseries request to the API\n    // TODO: caching?\n    this.setAnnotationTimeRange(timeRange, true);\n  }\n\n  onTimeZoneChange(timeZone: string): void {\n    this.getAncestorTimeRange().onTimeZoneChange(timeZone);\n  }\n\n  getTimeZone(): string {\n    return this.getAncestorTimeRange().getTimeZone();\n  }\n\n  onRefresh(): void {\n    this.getAncestorTimeRange().onRefresh();\n  }\n}\n","import { dateMath, DateTime, TimeRange } from '@grafana/data';\nimport { TimeZone } from '@grafana/schema';\n\n/* Copied from https://github.com/grafana/scenes/blob/main/packages/scenes/src/utils/evaluateTimeRange.ts */\n\nexport function evaluateTimeRange(\n  from: string | DateTime,\n  to: string | DateTime,\n  timeZone: TimeZone,\n  fiscalYearStartMonth?: number,\n  delay?: string\n): TimeRange {\n  const hasDelay = delay && to === 'now';\n\n  return {\n    from: dateMath.parse(from, false, timeZone, fiscalYearStartMonth)!,\n    to: dateMath.parse(hasDelay ? 'now-' + delay : to, true, timeZone, fiscalYearStartMonth)!,\n    raw: {\n      from: from,\n      to: to,\n    },\n  };\n}\n","import { BusEventWithPayload } from '@grafana/data';\n\nimport { TimerangeSelectionMode } from '../actions/SwitchTimeRangeSelectionModeAction';\n\ninterface EventSwitchTimerangeSelectionModePayload {\n  mode: TimerangeSelectionMode;\n}\n\nexport class EventSwitchTimerangeSelectionMode extends BusEventWithPayload<EventSwitchTimerangeSelectionModePayload> {\n  public static type = 'switch-timerange-selection-mode';\n}\n","import { css } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { SceneComponentProps, SceneObjectBase, SceneObjectState } from '@grafana/scenes';\nimport { Icon, RadioButtonGroup, Tooltip, useStyles2 } from '@grafana/ui';\nimport React from 'react';\n\nimport { EventSwitchTimerangeSelectionMode } from '../events/EventSwitchTimerangeSelectionMode';\n\nexport enum TimerangeSelectionMode {\n  TIMEPICKER = 'timepicker',\n  FLAMEGRAPH = 'flame-graph',\n}\n\ninterface SwitchTimeRangeSelectionTypeActionState extends SceneObjectState {\n  mode: TimerangeSelectionMode;\n}\n\nexport class SwitchTimeRangeSelectionModeAction extends SceneObjectBase<SwitchTimeRangeSelectionTypeActionState> {\n  static OPTIONS = [\n    { label: 'Time picker', value: TimerangeSelectionMode.TIMEPICKER },\n    { label: 'Flame graph', value: TimerangeSelectionMode.FLAMEGRAPH },\n  ];\n\n  constructor() {\n    super({\n      mode: TimerangeSelectionMode.FLAMEGRAPH,\n    });\n  }\n\n  public onChange = (newMode: TimerangeSelectionMode) => {\n    this.setState({ mode: newMode });\n\n    this.publishEvent(new EventSwitchTimerangeSelectionMode({ mode: newMode }), true);\n  };\n\n  public static Component = ({ model }: SceneComponentProps<SwitchTimeRangeSelectionModeAction>) => {\n    const styles = useStyles2(getStyles);\n    const { mode } = model.useState();\n\n    return (\n      <div className={styles.container}>\n        <label className={styles.label}>\n          <span>Range selection mode&nbsp;</span>\n          <Tooltip\n            content={\n              <div className={styles.tooltip}>\n                <div>\n                  Use these buttons to change the behaviour when selecting a range with the mouse on the time series:\n                </div>\n                <dl>\n                  <dt>Time picker</dt>\n                  <dd>Time range zoom in (default behaviour)</dd>\n                  <dt>Flame graph</dt>\n                  <dd>\n                    Time range for building the flame graph (the stack traces will be retrieved only for the selected\n                    range)\n                  </dd>\n                </dl>\n              </div>\n            }\n            placement=\"top\"\n          >\n            <Icon name=\"question-circle\" />\n          </Tooltip>\n        </label>\n        <RadioButtonGroup\n          size=\"sm\"\n          options={SwitchTimeRangeSelectionModeAction.OPTIONS}\n          value={mode}\n          onChange={model.onChange}\n          aria-label=\"Range selection mode\"\n        />\n      </div>\n    );\n  };\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  container: css`\n    display: flex;\n    flex-direction: column;\n  `,\n  tooltip: css`\n    padding: ${theme.spacing(1)};\n    & dl {\n      margin-top: ${theme.spacing(2)};\n      display: grid;\n      grid-gap: ${theme.spacing(1)} ${theme.spacing(2)};\n      grid-template-columns: max-content;\n    }\n    & dt {\n      font-weight: bold;\n    }\n    & dd {\n      margin: 0;\n      grid-column-start: 2;\n    }\n  `,\n  label: css`\n    font-size: 12px;\n    text-align: right;\n    margin-bottom: 2px;\n    color: ${theme.colors.text.secondary};\n  `,\n});\n","import { SceneQueryRunner } from '@grafana/scenes';\n\nimport { PYROSCOPE_DATA_SOURCE } from '../../../../../infrastructure/pyroscope-data-sources';\nimport { withPreventInvalidQuery } from '../../../../../infrastructure/withPreventInvalidQuery';\n\nexport function buildCompareTimeSeriesQueryRunner({\n  filterKey,\n}: {\n  filterKey: 'filtersBaseline' | 'filtersComparison';\n}) {\n  const queryRunner = new SceneQueryRunner({\n    datasource: PYROSCOPE_DATA_SOURCE,\n    queries: [\n      {\n        refId: `$profileMetricId-$serviceName-${filterKey}}`,\n        queryType: 'metrics',\n        profileTypeId: '$profileMetricId',\n        labelSelector: `{service_name=\"$serviceName\",$${filterKey}}`,\n      },\n    ],\n  });\n\n  return withPreventInvalidQuery(queryRunner);\n}\n","import Color from 'color';\n\nexport const BASELINE_COLORS = {\n  COLOR: Color('#d066d4'),\n  OVERLAY: Color('#d066d4').alpha(0.3),\n};\n\nexport const COMPARISON_COLORS = {\n  COLOR: Color('#1398f6'),\n  OVERLAY: Color('#1398f6').alpha(0.3),\n};\n","import { css, cx } from '@emotion/css';\nimport { AdHocVariableFilter, DataFrame, dateTime, FieldMatcherID, getValueFormat, GrafanaTheme2 } from '@grafana/data';\nimport {\n  SceneComponentProps,\n  SceneDataTransformer,\n  sceneGraph,\n  SceneObjectBase,\n  SceneObjectState,\n  SceneQueryRunner,\n  SceneRefreshPicker,\n  SceneTimePicker,\n  SceneTimeRange,\n  SceneTimeRangeLike,\n  SceneTimeRangeState,\n  VariableDependencyConfig,\n} from '@grafana/scenes';\nimport { IconButton, useStyles2 } from '@grafana/ui';\nimport { SceneTimePickerWithoutSync } from '@shared/components/SceneTimePickerWithoutSync/SceneTimePickerWithoutSync';\nimport { getProfileMetric, ProfileMetricId } from '@shared/infrastructure/profile-metrics/getProfileMetric';\nimport { omit } from 'lodash';\nimport React from 'react';\n\nimport { buildTimeRange } from '../../../../domain/buildTimeRange';\nimport { FiltersVariable } from '../../../../domain/variables/FiltersVariable/FiltersVariable';\nimport { formatSingleSeriesDisplayName } from '../../../../helpers/formatSingleSeriesDisplayName';\nimport { getSceneVariableValue } from '../../../../helpers/getSceneVariableValue';\nimport { getSeriesStatsValue } from '../../../../infrastructure/helpers/getSeriesStatsValue';\nimport { getProfileMetricLabel } from '../../../../infrastructure/series/helpers/getProfileMetricLabel';\nimport { PanelType } from '../../../SceneByVariableRepeaterGrid/components/ScenePanelTypeSwitcher';\nimport { addRefId, addStats } from '../../../SceneByVariableRepeaterGrid/infrastructure/data-transformations';\nimport { SceneLabelValuesTimeseries } from '../../../SceneLabelValuesTimeseries/SceneLabelValuesTimeseries';\nimport { CompareTarget } from '../../domain/types';\nimport { Preset } from '../ScenePresetsPicker/ScenePresetsPicker';\nimport {\n  SceneTimeRangeWithAnnotations,\n  TimeRangeWithAnnotationsMode,\n} from './components/SceneTimeRangeWithAnnotations';\nimport {\n  SwitchTimeRangeSelectionModeAction,\n  TimerangeSelectionMode,\n} from './domain/actions/SwitchTimeRangeSelectionModeAction';\nimport { EventEnableSyncTimeRanges } from './domain/events/EventEnableSyncTimeRanges';\nimport { EventSwitchTimerangeSelectionMode } from './domain/events/EventSwitchTimerangeSelectionMode';\nimport { EventSyncRefresh } from './domain/events/EventSyncRefresh';\nimport { EventSyncTimeRanges } from './domain/events/EventSyncTimeRanges';\nimport { RangeAnnotation } from './domain/RangeAnnotation';\nimport { buildCompareTimeSeriesQueryRunner } from './infrastructure/buildCompareTimeSeriesQueryRunner';\nimport { BASELINE_COLORS, COMPARISON_COLORS } from './ui/colors';\n\nconst ONE_DAY_IN_MS = 24 * 60 * 60 * 1000;\n\ninterface SceneComparePanelState extends SceneObjectState {\n  target: CompareTarget;\n  filterKey: 'filtersBaseline' | 'filtersComparison';\n  title: string;\n  color: string;\n  timePicker: SceneTimePicker;\n  refreshPicker: SceneRefreshPicker;\n  $timeRange: SceneTimeRange;\n  timeseriesPanel: SceneLabelValuesTimeseries;\n  timeRangeSyncEnabled: boolean;\n  lastSyncedStepSec?: number;\n}\n\nexport class SceneComparePanel extends SceneObjectBase<SceneComparePanelState> {\n  protected _variableDependency = new VariableDependencyConfig(this, {\n    variableNames: ['profileMetricId'],\n    onReferencedVariableValueChanged: () => {\n      this.state.timeseriesPanel.updateItem({ label: this.buildTimeseriesTitle() });\n    },\n  });\n\n  constructor({\n    target,\n    useAncestorTimeRange,\n    clearDiffRange,\n    filters,\n  }: {\n    target: SceneComparePanelState['target'];\n    useAncestorTimeRange: boolean;\n    clearDiffRange: boolean;\n    filters: AdHocVariableFilter[];\n  }) {\n    const filterKey = target === CompareTarget.BASELINE ? 'filtersBaseline' : 'filtersComparison';\n    const title = target === CompareTarget.BASELINE ? 'Baseline' : 'Comparison';\n    const color =\n      target === CompareTarget.BASELINE ? BASELINE_COLORS.COLOR.toString() : COMPARISON_COLORS.COLOR.toString();\n\n    super({\n      key: `${target}-panel`,\n      target,\n      filterKey,\n      title,\n      color,\n      $timeRange: new SceneTimeRange({ key: `${target}-panel-timerange`, ...buildTimeRange('now-1h', 'now') }),\n      timePicker: new SceneTimePickerWithoutSync({ isOnCanvas: true }),\n      refreshPicker: new SceneRefreshPicker({ isOnCanvas: true }),\n      timeseriesPanel: SceneComparePanel.buildTimeSeriesPanel({ target, filterKey, title, color }),\n      timeRangeSyncEnabled: false,\n    });\n\n    this.addActivationHandler(this.onActivate.bind(this, useAncestorTimeRange, clearDiffRange, filters));\n  }\n\n  onActivate(useAncestorTimeRange: boolean, clearDiffRange: boolean, filters: AdHocVariableFilter[]) {\n    const { $timeRange, timeseriesPanel, filterKey } = this.state;\n\n    if (clearDiffRange) {\n      this.setDiffRange(null);\n    }\n\n    if (useAncestorTimeRange) {\n      $timeRange.setState(omit(this.getAncestorTimeRange().state, 'key'));\n    }\n\n    if (filters.length) {\n      const filtersVariable = sceneGraph.findByKey(this, filterKey) as FiltersVariable;\n\n      filtersVariable.setState({ filters });\n    }\n\n    timeseriesPanel.updateItem({ label: this.buildTimeseriesTitle() });\n\n    const eventSub = this.subscribeToEvents();\n\n    return () => {\n      eventSub.unsubscribe();\n    };\n  }\n\n  static buildTimeSeriesPanel({ target, filterKey, title, color }: any): SceneLabelValuesTimeseries {\n    const timeseriesPanel: SceneLabelValuesTimeseries = new SceneLabelValuesTimeseries({\n      item: {\n        index: 0,\n        value: target,\n        label: '',\n        queryRunnerParams: {},\n        panelType: PanelType.TIMESERIES,\n      },\n      data: new SceneDataTransformer({\n        $data: buildCompareTimeSeriesQueryRunner({ filterKey }),\n        transformations: [addRefId, addStats],\n      }),\n      overrides: (series: DataFrame[]) => SceneComparePanel.buildSeriesOverrides(series, color),\n      headerActions: () => [new SwitchTimeRangeSelectionModeAction()],\n    });\n\n    SceneComparePanel.configureTimeRange(timeseriesPanel, target, title);\n    return timeseriesPanel;\n  }\n\n  private static buildSeriesOverrides(series: DataFrame[], color: string): Array<{ matcher: any; properties: any[] }> {\n    return series.map((s) => {\n      const metricField = s.fields[1];\n      const allValuesSum = getSeriesStatsValue(s, 'allValuesSum') || 0;\n\n      const properLabel = SceneComparePanel.getProperLabel(s);\n      const total = SceneComparePanel.formatTotalValue(allValuesSum, metricField.config.unit || 'short');\n\n      const properties = [\n        {\n          id: 'displayName',\n          value: `${properLabel} = ${total}`,\n        },\n        {\n          id: 'color',\n          value: { mode: 'fixed', fixedColor: color },\n        },\n      ];\n\n      return {\n        matcher: { id: FieldMatcherID.byFrameRefID, options: s.refId },\n        properties,\n      };\n    });\n  }\n\n  private static getProperLabel(s: DataFrame): string {\n    const displayNameWithLabel = formatSingleSeriesDisplayName('', s);\n    const labelMatch = displayNameWithLabel.match(/^(avg|total)/);\n    return labelMatch ? labelMatch[1] : 'total';\n  }\n\n  private static formatTotalValue(allValuesSum: number, displayUnit: string): string {\n    const safeDisplayUnit = displayUnit || 'short';\n    const formattedValue = getValueFormat(safeDisplayUnit)(allValuesSum);\n\n    return `${formattedValue.text}${formattedValue.suffix}`;\n  }\n\n  private static configureTimeRange(timeseriesPanel: SceneLabelValuesTimeseries, target: string, title: string) {\n    timeseriesPanel.state.body.setState({\n      $timeRange: new SceneTimeRangeWithAnnotations({\n        key: `${target}-annotation-timerange`,\n        mode: TimeRangeWithAnnotationsMode.ANNOTATIONS,\n        annotationColor:\n          target === CompareTarget.BASELINE ? BASELINE_COLORS.OVERLAY.toString() : COMPARISON_COLORS.OVERLAY.toString(),\n        annotationTitle: `${title} flame graph range`,\n      }),\n    });\n  }\n\n  static getDiffRange(\n    timeseriesPanel: SceneLabelValuesTimeseries\n  ): [number | undefined, number | undefined, string | undefined] {\n    let diffFrom: number | undefined;\n    let diffTo: number | undefined;\n\n    const annotation = timeseriesPanel.state.body.state.$data?.state.data?.annotations?.[0] as RangeAnnotation;\n\n    annotation?.fields.some(({ name, values }) => {\n      diffFrom = name === 'time' ? values[0] : diffFrom;\n      diffTo = name === 'timeEnd' ? values[0] : diffTo;\n      return diffFrom && diffTo;\n    });\n\n    return [diffFrom, diffTo, timeseriesPanel.state.$timeRange?.state.timeZone];\n  }\n\n  protected getAncestorTimeRange(): SceneTimeRangeLike {\n    if (!this.parent || !this.parent.parent) {\n      throw new Error(typeof this + ' must be used within $timeRange scope');\n    }\n\n    return sceneGraph.getTimeRange(this.parent.parent);\n  }\n\n  subscribeToEvents() {\n    const { target, timeseriesPanel, $timeRange } = this.state;\n\n    const $annotationTimeRange = timeseriesPanel.state.body.state.$timeRange as SceneTimeRangeWithAnnotations;\n\n    const switchSub = this.subscribeToEvent(EventSwitchTimerangeSelectionMode, (event) => {\n      // this triggers a timeseries request to the API\n      // TODO: caching?\n      $annotationTimeRange.setState({\n        mode:\n          event.payload.mode === TimerangeSelectionMode.FLAMEGRAPH\n            ? TimeRangeWithAnnotationsMode.ANNOTATIONS\n            : TimeRangeWithAnnotationsMode.DEFAULT,\n      });\n    });\n\n    const annotationTimeRangeSub = $annotationTimeRange.subscribeToState((newState, prevState) => {\n      if (this.state.timeRangeSyncEnabled && newState.annotationTimeRange !== prevState.annotationTimeRange) {\n        this.publishEvent(\n          new EventSyncTimeRanges({ source: target, annotationTimeRange: newState.annotationTimeRange }),\n          true\n        );\n      }\n    });\n\n    const timeRangeSub = $timeRange.subscribeToState((newState, prevState) => {\n      if (newState.from !== prevState.from || newState.to !== prevState.to) {\n        this.updateTitle('');\n\n        if (this.state.timeRangeSyncEnabled) {\n          this.publishEvent(new EventSyncTimeRanges({ source: target, timeRange: newState }), true);\n        }\n      }\n    });\n\n    // Subscribe to data changes for step synchronization\n    const dataSub = timeseriesPanel.state.body.state.$data?.subscribeToState((newState) => {\n      if (newState.data?.state === 'Done' && newState.data.series?.length) {\n        this.syncStepSizeWithSibling(newState.data.series);\n      }\n    });\n\n    return {\n      unsubscribe() {\n        timeRangeSub.unsubscribe();\n        annotationTimeRangeSub.unsubscribe();\n        switchSub.unsubscribe();\n        dataSub?.unsubscribe();\n      },\n    };\n  }\n\n  buildTimeseriesTitle() {\n    const profileMetricId = getSceneVariableValue(this, 'profileMetricId');\n    const { description } = getProfileMetric(profileMetricId as ProfileMetricId);\n    return description || getProfileMetricLabel(profileMetricId);\n  }\n\n  useDiffTimeRange() {\n    return (this.state.timeseriesPanel.state.body.state.$timeRange as SceneTimeRangeWithAnnotations).useState();\n  }\n\n  applyPreset({ from, to, diffFrom, diffTo, label }: Preset) {\n    this.setDiffRange({ from: diffFrom, to: diffTo });\n\n    this.setTimeRange(buildTimeRange(from, to));\n\n    this.updateTitle(label);\n  }\n\n  setTimeRange(newTimeRange: SceneTimeRangeState) {\n    const { from, to } = this.state.$timeRange.state.value;\n\n    if (!from.isSame(newTimeRange.value.from) || !to.isSame(newTimeRange.value.to)) {\n      this.state.$timeRange.setState({ from: newTimeRange.from, to: newTimeRange.to, value: newTimeRange.value });\n    }\n  }\n\n  setDiffRange(options: { from: string; to: string } | null) {\n    const $diffTimeRange = this.state.timeseriesPanel.state.body.state.$timeRange as SceneTimeRangeWithAnnotations;\n\n    if (options === null) {\n      $diffTimeRange.nullifyAnnotationTimeRange();\n      return;\n    }\n\n    const { annotationTimeRange } = $diffTimeRange.state;\n    const newAnnotationTimeRange = $diffTimeRange.buildAnnotationTimeRange(options.from, options.to);\n\n    if (\n      !annotationTimeRange.from.isSame(newAnnotationTimeRange.from) ||\n      !annotationTimeRange.to.isSame(newAnnotationTimeRange.to)\n    ) {\n      $diffTimeRange.setAnnotationTimeRange(newAnnotationTimeRange, true);\n    }\n  }\n\n  /**\n   * This function is responsible for automatically selecting half of the time range (from the time picker) that will be used to build the diff flame graph\n   * For the baseline panel, the leftmost part, for the comparison one, the rightmost part.\n   * In the future, we might want to be smarter and provides a way to select (e.g.) the region with the lowest resource consumption on the baseline panel vs\n   * the region with the highest consumption on the comparison panel.\n   */\n  autoSelectDiffRange(selectWholeRange: boolean) {\n    const { $timeRange, target } = this.state;\n    const { from, to } = $timeRange.state.value;\n\n    this.updateTitle('');\n\n    if (selectWholeRange) {\n      this.setDiffRange({ from: from.toISOString(), to: to.toISOString() });\n      return;\n    }\n\n    const diff = to.diff(from);\n\n    // ensure that we don't kill the backend when selecting long periods like 7d\n    const range = Math.min(Math.round(diff * 0.25), ONE_DAY_IN_MS);\n\n    if (target === CompareTarget.BASELINE) {\n      // we have to create a new instance because add() mutates the original one\n      this.setDiffRange({ from: from.toISOString(), to: dateTime(from).add(range).toISOString() });\n    } else {\n      // we have to create a new instance because subtract() mutates the original one\n      this.setDiffRange({ from: dateTime(to).subtract(range).toISOString(), to: to.toISOString() });\n    }\n  }\n\n  updateTitle(label = '') {\n    const title = this.state.target === CompareTarget.BASELINE ? 'Baseline' : 'Comparison';\n    const newTitle = label ? `${title} (${label})` : title;\n\n    this.setState({ title: newTitle });\n  }\n\n  onClickTimeRangeSync = () => {\n    const { target, timeRangeSyncEnabled, $timeRange, timeseriesPanel } = this.state;\n    const $annotationTimeRange = timeseriesPanel.state.body.state.$timeRange as SceneTimeRangeWithAnnotations;\n\n    this.publishEvent(\n      new EventEnableSyncTimeRanges({\n        source: target,\n        enable: !timeRangeSyncEnabled,\n        timeRange: $timeRange.state,\n        annotationTimeRange: $annotationTimeRange.state.annotationTimeRange,\n      }),\n      true\n    );\n  };\n\n  toggleTimeRangeSync(timeRangeSyncEnabled: boolean) {\n    this.setState({ timeRangeSyncEnabled });\n  }\n\n  onClickRefresh = () => {\n    this.publishEvent(new EventSyncRefresh({ source: this.state.target }), true);\n  };\n\n  refreshTimeseries() {\n    this.state.$timeRange.onRefresh();\n  }\n\n  private syncStepSizeWithSibling(myData: DataFrame[]) {\n    const siblingPanel = this.getSiblingPanel();\n    if (!siblingPanel) {\n      return;\n    }\n\n    const siblingData = this.getSiblingData(siblingPanel);\n    if (!siblingData?.length) {\n      return;\n    }\n\n    this.performStepSynchronization(myData, siblingData);\n  }\n\n  private getSiblingPanel(): SceneComparePanel | null {\n    if (!this.parent) {\n      return null;\n    }\n\n    const parentState = 'state' in this.parent ? this.parent.state : this.parent;\n    if (!('baselinePanel' in parentState && 'comparisonPanel' in parentState)) {\n      return null;\n    }\n\n    return this.state.target === CompareTarget.BASELINE\n      ? (parentState.comparisonPanel as SceneComparePanel)\n      : (parentState.baselinePanel as SceneComparePanel);\n  }\n\n  private getSiblingData(siblingPanel: SceneComparePanel): DataFrame[] | null {\n    return siblingPanel.state.timeseriesPanel.state.body.state.$data?.state.data?.series || null;\n  }\n\n  private performStepSynchronization(myData: DataFrame[], siblingData: DataFrame[]) {\n    const myStep = this.extractStepDuration(myData);\n    const siblingStep = this.extractStepDuration(siblingData);\n\n    if (myStep && siblingStep && Math.abs(myStep - siblingStep) > 0.001) {\n      const targetStep = Math.max(myStep, siblingStep); // Use highest step (lowest resolution) to reduce data points\n\n      if (this.state.lastSyncedStepSec !== targetStep) {\n        this.setState({ lastSyncedStepSec: targetStep });\n        this.updateQueryStep(targetStep);\n      }\n    }\n  }\n\n  private extractStepDuration(data: DataFrame[]): number | null {\n    if (!data?.length) {\n      return null;\n    }\n\n    const timeField = data[0].fields.find((f) => f.type === 'time');\n    if (!timeField?.values?.length || timeField.values.length < 2) {\n      return null;\n    }\n\n    const times = timeField.values as number[];\n    const stepDurationMs = times[1] - times[0];\n    const stepDurationSec = stepDurationMs / 1000;\n    return stepDurationSec;\n  }\n\n  private updateQueryStep(targetStepSec: number) {\n    const queryRunner = this.state.timeseriesPanel.state.body.state.$data?.state.$data as SceneQueryRunner;\n    if (!queryRunner?.setState || !queryRunner?.runQueries) {\n      return;\n    }\n\n    const currentQueries = queryRunner.state.queries;\n\n    const updatedQueries = currentQueries.map((query: any) => ({\n      ...query,\n      step: targetStepSec,\n    }));\n\n    queryRunner.setState({ queries: updatedQueries });\n    queryRunner.runQueries();\n  }\n\n  public static Component = ({ model }: SceneComponentProps<SceneComparePanel>) => {\n    const {\n      target,\n      color,\n      title,\n      timeseriesPanel: timeseries,\n      timePicker,\n      refreshPicker,\n      filterKey,\n      timeRangeSyncEnabled,\n    } = model.useState();\n\n    const styles = useStyles2(getStyles, color);\n\n    const filtersVariable = sceneGraph.findByKey(model, filterKey) as FiltersVariable;\n\n    return (\n      <div className={styles.panel} data-testid={`panel-${target}`}>\n        <div className={styles.panelHeader}>\n          <h6>\n            <div className={styles.colorCircle} />\n            {title}\n          </h6>\n\n          <div className={styles.timeControls}>\n            <timePicker.Component model={timePicker} />\n\n            <div onClick={model.onClickRefresh}>\n              <refreshPicker.Component model={refreshPicker} />\n            </div>\n\n            <IconButton\n              className={cx(styles.syncButton, timeRangeSyncEnabled && 'active')}\n              name=\"link\"\n              aria-label={timeRangeSyncEnabled ? 'Unsync time ranges' : 'Sync time ranges'}\n              tooltip={timeRangeSyncEnabled ? 'Unsync time ranges' : 'Sync time ranges'}\n              onClick={model.onClickTimeRangeSync}\n            />\n          </div>\n        </div>\n\n        <div className={styles.filter}>\n          <filtersVariable.Component model={filtersVariable} />\n        </div>\n\n        <div className={styles.timeseries}>{timeseries && <timeseries.Component model={timeseries} />}</div>\n      </div>\n    );\n  };\n}\n\nconst getStyles = (theme: GrafanaTheme2, color: string) => ({\n  panel: css`\n    background-color: ${theme.colors.background.primary};\n    padding: ${theme.spacing(1)} ${theme.spacing(1)} 0 ${theme.spacing(1)};\n    border: 1px solid ${theme.colors.border.weak};\n    border-radius: 2px;\n  `,\n  panelHeader: css`\n    display: flex;\n    justify-content: space-between;\n    align-items: flex-start;\n    margin-bottom: ${theme.spacing(2)};\n    flex-wrap: wrap;\n\n    & > h6 {\n      font-size: 15px;\n      height: 32px;\n      line-height: 32px;\n      margin: 0 ${theme.spacing(1)} 0 0;\n    }\n  `,\n  colorCircle: css`\n    display: inline-block;\n    background-color: ${color};\n    border-radius: 50%;\n    width: 9px;\n    height: 9px;\n    margin-right: 6px;\n  `,\n  timeControls: css`\n    display: flex;\n    justify-content: flex-end;\n    gap: 4px;\n  `,\n  syncButton: css`\n    z-index: unset;\n    padding: ${theme.spacing(0, 1)};\n    margin: 0;\n    background: ${theme.colors.secondary.main};\n    border: 1px solid ${theme.colors.secondary.border};\n    border-radius: ${theme.shape.radius.default};\n\n    &:hover {\n      background: ${theme.colors.secondary.shade};\n    }\n\n    &.active {\n      color: ${theme.colors.primary.text};\n      border: 1px solid ${theme.colors.primary.text};\n    }\n  `,\n  filter: css`\n    display: flex;\n    margin-bottom: ${theme.spacing(3)};\n  `,\n  timeseries: css`\n    height: 200px;\n\n    & [data-viz-panel-key] > * {\n      border: 0 none;\n    }\n\n    & [data-viz-panel-key] [data-testid='uplot-main-div'] {\n      cursor: crosshair;\n    }\n  `,\n});\n","import { useState } from 'react';\n\ntype PanelId = 'ai' | 'function-details' | null;\n\ntype OnOpenHandler = () => void;\n\ntype SidePanel = {\n  onOpen: (handler: OnOpenHandler) => void;\n  isOpen: (panelId: PanelId) => boolean;\n  open: (panelId: PanelId) => void;\n  close: () => void;\n};\n\nexport function useToggleSidePanel(): SidePanel {\n  const [openPanelId, setOpenPanelId] = useState<PanelId>(null);\n  const [onOpenHandler, setOnOpenHandler] = useState<OnOpenHandler>();\n\n  return {\n    onOpen(handler: OnOpenHandler) {\n      setOnOpenHandler(() => handler);\n    },\n    isOpen(panelId: PanelId) {\n      return panelId === openPanelId;\n    },\n    open(panelId: PanelId) {\n      setOpenPanelId(panelId);\n      onOpenHandler?.();\n    },\n    close() {\n      setOpenPanelId(null);\n    },\n  };\n}\n","export type PluginSettings = {\n  collapsedFlamegraphs: boolean;\n  maxNodes: number;\n  enableFlameGraphDotComExport: boolean;\n  enableFunctionDetails: boolean;\n  enableMetricsFromProfiles?: boolean;\n};\n\nexport const DEFAULT_SETTINGS: PluginSettings = Object.freeze({\n  collapsedFlamegraphs: false,\n  maxNodes: 16384,\n  enableFlameGraphDotComExport: true,\n  enableFunctionDetails: true,\n  enableMetricsFromProfiles: false,\n});\n","import { ApiClient } from '../http/ApiClient';\nimport { PluginSettings } from './PluginSettings';\n\ntype ApiResponse = {\n  settings: Array<{ name: string; value: string }>;\n};\n\nclass SettingsApiClient extends ApiClient {\n  static PLUGIN_SETTING_NAME = 'pluginSettings';\n\n  async get(): Promise<PluginSettings> {\n    return super\n      .fetch('/settings.v1.SettingsService/Get', { method: 'POST', body: JSON.stringify({}) })\n      .then((response) => response.json())\n      .then((json: ApiResponse) => {\n        const setting = json.settings?.find(({ name }) => name === SettingsApiClient.PLUGIN_SETTING_NAME);\n\n        if (!setting) {\n          return {};\n        }\n\n        return JSON.parse(setting.value);\n      });\n  }\n\n  async set(newSettings: PluginSettings) {\n    return super\n      .fetch('/settings.v1.SettingsService/Set', {\n        method: 'POST',\n        body: JSON.stringify({\n          setting: {\n            name: SettingsApiClient.PLUGIN_SETTING_NAME,\n            value: JSON.stringify(newSettings),\n          },\n        }),\n      })\n      .then((response) => response.json());\n  }\n}\n\nexport const useSettingsApiClient = () => {\n  return new SettingsApiClient();\n};\n","import { ApiClient } from '@shared/infrastructure/http/ApiClient';\nimport { useMutation, useQuery } from '@tanstack/react-query';\n\nimport { DEFAULT_SETTINGS, PluginSettings } from './PluginSettings';\nimport { useSettingsApiClient } from './settingsApiClient';\n\ntype FetchParams = {\n  enabled?: boolean;\n};\n\ntype FetchResponse = {\n  isFetching: boolean;\n  error: Error | null;\n  settings?: PluginSettings;\n  mutate: (newSettings: PluginSettings) => Promise<void>;\n};\n\n/**\n * Fetches the plugin settings and, if none/only some have been stored previously, returns adequate default values for the rest of the application\n */\nexport function useFetchPluginSettings({ enabled }: FetchParams = {}): FetchResponse {\n  const settingsApiClient = useSettingsApiClient();\n\n  const { isFetching, error, data } = useQuery({\n    enabled,\n    queryKey: ['settings', 'ds-uid-' + ApiClient.selectDefaultDataSource().uid],\n    queryFn: () =>\n      settingsApiClient.get().then(\n        (json) =>\n          // provide defaults if any value comes null or undefined from the API (which can be the case ;))\n          Object.keys(DEFAULT_SETTINGS).reduce((acc, key) => {\n            acc[key] ??= DEFAULT_SETTINGS[key as keyof PluginSettings]; // TS luv :man_shrug:\n            return acc;\n          }, json as Record<string, any>) as PluginSettings // TS luv :man_shrug:\n      ),\n  });\n\n  const { mutateAsync: mutate } = useMutation({\n    mutationFn: (newSettings: PluginSettings) => settingsApiClient.set(newSettings),\n    networkMode: 'always',\n  });\n\n  return {\n    isFetching,\n    error: settingsApiClient.isAbortError(error) ? null : error,\n    settings: data,\n    mutate,\n  };\n}\n","import { Alert, AlertVariant } from '@grafana/ui';\nimport { ErrorContext, logger } from '@shared/infrastructure/tracking/logger';\nimport React from 'react';\n\ntype InlineBannerProps = {\n  severity: AlertVariant;\n  title: string;\n  message?: string | React.ReactNode;\n  error?: Error;\n  errorContext?: ErrorContext;\n};\n\nexport function InlineBanner({ severity, title, message, error, errorContext }: InlineBannerProps) {\n  if (error) {\n    logger.error(error, errorContext);\n  }\n\n  return (\n    <Alert title={title} severity={severity}>\n      {error && (\n        <>\n          {error.message}\n          <br />\n        </>\n      )}\n      {message}\n    </Alert>\n  );\n}\n","import React, { useEffect, useState } from 'react';\n\ninterface Props {\n  children: React.ReactNode;\n  delay: number;\n}\n\n/**\n * Delay the rendering of the children by N amount of milliseconds\n */\nexport function DelayRender({ children, delay }: Props) {\n  const [shouldRender, setShouldRender] = useState(false);\n  useEffect(() => {\n    window.setTimeout(() => {\n      setShouldRender(true);\n    }, delay);\n  }, [children, delay]);\n\n  return <>{shouldRender ? children : null}</>;\n}\n","import { cx } from '@emotion/css';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Dropdown, ToolbarButton } from '@grafana/ui';\nimport React, { ReactElement, useCallback } from 'react';\n\ntype TooltipPlacement =\n  | 'auto-start'\n  | 'auto'\n  | 'auto-end'\n  | 'top-start'\n  | 'top'\n  | 'top-end'\n  | 'right-start'\n  | 'right'\n  | 'right-end'\n  | 'bottom-end'\n  | 'bottom'\n  | 'bottom-start'\n  | 'left-end'\n  | 'left'\n  | 'left-start';\n\ninterface PanelMenuProps {\n  menu: ReactElement | (() => ReactElement);\n  menuButtonClass?: string;\n  dragClassCancel?: string;\n  title?: string;\n  placement?: TooltipPlacement;\n  offset?: [number, number];\n  onVisibleChange?: (state: boolean) => void;\n  onOpenMenu?: () => void;\n}\n\nexport function PanelMenu({\n  menu,\n  title,\n  placement = 'bottom',\n  offset,\n  dragClassCancel,\n  menuButtonClass,\n  onVisibleChange,\n  onOpenMenu,\n}: PanelMenuProps) {\n  const testId = title ? selectors.components.Panels.Panel.menu(title) : `panel-menu-button`;\n\n  const handleVisibility = useCallback(\n    (show: boolean) => {\n      if (show && onOpenMenu) {\n        onOpenMenu();\n      }\n      return onVisibleChange;\n    },\n    [onOpenMenu, onVisibleChange]\n  );\n\n  const label = title ? `Menu for panel with title ${title}` : `Menu for panel with no title`;\n\n  return (\n    <Dropdown overlay={menu} placement={placement} offset={offset} onVisibleChange={handleVisibility}>\n      <ToolbarButton\n        aria-label={label}\n        title=\"Menu\"\n        icon=\"ellipsis-v\"\n        iconSize=\"md\"\n        narrow\n        data-testid={testId}\n        className={cx(menuButtonClass, dragClassCancel)}\n      />\n    </Dropdown>\n  );\n}\n","import { css, cx } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { selectors as e2eSelectors } from '@grafana/e2e-selectors';\nimport { Icon, useStyles2 } from '@grafana/ui';\nimport React, { ReactElement, useCallback, useRef, useState } from 'react';\n\nimport { PanelMenu } from './PanelMenu';\n\ninterface Props {\n  children?: React.ReactNode;\n  menu?: ReactElement | (() => ReactElement);\n  title?: string;\n  offset?: number;\n  dragClass?: string;\n  onOpenMenu?: () => void;\n}\n\nexport function HoverWidget({ menu, title, dragClass, children, offset = -32, onOpenMenu }: Props) {\n  const styles = useStyles2(getStyles);\n  const draggableRef = useRef<HTMLDivElement>(null);\n  const selectors = e2eSelectors.components.Panels.Panel.HoverWidget;\n  // Capture the pointer to keep the widget visible while dragging\n  const onPointerDown = useCallback((e: React.PointerEvent<HTMLDivElement>) => {\n    draggableRef.current?.setPointerCapture(e.pointerId);\n  }, []);\n\n  const onPointerUp = useCallback((e: React.PointerEvent<HTMLDivElement>) => {\n    draggableRef.current?.releasePointerCapture(e.pointerId);\n  }, []);\n\n  const [menuOpen, setMenuOpen] = useState(false);\n\n  if (children === undefined || React.Children.count(children) === 0) {\n    return null;\n  }\n\n  return (\n    <div\n      className={cx(styles.container, { 'show-on-hover': !menuOpen })}\n      style={{ top: `${offset}px` }}\n      data-testid={selectors.container}\n    >\n      {dragClass && (\n        <div\n          className={cx(styles.square, styles.draggable, dragClass)}\n          onPointerDown={onPointerDown}\n          onPointerUp={onPointerUp}\n          ref={draggableRef}\n          data-testid={selectors.dragIcon}\n        >\n          <Icon name=\"expand-arrows\" className={styles.draggableIcon} />\n        </div>\n      )}\n      {!title && <h6 className={cx(styles.untitled, { [styles.draggable]: !!dragClass }, dragClass)}>Untitled</h6>}\n      {children}\n      {menu && (\n        <PanelMenu\n          menu={menu}\n          title={title}\n          placement=\"bottom\"\n          menuButtonClass={styles.menuButton}\n          onVisibleChange={setMenuOpen}\n          onOpenMenu={onOpenMenu}\n        />\n      )}\n    </div>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    hidden: css({\n      visibility: 'hidden',\n      opacity: '0',\n    }),\n    container: css({\n      label: 'hover-container-widget',\n      transition: `all .1s linear`,\n      display: 'flex',\n      position: 'absolute',\n      zIndex: 1,\n      right: 0,\n      boxSizing: 'content-box',\n      alignItems: 'center',\n      background: theme.colors.background.secondary,\n      color: theme.colors.text.primary,\n      border: `1px solid ${theme.colors.border.weak}`,\n      borderRadius: theme.shape.radius.default,\n      height: theme.spacing(4),\n      boxShadow: theme.shadows.z1,\n    }),\n    square: css({\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      width: theme.spacing(4),\n      height: '100%',\n    }),\n    draggable: css({\n      cursor: 'move',\n      // mobile do not support draggable panels\n      [theme.breakpoints.down('md')]: {\n        display: 'none',\n      },\n    }),\n    menuButton: css({\n      // Background and border are overriden when topnav toggle is disabled\n      background: 'inherit',\n      border: 'none',\n      '&:hover': {\n        background: theme.colors.secondary.main,\n      },\n    }),\n    untitled: css({\n      color: theme.colors.text.disabled,\n      fontStyle: 'italic',\n      padding: theme.spacing(0, 1),\n      marginBottom: 0,\n    }),\n    draggableIcon: css({\n      transform: 'rotate(45deg)',\n      color: theme.colors.text.secondary,\n      '&:hover': {\n        color: theme.colors.text.primary,\n      },\n    }),\n  };\n}\n","import { css, CSSObject, cx } from '@emotion/css';\nimport { GrafanaTheme2, LinkModel, LinkTarget } from '@grafana/data';\nimport { Button, useStyles2 } from '@grafana/ui';\nimport React, { forwardRef } from 'react';\n\ntype TitleItemProps = {\n  className?: string;\n  children: React.ReactNode;\n  onClick?: LinkModel['onClick'];\n  href?: string;\n  target?: LinkTarget;\n  title?: string;\n};\n\ntype TitleItemElement = HTMLAnchorElement & HTMLButtonElement;\n\nexport const TitleItem = forwardRef<TitleItemElement, TitleItemProps>(\n  ({ className, children, href, onClick, target, title, ...rest }, ref) => {\n    const styles = useStyles2(getStyles);\n\n    if (href) {\n      return (\n        <a\n          ref={ref}\n          href={href}\n          onClick={onClick}\n          target={target}\n          title={title}\n          className={cx(styles.linkItem, className)}\n          {...rest}\n        >\n          {children}\n        </a>\n      );\n    } else if (onClick) {\n      return (\n        <Button ref={ref} className={cx(styles.item, className)} variant=\"secondary\" fill=\"text\" onClick={onClick}>\n          {children}\n        </Button>\n      );\n    } else {\n      return (\n        <span ref={ref} className={cx(styles.item, className)} {...rest}>\n          {children}\n        </span>\n      );\n    }\n  }\n);\n\nTitleItem.displayName = 'TitleItem';\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  const item = css({\n    color: `${theme.colors.text.secondary}`,\n    label: 'panel-header-item',\n    cursor: 'auto',\n    border: 'none',\n    borderRadius: `${theme.shape.radius.default}`,\n    padding: `${theme.spacing(0, 1)}`,\n    height: `${theme.spacing(theme.components.panel.headerHeight)}`,\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n\n    '&:focus, &:focus-visible': {\n      ...getFocusStyles(theme),\n      zIndex: 1,\n    },\n    '&: focus:not(:focus-visible)': {\n      outline: 'none',\n      boxShadow: `none`,\n    },\n\n    '&:hover ': {\n      boxShadow: `${theme.shadows.z1}`,\n      background: `${theme.colors.background.secondary}`,\n      color: `${theme.colors.text.primary}`,\n    },\n  });\n\n  return {\n    item,\n    linkItem: cx(item, css({ cursor: 'pointer' })),\n  };\n};\n\nfunction getFocusStyles(theme: GrafanaTheme2): CSSObject {\n  return {\n    outline: '2px dotted transparent',\n    outlineOffset: '2px',\n    boxShadow: `0 0 0 2px ${theme.colors.background.canvas}, 0 0 0px 4px ${theme.colors.primary.main}`,\n    transitionTimingFunction: `cubic-bezier(0.19, 1, 0.22, 1)`,\n    transitionDuration: '0.2s',\n    transitionProperty: 'outline, outline-offset, box-shadow',\n  };\n}\n","import { css, cx } from '@emotion/css';\nimport { Icon, Tooltip, useStyles2 } from '@grafana/ui';\nimport React from 'react';\n\nimport { TitleItem } from './TitleItem';\n\ninterface Props {\n  description: string | (() => string);\n  className?: string;\n}\n\nexport function PanelDescription({ description, className }: Props) {\n  const styles = useStyles2(getStyles);\n\n  const getDescriptionContent = () => {\n    const panelDescription = typeof description === 'function' ? description() : description;\n\n    return (\n      <div className=\"panel-info-content markdown-html\">\n        <div dangerouslySetInnerHTML={{ __html: panelDescription }} />\n      </div>\n    );\n  };\n\n  return description !== '' ? (\n    <Tooltip interactive content={getDescriptionContent}>\n      <TitleItem className={cx(className, styles.description)}>\n        <Icon name=\"info-circle\" size=\"md\" />\n      </TitleItem>\n    </Tooltip>\n  ) : null;\n}\n\nconst getStyles = () => {\n  return {\n    description: css({\n      code: {\n        whiteSpace: 'normal',\n        wordWrap: 'break-word',\n      },\n\n      'pre > code': {\n        display: 'block',\n      },\n    }),\n  };\n};\n","import { css } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { ToolbarButton, useStyles2 } from '@grafana/ui';\nimport React from 'react';\n\ninterface Props {\n  message?: string;\n  onClick?: (e: React.SyntheticEvent) => void;\n  ariaLabel?: string;\n}\n\nexport function PanelStatus({ message, onClick, ariaLabel = 'status' }: Props) {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <ToolbarButton\n      className={styles.buttonStyles}\n      onClick={onClick}\n      variant={'destructive'}\n      icon=\"exclamation-triangle\"\n      iconSize=\"md\"\n      tooltip={message || ''}\n      aria-label={ariaLabel}\n    />\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  const { headerHeight, padding } = theme.components.panel;\n\n  return {\n    buttonStyles: css({\n      label: 'panel-header-state-button',\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      padding: theme.spacing(padding),\n      width: theme.spacing(headerHeight),\n      height: theme.spacing(headerHeight),\n      borderRadius: theme.shape.radius.default,\n    }),\n  };\n};\n","import { css, cx } from '@emotion/css';\nimport { GrafanaTheme2, LoadingState } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Icon, LoadingBar, Tooltip, useStyles2, useTheme2 } from '@grafana/ui';\nimport React, { CSSProperties, ReactElement, ReactNode, useEffect, useRef, useState } from 'react';\n\nimport { DelayRender } from './DelayRender';\nimport { HoverWidget } from './HoverWidget';\nimport { PanelDescription } from './PanelDescription';\nimport { PanelMenu } from './PanelMenu';\nimport { PanelStatus } from './PanelStatus';\nimport { TitleItem } from './TitleItem';\n\n// This `GrafanaPanelBox` has been derived from the `PanelChrome`, which is exportable via @grafana/ui\n// This variant makes it behave more like the panel/box from Pyroscope, where css dictates the style\n// versus explicit height & width props.\n// The various files in this subdirectory are lifted from grafana/grafana, but this base component, `PanelChromeProps`\n// has been altered slightly.\n//\n// TODO Consider creating a varation of this component that can be exported from @grafana/ui.\n\n/**\n * @internal\n */\ninterface PanelChromeProps {\n  children: ReactNode;\n  padding?: PanelPadding;\n  hoverHeaderOffset?: number;\n  title?: string;\n  description?: string | (() => string);\n  titleItems?: ReactNode;\n  menu?: ReactElement | (() => ReactElement);\n  dragClass?: string;\n  dragClassCancel?: string;\n  hoverHeader?: boolean;\n  /**\n   * Use only to indicate loading or streaming data in the panel.\n   * Any other values of loadingState are ignored.\n   */\n  loadingState?: LoadingState;\n  /**\n   * Used to display status message (used for panel errors currently)\n   */\n  statusMessage?: string;\n  /**\n   * Handle opening error details view (like inspect / error tab)\n   */\n  statusMessageOnClick?: (e: React.SyntheticEvent) => void;\n  actions?: ReactNode;\n  displayMode?: 'default' | 'transparent';\n  onCancelQuery?: () => void;\n  /**\n   * callback when opening the panel menu\n   */\n  onOpenMenu?: () => void;\n}\n\n/**\n * @internal\n */\ntype PanelPadding = 'none' | 'md';\n\n/**\n * @internal\n */\nexport function GrafanaPanelBox({\n  children,\n  padding = 'md',\n  title = '',\n  description = '',\n  displayMode = 'default',\n  titleItems,\n  menu,\n  dragClass,\n  dragClassCancel,\n  hoverHeader = false,\n  hoverHeaderOffset,\n  loadingState,\n  statusMessage,\n  statusMessageOnClick,\n  actions,\n  onCancelQuery,\n  onOpenMenu,\n}: PanelChromeProps) {\n  const theme = useTheme2();\n  const styles = useStyles2(getStyles);\n\n  const [width, setWidth] = useState(0);\n  const childrenContainerRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (childrenContainerRef.current) {\n      setWidth(childrenContainerRef.current.offsetWidth);\n    }\n  }, [childrenContainerRef]);\n\n  const hasHeader = !hoverHeader;\n\n  // hover menu is only shown on hover when not on touch devices\n  const showOnHoverClass = 'show-on-hover';\n\n  const headerHeight = getHeaderHeight(theme, hasHeader);\n  const { contentStyle } = getContentStyle(padding, theme);\n\n  const headerStyles: CSSProperties = {\n    height: headerHeight,\n    cursor: dragClass ? 'move' : 'auto',\n  };\n\n  const containerStyles: CSSProperties = {};\n  if (displayMode === 'transparent') {\n    containerStyles.backgroundColor = 'transparent';\n    containerStyles.border = 'none';\n  }\n\n  const testid = title ? selectors.components.Panels.Panel.title(title) : 'Panel';\n\n  const headerContent = (\n    <>\n      {title && (\n        <h6 title={title} className={styles.title}>\n          {title}\n        </h6>\n      )}\n\n      <div className={cx(styles.titleItems, dragClassCancel)} data-testid=\"title-items-container\">\n        <PanelDescription description={description} className={dragClassCancel} />\n        {titleItems}\n      </div>\n\n      {loadingState === LoadingState.Streaming && (\n        <Tooltip content={onCancelQuery ? 'Stop streaming' : 'Streaming'}>\n          <TitleItem className={dragClassCancel} data-testid=\"panel-streaming\" onClick={onCancelQuery}>\n            <Icon name=\"circle-mono\" size=\"md\" className={styles.streaming} />\n          </TitleItem>\n        </Tooltip>\n      )}\n      {loadingState === LoadingState.Loading && onCancelQuery && (\n        <DelayRender delay={2000}>\n          <Tooltip content=\"Cancel query\">\n            <TitleItem\n              className={cx(dragClassCancel, styles.pointer)}\n              data-testid=\"panel-cancel-query\"\n              onClick={onCancelQuery}\n            >\n              <Icon name=\"sync-slash\" size=\"md\" />\n            </TitleItem>\n          </Tooltip>\n        </DelayRender>\n      )}\n      <div className={styles.rightAligned}>\n        {actions && <div className={styles.rightActions}>{itemsRenderer(actions, (item) => item)}</div>}\n      </div>\n    </>\n  );\n\n  return (\n    <div className={styles.container} style={containerStyles} data-testid={testid}>\n      <div className={styles.loadingBarContainer}>\n        {loadingState === LoadingState.Loading ? <LoadingBar width={width} ariaLabel=\"Panel loading bar\" /> : null}\n      </div>\n\n      {hoverHeader && (\n        <>\n          <HoverWidget\n            menu={menu}\n            title={title}\n            offset={hoverHeaderOffset}\n            dragClass={dragClass}\n            onOpenMenu={onOpenMenu}\n          >\n            {headerContent}\n          </HoverWidget>\n\n          {statusMessage && (\n            <div className={styles.errorContainerFloating}>\n              <PanelStatus message={statusMessage} onClick={statusMessageOnClick} ariaLabel=\"Panel status\" />\n            </div>\n          )}\n        </>\n      )}\n\n      {hasHeader && (\n        <div className={cx(styles.headerContainer, dragClass)} style={headerStyles} data-testid=\"header-container\">\n          {statusMessage && (\n            <div className={dragClassCancel}>\n              <PanelStatus message={statusMessage} onClick={statusMessageOnClick} ariaLabel=\"Panel status\" />\n            </div>\n          )}\n\n          {headerContent}\n\n          {menu && (\n            <PanelMenu\n              menu={menu}\n              title={title}\n              placement=\"bottom-end\"\n              menuButtonClass={cx(styles.menuItem, dragClassCancel, showOnHoverClass)}\n              onOpenMenu={onOpenMenu}\n            />\n          )}\n        </div>\n      )}\n\n      <div className={styles.content} style={contentStyle} ref={childrenContainerRef}>\n        {children}\n      </div>\n    </div>\n  );\n}\n\nconst itemsRenderer = (items: ReactNode[] | ReactNode, renderer: (items: ReactNode[]) => ReactNode): ReactNode => {\n  const toRender = React.Children.toArray(items).filter(Boolean);\n  return toRender.length > 0 ? renderer(toRender) : null;\n};\n\nconst getHeaderHeight = (theme: GrafanaTheme2, hasHeader: boolean) => {\n  if (hasHeader) {\n    return theme.spacing.gridSize * theme.components.panel.headerHeight;\n  }\n\n  return 0;\n};\n\nconst getContentStyle = (padding: string, theme: GrafanaTheme2) => {\n  const chromePadding = (padding === 'md' ? theme.components.panel.padding : 0) * theme.spacing.gridSize;\n\n  const contentStyle: CSSProperties = {\n    padding: chromePadding,\n  };\n\n  return { contentStyle };\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  const { background, borderColor, padding } = theme.components.panel;\n\n  return {\n    container: css({\n      label: 'panel-container',\n      backgroundColor: background,\n      border: `1px solid ${borderColor}`,\n      position: 'relative',\n      borderRadius: theme.shape.radius.default,\n      height: '100%',\n      display: 'flex',\n      flexDirection: 'column',\n\n      '.show-on-hover': {\n        visibility: 'hidden',\n        opacity: '0',\n      },\n\n      '&:focus-visible, &:hover': {\n        // only show menu icon on hover or focused panel\n        '.show-on-hover': {\n          visibility: 'visible',\n          opacity: '1',\n        },\n      },\n\n      '&:focus-visible': {\n        outline: `1px solid ${theme.colors.action.focus}`,\n      },\n\n      '&:focus-within': {\n        '.show-on-hover': {\n          visibility: 'visible',\n          opacity: '1',\n        },\n      },\n    }),\n    loadingBarContainer: css({\n      label: 'panel-loading-bar-container',\n      position: 'absolute',\n      top: 0,\n      width: '100%',\n      overflow: 'hidden',\n    }),\n    content: css({\n      label: 'panel-content',\n      flexGrow: 1,\n      //contain: 'strict',\n    }),\n    headerContainer: css({\n      label: 'panel-header',\n      display: 'flex',\n      alignItems: 'center',\n    }),\n    pointer: css({\n      cursor: 'pointer',\n    }),\n    streaming: css({\n      label: 'panel-streaming',\n      marginRight: 0,\n      color: theme.colors.success.text,\n\n      '&:hover': {\n        color: theme.colors.success.text,\n      },\n    }),\n    title: css({\n      label: 'panel-title',\n      marginBottom: 0, // override default h6 margin-bottom\n      padding: theme.spacing(0, padding),\n      textOverflow: 'ellipsis',\n      overflow: 'hidden',\n      whiteSpace: 'nowrap',\n      fontSize: theme.typography.h6.fontSize,\n      fontWeight: theme.typography.h6.fontWeight,\n    }),\n    items: css({\n      display: 'flex',\n    }),\n    item: css({\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n    }),\n    hiddenMenu: css({\n      visibility: 'hidden',\n    }),\n    menuItem: css({\n      label: 'panel-menu',\n      border: 'none',\n      background: theme.colors.secondary.main,\n      '&:hover': {\n        background: theme.colors.secondary.shade,\n      },\n    }),\n    errorContainerFloating: css({\n      label: 'error-container',\n      position: 'absolute',\n      left: 0,\n      top: 0,\n      zIndex: theme.zIndex.tooltip,\n    }),\n    rightActions: css({\n      display: 'flex',\n      padding: theme.spacing(0, padding),\n      gap: theme.spacing(1),\n    }),\n    rightAligned: css({\n      label: 'right-aligned-container',\n      marginLeft: 'auto',\n      display: 'flex',\n      alignItems: 'center',\n    }),\n    titleItems: css({\n      display: 'flex',\n      height: '100%',\n    }),\n  };\n};\n","import { css } from '@emotion/css';\nimport { GrafanaTheme2, LoadingState } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport React, { ReactNode } from 'react';\n\nimport { GrafanaPanelBox } from './GrafanaPanelBox/GrafanaPanelBox';\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  panelWrap: css`\n    margin-bottom: ${theme.spacing(1)};\n  `,\n});\n\ntype PanelProps = {\n  isLoading: boolean;\n  title?: ReactNode;\n  description?: ReactNode;\n  children: ReactNode;\n  className?: string;\n  headerActions?: ReactNode;\n  dataTestId?: string;\n};\n\nexport function Panel({\n  isLoading,\n  title,\n  description,\n  children,\n  className = '',\n  headerActions,\n  dataTestId,\n}: PanelProps) {\n  const s = useStyles2(getStyles);\n\n  const loadingState = isLoading ? LoadingState.Loading : LoadingState.Done;\n\n  return (\n    <div className={`${className} ${s.panelWrap}`} data-testid={dataTestId || 'panel'}>\n      <GrafanaPanelBox\n        loadingState={loadingState}\n        title={title as unknown as string}\n        description={description as unknown as string}\n        actions={headerActions}\n      >\n        {children}\n      </GrafanaPanelBox>\n    </div>\n  );\n}\n","import { css } from '@emotion/css';\nimport { IconName } from '@grafana/data';\nimport { Button, useStyles2 } from '@grafana/ui';\nimport { reportInteraction } from '@shared/domain/reportInteraction';\nimport React, { ReactNode } from 'react';\n\nimport { useFetchLlmPluginStatus } from './infrastructure/useFetchLlmPluginStatus';\n\ntype AIButtonProps = {\n  children: ReactNode;\n  onClick: (event: React.MouseEvent<HTMLButtonElement>) => void;\n  disabled?: boolean;\n  interactionName: 'g_pyroscope_app_explain_flamegraph_clicked' | 'g_pyroscope_app_optimize_code_clicked';\n};\n\nexport function AIButton({ children, onClick, disabled, interactionName }: AIButtonProps) {\n  const styles = useStyles2(getStyles);\n  const { isEnabled, error, isFetching } = useFetchLlmPluginStatus();\n\n  let icon: IconName = 'ai';\n  let tooltip = '';\n\n  if (isFetching) {\n    icon = 'fa fa-spinner';\n    tooltip = 'Checking the status of the Grafana LLM plugin...';\n  } else if (error) {\n    icon = 'exclamation-triangle';\n    tooltip = 'Error while checking the status of the Grafana LLM plugin!';\n  } else if (!isEnabled) {\n    icon = 'shield-exclamation';\n    tooltip = 'Grafana LLM plugin missing or not configured! Please check the plugins administration page.';\n  }\n\n  return (\n    <Button\n      className={styles.aiButton}\n      size=\"md\"\n      fill=\"text\"\n      icon={icon}\n      disabled={!isEnabled || disabled}\n      tooltip={tooltip}\n      tooltipPlacement=\"top\"\n      onClick={(event: React.MouseEvent<HTMLButtonElement>) => {\n        reportInteraction(interactionName);\n        onClick(event);\n      }}\n    >\n      {children}\n    </Button>\n  );\n}\n\nconst getStyles = () => ({\n  aiButton: css`\n    padding: 0 4px;\n  `,\n});\n","import { openai } from '@grafana/llm';\nimport { logger } from '@shared/infrastructure/tracking/logger';\nimport { useQuery } from '@tanstack/react-query';\n\nexport function useFetchLlmPluginStatus() {\n  const { data, isFetching, error } = useQuery({\n    queryKey: ['llm'],\n    queryFn: () => openai.enabled(),\n  });\n\n  if (error) {\n    logger.error(error, { info: 'Error while checking the status of the Grafana LLM plugin!' });\n  }\n\n  return { isEnabled: Boolean(data), isFetching, error };\n}\n","import { css } from '@emotion/css';\nimport { useStyles2 } from '@grafana/ui';\nimport { logger } from '@shared/infrastructure/tracking/logger';\nimport Markdown from 'markdown-to-jsx';\nimport React, { ReactNode } from 'react';\n\nimport { OpenAiReply } from '../domain/useOpenAiChatCompletions';\n\n// yeah, I know...\nconst setNativeValue = (element: Element, value: string) => {\n  const valueSetter = Object!.getOwnPropertyDescriptor(element, 'value')!.set;\n  const prototypeValueSetter = Object!.getOwnPropertyDescriptor(Object.getPrototypeOf(element), 'value')!.set;\n\n  if (valueSetter && valueSetter !== prototypeValueSetter) {\n    prototypeValueSetter!.call(element, value);\n  } else {\n    valueSetter!.call(element, value);\n  }\n};\n\nconst onClickSearchTerm = (event: any) => {\n  const searchInputElement = document.querySelector('[placeholder^=\"Search\"]');\n\n  if (searchInputElement === null) {\n    logger.error(new Error('Cannot find search input element!'));\n    return;\n  }\n\n  const value = event.target.textContent.trim();\n\n  setNativeValue(searchInputElement, value);\n\n  searchInputElement.dispatchEvent(new Event('input', { bubbles: true }));\n};\n\nconst SearchTerm = ({ children }: { children: ReactNode }) => {\n  const styles = useStyles2(getStyles);\n\n  // If the code block contains newlines, don't make it a search link\n  if (typeof children === 'string' && children.includes('\\n')) {\n    return <code>{children}</code>;\n  }\n\n  return (\n    <code className={styles.searchLink} title=\"Search for this node\" onClick={onClickSearchTerm}>\n      {children}\n    </code>\n  );\n};\n\nconst MARKDOWN_OPTIONS = {\n  overrides: {\n    code: {\n      component: SearchTerm,\n    },\n  },\n};\n\ntype AiReplyProps = {\n  reply: OpenAiReply['reply'];\n};\n\nexport function AiReply({ reply }: AiReplyProps) {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.container}>\n      {reply?.messages\n        ?.filter((message) => message.role !== 'system')\n        .map((message) => (\n          <>\n            <div className={styles.reply}>\n              <Markdown options={MARKDOWN_OPTIONS}>{message.content || ''}</Markdown>\n            </div>\n            <hr />\n          </>\n        ))}\n\n      <div className={styles.reply}>\n        <Markdown options={MARKDOWN_OPTIONS}>{reply.text}</Markdown>\n      </div>\n    </div>\n  );\n}\n\nconst getStyles = () => ({\n  container: css`\n    width: 100%;\n    height: 100%;\n  `,\n  reply: css`\n    font-size: 13px;\n\n    & ol,\n    & ul {\n      margin: 0 0 16px 24px;\n    }\n  `,\n  searchLink: css`\n    color: rgb(255, 136, 51);\n    border: 1px solid transparent;\n    padding: 2px 4px;\n    cursor: pointer;\n    font-size: 13px;\n\n    &:hover,\n    &:focus,\n    &:active {\n      box-sizing: border-box;\n      border: 1px solid rgb(255, 136, 51, 0.8);\n      border-radius: 4px;\n    }\n  `,\n});\n","import { css } from '@emotion/css';\nimport { Button, TextArea, useStyles2 } from '@grafana/ui';\nimport React, { KeyboardEvent, useCallback, useState } from 'react';\n\nconst getStyles = () => ({\n  textarea: css`\n    margin-bottom: 8px;\n  `,\n  sendButton: css`\n    float: right;\n    border-top-left-radius: 0;\n    border-bottom-left-radius: 0;\n  `,\n});\n\ntype FollowUpFormProps = {\n  onSubmit: (question: string) => void;\n};\n\nfunction useFollowUpForm(onSubmit: FollowUpFormProps['onSubmit']) {\n  const [question, setQuestion] = useState('');\n\n  const onChangeInput = useCallback((event: any) => {\n    setQuestion(event.target.value);\n  }, []);\n\n  const onClickSend = useCallback(() => {\n    const questionToSend = question.trim();\n    if (!questionToSend) {\n      return;\n    }\n\n    onSubmit(questionToSend);\n\n    setQuestion('');\n  }, [question, onSubmit]);\n\n  return {\n    question,\n    onChangeInput,\n    onClickSend,\n  };\n}\n\nexport function FollowUpForm({ onSubmit }: FollowUpFormProps) {\n  const styles = useStyles2(getStyles);\n  const { question, onChangeInput, onClickSend } = useFollowUpForm(onSubmit);\n\n  const onKeyDown = (event: KeyboardEvent<HTMLTextAreaElement>) => {\n    if (event.code === 'Enter' && !event.shiftKey) {\n      onClickSend();\n    }\n  };\n\n  return (\n    <div>\n      <TextArea\n        className={styles.textarea}\n        placeholder=\"Ask a follow-up question...\"\n        value={question}\n        onChange={onChangeInput}\n        onKeyDown={onKeyDown}\n      />\n\n      <Button className={styles.sendButton} onClick={onClickSend}>\n        Send\n      </Button>\n    </div>\n  );\n}\n","/* https://platform.openai.com/docs/models/overview */\n\nexport const model = 'gpt-4-1106-preview';\n\n/* https://platform.openai.com/docs/guides/prompt-engineering/tactics */\n\nenum PromptCategories {\n  system = 'system',\n  user = 'user',\n}\n\ntype Prompts = Record<string, (profileType: string, profiles: string[]) => string>;\n\nconst prompts: Record<PromptCategories, Prompts> = {\n  system: {\n    // add new system prompts above\n    empty: () => `\n    You are a performance profiling expert and excel at analyzing profiles in the DOT format.\n    In the DOT format, a row like N47 -> N61 means the function from N47 called the function from N61.\n`,\n  },\n  user: {\n    // add new user prompts above\n    single: (profileType: string, profiles: string[]) => `\n    Analyze this flamegraph in DOT format and address these key aspects:\n    - **Performance Bottleneck**: Identify the primary factors slowing down the process, consuming excessive memory, or causing a bottleneck in the system.\n    - **Root Cause**: Explain clearly why these bottlenecks are occurring.\n    - **Recommended Fix**: Suggest practical solutions for these issues.\n\n    Guidelines:\n    - Always use full function names without splitting them from package names.\n    - Exclude numeric values, percentages, and node names (e.g., N1, N3, Node 1, Node 2).\n    - Focus on user code over low-level runtime optimizations.\n    - For standard library or runtime functions, explain their presence/function and link them to user code functions calling them. Avoid repetitive mentions from the same call chain.\n    - Do not mention that the flamegraph profile is in DOT format.\n    - Only use h5 and h6 markdown headers (e.g., ##### Performance Bottleneck, ###### Recommended Fix)\n    - Do not use h1,h2,h3,h4 headers (e.g., ## Bottleneck, ### Root Cause, #### Recommended Fix)\n\n    Format the response using markdown headers for each section corresponding to the key aspects.\n\n    The profile type is: ${profileType}\n    Profile in DOT format:\n    ${profiles[0]}\n`,\n    anton: (profileType: string, profiles: string[]) => `\nGive me actionable feedback and suggestions on how I improve the application performance.\n\nDo not break function names.\nDo not show any numeric values, absolute or percents.\nDo not show node names like N1, N3, or Node 1, Node 2.\nDo not suggest low-level runtime optimisations, focus on the user code.\n\nAlways use full function names.\nNever split function and package name.\n\nRemove any numeric values, absolute or percents, from the output.\nRemove node names like N1, N3, or Node 1, Node 2 from the output.\n\nIf the function is widely known (e.g., a runtime or stdlib function), provide me concise explanation why the function is present in the profile and what could be the cause.\nIf a function is defined in the runtime or in the standard library, tell me which function in the user code calls it.\nAvoid mentioning functions from the same call-chain.\n\n5 suggestions is enough.\nThe profile type is ${profileType}\nBelow is the performance profile in DOT format:\n${profiles[0]}\n`,\n    diff: (profileType: string, profiles: string[]) => `\nAnalyze the differences between these two performance profiles presented in DOT format. Provide a detailed comparison focusing on the following aspects:\n\n- Performance Change: Determine how the performance has changed from the first profile to the second. Identify if there are new bottlenecks, improved or worsened performance areas, or significant changes in resource consumption.\n- Function Impact: Highlight no more than 3 specific functions that have undergone notable changes in their performance impact. Discuss any new functions that have appeared in the second profile or any existing functions that have significantly increased or decreased in resource usage.\n- Potential Causes: Discuss the possible reasons for these changes in performance, linking them to the differences in function execution or resource usage between the two profiles.\n\nGuidelines for Analysis:\n- Use full function names without separating them from their package names\n- Focus on user code rather than low-level runtime optimizations or standard library functions unless they are directly relevant to the user code's performance changes\n- Exclude numeric values, percentages, and node names (e.g., N1, N3, Node 1, Node 2) from the analysis\n- Format the response using markdown headers for each section to structure the analysis clearly\n\nThe profile type is: ${profileType}\n\nFirst performance profile in DOT format:\n${profiles[0]}\n\nSecond performance profile in DOT format:\n${profiles[1]}\n`,\n  },\n};\n\nexport const buildPrompts = ({\n  system,\n  user,\n  profileType,\n  profiles,\n}: {\n  system: string;\n  user: string;\n  profileType: string;\n  profiles: string[];\n}) => {\n  const systemPrompt = prompts.system[system];\n\n  if (typeof systemPrompt !== 'function') {\n    throw new Error(`Cannot find system prompt \"${system}\"!`);\n  }\n\n  const userPrompt = prompts.user[user];\n\n  if (typeof userPrompt !== 'function') {\n    throw new Error(`Cannot find user prompt \"${user}\"!`);\n  }\n\n  return {\n    system: systemPrompt(profileType, profiles),\n    user: userPrompt(profileType, profiles),\n  };\n};\n","import { TimeRange } from '@grafana/data';\nimport { FlamebearerProfile } from '@shared/types/FlamebearerProfile';\n\nimport { DataSourceProxyClient } from '../series/http/DataSourceProxyClient';\n\ntype DiffProfileResponse = string | FlamebearerProfile;\n\ntype GetParams = {\n  query: string;\n  timeRange: TimeRange;\n  format: 'dot' | 'json';\n  maxNodes: number;\n};\n\nexport class ProfileApiClient extends DataSourceProxyClient {\n  constructor(options: { dataSourceUid: string }) {\n    super(options);\n  }\n\n  async get(params: GetParams): Promise<DiffProfileResponse> {\n    const searchParams = new URLSearchParams({\n      query: params.query,\n      from: String(params.timeRange.from.unix() * 1000),\n      until: String(params.timeRange.to.unix() * 1000),\n      format: params.format,\n    });\n\n    if (params.maxNodes) {\n      searchParams.set('max-nodes', String(params.maxNodes));\n    }\n\n    const response = await this.fetch(`/pyroscope/render?${searchParams.toString()}`);\n\n    switch (params.format) {\n      case 'dot':\n        return response.text();\n\n      case 'json':\n        return response.json();\n\n      default:\n        throw new TypeError(`Unknown format \"${params.format}\"!`);\n    }\n  }\n}\n","import { css } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { SceneComponentProps, sceneGraph, SceneObjectBase, SceneObjectState } from '@grafana/scenes';\nimport { Alert, Button, IconButton, Spinner, useStyles2 } from '@grafana/ui';\nimport { getProfileMetric, ProfileMetricId } from '@shared/infrastructure/profile-metrics/getProfileMetric';\nimport { DomainHookReturnValue } from '@shared/types/DomainHookReturnValue';\nimport { InlineBanner } from '@shared/ui/InlineBanner';\nimport { Panel } from '@shared/ui/Panel/Panel';\nimport React from 'react';\n\nimport { ProfilesDataSourceVariable } from '../../domain/variables/ProfilesDataSourceVariable';\nimport { getSceneVariableValue } from '../../helpers/getSceneVariableValue';\nimport { AiReply } from './components/AiReply';\nimport { FollowUpForm } from './components/FollowUpForm';\nimport { useOpenAiChatCompletions } from './domain/useOpenAiChatCompletions';\nimport { FetchParams, useFetchDotProfiles } from './infrastructure/useFetchDotProfiles';\n\ninterface SceneAiPanelState extends SceneObjectState {}\n\nexport class SceneAiPanel extends SceneObjectBase<SceneAiPanelState> {\n  constructor() {\n    super({ key: 'ai-panel' });\n  }\n\n  validateFetchParams(isDiff: boolean, fetchParams: FetchParams) {\n    let params = fetchParams;\n    let error;\n\n    if (isDiff && fetchParams.length !== 2) {\n      error = new Error(\n        `Invalid number of fetch parameters for analyzing the diff flame graph (${fetchParams.length})!`\n      );\n      params = [];\n    } else if (!isDiff && fetchParams.length !== 1) {\n      error = new Error(`Invalid number of fetch parameters for analyzing the flame graph (${fetchParams.length})!`);\n      params = [];\n    }\n\n    return { params, error };\n  }\n\n  useSceneAiPanel = (isDiff: boolean, fetchParams: FetchParams): DomainHookReturnValue => {\n    const dataSourceUid = sceneGraph.findByKeyAndType(this, 'dataSource', ProfilesDataSourceVariable).useState()\n      .value as string;\n\n    const { params, error: validationError } = this.validateFetchParams(isDiff, fetchParams);\n\n    const { error: fetchError, isFetching, profiles } = useFetchDotProfiles(dataSourceUid, params);\n\n    const profileMetricId = getSceneVariableValue(this, 'profileMetricId');\n    const profileType = getProfileMetric(profileMetricId as ProfileMetricId).type;\n\n    const { reply, error: llmError, retry } = useOpenAiChatCompletions(profileType, profiles);\n\n    return {\n      data: {\n        validationError,\n        isLoading: isFetching || (!isFetching && !fetchError && !llmError && !reply.text.trim()),\n        fetchError,\n        llmError,\n        reply,\n        shouldDisplayReply: Boolean(reply?.hasStarted || reply?.hasFinished),\n        shouldDisplayFollowUpForm: !fetchError && !llmError && Boolean(reply?.hasFinished),\n      },\n      actions: {\n        retry,\n        submitFollowupQuestion(question: string) {\n          reply.askFollowupQuestion(question);\n        },\n      },\n    };\n  };\n\n  static Component = ({\n    model,\n    isDiff,\n    fetchParams,\n    onClose,\n  }: SceneComponentProps<SceneAiPanel> & {\n    isDiff: boolean;\n    fetchParams: FetchParams;\n    onClose: () => void;\n  }) => {\n    const styles = useStyles2(getStyles);\n    const { data, actions } = model.useSceneAiPanel(isDiff, fetchParams);\n\n    return (\n      <Panel\n        className={styles.sidePanel}\n        title=\"Flame graph analysis\"\n        isLoading={data.isLoading}\n        headerActions={\n          <IconButton\n            title=\"Close panel\"\n            name=\"times-circle\"\n            variant=\"secondary\"\n            aria-label=\"close\"\n            onClick={onClose}\n          />\n        }\n        dataTestId=\"ai-panel\"\n      >\n        <div className={styles.content}>\n          {data.validationError && (\n            <InlineBanner severity=\"error\" title=\"Validation error!\" error={data.validationError} />\n          )}\n\n          {data.fetchError && (\n            <InlineBanner\n              severity=\"error\"\n              title=\"Error while loading profile data!\"\n              message=\"Sorry for any inconvenience, please try again later.\"\n              error={data.fetchError}\n            />\n          )}\n\n          {data.shouldDisplayReply && <AiReply reply={data.reply} />}\n\n          {data.isLoading && (\n            <>\n              <Spinner inline />\n              &nbsp;Analyzing...\n            </>\n          )}\n\n          {data.llmError && (\n            <Alert title=\"An error occured while generating content using OpenAI!\" severity=\"warning\">\n              <div>\n                <div>\n                  <p>{data.llmError.message}</p>\n                  <p>\n                    Sorry for any inconvenience, please retry or if the problem persists, contact your organization\n                    admin.\n                  </p>\n                </div>\n              </div>\n              <Button className={styles.retryButton} variant=\"secondary\" fill=\"outline\" onClick={() => actions.retry()}>\n                Retry\n              </Button>\n            </Alert>\n          )}\n\n          {data.shouldDisplayFollowUpForm && <FollowUpForm onSubmit={actions.submitFollowupQuestion} />}\n        </div>\n      </Panel>\n    );\n  };\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  sidePanel: css`\n    flex: 1 0 50%;\n    margin-left: 8px;\n    max-width: calc(50% - 4px);\n  `,\n  title: css`\n    margin: -4px 0 4px 0;\n  `,\n  content: css`\n    padding: ${theme.spacing(1)};\n  `,\n  retryButton: css`\n    float: right;\n  `,\n});\n","import { TimeRange } from '@grafana/data';\nimport { useQuery } from '@tanstack/react-query';\n\nimport { ProfileApiClient } from '../../../infrastructure/profiles/ProfileApiClient';\nimport { DataSourceProxyClientBuilder } from '../../../infrastructure/series/http/DataSourceProxyClientBuilder';\nimport { cleanupDotResponse } from './cleanupDotResponse';\n\nexport type FetchParams = Array<{\n  query: string;\n  timeRange: TimeRange;\n}>;\n\nconst MAX_NODES = 100;\n\nexport function useFetchDotProfiles(dataSourceUid: string, fetchParams: FetchParams) {\n  const profileApiClient = DataSourceProxyClientBuilder.build(dataSourceUid, ProfileApiClient);\n\n  const { isFetching, error, data } = useQuery({\n    queryKey: [\n      'dot-profiles',\n      dataSourceUid,\n      ...fetchParams.flatMap(({ query, timeRange }) => [query, timeRange.from.unix(), timeRange.to.unix()]),\n      MAX_NODES,\n    ],\n    queryFn: () => {\n      // TODO: pass a signal options to properly abort all in-flight requests\n      return Promise.all(\n        fetchParams.map(({ query, timeRange }) =>\n          profileApiClient\n            .get({ query, timeRange, format: 'dot', maxNodes: MAX_NODES })\n            .then((response) => cleanupDotResponse(response as string))\n        )\n      );\n    },\n  });\n\n  return {\n    isFetching,\n    error,\n    profiles: data || [],\n  };\n}\n","export function cleanupDotResponse(profile: string): string {\n  return profile\n    .replace(/fontsize=\\d+ /g, '')\n    .replace(/id=\"node\\d+\" /g, '')\n    .replace(/labeltooltip=\".*\\)\" /g, '')\n    .replace(/tooltip=\".*\\)\" /g, '')\n    .replace(/(N\\d+ -> N\\d+).*/g, '$1')\n    .replace(/N\\d+ \\[label=\"other.*\\n/, '')\n    .replace(/shape=box /g, '')\n    .replace(/fillcolor=\"#\\w{6}\"/g, '')\n    .replace(/color=\"#\\w{6}\" /g, '');\n}\n","import { openai } from '@grafana/llm';\nimport { useCallback, useEffect, useState } from 'react';\nimport { SubscriptionLike } from 'rxjs';\n\nimport { buildPrompts, model } from './buildLlmPrompts';\n\ntype Messages = openai.Message[];\n\nexport type OpenAiReply = {\n  reply: {\n    text: string;\n    hasStarted: boolean;\n    hasFinished: boolean;\n    messages: Messages;\n    askFollowupQuestion: (question: string) => void;\n  };\n  retry: () => void;\n  error: Error | null;\n};\n\nexport function useOpenAiChatCompletions(profileType: string, profiles: string[]): OpenAiReply {\n  const [reply, setReply] = useState('');\n  const [replyHasStarted, setReplyHasStarted] = useState(false);\n  const [replyHasFinished, setReplyHasFinished] = useState(false);\n  const [messages, setMessages] = useState<Messages>([]);\n  const [error, setError] = useState<Error | null>(null);\n  const [subscription, setSubscription] = useState<SubscriptionLike>();\n\n  const sendMessages = useCallback((messagesToSend: Messages) => {\n    setMessages(messagesToSend);\n\n    setError(null);\n\n    setReply('');\n    setReplyHasStarted(true);\n    setReplyHasFinished(false);\n\n    const stream = openai\n      .streamChatCompletions({\n        model,\n        messages: messagesToSend,\n      })\n      .pipe(\n        // Accumulate the stream content into a stream of strings, where each\n        // element contains the accumulated message so far.\n        openai.accumulateContent()\n      );\n\n    const subscription = stream.subscribe({\n      next: setReply,\n      error(e) {\n        setError(e);\n        setReplyHasStarted(false);\n        setReplyHasFinished(true);\n        setSubscription(undefined);\n      },\n      complete() {\n        setReplyHasStarted(false);\n        setReplyHasFinished(true);\n        setSubscription(undefined);\n      },\n    });\n\n    setSubscription(subscription);\n  }, []);\n\n  const askFollowupQuestion = useCallback(\n    (question: string): void => {\n      const messagesToAdd: Messages = [\n        {\n          role: 'assistant',\n          content: reply,\n        },\n        {\n          role: 'user',\n          content: question,\n        },\n      ];\n\n      try {\n        sendMessages([...messages, ...messagesToAdd]);\n      } catch (error) {\n        setError(error as Error);\n      }\n    },\n    [messages, reply, sendMessages]\n  );\n\n  useEffect(() => {\n    if (!profiles.length || messages.length > 0) {\n      return;\n    }\n\n    const prompts = buildPrompts({\n      system: 'empty',\n      user: profiles.length === 2 ? 'diff' : 'single',\n      profileType,\n      profiles,\n    });\n\n    try {\n      sendMessages([\n        {\n          role: 'system',\n          content: prompts.system,\n        },\n        {\n          role: 'system',\n          content: prompts.user,\n        },\n      ]);\n    } catch (error) {\n      setError(error as Error);\n    }\n  }, [messages.length, profileType, profiles, profiles.length, sendMessages]);\n\n  useEffect(() => {\n    return () => {\n      if (subscription) {\n        subscription.unsubscribe();\n        setSubscription(undefined);\n      }\n    };\n  }, [subscription]);\n\n  return {\n    reply: {\n      text: reply,\n      hasStarted: replyHasStarted,\n      hasFinished: replyHasFinished,\n      messages: messages,\n      askFollowupQuestion,\n    },\n    retry() {\n      if (messages.length > 0) {\n        try {\n          sendMessages(messages);\n        } catch (error) {\n          setError(error as Error);\n        }\n      }\n    },\n    error,\n  };\n}\n","import { BusEventWithPayload } from '@grafana/data';\n\nexport interface EventDiffAutoSelectPayload {\n  wholeRange: boolean;\n}\n\nexport class EventDiffAutoSelect extends BusEventWithPayload<EventDiffAutoSelectPayload> {\n  public static type = 'diff-auto-select';\n}\n","import { BusEventWithPayload } from '@grafana/data';\n\nexport interface EventDiffChoosePresetPayload {}\n\nexport class EventDiffChoosePreset extends BusEventWithPayload<EventDiffChoosePresetPayload> {\n  public static type = 'diff-choose-preset';\n}\n","import { displayWarning } from '@shared/domain/displayStatus';\nimport { DEFAULT_SETTINGS } from '@shared/infrastructure/settings/PluginSettings';\nimport { useFetchPluginSettings } from '@shared/infrastructure/settings/useFetchPluginSettings';\nimport { logger } from '@shared/infrastructure/tracking/logger';\n\nimport { useUrlSearchParams } from './useUrlSearchParams';\n\nfunction useSetDefaultMaxNodes(hasMaxNodes: boolean, setMaxNodes: (newMaxNodes: number) => void) {\n  const { isFetching, error, settings } = useFetchPluginSettings({ enabled: !hasMaxNodes });\n\n  if (hasMaxNodes || isFetching) {\n    return;\n  }\n\n  if (error) {\n    displayWarning([\n      'Error while retrieving the plugin settings!',\n      'Some features might not work as expected (e.g. flame graph max nodes). Please try to reload the page, sorry for the inconvenience.',\n    ]);\n    logger.error(error);\n\n    setMaxNodes(DEFAULT_SETTINGS.maxNodes);\n\n    return;\n  }\n\n  setMaxNodes(settings!.maxNodes);\n}\n\nexport function useMaxNodesFromUrl(): [number | null, (newMaxNodes: number) => void] {\n  const { searchParams, pushNewUrl } = useUrlSearchParams();\n  const maxNodes = Number(searchParams.get('maxNodes') ?? '');\n\n  const setMaxNodes = (newMaxNodes: number) => {\n    pushNewUrl({ maxNodes: String(newMaxNodes) });\n  };\n\n  useSetDefaultMaxNodes(maxNodes > 0, setMaxNodes);\n\n  return [maxNodes, setMaxNodes];\n}\n","import { useLocation, useNavigate } from 'react-router-dom';\n\nexport function useUrlSearchParams() {\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  return {\n    searchParams: new URLSearchParams(location.search),\n    pushNewUrl: (newParams: Record<string, string>) => {\n      const newSearchParams = new URLSearchParams(window.location.search);\n\n      for (const [key, value] of Object.entries(newParams)) {\n        newSearchParams.set(key, value);\n      }\n\n      navigate({ search: newSearchParams.toString() }, { replace: true });\n    },\n  };\n}\n","import { TimeRange } from '@grafana/data';\nimport { FlamebearerProfile } from '@shared/types/FlamebearerProfile';\n\nimport { DataSourceProxyClient } from '../../../../../infrastructure/series/http/DataSourceProxyClient';\n\ntype DiffProfileResponse = FlamebearerProfile;\n\ntype GetParams = {\n  leftQuery: string;\n  leftTimeRange: TimeRange;\n  rightQuery: string;\n  rightTimeRange: TimeRange;\n  maxNodes: number | null;\n};\n\nexport class DiffProfileApiClient extends DataSourceProxyClient {\n  constructor(options: { dataSourceUid: string }) {\n    super(options);\n  }\n\n  async get(params: GetParams): Promise<DiffProfileResponse> {\n    const searchParams = new URLSearchParams({\n      leftQuery: params.leftQuery,\n      leftFrom: String(params.leftTimeRange.from.unix() * 1000),\n      leftUntil: String(params.leftTimeRange.to.unix() * 1000),\n      rightQuery: params.rightQuery,\n      rightFrom: String(params.rightTimeRange.from.unix() * 1000),\n      rightUntil: String(params.rightTimeRange.to.unix() * 1000),\n    });\n\n    if (params.maxNodes) {\n      searchParams.set('max-nodes', String(params.maxNodes));\n    }\n\n    const response = await this.fetch(`/pyroscope/render-diff?${searchParams.toString()}`);\n\n    const json = await response.json();\n\n    return json;\n  }\n}\n","import { TimeRange } from '@grafana/data';\nimport { useMaxNodesFromUrl } from '@shared/domain/url-params/useMaxNodesFromUrl';\nimport { useQuery } from '@tanstack/react-query';\n\nimport { DataSourceProxyClientBuilder } from '../../../../../infrastructure/series/http/DataSourceProxyClientBuilder';\nimport { DiffProfileApiClient } from './DiffProfileApiClient';\n\ntype FetchParams = {\n  enabled: boolean;\n  dataSourceUid: string;\n  baselineTimeRange: TimeRange;\n  baselineQuery: string;\n  comparisonTimeRange: TimeRange;\n  comparisonQuery: string;\n};\n\nexport function useFetchDiffProfile({\n  enabled,\n  dataSourceUid,\n  baselineTimeRange,\n  baselineQuery,\n  comparisonTimeRange,\n  comparisonQuery,\n}: FetchParams) {\n  const [maxNodes] = useMaxNodesFromUrl();\n\n  const diffProfileApiClient = DataSourceProxyClientBuilder.build(dataSourceUid, DiffProfileApiClient);\n\n  const { isFetching, error, data, refetch } = useQuery({\n    // for UX: keep previous data while fetching -> profile does not re-render with empty panels when refreshing\n    placeholderData: (previousData) => previousData,\n    enabled: Boolean(enabled && maxNodes),\n    // eslint-disable-next-line @tanstack/query/exhaustive-deps\n    queryKey: [\n      'diff-profile',\n      dataSourceUid,\n      baselineQuery,\n      baselineTimeRange.from.unix(),\n      baselineTimeRange.to.unix(),\n      comparisonQuery,\n      comparisonTimeRange.from.unix(),\n      comparisonTimeRange.to.unix(),\n      maxNodes,\n    ],\n    queryFn: () => {\n      diffProfileApiClient.abort();\n\n      const params = {\n        leftQuery: baselineQuery,\n        leftTimeRange: baselineTimeRange,\n        rightQuery: comparisonQuery,\n        rightTimeRange: comparisonTimeRange,\n        maxNodes,\n      };\n\n      return diffProfileApiClient.get(params).then((json) => ({\n        profile: {\n          version: json.version,\n          flamebearer: json.flamebearer,\n          metadata: json.metadata,\n        },\n      }));\n    },\n  });\n\n  return {\n    isFetching,\n    error: diffProfileApiClient.isAbortError(error) ? null : error,\n    ...data,\n    refetch,\n  };\n}\n","import { css } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, Collapse, useStyles2 } from '@grafana/ui';\nimport DiffViewHowToImg from '@img/diff-view-how-to.gif';\nimport { InlineBanner } from '@shared/ui/InlineBanner';\nimport React, { useState } from 'react';\n\ntype MissingSelectionsBannerProps = {\n  onClickAutoSelect: () => void;\n  onClickChoosePreset: () => void;\n  onOpenLearnHow: () => void;\n};\n\nexport function MissingSelectionsBanner({\n  onClickAutoSelect,\n  onClickChoosePreset,\n  onOpenLearnHow,\n}: MissingSelectionsBannerProps) {\n  const styles = useStyles2(getStyles);\n\n  const [isCollapseOpen, setIsCollapseOpen] = useState(false);\n\n  const onToggleCollapse = () => {\n    if (!isCollapseOpen) {\n      onOpenLearnHow();\n    }\n    setIsCollapseOpen(!isCollapseOpen);\n  };\n\n  return (\n    <InlineBanner\n      severity=\"info\"\n      title=\"Select both the baseline and the comparison flame graph ranges to view the diff flame graph\"\n      message={\n        <div className={styles.infoMsg}>\n          <p>How?</p>\n          <p>\n            <Button variant=\"primary\" onClick={onClickAutoSelect}>\n              Auto-select\n            </Button>{' '}\n            or{' '}\n            <Button variant=\"primary\" fill=\"text\" className={styles.textButton} onClick={onClickChoosePreset}>\n              choose a preset\n            </Button>\n          </p>\n          <p>Alternatively:</p>\n          <Collapse\n            label=\"Click here to learn how to select the flame graph ranges with the mouse\"\n            collapsible\n            className={styles.collapse}\n            isOpen={isCollapseOpen}\n            onToggle={onToggleCollapse}\n          >\n            <div className={styles.collapseContent}>\n              <ol>\n                <li>Ensure that the &ldquo;Flame graph&rdquo; range selection mode is selected</li>\n                <li>\n                  Use your mouse to select the desired time ranges on both the baseline and the comparison time series\n                </li>\n              </ol>\n              <img src={DiffViewHowToImg} alt=\"How to view the diff flame graph\" />\n            </div>\n          </Collapse>\n        </div>\n      }\n    />\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  infoMsg: css`\n    padding: ${theme.spacing(2)} 0 0 0;\n  `,\n  textButton: css`\n    padding: 0;\n  `,\n  collapse: css`\n    background: transparent;\n    border: 0;\n  `,\n  collapseContent: css`\n    padding: 0 ${theme.spacing(5)};\n\n    & img {\n      max-width: 100%;\n      width: auto;\n      margin-top: ${theme.spacing(2)};\n    }\n  `,\n});\n","import { css } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { SceneComponentProps, sceneGraph, SceneObjectBase, SceneObjectState } from '@grafana/scenes';\nimport { Spinner, useStyles2 } from '@grafana/ui';\nimport { FlameGraph } from '@shared/components/FlameGraph/FlameGraph';\nimport { displayWarning } from '@shared/domain/displayStatus';\nimport { reportInteraction } from '@shared/domain/reportInteraction';\nimport { useToggleSidePanel } from '@shared/domain/useToggleSidePanel';\nimport { getProfileMetric, ProfileMetricId } from '@shared/infrastructure/profile-metrics/getProfileMetric';\nimport { useFetchPluginSettings } from '@shared/infrastructure/settings/useFetchPluginSettings';\nimport { DomainHookReturnValue } from '@shared/types/DomainHookReturnValue';\nimport { FlamebearerProfile } from '@shared/types/FlamebearerProfile';\nimport { InlineBanner } from '@shared/ui/InlineBanner';\nimport { Panel } from '@shared/ui/Panel/Panel';\nimport { PyroscopeLogo } from '@shared/ui/PyroscopeLogo';\nimport React, { useEffect, useMemo } from 'react';\n\nimport { useBuildPyroscopeQuery } from '../../../../domain/useBuildPyroscopeQuery';\nimport { ProfilesDataSourceVariable } from '../../../../domain/variables/ProfilesDataSourceVariable';\nimport { getSceneVariableValue } from '../../../../helpers/getSceneVariableValue';\nimport { AIButton } from '../../../SceneAiPanel/components/AiButton/AIButton';\nimport { SceneAiPanel } from '../../../SceneAiPanel/SceneAiPanel';\nimport { EventDiffAutoSelect } from '../../domain/events/EventDiffAutoSelect';\nimport { EventDiffChoosePreset } from '../../domain/events/EventDiffChoosePreset';\nimport { SceneExploreDiffFlameGraph } from '../../SceneExploreDiffFlameGraph';\nimport { useFetchDiffProfile } from './infrastructure/useFetchDiffProfile';\nimport { MissingSelectionsBanner } from './ui/MissingSelectionsBanner';\n\ninterface SceneDiffFlameGraphState extends SceneObjectState {\n  aiPanel: SceneAiPanel;\n}\n\nexport class SceneDiffFlameGraph extends SceneObjectBase<SceneDiffFlameGraphState> {\n  constructor() {\n    super({\n      key: 'diff-flame-graph',\n      aiPanel: new SceneAiPanel(),\n    });\n  }\n\n  buildTitle() {\n    const serviceName = getSceneVariableValue(this, 'serviceName');\n    const profileMetricId = getSceneVariableValue(this, 'profileMetricId');\n    const profileMetricType = getProfileMetric(profileMetricId as ProfileMetricId).type;\n\n    return (\n      <>\n        <PyroscopeLogo size=\"small\" />\n        Diff flame graph for {serviceName} ({profileMetricType})\n      </>\n    );\n  }\n\n  useSceneDiffFlameGraph = (): DomainHookReturnValue => {\n    const { aiPanel } = this.useState();\n    const { baselineTimeRange, comparisonTimeRange } = (this.parent as SceneExploreDiffFlameGraph).useDiffTimeRanges();\n\n    const baselineQuery = useBuildPyroscopeQuery(this, 'filtersBaseline');\n    const comparisonQuery = useBuildPyroscopeQuery(this, 'filtersComparison');\n\n    const { settings, error: fetchSettingsError } = useFetchPluginSettings();\n\n    const dataSourceUid = sceneGraph.findByKeyAndType(this, 'dataSource', ProfilesDataSourceVariable).useState()\n      .value as string;\n\n    const isDiffQueryEnabled = Boolean(\n      baselineQuery &&\n        comparisonQuery &&\n        // warning: sending zero parameters values to the API would make the pods crash\n        // so we enable only when we have non-zero parameters values\n        baselineTimeRange.from.unix() &&\n        baselineTimeRange.to.unix() &&\n        comparisonTimeRange.from.unix() &&\n        comparisonTimeRange.to.unix()\n    );\n\n    const {\n      isFetching,\n      error: fetchProfileError,\n      profile,\n    } = useFetchDiffProfile({\n      enabled: isDiffQueryEnabled,\n      dataSourceUid,\n      baselineTimeRange,\n      baselineQuery,\n      comparisonTimeRange,\n      comparisonQuery,\n    });\n\n    const noProfileDataAvailable =\n      isDiffQueryEnabled && !isFetching && !fetchProfileError && profile?.flamebearer.numTicks === 0;\n\n    const shouldDisplayFlamegraph = Boolean(\n      isDiffQueryEnabled && !fetchProfileError && !noProfileDataAvailable && profile\n    );\n    const hasMissingSelections = !isDiffQueryEnabled;\n\n    return {\n      data: {\n        title: this.buildTitle(),\n        isLoading: isFetching,\n        fetchProfileError,\n        noProfileDataAvailable,\n        shouldDisplayFlamegraph,\n        hasMissingSelections,\n        profile: profile as FlamebearerProfile,\n        settings,\n        fetchSettingsError,\n        ai: {\n          panel: aiPanel,\n          fetchParams: [\n            { query: baselineQuery, timeRange: baselineTimeRange },\n            { query: comparisonQuery, timeRange: comparisonTimeRange },\n          ],\n        },\n      },\n      actions: {},\n    };\n  };\n\n  onClickAutoSelect = () => {\n    reportInteraction('g_pyroscope_app_diff_auto_select_clicked');\n\n    this.publishEvent(new EventDiffAutoSelect({ wholeRange: false }), true);\n  };\n\n  onClickChoosePreset = () => {\n    reportInteraction('g_pyroscope_app_diff_choose_preset_clicked');\n\n    this.publishEvent(new EventDiffChoosePreset({}), true);\n  };\n\n  onOpenLearnHow = () => {\n    reportInteraction('g_pyroscope_app_diff_learn_how_clicked');\n  };\n\n  static Component = ({ model }: SceneComponentProps<SceneDiffFlameGraph>) => {\n    const styles = useStyles2(getStyles);\n\n    const { data } = model.useSceneDiffFlameGraph();\n    const sidePanel = useToggleSidePanel();\n\n    const isAiButtonDisabled = data.isLoading || data.hasMissingSelections || data.noProfileDataAvailable;\n\n    useEffect(() => {\n      if (isAiButtonDisabled) {\n        sidePanel.close();\n      }\n    }, [isAiButtonDisabled, sidePanel]);\n\n    if (data.fetchSettingsError) {\n      displayWarning([\n        'Error while retrieving the plugin settings!',\n        'Some features might not work as expected (e.g. flamegraph export options). Please try to reload the page, sorry for the inconvenience.',\n      ]);\n    }\n\n    const panelTitle = useMemo(\n      () => (\n        <>\n          {data.title}\n          {data.isLoading && <Spinner inline className={styles.spinner} />}\n        </>\n      ),\n      [data.isLoading, data.title, styles.spinner]\n    );\n\n    return (\n      <div className={styles.flex}>\n        <Panel\n          dataTestId=\"diff-flame-graph-panel\"\n          className={styles.flamegraphPanel}\n          title={panelTitle}\n          isLoading={data.isLoading}\n          headerActions={\n            <AIButton\n              disabled={isAiButtonDisabled || sidePanel.isOpen('ai')}\n              onClick={() => sidePanel.open('ai')}\n              interactionName=\"g_pyroscope_app_explain_flamegraph_clicked\"\n            >\n              Explain Diff Flame Graph\n            </AIButton>\n          }\n        >\n          {data.hasMissingSelections && (\n            <MissingSelectionsBanner\n              onClickAutoSelect={model.onClickAutoSelect}\n              onClickChoosePreset={model.onClickChoosePreset}\n              onOpenLearnHow={model.onOpenLearnHow}\n            />\n          )}\n\n          {data.fetchProfileError && (\n            <InlineBanner severity=\"error\" title=\"Error while loading profile data!\" error={data.fetchProfileError} />\n          )}\n\n          {data.noProfileDataAvailable && (\n            <InlineBanner\n              severity=\"warning\"\n              title=\"No profile data available\"\n              message=\"Please verify that you've selected adequate filters and time ranges.\"\n            />\n          )}\n\n          {data.shouldDisplayFlamegraph && (\n            <FlameGraph\n              diff={true}\n              profile={data.profile}\n              enableFlameGraphDotComExport={data.settings?.enableFlameGraphDotComExport}\n              collapsedFlamegraphs={data.settings?.collapsedFlamegraphs}\n              /** Grafana assistant does not support diff flame graphs yet, we will use LLM plugin if enabled */\n              showAnalyzeWithAssistant={false}\n            />\n          )}\n        </Panel>\n\n        {sidePanel.isOpen('ai') && (\n          <data.ai.panel.Component\n            model={data.ai.panel}\n            isDiff\n            fetchParams={data.ai.fetchParams}\n            onClose={sidePanel.close}\n          />\n        )}\n      </div>\n    );\n  };\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  flex: css`\n    display: flex;\n  `,\n  flamegraphPanel: css`\n    min-width: 0;\n    flex-grow: 1;\n  `,\n  sidePanel: css`\n    flex: 1 0 50%;\n    margin-left: 8px;\n    max-width: calc(50% - 4px);\n  `,\n  spinner: css`\n    margin-left: ${theme.spacing(1)};\n  `,\n  aiButton: css`\n    margin-top: ${theme.spacing(1)};\n  `,\n});\n","import { css } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Icon, useStyles2 } from '@grafana/ui';\nimport React from 'react';\n\nexport const FEEDBACK_FORM_URL = 'https://grafana.qualtrics.com/jfe/form/SV_6Gav4IUU6jcYfd4';\n\n// borrowed from https://github.com/grafana/explore-logs/blob/main/src/Components/IndexScene/GiveFeedbackButton.tsx\nexport const GiveFeedbackButton = () => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.wrapper}>\n      <a\n        href={FEEDBACK_FORM_URL}\n        className={styles.feedback}\n        title=\"Share your thoughts about Profiles in Grafana.\"\n        target=\"_blank\"\n        rel=\"noreferrer noopener\"\n      >\n        <Icon name=\"comment-alt-message\" /> Give feedback\n      </a>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    wrapper: css({\n      display: 'flex',\n      gap: theme.spacing(1),\n      justifyContent: 'flex-end',\n      paddingTop: '4px',\n    }),\n    feedback: css({\n      alignSelf: 'center',\n      color: theme.colors.text.secondary,\n      fontSize: theme.typography.bodySmall.fontSize,\n      '&:hover': {\n        color: theme.colors.text.link,\n      },\n    }),\n  };\n};\n","import { css } from '@emotion/css';\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport {\n  SceneComponentProps,\n  sceneGraph,\n  SceneObjectBase,\n  SceneObjectState,\n  VariableDependencyConfig,\n} from '@grafana/scenes';\nimport { Button, Modal, Select, useStyles2 } from '@grafana/ui';\nimport { reportInteraction } from '@shared/domain/reportInteraction';\nimport React from 'react';\n\nimport { FEEDBACK_FORM_URL } from '../../../GiveFeedbackButton';\nimport { EventDiffAutoSelect } from '../../domain/events/EventDiffAutoSelect';\nimport { CompareTarget } from '../../domain/types';\nimport { SceneComparePanel } from '../SceneComparePanel/SceneComparePanel';\n\ninterface ScenePresetsPickerState extends SceneObjectState {\n  name: string;\n  label: string;\n  isModalOpen: boolean;\n  isSelectOpen: boolean;\n  value: string | null;\n}\n\nexport type Preset = {\n  from: string;\n  to: string;\n  diffFrom: string;\n  diffTo: string;\n  label: string;\n};\n\nexport class ScenePresetsPicker extends SceneObjectBase<ScenePresetsPickerState> {\n  protected _variableDependency = new VariableDependencyConfig(this, {\n    variableNames: ['dataSource', 'serviceName'],\n    onReferencedVariableValueChanged: () => {\n      this.reset();\n    },\n  });\n\n  static PRESETS = [\n    {\n      label: 'Built-in presets',\n      value: 'built-in',\n      options: [\n        {\n          value: 'last hour (30m-window)',\n          label: 'Last hour (30m-window)',\n          baseline: {\n            from: 'now-1h',\n            to: 'now',\n            diffFrom: 'now-1h',\n            diffTo: 'now-30m',\n            label: 'last hour',\n          },\n          comparison: {\n            from: 'now-1h',\n            to: 'now',\n            diffFrom: 'now-30m',\n            diffTo: 'now',\n            label: 'last hour',\n          },\n        },\n        {\n          value: 'last hour (1h-window)',\n          label: 'Last hour (1h-window)',\n          baseline: {\n            from: 'now-1h',\n            to: 'now',\n            diffFrom: 'now-1h',\n            diffTo: 'now',\n            label: 'last hour',\n          },\n          comparison: {\n            from: 'now-1h',\n            to: 'now',\n            diffFrom: 'now-1h',\n            diffTo: 'now',\n            label: 'last hour',\n          },\n        },\n        {\n          value: '6h ago vs now',\n          label: '6h ago vs now (30m-window)',\n          baseline: {\n            from: 'now-375m',\n            to: 'now-315m',\n            diffFrom: 'now-375m',\n            diffTo: 'now-345m',\n            label: '6h ago',\n          },\n          comparison: {\n            from: 'now-1h',\n            to: 'now',\n            diffFrom: 'now-30m',\n            diffTo: 'now',\n            label: 'last hour',\n          },\n        },\n        {\n          value: '24h ago vs now',\n          label: '24h ago vs now (30m-window)',\n          baseline: {\n            from: 'now-1455m',\n            to: 'now-1395m',\n            diffFrom: 'now-1455m',\n            diffTo: 'now-1425m',\n            label: '24h ago',\n          },\n          comparison: {\n            from: 'now-1h',\n            to: 'now',\n            diffFrom: 'now-30m',\n            diffTo: 'now',\n            label: 'last hour',\n          },\n        },\n        {\n          value: 'auto-select-25',\n          label: 'Auto-select (25% range)',\n        },\n        {\n          value: 'auto-select-whole',\n          label: 'Auto-select (whole range)',\n        },\n      ],\n    },\n    {\n      label: 'My presets',\n      value: 'custom',\n      options: [\n        {\n          label: 'Dummy preset saved earlier',\n          value: 'dummy',\n        },\n      ],\n    },\n  ];\n\n  constructor() {\n    super({\n      name: 'compare-presets',\n      label: 'Comparison presets',\n      value: null,\n      isModalOpen: false,\n      isSelectOpen: false,\n    });\n\n    this.addActivationHandler(this.onActivate.bind(this));\n  }\n\n  onActivate() {\n    [CompareTarget.BASELINE, CompareTarget.COMPARISON].forEach((compareTarget) => {\n      this._subs.add(\n        sceneGraph\n          .findByKeyAndType(this, `${compareTarget}-panel`, SceneComparePanel)\n          .state.$timeRange.subscribeToState((newState, prevState) => {\n            if (newState.from !== prevState.from || newState.to !== prevState.to) {\n              this.setState({ value: null });\n            }\n          })\n      );\n    });\n  }\n\n  onChangePreset = (option: SelectableValue<string>) => {\n    reportInteraction('g_pyroscope_app_diff_preset_selected', { value: option.value as string });\n\n    this.closeSelect();\n\n    if (option.value === 'dummy') {\n      this.setState({ value: null, isModalOpen: true });\n      return;\n    }\n\n    if (option.value?.startsWith('auto-select-')) {\n      this.setState({ value: null });\n\n      this.publishEvent(new EventDiffAutoSelect({ wholeRange: option.value === 'auto-select-whole' }), true);\n      return;\n    }\n\n    [CompareTarget.BASELINE, CompareTarget.COMPARISON].forEach((compareTarget) => {\n      const panel = sceneGraph.findByKeyAndType(this, `${compareTarget}-panel`, SceneComparePanel);\n\n      panel.toggleTimeRangeSync(false);\n      panel.applyPreset(option[compareTarget]);\n    });\n\n    this.setState({ value: option.value });\n  };\n\n  onClickSave = () => {\n    reportInteraction('g_pyroscope_app_diff_preset_save_clicked');\n\n    this.setState({ isModalOpen: true });\n  };\n\n  closeModal = () => {\n    this.setState({ isModalOpen: false });\n  };\n\n  openSelect() {\n    this.setState({ isSelectOpen: true });\n  }\n\n  closeSelect() {\n    this.setState({ isSelectOpen: false });\n  }\n\n  onOpenSelect = () => {\n    setTimeout(() => this.openSelect(), 0);\n  };\n\n  onCloseSelect = () => {\n    this.closeSelect();\n  };\n\n  reset() {\n    this.setState({ value: null, isSelectOpen: false, isModalOpen: false });\n  }\n\n  static Component({ model }: SceneComponentProps<ScenePresetsPicker & { onChange: any }>) {\n    const styles = useStyles2(getStyles); // eslint-disable-line react-hooks/rules-of-hooks\n    const { value, isSelectOpen, isModalOpen } = model.useState();\n\n    return (\n      <>\n        <div className={styles.presetsContainer}>\n          <Select\n            className={styles.select}\n            placeholder=\"Choose a preset\"\n            value={value}\n            options={ScenePresetsPicker.PRESETS}\n            onChange={model.onChangePreset}\n            isOpen={isSelectOpen}\n            onOpenMenu={model.onOpenSelect}\n            onCloseMenu={model.onCloseSelect}\n          />\n\n          <Button\n            icon=\"save\"\n            variant=\"secondary\"\n            tooltip=\"Save the current time ranges and filters as a custom preset\"\n            onClick={model.onClickSave}\n          />\n        </div>\n        <Modal\n          title=\"Custom user presets\"\n          isOpen={isModalOpen}\n          closeOnEscape={true}\n          closeOnBackdropClick={true}\n          onDismiss={model.closeModal}\n        >\n          <p>\n            This feature, which would allow you to save the current time ranges and filters, is currently not\n            implemented.\n          </p>\n          <p>\n            Please let us know if you would be interested to use it by{' '}\n            <a href={FEEDBACK_FORM_URL} target=\"_blank\" rel=\"noreferrer noopener\" className={styles.link}>\n              leaving us your feedback.\n            </a>\n          </p>\n          <p>Thank you!</p>\n          <Modal.ButtonRow>\n            <Button variant=\"secondary\" fill=\"outline\" onClick={model.closeModal}>\n              Cancel\n            </Button>\n            <Button onClick={model.closeModal} disabled>\n              Save\n            </Button>\n          </Modal.ButtonRow>\n        </Modal>\n      </>\n    );\n  }\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  presetsContainer: css`\n    display: flex;\n  `,\n  select: css`\n    min-width: ${theme.spacing(24)};\n    text-align: left;\n  `,\n  link: css`\n    color: ${theme.colors.text.link};\n  `,\n});\n","import { sceneGraph, SceneObject, SceneObjectState, VizPanel } from '@grafana/scenes';\nimport { logger } from '@shared/infrastructure/tracking/logger';\nimport { cloneDeep, merge } from 'lodash';\n\nimport { EventTimeseriesDataReceived } from '../../../../domain/events/EventTimeseriesDataReceived';\n\nexport function syncYAxis() {\n  return (vizPanel: SceneObject<SceneObjectState>) => {\n    const maxima = new Map<string, number>();\n\n    const eventSub = vizPanel.subscribeToEvent(EventTimeseriesDataReceived, (event) => {\n      const s = event.payload.series?.[0];\n      const refId = s?.refId;\n\n      if (!refId) {\n        logger.warn('Missing refId! Cannot sync y-axis on the timeseries.', event.payload.series);\n        return;\n      }\n\n      maxima.set(s.refId as string, Math.max(...s.fields[1].values));\n\n      updateTimeseriesAxis(vizPanel, Math.max(...maxima.values()));\n    });\n\n    return () => {\n      eventSub.unsubscribe();\n    };\n  };\n}\n\nfunction updateTimeseriesAxis(vizPanel: SceneObject, max: number) {\n  // findAllObjects searches down the full scene graph\n  const timeseries = sceneGraph.findAllObjects(\n    vizPanel,\n    (o) => o instanceof VizPanel && o.state.pluginId === 'timeseries'\n  ) as VizPanel[];\n\n  for (const t of timeseries) {\n    t.clearFieldConfigCache(); // required\n\n    t.setState({\n      fieldConfig: merge(cloneDeep(t.state.fieldConfig), { defaults: { max } }),\n    });\n  }\n}\n","import { css } from '@emotion/css';\nimport { AdHocVariableFilter, DashboardCursorSync, GrafanaTheme2, TimeRange } from '@grafana/data';\nimport { locationService } from '@grafana/runtime';\nimport {\n  behaviors,\n  SceneComponentProps,\n  sceneGraph,\n  SceneObjectBase,\n  SceneObjectState,\n  SceneTimeRangeState,\n} from '@grafana/scenes';\nimport { useStyles2 } from '@grafana/ui';\nimport React from 'react';\n\nimport { ProfileMetricVariable } from '../../domain/variables/ProfileMetricVariable';\nimport { ServiceNameVariable } from '../../domain/variables/ServiceNameVariable/ServiceNameVariable';\nimport { EventEnableSyncTimeRanges } from './components/SceneComparePanel/domain/events/EventEnableSyncTimeRanges';\nimport { EventSyncRefresh } from './components/SceneComparePanel/domain/events/EventSyncRefresh';\nimport { EventSyncTimeRanges } from './components/SceneComparePanel/domain/events/EventSyncTimeRanges';\nimport { SceneComparePanel } from './components/SceneComparePanel/SceneComparePanel';\nimport { SceneDiffFlameGraph } from './components/SceneDiffFlameGraph/SceneDiffFlameGraph';\nimport { ScenePresetsPicker } from './components/ScenePresetsPicker/ScenePresetsPicker';\nimport { syncYAxis } from './domain/behaviours/syncYAxis';\nimport { EventDiffAutoSelect } from './domain/events/EventDiffAutoSelect';\nimport { EventDiffChoosePreset } from './domain/events/EventDiffChoosePreset';\nimport { CompareTarget } from './domain/types';\n\ninterface SceneExploreDiffFlameGraphState extends SceneObjectState {\n  baselinePanel: SceneComparePanel;\n  comparisonPanel: SceneComparePanel;\n  body: SceneDiffFlameGraph;\n  presetsPicker: ScenePresetsPicker;\n}\n\nexport class SceneExploreDiffFlameGraph extends SceneObjectBase<SceneExploreDiffFlameGraphState> {\n  constructor({\n    useAncestorTimeRange,\n    clearDiffRange,\n    baselineFilters,\n    comparisonFilters,\n  }: {\n    useAncestorTimeRange?: boolean;\n    clearDiffRange?: boolean;\n    baselineFilters?: AdHocVariableFilter[];\n    comparisonFilters?: AdHocVariableFilter[];\n  }) {\n    super({\n      key: 'explore-diff-flame-graph',\n      baselinePanel: new SceneComparePanel({\n        target: CompareTarget.BASELINE,\n        useAncestorTimeRange: Boolean(useAncestorTimeRange),\n        clearDiffRange: Boolean(clearDiffRange),\n        filters: baselineFilters || [],\n      }),\n      comparisonPanel: new SceneComparePanel({\n        target: CompareTarget.COMPARISON,\n        useAncestorTimeRange: Boolean(useAncestorTimeRange),\n        clearDiffRange: Boolean(clearDiffRange),\n        filters: comparisonFilters || [],\n      }),\n      $behaviors: [\n        new behaviors.CursorSync({\n          key: 'metricCrosshairSync',\n          sync: DashboardCursorSync.Crosshair,\n        }),\n        syncYAxis(),\n      ],\n      body: new SceneDiffFlameGraph(),\n      presetsPicker: new ScenePresetsPicker(),\n    });\n\n    this.addActivationHandler(this.onActivate.bind(this));\n  }\n\n  onActivate() {\n    // hack to force UrlSyncManager to handle a new location\n    // this will sync the state from the URL by calling updateFromUrl() on all the time ranges (`SceneTimeRange` and our custom `SceneTimeRangeWithAnnotations`) that are defined on `SceneComparePanel`\n    // if not, landing on this view will result in empty URL search parameters (to/from and diffTo/diffFrom) which will make shareable links useless\n    locationService.partial({}, true); // replace to avoid creating history items\n\n    const profileMetricVariable = sceneGraph.findByKeyAndType(this, 'profileMetricId', ProfileMetricVariable);\n\n    profileMetricVariable.setState({ query: ProfileMetricVariable.QUERY_SERVICE_NAME_DEPENDENT });\n    profileMetricVariable.update(true);\n\n    this.subscribeToEvents();\n\n    return () => {\n      profileMetricVariable.setState({ query: ProfileMetricVariable.QUERY_DEFAULT });\n      profileMetricVariable.update(true);\n    };\n  }\n\n  subscribeToEvents() {\n    this._subs.add(\n      this.subscribeToEvent(EventDiffAutoSelect, (event) => {\n        const selectWholeRange = event.payload.wholeRange;\n        const { baselinePanel, comparisonPanel } = this.state;\n\n        baselinePanel.toggleTimeRangeSync(false);\n        comparisonPanel.toggleTimeRangeSync(false);\n\n        baselinePanel.autoSelectDiffRange(selectWholeRange);\n        comparisonPanel.autoSelectDiffRange(selectWholeRange);\n      })\n    );\n\n    this._subs.add(\n      this.subscribeToEvent(EventDiffChoosePreset, () => {\n        this.state.presetsPicker.openSelect();\n      })\n    );\n\n    this._subs.add(\n      this.subscribeToEvent(EventEnableSyncTimeRanges, (event) => {\n        const { source, enable, timeRange, annotationTimeRange } = event.payload;\n        const { baselinePanel, comparisonPanel } = this.state;\n        const targetPanel = source === CompareTarget.BASELINE ? comparisonPanel : baselinePanel;\n\n        if (enable) {\n          this.syncTimeRanges(targetPanel, timeRange, annotationTimeRange);\n        }\n\n        comparisonPanel.toggleTimeRangeSync(enable);\n        baselinePanel.toggleTimeRangeSync(enable);\n      })\n    );\n\n    this._subs.add(\n      this.subscribeToEvent(EventSyncTimeRanges, (event) => {\n        const { source, timeRange, annotationTimeRange } = event.payload;\n        const { baselinePanel, comparisonPanel } = this.state;\n        const targetPanel = source === CompareTarget.BASELINE ? comparisonPanel : baselinePanel;\n\n        this.syncTimeRanges(targetPanel, timeRange, annotationTimeRange);\n      })\n    );\n\n    this._subs.add(\n      this.subscribeToEvent(EventSyncRefresh, (event) => {\n        const { source } = event.payload;\n        const { baselinePanel, comparisonPanel } = this.state;\n        const targetPanel = source === CompareTarget.BASELINE ? comparisonPanel : baselinePanel;\n\n        targetPanel.refreshTimeseries();\n      })\n    );\n  }\n\n  syncTimeRanges(targetPanel: SceneComparePanel, timeRange?: SceneTimeRangeState, annotationTimeRange?: TimeRange) {\n    if (timeRange) {\n      targetPanel.setTimeRange(timeRange);\n    }\n\n    if (annotationTimeRange) {\n      targetPanel.setDiffRange({\n        from: annotationTimeRange.from.toISOString(),\n        to: annotationTimeRange.to.toISOString(),\n      });\n    }\n  }\n\n  // see SceneProfilesExplorer\n  getVariablesAndGridControls() {\n    return {\n      variables: [\n        sceneGraph.findByKeyAndType(this, 'serviceName', ServiceNameVariable),\n        sceneGraph.findByKeyAndType(this, 'profileMetricId', ProfileMetricVariable),\n        this.state.presetsPicker,\n      ],\n      gridControls: [],\n    };\n  }\n\n  useDiffTimeRanges = () => {\n    const { baselinePanel, comparisonPanel } = this.state;\n\n    const { annotationTimeRange: baselineTimeRange } = baselinePanel.useDiffTimeRange();\n    const { annotationTimeRange: comparisonTimeRange } = comparisonPanel.useDiffTimeRange();\n\n    return {\n      baselineTimeRange,\n      comparisonTimeRange,\n    };\n  };\n\n  static Component({ model }: SceneComponentProps<SceneExploreDiffFlameGraph>) {\n    const styles = useStyles2(getStyles); // eslint-disable-line react-hooks/rules-of-hooks\n\n    const { baselinePanel, comparisonPanel, body } = model.useState();\n\n    return (\n      <div className={styles.container}>\n        <div className={styles.columns}>\n          <baselinePanel.Component model={baselinePanel} />\n          <comparisonPanel.Component model={comparisonPanel} />\n        </div>\n\n        <body.Component model={body} />\n      </div>\n    );\n  }\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  container: css`\n    width: 100%;\n    display: flex;\n    flex-direction: column;\n  `,\n  columns: css`\n    display: flex;\n    flex-direction: row;\n    gap: ${theme.spacing(1)};\n    margin-bottom: ${theme.spacing(1)};\n\n    & > div {\n      flex: 1 1 0;\n    }\n  `,\n});\n","import { GithubAppResponse } from '@shared/pyroscope-api/vcs/v1/vcs_pb';\n\nimport { DataSourceProxyClient } from '../../../../../infrastructure/series/http/DataSourceProxyClient';\n\ntype GithubLoginResponse = {\n  cookie: string;\n};\n\nexport class VcsClient extends DataSourceProxyClient {\n  async githubLogin(authorizationCode: string): Promise<GithubLoginResponse> {\n    const response = await this.fetch('/vcs.v1.VCSService/GithubLogin', {\n      method: 'POST',\n      body: JSON.stringify({\n        authorizationCode,\n      }),\n    });\n\n    const json = await response.json();\n\n    return json;\n  }\n\n  async githubApp(): Promise<GithubAppResponse> {\n    const response = await this.fetch('/vcs.v1.VCSService/GithubApp', {\n      method: 'POST',\n      body: JSON.stringify({}),\n    });\n\n    const json = await response.json();\n\n    return json;\n  }\n}\n","import { logger } from '@shared/infrastructure/tracking/logger';\n\n/** The maximum Unix ms timestamp that can be stored in a JS Date object. */\nconst MAX_UNIX_TS_MS = 8640000000000000;\n\n/**\n * This is a value class representing a GitSession cookie value in the browser.\n * It provides APIs to decode a GitSession cookie value and to check if the the\n * underlying user token is expired.\n */\nexport class GitSessionCookie {\n  private readonly oauthTokenMetadata: string;\n  private readonly expiry: Date;\n\n  constructor(metadata: string, expiry: number) {\n    this.oauthTokenMetadata = metadata;\n    this.expiry = new Date(expiry);\n  }\n\n  /**\n   * Checks if the session cookie is expired. If the optional `biasMs` is\n   * provided, then the expiry is biased to expire sooner by `biasMs`\n   * milliseconds.\n   *\n   * @param biasMs Offset in milliseconds\n   * @returns True if the session cookie is expired.\n   */\n  isUserTokenExpired(biasMs = 0): boolean {\n    return Date.now() >= this.expiry.getTime() - biasMs;\n  }\n\n  /**\n   * Decodes the base64 encoded value portion of a session cookie.\n   *\n   * @param value The value portion of a session cookie\n   * @returns A valid `GitSessionCookie` if the string can be decoded, otherwise\n   * undefined.\n   */\n  static decode(value: string | undefined): GitSessionCookie | undefined {\n    if (value === undefined || value === '') {\n      return undefined;\n    }\n\n    let decoded;\n    try {\n      decoded = atob(value);\n    } catch (error) {\n      logger.error(error as Error, { info: 'Failed to base64 decode GitSession value' });\n      return undefined;\n    }\n\n    const { payload, isLegacy } = GitSessionCookie.tryDecode(decoded);\n    if (isLegacy) {\n      // This is a legacy cookie value, which does not expose a plaintext\n      // expiry. The expiry is set to a maximum date value and we rely on a 401\n      // response from the server to indicate expiration.\n      return new GitSessionCookie(value, MAX_UNIX_TS_MS);\n    }\n\n    return new GitSessionCookie(payload.metadata, Number(payload.expiry));\n  }\n\n  /**\n   * Attempts to decode the plaintext value portion of a session cookie.\n   *\n   * @param input Plaintext representation of a session cookie value\n   * @returns The payload of the session cookie if it's not a legacy cookie. If\n   * it is a legacy cookie, isLegacy is set to true.\n   */\n  private static tryDecode(input: string): { payload: any; isLegacy: boolean } {\n    try {\n      const payload = JSON.parse(input);\n      return { payload, isLegacy: false };\n    } catch {\n      return { payload: undefined, isLegacy: true };\n    }\n  }\n}\n","import { GitSessionCookie } from './GitSessionCookie';\n\nconst LEGACY_GITHUB_SESSION_COOKIE_NAME = 'GitSession';\nconst GITHUB_SESSION_COOKIE_NAME = 'pyroscope_git_session';\n\nexport interface GitSessionCookieManager {\n  getCookie(): GitSessionCookie | undefined;\n  setCookie(cookie: string): void;\n  deleteCookie(): void;\n}\n\ntype Cookie = {\n  key: string;\n  value: string;\n};\n\nclass InternalGitSessionCookieManager implements GitSessionCookieManager {\n  private rawCookie: Cookie | undefined;\n  private sessionCookie: GitSessionCookie | undefined;\n\n  getCookie(): GitSessionCookie | undefined {\n    // To make sure we're using a cookie that accurately reflects the browser\n    // state, let's be paranoid and make sure our cached cookie is accurate.\n    this.syncCookieWithBrowser();\n    return this.sessionCookie;\n  }\n\n  setCookie(cookie: string): void {\n    if (!cookie.startsWith(`${GITHUB_SESSION_COOKIE_NAME}=`)) {\n      cookie = `${GITHUB_SESSION_COOKIE_NAME}=${cookie}`;\n    }\n\n    const rawCookie = InternalGitSessionCookieManager.getCookieFromJar(cookie, GITHUB_SESSION_COOKIE_NAME);\n    if (rawCookie === undefined) {\n      // If we can't parse the key-value pair out of [cookie], let's return now\n      // to avoid corrupting the state of the manager or browser cookie.\n      return;\n    }\n\n    this.deleteLegacyCookie();\n    this.rawCookie = rawCookie;\n    this.sessionCookie = GitSessionCookie.decode(rawCookie.value);\n    document.cookie = `${cookie}; path=/`;\n  }\n\n  deleteCookie(): void {\n    document.cookie = `${GITHUB_SESSION_COOKIE_NAME}=; Path=/; expires=Thu, 01 Jan 1970 00:00:00 UTC;`;\n    this.deleteLegacyCookie();\n    this.rawCookie = undefined;\n    this.sessionCookie = undefined;\n  }\n\n  private deleteLegacyCookie(): void {\n    document.cookie = `${LEGACY_GITHUB_SESSION_COOKIE_NAME}=; Path=/; expires=Thu, 01 Jan 1970 00:00:00 UTC;`;\n  }\n\n  private syncCookieWithBrowser(): void {\n    const cookie = InternalGitSessionCookieManager.getCookieFromJar(document.cookie, GITHUB_SESSION_COOKIE_NAME);\n    if (cookie?.key === this.rawCookie?.key && cookie?.value === this.rawCookie?.value) {\n      return;\n    }\n\n    cookie !== undefined ? this.setCookie(`${cookie.key}=${cookie.value}`) : this.deleteCookie();\n  }\n\n  private static getCookieFromJar(jar: string, name: string): Cookie | undefined {\n    return jar\n      .split(';')\n      .map((ck) => {\n        // Just doing split('=') results in the trailing padding to be dropped.\n        // While `btoa` seems to handle this case without problem, being\n        // pedantic with padding isn't a bad thing. Doing this song and dance\n        // allows us to keep the trailing padding.\n        const [key, ...rest] = ck.trim().split('=');\n        const value = rest.join('=');\n        return { key: key.trim(), value: value?.trim() };\n      })\n      .find(({ key }) => key === name);\n  }\n}\n\nexport const gitSessionCookieManager: GitSessionCookieManager = new InternalGitSessionCookieManager();\n","import { config } from '@grafana/runtime';\n\nimport { PLUGIN_BASE_URL, ROUTES } from '../../../../../../../../../constants';\n\nfunction stripTrailingSlash(str: string): string {\n  return str.endsWith('/') ? str.slice(0, -1) : str;\n}\n\nfunction buildGitHubAuthURL(clientID: string, nonce: string, callbackUrl: string): string {\n  const appSubUrl = stripTrailingSlash(config.appSubUrl || '/');\n  const redirectUri = `${window.location.origin}${appSubUrl}${PLUGIN_BASE_URL}${ROUTES.GITHUB_CALLBACK}`;\n\n  const url = new URL('/login/oauth/authorize', 'https://github.com');\n  url.searchParams.set('client_id', clientID);\n  if (callbackUrl) {\n    url.searchParams.set('redirect_uri', callbackUrl);\n  }\n  url.searchParams.set('scope', 'repo');\n  url.searchParams.set(\n    'state',\n    btoa(\n      JSON.stringify({\n        redirect_uri: redirectUri,\n        nonce,\n      })\n    )\n  );\n\n  return url.toString();\n}\n\nconst POPUP_WIDTH = 800;\nconst POPUP_HEIGHT = 950;\n\nexport function openLoginPopup(clientId: string, nonce: string, callbackUrl: string): Window | null {\n  const oauthURL = buildGitHubAuthURL(clientId, nonce, callbackUrl);\n\n  const { top } = window;\n  const x = (top?.outerWidth ?? 0) / 2 + (top?.screenX ?? 0) - POPUP_WIDTH / 2;\n  const y = (top?.outerHeight ?? 0) / 2 + (top?.screenY ?? 0) - POPUP_HEIGHT / 2;\n\n  return window.open(\n    oauthURL,\n    'GitHub Login',\n    `toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=no, resizable=no, copyhistory=no, width=${POPUP_WIDTH}, height=${POPUP_HEIGHT}, top=${y}, left=${x}`\n  );\n}\n","import { displayError } from '@shared/domain/displayStatus';\nimport { logger } from '@shared/infrastructure/tracking/logger';\nimport React from 'react';\n\nimport { VcsClient } from '../../../infrastructure/VcsClient';\nimport { PrivateVcsClient } from '../../GitHubContextProvider/infrastructure/PrivateVcsClient';\nimport { nonce } from '../GitHubContextProvider';\nimport { GitSessionCookie } from '../infrastructure/GitSessionCookie';\nimport { gitSessionCookieManager } from '../infrastructure/GitSessionCookieManager';\nimport { openLoginPopup } from './openLoginPopup';\n\nexport async function githubLogin(\n  vcsClient: VcsClient,\n  privateVcsClient: PrivateVcsClient,\n  sessionCookie: GitSessionCookie | undefined,\n  externalWindow: Window | null | undefined,\n  setExternalWindow: React.Dispatch<React.SetStateAction<Window | null | undefined>>\n): Promise<void> {\n  if (externalWindow) {\n    externalWindow.close();\n  }\n\n  if (sessionCookie?.isUserTokenExpired()) {\n    // A session already exists, but it's expired. Refresh the session.\n    try {\n      await privateVcsClient.refresh();\n      return;\n    } catch (error) {\n      // This error isn't fatal and we can recover from it by restarting the\n      // oauth login flow.\n      logger.error(error as Error, { info: 'Failed to refresh GitHub user token' });\n\n      // Failed to refresh the token. Delete the old token and enter the\n      // follow login flow to get a completely new token.\n      gitSessionCookieManager.deleteCookie();\n    }\n  }\n\n  // No session cookie exists, begin the complete login flow.\n  try {\n    const { clientID: clientId, callbackURL: callbackUrl } = await vcsClient.githubApp();\n    setExternalWindow(openLoginPopup(clientId, nonce, callbackUrl));\n  } catch (error) {\n    displayError(error as Error, ['Failed to start login flow.', (error as Error).message]);\n  }\n}\n","import { VcsClient } from '../../../infrastructure/VcsClient';\n\nexport async function authFromUrl(\n  vcsClient: VcsClient,\n  urlSearchParams: URLSearchParams,\n  nonce: string\n): Promise<string> {\n  const code = urlSearchParams.get('code');\n  if (!code) {\n    return '';\n  }\n\n  const stateValue = urlSearchParams.get('state');\n  if (!stateValue) {\n    throw new Error('Invalid state parameter!');\n  }\n\n  let state;\n\n  try {\n    state = JSON.parse(atob(stateValue));\n  } catch (error) {\n    throw new Error('Invalid state parameter!');\n  }\n\n  if (state.nonce !== nonce) {\n    throw new Error('Invalid nonce parameter!');\n  }\n\n  const res = await vcsClient.githubLogin(code);\n  return res.cookie;\n}\n","import { displayError } from '@shared/domain/displayStatus';\nimport { useEffect } from 'react';\n\nimport { VcsClient } from '../../../infrastructure/VcsClient';\nimport { authFromUrl } from './authFromUrl';\n\ntype PollGithubPopupParams = {\n  vcsClient: VcsClient;\n  externalWindow: Window | null | undefined;\n  setExternalWindow: (window: Window | null) => void;\n  setSessionCookie: (sessionCookie: string) => void;\n  nonce: string;\n};\n\nfunction tryGetWindowSearchParams(window: Window): URLSearchParams | null {\n  try {\n    return new URL(window.location.href).searchParams;\n  } catch {\n    return null;\n  }\n}\n\nexport function usePollGitHubPopup({\n  vcsClient,\n  externalWindow,\n  setExternalWindow,\n  setSessionCookie,\n  nonce,\n}: PollGithubPopupParams) {\n  // eslint-disable-next-line sonarjs/cognitive-complexity\n  useEffect(() => {\n    const checkPopup = async () => {\n      if (!externalWindow || externalWindow.closed) {\n        setExternalWindow(null);\n        return;\n      }\n\n      try {\n        const searchParams = tryGetWindowSearchParams(externalWindow);\n\n        if (searchParams !== null) {\n          const sessionCookie = await authFromUrl(vcsClient, searchParams, nonce);\n\n          if (sessionCookie) {\n            setSessionCookie(sessionCookie);\n            externalWindow.close();\n            setExternalWindow(null);\n            return;\n          }\n        }\n      } catch (error) {\n        displayError(error as Error, ['Error while login in with GitHub!', (error as Error).message]);\n        externalWindow.close();\n        setExternalWindow(null);\n        return;\n      }\n\n      // keep checking for the popup to close\n      window.setTimeout(checkPopup, 700);\n    };\n\n    if (externalWindow) {\n      checkPopup();\n    }\n\n    return () => {\n      if (externalWindow) {\n        externalWindow.close();\n        setExternalWindow(null);\n      }\n    };\n  }, [externalWindow, setExternalWindow, setSessionCookie, nonce, vcsClient]);\n}\n","import { createContext } from 'react';\n\nexport type TGitHubContext = {\n  isLoggedIn: boolean;\n  isSessionExpired: boolean;\n  isLoginInProgress: boolean;\n  login: () => Promise<void>;\n};\n\nexport const DEFAULT_GITHUB_CONTEXT: TGitHubContext = {\n  isLoginInProgress: false,\n  isLoggedIn: false,\n  isSessionExpired: false,\n  login: async () => {},\n};\n\nexport const GitHubContext = createContext(DEFAULT_GITHUB_CONTEXT);\n","import { logger } from '@shared/infrastructure/tracking/logger';\n\nimport { DataSourceProxyClient } from '../../../../../../../infrastructure/series/http/DataSourceProxyClient';\nimport { GitSessionCookieManager, gitSessionCookieManager } from './GitSessionCookieManager';\n\ntype GetFileResponse = {\n  content: string;\n  URL: string;\n};\n\ntype Commit = {\n  repositoryUrl: string;\n  gitRef: string;\n};\n\ntype GetCommitResponse = {\n  author: {\n    avatarURL: string;\n    login: string;\n  };\n  date?: Date;\n  message: string;\n  sha: string;\n  URL: string;\n};\n\nexport const PLACEHOLDER_COMMIT_DATA = Object.freeze({\n  sha: '<unknown>',\n  date: undefined,\n  author: {\n    login: 'unknown author',\n    avatarURL: '',\n  },\n  message: '',\n  URL: '',\n});\n\n/**\n * Exposes VCSService endpoints which are protected by token authentication. It\n * implements middleware to try auto-refresh expired tokens. While an\n * auto-refresh is in progress, subsequent requests are queued. Once the token\n * is refreshed, the queued requests will be dispatched using the new token.\n *\n * WARNING: Only one instance of this class should be instantiated because it\n * needs to keep a singleton reference to the `GitSession` cookie. This class\n * will refresh the `GitSession` cookie whenever it expires and multiple\n * instances will cause unexpected errors and race conditions.\n */\nexport class PrivateVcsClient extends DataSourceProxyClient {\n  private sessionManager: GitSessionCookieManager;\n\n  private pendingQueue: Array<(err: Error | undefined) => void>;\n  private isRefreshing: boolean;\n\n  /** Time interval where the session should be considered expired. */\n  private static readonly BIAS_MS = 5 * 60 * 1000; // 5 minutes\n\n  constructor(options: { dataSourceUid: string }) {\n    super(options);\n\n    this.sessionManager = gitSessionCookieManager;\n    this.isRefreshing = false;\n    this.pendingQueue = [];\n  }\n\n  /**\n   * Fetches a file from GitHub.\n   *\n   * @param repositoryUrl A repository url\n   * @param gitRef A ref of the file version\n   * @param localPath A file path relative to the repository root\n   * @returns Base64 encoded file contents.\n   */\n  async getFile(repositoryUrl: string, gitRef: string, localPath: string, rootPath: string): Promise<GetFileResponse> {\n    const response = await this.postWithRefresh(\n      '/vcs.v1.VCSService/GetFile',\n      JSON.stringify({\n        repositoryURL: repositoryUrl,\n        ref: gitRef,\n        localPath,\n        rootPath,\n      })\n    );\n\n    return response.json();\n  }\n\n  /**\n   * Fetches a series of commit metadata (author, date, etc) for a list of\n   * commit refs.\n   *\n   * @param commits A list of commits\n   * @returns GitHub commit metadata for the commits\n   */\n  async getCommits(commits: Commit[]): Promise<GetCommitResponse[]> {\n    return await Promise.all(\n      commits.map(({ repositoryUrl, gitRef }) => {\n        if (!repositoryUrl || !gitRef) {\n          return PLACEHOLDER_COMMIT_DATA;\n        }\n\n        return this.getCommit(repositoryUrl, gitRef).catch((error) => {\n          logger.error(error, {\n            info: `Error while fetching commit from repo \"${repositoryUrl}\" (${gitRef})!'`,\n          });\n\n          return PLACEHOLDER_COMMIT_DATA;\n        });\n      })\n    );\n  }\n\n  async refresh(): Promise<void> {\n    return this.refreshSession();\n  }\n\n  /**\n   * Gets commit metadata (author, date, etc) for a single commit ref.\n   *\n   * @param repositoryUrl A repository url\n   * @param gitRef A commit ref\n   * @returns Metadata for a single GitHub commit.\n   */\n  private async getCommit(repositoryUrl: string, gitRef: string): Promise<GetCommitResponse> {\n    const response = await this.postWithRefresh(\n      '/vcs.v1.VCSService/GetCommit',\n      JSON.stringify({\n        repositoryURL: repositoryUrl,\n        ref: gitRef,\n      })\n    );\n\n    const json = await response.json();\n    json.date &&= new Date(json.date);\n    return json;\n  }\n\n  /**\n   * Makes an HTTP POST request. If the session cookie is expired, this method\n   * will auto-refresh the session cookie. During this time, all subsequent\n   * requests will be queued until the refresh is complete.\n   *\n   * @param path An API route path\n   * @param body Request body contents\n   * @returns A promise for the HTTP POST request.\n   */\n  private async postWithRefresh(path: string, body: string): Promise<Response> {\n    // Check if the session is refreshing.\n    if (this.isRefreshing) {\n      return this.queueRequest(path, body);\n    }\n\n    // Check if session is expired.\n    if (this.sessionManager.getCookie()?.isUserTokenExpired(PrivateVcsClient.BIAS_MS)) {\n      this.isRefreshing = true;\n\n      // Refresh the session.\n      try {\n        await this.refreshSession();\n      } catch (e) {\n        this.sessionManager.deleteCookie();\n        this.flushQueue(e as Error);\n      }\n\n      // Resolve the request that triggered the refresh.\n      this.flushQueue();\n      this.isRefreshing = false;\n    }\n\n    return this.post(path, body);\n  }\n\n  /**\n   * Makes an HTTP POST request. This method assumes a valid session cookie.\n   *\n   * @param path An API route path\n   * @param body Request body contents\n   * @returns A response of the resulting HTTP POST request.\n   */\n  private async post(path: string, body: string): Promise<Response> {\n    return this.fetch(path, {\n      method: 'POST',\n      body: body,\n    });\n  }\n\n  /**\n   * Exchanges the current session cookie for a new one, then saves the cookie\n   * in the session manager.\n   */\n  private async refreshSession(): Promise<void> {\n    const response = await this.fetch('/vcs.v1.VCSService/GithubRefresh', {\n      method: 'POST',\n      body: JSON.stringify({}),\n    });\n\n    const body = await response.json();\n    this.sessionManager.setCookie(body.cookie);\n  }\n\n  /**\n   * Queues an HTTP request to the provided path with the provided body. The\n   * request will be executed when the queue gets flushed.\n   *\n   * @param path An API route path\n   * @param body Request body contents\n   * @returns A response of the resulting HTTP POST request.\n   */\n  private async queueRequest(path: string, body: string): Promise<Response> {\n    return new Promise((resolve, reject) => {\n      this.pendingQueue.push((err) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n\n        resolve(this.post(path, body));\n      });\n    });\n  }\n\n  /**\n   * Flushes a queue of requests in the order in which they were received. If\n   * an error occurred while the requests were queued, it is passed to each\n   * request callback.\n   *\n   * This function also resets the internal queue.\n   *\n   * @param err An optional error\n   */\n  private flushQueue(err: Error | undefined = undefined) {\n    this.pendingQueue.forEach((callback) => callback(err));\n    this.pendingQueue = [];\n  }\n}\n","import { displayError } from '@shared/domain/displayStatus';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { DataSourceProxyClientBuilder } from 'src/pages/ProfilesExplorerView/infrastructure/series/http/DataSourceProxyClientBuilder';\n\nimport { VcsClient } from '../../infrastructure/VcsClient';\nimport { generateNonce } from './domain/generateNonce';\nimport { githubLogin } from './domain/githubLogin';\nimport { useGithubSessionCookie } from './domain/useGithubSessionCookie';\nimport { usePollGitHubPopup } from './domain/usePollGitHubPopup';\nimport { DEFAULT_GITHUB_CONTEXT, GitHubContext } from './GitHubContext';\nimport { PrivateVcsClient } from './infrastructure/PrivateVcsClient';\n\ntype GitHubContextProviderProps = {\n  dataSourceUid: string;\n  children: React.ReactNode;\n};\n\nexport const nonce = generateNonce();\n\n// Keep the data source UID in session storage to reuse it if the page is refreshed\nconst SESSION_DATA_SOURCE_KEY = `grafana-pyroscope-app.gitHubIntegration.dataSourceUid`;\n\nexport function GitHubContextProvider({ dataSourceUid, children }: GitHubContextProviderProps) {\n  const vcsClient = DataSourceProxyClientBuilder.build(dataSourceUid, VcsClient);\n  const privateVcsClient = DataSourceProxyClientBuilder.build(dataSourceUid, PrivateVcsClient);\n\n  const [isLoginInProgress, setIsLoginInProgress] = useState(DEFAULT_GITHUB_CONTEXT.isLoginInProgress);\n  const [sessionCookie, setSessionCookie] = useGithubSessionCookie();\n  const [externalWindow, setExternalWindow] = useState<Window | null>();\n\n  // hack to prevent failures impossible to fix for the user (unless they know they have to delete the cookie)\n  // when logged in and changing data source\n  // TODO: provide a better way\n  useEffect(() => {\n    const gitHubIntegrationDataSourceUid = sessionStorage.getItem(SESSION_DATA_SOURCE_KEY);\n    if (gitHubIntegrationDataSourceUid !== dataSourceUid) {\n      setSessionCookie('');\n      sessionStorage.setItem(SESSION_DATA_SOURCE_KEY, dataSourceUid || '');\n    }\n  }, [dataSourceUid]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  usePollGitHubPopup({ vcsClient, externalWindow, setExternalWindow, setSessionCookie, nonce });\n\n  // Check if login window is open and toggle the login state accordingly. For\n  // example, if the login window IS open and the login state is not\n  // \"in progress\", then update the state to be \"in progress\".\n  const newIsLoginInProgress = externalWindow ? !externalWindow.closed : false;\n  if (newIsLoginInProgress !== isLoginInProgress) {\n    setIsLoginInProgress(newIsLoginInProgress);\n  }\n\n  const login = useCallback(async () => {\n    try {\n      await githubLogin(vcsClient, privateVcsClient, sessionCookie, externalWindow, setExternalWindow);\n    } catch (error) {\n      displayError(error as Error, ['Failed to login to GitHub', (error as Error).message]);\n    }\n  }, [vcsClient, privateVcsClient, sessionCookie, externalWindow]);\n\n  return (\n    <GitHubContext.Provider\n      value={{\n        isLoginInProgress,\n        isLoggedIn: Boolean(sessionCookie && !sessionCookie.isUserTokenExpired()),\n        isSessionExpired: Boolean(sessionCookie?.isUserTokenExpired()),\n        login,\n      }}\n    >\n      {children}\n    </GitHubContext.Provider>\n  );\n}\n","export function generateNonce(): string {\n  // https://stackoverflow.com/questions/76825670/how-to-generate-and-use-random-value-for-nonce-in-inline-script-in-javascript\n  return btoa(String.fromCharCode(...crypto.getRandomValues(new Uint8Array(32))));\n}\n","import { useState } from 'react';\n\nimport { gitSessionCookieManager } from '../infrastructure/GitSessionCookieManager';\n\nexport function useGithubSessionCookie() {\n  const [cookie, setCookie] = useState(gitSessionCookieManager.getCookie());\n\n  const setNextCookie = (nextValue: string) => {\n    if (!nextValue) {\n      gitSessionCookieManager.deleteCookie();\n      setCookie(undefined);\n    } else {\n      gitSessionCookieManager.setCookie(nextValue);\n      setCookie(gitSessionCookieManager.getCookie());\n    }\n  };\n\n  return [cookie, setNextCookie] as const;\n}\n","import React, { createContext, ReactNode, useContext } from 'react';\nimport { useLocalStorage } from 'react-use';\n\nimport { FunctionVersion } from './types/FunctionDetails';\n\ntype OverridesStorage = Record<string, Record<string, FunctionVersion>>;\n\n/**\n * Indicates how function version was defined\n */\nexport enum FunctionVersionOrigin {\n  // provided manually by the user\n  USER = 'user',\n  // retrieved from profile labels\n  LABELS = 'labels',\n}\n\ninterface FunctionVersionContextType {\n  saveOverride: (datasourceUid: string, serviceName: string, version: FunctionVersion) => void;\n  deleteOverride: (datasourceUid: string, serviceName: string) => void;\n  deleteAllOverrides: () => void;\n  getFunctionVersion: (\n    datasourceUid: string,\n    serviceName: string,\n    defaultVersion?: FunctionVersion\n  ) => {\n    functionVersion: FunctionVersion | undefined;\n    functionVersionOrigin: FunctionVersionOrigin | undefined;\n  };\n}\n\nconst FunctionVersionContext = createContext<FunctionVersionContextType | undefined>(undefined);\n\ninterface FunctionVersionProviderProps {\n  children: ReactNode;\n}\n\nexport function FunctionVersionProvider({ children }: FunctionVersionProviderProps) {\n  const [overrides, setOverrides] = useLocalStorage<OverridesStorage>(\n    'grafana-pyroscope-app.functionDetailsOverrides',\n    {}\n  );\n\n  const saveOverride = (datasourceUid: string, serviceName: string, version: FunctionVersion) => {\n    setOverrides((overrides) => {\n      if (!overrides) {\n        overrides = {};\n      }\n      if (!overrides[datasourceUid]) {\n        overrides[datasourceUid] = {};\n      }\n      overrides[datasourceUid][serviceName] = {\n        ...version,\n      };\n      return overrides;\n    });\n  };\n\n  const deleteOverride = (datasourceUid: string, serviceName: string) => {\n    setOverrides((overrides) => {\n      if (!overrides || !overrides[datasourceUid] || !overrides[datasourceUid][serviceName]) {\n        return overrides;\n      }\n      delete overrides[datasourceUid][serviceName];\n      return overrides;\n    });\n  };\n\n  const deleteAllOverrides = () => {\n    setOverrides({});\n  };\n\n  const getFunctionVersion = (datasourceUid: string, serviceName: string, defaultVersion?: FunctionVersion) => {\n    const overriddenVersion = overrides?.[datasourceUid]?.[serviceName];\n\n    let functionVersionOrigin: FunctionVersionOrigin | undefined;\n    if (overriddenVersion) {\n      functionVersionOrigin = FunctionVersionOrigin.USER;\n    } else if (defaultVersion) {\n      functionVersionOrigin = FunctionVersionOrigin.LABELS;\n    }\n\n    return {\n      functionVersion: overriddenVersion || defaultVersion,\n      functionVersionOrigin,\n    };\n  };\n\n  const value: FunctionVersionContextType = {\n    saveOverride,\n    deleteOverride,\n    deleteAllOverrides,\n    getFunctionVersion,\n  };\n\n  return <FunctionVersionContext.Provider value={value}>{children}</FunctionVersionContext.Provider>;\n}\n\nexport function useFunctionVersionContext(): FunctionVersionContextType {\n  const context = useContext(FunctionVersionContext);\n  if (context === undefined) {\n    throw new Error('useFunctionVersionContext must be used within a FunctionVersionProvider');\n  }\n  return context;\n}\n\nexport function useFunctionVersion(datasourceUid: string, serviceName: string, version: FunctionVersion | undefined) {\n  const { saveOverride, deleteOverride, deleteAllOverrides, getFunctionVersion } = useFunctionVersionContext();\n\n  const { functionVersion, functionVersionOrigin } = getFunctionVersion(datasourceUid, serviceName, version);\n\n  return {\n    saveOverride,\n    deleteOverride,\n    deleteAllOverrides,\n    functionVersion,\n    functionVersionOrigin,\n  };\n}\n","import { BusEventWithPayload } from '@grafana/data';\n\nexport interface RemoveSpanSelectorPayload {}\n\nexport class RemoveSpanSelector extends BusEventWithPayload<RemoveSpanSelectorPayload> {\n  public static type = 'remove-span-selector';\n}\n","import { config } from '@grafana/runtime';\n\nexport const featureToggles = {\n  // @ts-ignore Remove after upgrading grafana/runtime to version including the toggle type\n  metricsFromProfiles: !!config.featureToggles['metricsFromProfiles'],\n  // @ts-ignore Remove after upgrading grafana/runtime to version including the toggle type\n  grafanaAssistantInProfilesDrilldown: !!config.featureToggles['grafanaAssistantInProfilesDrilldown'],\n};\n","import { SceneQueryRunner } from '@grafana/scenes';\n\nimport { PYROSCOPE_DATA_SOURCE } from '../pyroscope-data-sources';\nimport { TimeSeriesQueryRunnerParams } from '../timeseries/TimeSeriesQueryRunnerParams';\nimport { withPreventInvalidQuery } from '../withPreventInvalidQuery';\n\ntype FlameGraphQueryRunnerParams = TimeSeriesQueryRunnerParams & {\n  maxNodes?: number;\n  spanSelector?: string;\n};\n\nexport function buildFlameGraphQueryRunner({ filters, maxNodes, spanSelector }: FlameGraphQueryRunnerParams) {\n  const completeFilters = filters ? [...filters] : [];\n  completeFilters.unshift({ key: 'service_name', operator: '=', value: '$serviceName' });\n\n  const selector = completeFilters.map(({ key, operator, value }) => `${key}${operator}\"${value}\"`).join(',');\n\n  const queryRunner = new SceneQueryRunner({\n    datasource: PYROSCOPE_DATA_SOURCE,\n    queries: [\n      {\n        refId: 'profile',\n        queryType: 'profile',\n        profileTypeId: '$profileMetricId',\n        labelSelector: `{${selector},$filters}`,\n        maxNodes,\n        ...(spanSelector && { spanSelector: [spanSelector] }),\n      },\n    ],\n  });\n\n  return withPreventInvalidQuery(queryRunner);\n}\n","import { Field, Message } from 'protobufjs/light';\n\nexport class PprofRequest extends Message<PprofRequest> {\n    constructor(\n        profile_typeID: string,\n        label_selector: string,\n        start: number,\n        end: number,\n        max_nodes: number\n    ) {\n        super();\n        this.profile_typeID = profile_typeID;\n        this.label_selector = label_selector;\n        this.start = start;\n        this.end = end;\n        this.max_nodes = max_nodes;\n    }\n\n    @Field.d(1, 'string')\n    profile_typeID: string;\n\n    @Field.d(2, 'string')\n    label_selector: string;\n\n    @Field.d(3, 'int64')\n    start: number;\n\n    @Field.d(4, 'int64')\n    end: number;\n\n    @Field.d(5, 'int64')\n    max_nodes: number;\n}\n","import { TimeRange } from '@grafana/data';\nimport { parseQuery } from '@shared/domain/url-params/parseQuery';\nimport { PprofProfile } from '@shared/types/PprofProfile';\n\nimport { DataSourceProxyClient } from '../../../infrastructure/series/http/DataSourceProxyClient';\nimport { PprofRequest } from './PprofRequest';\n\ntype SelectMergeProfileParams = {\n  query: string;\n  timeRange: TimeRange;\n  maxNodes: number;\n};\n\ntype SelectMergeProfileJsonParams = {\n  profileMetricId: string;\n  labelsSelector: string;\n  start: number;\n  end: number;\n  stackTrace: string[];\n  maxNodes: number;\n};\n\nexport class PprofApiClient extends DataSourceProxyClient {\n  static buildPprofRequest(query: string, timeRange: TimeRange, maxNodes: number): Uint8Array {\n    const { profileMetricId, labelsSelector } = parseQuery(query);\n\n    const start = timeRange.from.unix() * 1000;\n    const end = timeRange.to.unix() * 1000;\n\n    const message = new PprofRequest(profileMetricId, labelsSelector, start, end, maxNodes);\n\n    return PprofRequest.encode(message).finish();\n  }\n\n  async selectMergeProfile({ query, timeRange, maxNodes }: SelectMergeProfileParams): Promise<Blob> {\n    const response = await this.fetch('/querier.v1.QuerierService/SelectMergeProfile', {\n      method: 'POST',\n      headers: { 'content-type': 'application/proto' },\n      body: new Blob([PprofApiClient.buildPprofRequest(query, timeRange, maxNodes)]),\n    });\n\n    return response.blob();\n  }\n\n  async selectMergeProfileJson({\n    profileMetricId,\n    labelsSelector,\n    start,\n    end,\n    stackTrace,\n    maxNodes,\n  }: SelectMergeProfileJsonParams): Promise<PprofProfile> {\n    const response = await this.fetch('/querier.v1.QuerierService/SelectMergeProfile', {\n      method: 'POST',\n      body: JSON.stringify({\n        profile_typeID: profileMetricId,\n        label_selector: labelsSelector,\n        start: start * 1000,\n        end: end * 1000,\n        stackTraceSelector: {\n          call_site: stackTrace.map((name) => ({ name })),\n        },\n        maxNodes,\n      }),\n    });\n\n    return response.json();\n  }\n}\n","import { TimeRange } from '@grafana/data';\nimport { parseQuery } from '@shared/domain/url-params/parseQuery';\n\nexport function getExportFilename(query: string, timeRange: TimeRange) {\n  const { serviceId, profileMetricId } = parseQuery(query);\n  const dateString = `${timeRange.from.format('YYYY-MM-DD_HHmm')}-to-${timeRange.to.format('YYYY-MM-DD_HHmm')}`;\n  return `${serviceId.replace(/\\//g, '-')}_${profileMetricId}_${dateString}`;\n}\n","import { HttpClient } from '@shared/infrastructure/http/HttpClient';\nimport { FlamebearerProfile } from '@shared/types/FlamebearerProfile';\n\ntype UploadResponse = {\n  key: string;\n  url: string;\n  subProfiles: any[]; // TODO: define them, what are they?\n};\n\nclass FlamegraphDotComApiClient extends HttpClient {\n  constructor() {\n    super('https://flamegraph.com/api', {\n      'content-type': 'application/json',\n    });\n  }\n\n  async upload(name: string, profile: FlamebearerProfile): Promise<UploadResponse> {\n    const response = await this.fetch('/upload/v1', {\n      method: 'POST',\n      body: JSON.stringify({\n        name,\n        profile: btoa(JSON.stringify(profile)),\n        fileTypeData: {\n          units: profile.metadata.units,\n          spyName: profile.metadata.spyName,\n        },\n        type: 'json',\n      }),\n    });\n\n    const json = await response.json();\n\n    return json;\n  }\n}\n\nexport const flamegraphDotComApiClient = new FlamegraphDotComApiClient();\n","import { TimeRange } from '@grafana/data';\nimport { SceneComponentProps, sceneGraph, SceneObjectBase, SceneObjectState } from '@grafana/scenes';\nimport { Button, Dropdown, Menu } from '@grafana/ui';\nimport { displayError } from '@shared/domain/displayStatus';\nimport { reportInteraction } from '@shared/domain/reportInteraction';\nimport { useMaxNodesFromUrl } from '@shared/domain/url-params/useMaxNodesFromUrl';\nimport { DEFAULT_SETTINGS } from '@shared/infrastructure/settings/PluginSettings';\nimport { useFetchPluginSettings } from '@shared/infrastructure/settings/useFetchPluginSettings';\nimport { DomainHookReturnValue } from '@shared/types/DomainHookReturnValue';\nimport { FlamebearerProfile } from '@shared/types/FlamebearerProfile';\nimport 'compression-streams-polyfill';\nimport saveAs from 'file-saver';\nimport React from 'react';\n\nimport { ProfilesDataSourceVariable } from '../../../../domain/variables/ProfilesDataSourceVariable';\nimport { ProfileApiClient } from '../../../../infrastructure/profiles/ProfileApiClient';\nimport { DataSourceProxyClientBuilder } from '../../../../infrastructure/series/http/DataSourceProxyClientBuilder';\nimport { PprofApiClient } from '../../infrastructure/PprofApiClient';\nimport { getExportFilename } from './domain/getExportFilename';\nimport { flamegraphDotComApiClient } from './infrastructure/flamegraphDotComApiClient';\n\ninterface SceneExportMenuState extends SceneObjectState {}\n\ntype ExtraProps = {\n  query: string;\n  timeRange: TimeRange;\n};\n\nexport class SceneExportMenu extends SceneObjectBase<SceneExportMenuState> {\n  constructor() {\n    super({ key: 'export-flame-graph-menu' });\n  }\n\n  async fetchFlamebearerProfile({\n    dataSourceUid,\n    query,\n    timeRange,\n    maxNodes,\n  }: ExtraProps & { dataSourceUid: string; maxNodes: number | null }): Promise<FlamebearerProfile | null> {\n    const profileApiClient = DataSourceProxyClientBuilder.build(dataSourceUid, ProfileApiClient);\n\n    let profile;\n\n    try {\n      profile = await profileApiClient.get({\n        query,\n        timeRange,\n        format: 'json',\n        maxNodes: maxNodes || DEFAULT_SETTINGS.maxNodes,\n      });\n    } catch (error) {\n      displayError(error as Error, ['Error while loading flamebearer profile data!', (error as Error).message]);\n      return null;\n    }\n\n    return profile as FlamebearerProfile;\n  }\n\n  async fetchPprofProfile({\n    dataSourceUid,\n    query,\n    timeRange,\n    maxNodes,\n  }: ExtraProps & { dataSourceUid: string; maxNodes: number | null }): Promise<Blob | null> {\n    const pprofApiClient = DataSourceProxyClientBuilder.build(dataSourceUid, PprofApiClient);\n\n    let profile;\n\n    try {\n      const blob = await pprofApiClient.selectMergeProfile({\n        query,\n        timeRange,\n        maxNodes: maxNodes || DEFAULT_SETTINGS.maxNodes,\n      });\n      profile = await new Response(blob.stream().pipeThrough(new CompressionStream('gzip'))).blob();\n    } catch (error) {\n      displayError(error as Error, ['Failed to export to pprof!', (error as Error).message]);\n      return null;\n    }\n\n    return profile;\n  }\n\n  useSceneExportMenu = ({ query, timeRange }: ExtraProps): DomainHookReturnValue => {\n    const dataSourceUid = sceneGraph.findByKeyAndType(this, 'dataSource', ProfilesDataSourceVariable).useState()\n      .value as string;\n\n    const [maxNodes] = useMaxNodesFromUrl();\n    const { settings } = useFetchPluginSettings();\n\n    const downloadPng = () => {\n      reportInteraction('g_pyroscope_app_export_profile', { format: 'png' });\n\n      const filename = `${getExportFilename(query, timeRange)}.png`;\n\n      (document.querySelector('canvas[data-testid=\"flameGraph\"]') as HTMLCanvasElement).toBlob((blob) => {\n        if (!blob) {\n          const error = new Error('Error while creating the image, no blob.');\n          displayError(error, ['Failed to export to png!', error.message]);\n          return;\n        }\n\n        saveAs(blob, filename);\n      }, 'image/png');\n    };\n\n    const downloadJson = async () => {\n      reportInteraction('g_pyroscope_app_export_profile', { format: 'json' });\n\n      const profile = await this.fetchFlamebearerProfile({ dataSourceUid, query, timeRange, maxNodes });\n      if (!profile) {\n        return;\n      }\n\n      const filename = `${getExportFilename(query, timeRange)}.json`;\n      const data = `data:text/json;charset=utf-8,${encodeURIComponent(JSON.stringify(profile))}`;\n\n      saveAs(data, filename);\n    };\n\n    const downloadPprof = async () => {\n      reportInteraction('g_pyroscope_app_export_profile', { format: 'pprof' });\n\n      const profile = await this.fetchPprofProfile({ dataSourceUid, query, timeRange, maxNodes });\n      if (!profile) {\n        return;\n      }\n\n      const filename = `${getExportFilename(query, timeRange)}.pb.gz`;\n\n      saveAs(profile, filename);\n    };\n\n    const uploadToFlamegraphDotCom = async () => {\n      reportInteraction('g_pyroscope_app_export_profile', { format: 'flamegraph.com' });\n\n      const profile = await this.fetchFlamebearerProfile({ dataSourceUid, query, timeRange, maxNodes });\n      if (!profile) {\n        return;\n      }\n\n      try {\n        const response = await flamegraphDotComApiClient.upload(getExportFilename(query, timeRange), profile);\n\n        if (!response.url) {\n          throw new Error('Empty URL received.');\n        }\n\n        const dlLink = document.createElement('a');\n        dlLink.target = '_blank';\n        dlLink.href = response.url;\n        document.body.appendChild(dlLink);\n        dlLink.click();\n        document.body.removeChild(dlLink);\n      } catch (error) {\n        displayError(error as Error, ['Failed to export to flamegraph.com!', (error as Error).message]);\n        return;\n      }\n    };\n\n    return {\n      data: {\n        shouldDisplayFlamegraphDotCom: Boolean(settings?.enableFlameGraphDotComExport),\n      },\n      actions: {\n        downloadPng,\n        downloadJson,\n        downloadPprof,\n        uploadToFlamegraphDotCom,\n      },\n    };\n  };\n\n  static Component = ({ model, query, timeRange }: SceneComponentProps<SceneExportMenu> & ExtraProps) => {\n    const { actions } = model.useSceneExportMenu({ query, timeRange });\n\n    return (\n      <Dropdown\n        overlay={\n          <Menu>\n            <Menu.Item label=\"png\" onClick={actions.downloadPng} />\n            <Menu.Item label=\"json\" onClick={actions.downloadJson} />\n            <Menu.Item label=\"pprof\" onClick={actions.downloadPprof} />\n          </Menu>\n        }\n      >\n        <Button\n          icon=\"download-alt\"\n          size=\"sm\"\n          variant=\"secondary\"\n          fill=\"outline\"\n          aria-label=\"Export profile data\"\n          tooltip=\"Export profile data\"\n        />\n      </Dropdown>\n    );\n  };\n}\n","import { useContext } from 'react';\n\nimport { GitHubContext, TGitHubContext } from './GitHubContext';\n\nexport function useGitHubContext(): TGitHubContext {\n  return useContext(GitHubContext);\n}\n","import { IconName } from '@grafana/data';\nimport { Props as FlameGraphProps } from '@grafana/flamegraph';\nimport { reportInteraction } from '@shared/domain/reportInteraction';\nimport { useFetchPluginSettings } from '@shared/infrastructure/settings/useFetchPluginSettings';\nimport { DomainHookReturnValue } from '@shared/types/DomainHookReturnValue';\nimport { useCallback, useState } from 'react';\n\nimport { useGitHubContext } from '../components/GitHubContextProvider/useGitHubContext';\nimport { buildStackTrace } from './buildStackTrace';\n\nexport function useGitHubIntegration(sidePanel: any): DomainHookReturnValue {\n  const { login, isSessionExpired } = useGitHubContext();\n  const { settings } = useFetchPluginSettings();\n\n  const isFunctionDetailsEnabled = settings?.enableFunctionDetails;\n\n  const [stacktrace, setStacktrace] = useState<string[]>([]);\n\n  const getExtraFlameGraphMenuItems: FlameGraphProps['getExtraContextMenuButtons'] = useCallback(\n    ({ item }: any, data: Record<string, any>) => {\n      // clicking on the top-level \"total\" node doesn't add \"Function details\" as an extra contextual menu item\n      if (!isFunctionDetailsEnabled || item.level === 0) {\n        return [];\n      }\n\n      return [\n        {\n          label: 'Function details',\n          icon: 'info-circle' as IconName,\n          onClick: () => {\n            reportInteraction('g_pyroscope_app_function_details_clicked');\n\n            setStacktrace(buildStackTrace(item, data));\n\n            sidePanel.open('function-details');\n\n            // login can only happen as a consequence of a user action\n            // this is why we check if the session is expired here and not whenever we make a request to the API\n            if (isSessionExpired) {\n              login();\n            }\n          },\n        },\n      ];\n    },\n    [isFunctionDetailsEnabled, isSessionExpired, login, sidePanel]\n  );\n\n  return {\n    data: {\n      stacktrace,\n    },\n    actions: {\n      getExtraFlameGraphMenuItems,\n    },\n  };\n}\n","import { createTheme, getDisplayProcessor } from '@grafana/data';\n\nimport { StackTrace } from './types/StackTrace';\n\nexport function buildStackTrace(levelItem: any, data: Record<string, any>): StackTrace {\n  let stacktrace: string[] = [];\n\n  const labels = data.fields.find(({ name }: { name: string }) => name === 'label');\n  if (!labels) {\n    return stacktrace;\n  }\n\n  const dp = getDisplayProcessor({ field: labels, theme: createTheme() });\n  let node = levelItem;\n\n  while (node && node.level > 0) {\n    for (const idx of node.itemIndexes) {\n      stacktrace.unshift(dp(labels.values[idx]).text);\n    }\n\n    node = node.parents?.[0];\n  }\n\n  return stacktrace;\n}\n","/* https://platform.openai.com/docs/models/overview */\nimport { FunctionDetails, LineProfile } from '../../../domain/types/FunctionDetails';\n\nexport const model = 'gpt-4-1106-preview';\n\n/* https://platform.openai.com/docs/guides/prompt-engineering/tactics */\n\nexport type SuggestionPromptInputs = {\n  functionDetails: FunctionDetails;\n  lines: LineProfile[];\n};\n\nexport const buildSuggestionPrompts = ({\n  functionDetails,\n  lines,\n}: // dotProfile,\nSuggestionPromptInputs) => {\n  const userPrompt = `\nYou are a code optimization expert. I will give you source code file where each line is annotated with profiling information. The annotation has the following format:\n\n\\`\\`\\`\n(<cost>) <source code line>\n\\`\\`\\`\n\nThe \\`\\`\\`<source code line>\\`\\`\\` is the exact line of source code.\n\nThe \\`\\`\\`<cost>\\`\\`\\` field will contain the resource cost of the given resource cost. This field will also contain the unit of the cost (e.g. seconds, bytes, etc). If \\`\\`\\`<cost>\\`\\`\\` is \\`-\\` that means there is no profiling data available.\n\nI want you to write back a new improved code for this function and explain why you made changes.\n\nMake sure to take annotations into strong consideration. If a suggested performance improvement isn't backed up by information from the annotations, do not include it. Prioritize lines annotated with a higher cost.\n\nDo not mention the actual numbers from the annotations, users can already see how much time was spent on each line. Do not list various lines and their time spent. When you mention functions or lines, do not mention the time spent on them.\n\nIf you can't find any meaningful performance optimizations, say so. Ask for context if you think other context might help make decisions. If you think the problem is with user input and not the actual code itself, say so.\n\nWhen you output code in markdown, please don't specify language after 3 backticks (e.g instead of saying \"\\`\\`\\`go\" say \"\\`\\`\\`\"), and always add a new line after 3 backticks.\n\nFunction name is \\`${functionDetails.name}\\`. Do not mention the function name, users can already see it.\n\nWhen posting a response, follow the outline below:\n* give a brief explanation of things that could be improve\n* print new code if it's possible\n* explain each change in more details\n\n\nAnnotated code is below:\n\\`\\`\\`\n${codeInfoToAnnotatedCode(functionDetails, lines)}\n\\`\\`\\`\n`;\n\n  return {\n    user: userPrompt,\n  };\n};\n\nfunction codeInfoToAnnotatedCode(functionDetails: FunctionDetails, lines: LineProfile[]): string {\n  return lines\n    .map((line) => {\n      if (line.cum === 0) {\n        return `(-) ${line.line}`;\n      }\n      return `(${line.cum} ${functionDetails.unit}) ${line.line}`;\n    })\n    .join('\\n');\n}\n","import { DomainHookReturnValue } from '@shared/types/DomainHookReturnValue';\n\nimport { SuggestionPromptInputs } from './buildLlmSuggestionPrompts';\nimport { useOpenAiSuggestions } from './useOpenAiSuggestions';\n\nexport function useAiSuggestionsPanel(suggestionPromptInputs: SuggestionPromptInputs): DomainHookReturnValue {\n  const { reply, error: llmError } = useOpenAiSuggestions(suggestionPromptInputs);\n\n  return {\n    data: {\n      isLoading: !llmError && !reply.text.trim(),\n      llmError,\n      reply,\n      shouldDisplayReply: Boolean(reply?.hasStarted || reply?.hasFinished),\n      shouldDisplayFollowUpForm: !llmError && Boolean(reply?.hasFinished),\n    },\n    actions: {\n      submitFollowupQuestion(question: string) {\n        reply.askFollowupQuestion(question);\n      },\n    },\n  };\n}\n","import { openai } from '@grafana/llm';\nimport { useCallback, useEffect, useState } from 'react';\n\nimport { buildSuggestionPrompts, model, SuggestionPromptInputs } from './buildLlmSuggestionPrompts';\n\ntype Messages = openai.Message[];\n\n// TODO(@petethepig): this is largely same function as useOpenAiChatCompletions, maybe we should merge them somehow\nexport function useOpenAiSuggestions(suggestionPromptInputs: SuggestionPromptInputs) {\n  const [reply, setReply] = useState('');\n  const [replyHasStarted, setReplyHasStarted] = useState(false);\n  const [replyHasFinished, setReplyHasFinished] = useState(false);\n  const [messages, setMessages] = useState<Messages>([]);\n  const [error, setError] = useState<Error | null>(null);\n\n  const sendMessages = useCallback((messagesToSend: Messages) => {\n    setMessages(messagesToSend);\n\n    setError(null);\n\n    setReply('');\n    setReplyHasStarted(true);\n    setReplyHasFinished(false);\n\n    const stream = openai\n      .streamChatCompletions({\n        model,\n        messages: messagesToSend,\n      })\n      .pipe(\n        // Accumulate the stream content into a stream of strings, where each\n        // element contains the accumulated message so far.\n        openai.accumulateContent()\n      );\n\n    stream.subscribe({\n      next: setReply,\n      error(e) {\n        setError(e);\n        setReplyHasStarted(false);\n        setReplyHasFinished(true);\n      },\n      complete() {\n        setReplyHasStarted(false);\n        setReplyHasFinished(true);\n      },\n    });\n  }, []);\n\n  const askFollowupQuestion = useCallback(\n    (question: string): void => {\n      const messagesToAdd: Messages = [\n        {\n          role: 'assistant',\n          content: reply,\n        },\n        {\n          role: 'user',\n          content: question,\n        },\n      ];\n\n      try {\n        sendMessages([...messages, ...messagesToAdd]);\n      } catch (error) {\n        setError(error as Error);\n      }\n    },\n    [messages, reply, sendMessages]\n  );\n\n  useEffect(() => {\n    if (messages.length > 0) {\n      return;\n    }\n\n    const prompts = buildSuggestionPrompts(suggestionPromptInputs);\n\n    try {\n      sendMessages([\n        {\n          role: 'system',\n          content: prompts.user,\n        },\n      ]);\n    } catch (error) {\n      setError(error as Error);\n    }\n  }, [messages.length, suggestionPromptInputs, sendMessages]);\n\n  return {\n    reply: {\n      text: reply,\n      hasStarted: replyHasStarted,\n      hasFinished: replyHasFinished,\n      messages: messages,\n      askFollowupQuestion,\n    },\n    error,\n  };\n}\n","import { css } from '@emotion/css';\nimport { Spinner, useStyles2 } from '@grafana/ui';\nimport { InlineBanner } from '@shared/ui/InlineBanner';\nimport React from 'react';\n\nimport { AiReply } from '../../../../../../components/SceneAiPanel/components/AiReply';\nimport { FollowUpForm } from '../../../../../../components/SceneAiPanel/components/FollowUpForm';\nimport { SuggestionPromptInputs } from './domain/buildLlmSuggestionPrompts';\nimport { useAiSuggestionsPanel } from './domain/useAiSuggestionsPanel';\n\nconst getStyles = () => ({\n  title: css`\n    margin: -4px 0 4px 0;\n  `,\n  content: css``,\n});\n\ntype AiSuggestionsPanelProps = {\n  suggestionPromptInputs: SuggestionPromptInputs;\n};\n\nexport function AiSuggestionsPanel({ suggestionPromptInputs }: AiSuggestionsPanelProps) {\n  const styles = useStyles2(getStyles);\n  const { data, actions } = useAiSuggestionsPanel(suggestionPromptInputs);\n\n  return (\n    <>\n      <h6 className={styles.title}>Code Optimization Suggestions</h6>\n      <div className={styles.content}>\n        {data.isLoading && (\n          <>\n            <Spinner inline />\n            &nbsp;Analyzing...\n          </>\n        )}\n\n        {data.fetchError && (\n          <InlineBanner\n            severity=\"error\"\n            title=\"Error while fetching profiles!\"\n            message=\"Sorry for any inconvenience, please try again later.\"\n          />\n        )}\n\n        {data.llmError && (\n          <InlineBanner\n            severity=\"error\"\n            title=\"Failed to generate content using OpenAI!\"\n            error={data.llmError}\n            message=\"Sorry for any inconvenience, please try again later or if the problem persists, contact your organization admin.\"\n          />\n        )}\n\n        {data.shouldDisplayReply && <AiReply reply={data.reply} />}\n\n        {data.shouldDisplayFollowUpForm && <FollowUpForm onSubmit={actions.submitFollowupQuestion} />}\n      </div>\n    </>\n  );\n}\n","import { CallSiteProps, LineProfile } from '../../../domain/types/FunctionDetails';\n\nconst VERTICAL_LINES_PADDING = 5;\n\ntype CallSitesMap = Map<number, CallSiteProps>;\n\ninterface AnnotatedLines {\n  snippetLines: LineProfile[];\n  allLines: LineProfile[];\n}\n\nexport function annotatePlaceholderLines(callSitesMap: CallSitesMap): AnnotatedLines {\n  if (!callSitesMap.size) {\n    return {\n      snippetLines: [],\n      allLines: [],\n    };\n  }\n\n  const callSites = Array.from(callSitesMap.values()).sort((a, b) => a.line - b.line);\n\n  const firstLineIndex = Math.max(0, callSites[0].line - VERTICAL_LINES_PADDING - 1);\n  const lastLineIndex = callSites[callSites.length - 1].line + VERTICAL_LINES_PADDING + 1;\n\n  const annotatedSnippet = [];\n  for (let lineNumber = firstLineIndex + 1; lineNumber < lastLineIndex; lineNumber++) {\n    const callSite = callSitesMap.get(lineNumber);\n\n    annotatedSnippet.push({\n      line: undefined,\n      number: lineNumber,\n      cum: callSite?.cum ?? 0,\n      flat: callSite?.flat ?? 0,\n    });\n  }\n\n  // With no file contents, we return only a dummy annotated snippet which shows\n  // the appropriate line numbers, but no content.\n  return {\n    snippetLines: annotatedSnippet,\n    allLines: [],\n  };\n}\n\nexport function annotateLines(fileContent: string, callSitesMap: CallSitesMap): AnnotatedLines {\n  const callSites = Array.from(callSitesMap.values()).sort((a, b) => a.line - b.line);\n  const lines = fileContent.split('\\n');\n\n  const annotatedLines = lines.map((line, index) => {\n    const lineNumber = index + 1;\n    const callSite = callSitesMap.get(lineNumber);\n\n    return {\n      line,\n      number: lineNumber,\n      cum: callSite?.cum ?? 0,\n      flat: callSite?.flat ?? 0,\n    };\n  });\n\n  if (callSitesMap.size === 0) {\n    // If the call site map is empty, there's no snippet to render.\n    return {\n      snippetLines: [],\n      allLines: annotatedLines,\n    };\n  }\n\n  const firstLineIndex = Math.max(0, callSites[0].line - VERTICAL_LINES_PADDING - 1);\n  const lastLineIndex = Math.min(lines.length, callSites[callSites.length - 1].line + VERTICAL_LINES_PADDING);\n  const annotatedSnippet = annotatedLines.slice(firstLineIndex, lastLineIndex);\n\n  return {\n    snippetLines: annotatedSnippet,\n    allLines: annotatedLines,\n  };\n}\n","/**\n * Converts raw.githubusercontent.com URLS to github.com URLs.\n *\n * E.g. https://raw.githubusercontent.com/golang/go/master/src/runtime/netpoll_kqueue.go\n * needs to be to transformed to: https://github.com/{org}/{repo}/blob/{filepath}\n */\nexport function buildGithubUrlForFunction(url: string, startLine: unknown): string {\n  let newUrl = url;\n\n  const matches = url.match(/raw\\.githubusercontent\\.com\\/([^/]+)\\/([^/]+)\\/(.+)/);\n  if (matches) {\n    const [, org, repo, rest] = matches;\n    newUrl = `https://github.com/${org}/${repo}/blob/${rest}`;\n  }\n\n  if (startLine !== undefined && !url.includes('#')) {\n    // link to the specific line this function exists at\n    newUrl += `#L${startLine}`;\n  }\n\n  return newUrl;\n}\n","import { DomainHookReturnValue } from '@shared/types/DomainHookReturnValue';\nimport { useMemo, useState } from 'react';\n\nimport { FunctionDetails, LineProfile } from '../../../domain/types/FunctionDetails';\nimport { useGitHubContext } from '../../GitHubContextProvider/useGitHubContext';\nimport { useFetchVCSFile } from '../infrastructure/useFetchVCSFile';\nimport { annotateLines, annotatePlaceholderLines } from './annotateLines';\nimport { buildGithubUrlForFunction } from './buildGithubUrlForFunction';\n\n/**\n * View model for Code component\n */\nexport type CodeLine = LineProfile & { line: string };\n\ntype CodeContainerDomainValue = DomainHookReturnValue & { data: { snippetLines: CodeLine[]; allLines: CodeLine[] } };\n\n// eslint-disable-next-line sonarjs/cognitive-complexity\nexport function useCodeContainer(dataSourceUid: string, functionDetails: FunctionDetails): CodeContainerDomainValue {\n  const { isLoggedIn } = useGitHubContext();\n  const { version } = functionDetails;\n\n  const [openAiSuggestions, setOpenAiSuggestions] = useState<boolean>(false);\n\n  const {\n    fileInfo,\n    error: fetchError,\n    isFetching,\n  } = useFetchVCSFile({\n    enabled: isLoggedIn,\n    dataSourceUid,\n    localPath: functionDetails.fileName,\n    repository: version?.repository ?? '',\n    gitRef: version?.git_ref ?? '',\n    rootPath: version?.root_path ?? '',\n  });\n\n  // might be a bit costly so we memoize it\n  const { snippetLines, allLines } = useMemo(\n    () =>\n      fileInfo?.content\n        ? annotateLines(fileInfo.content, functionDetails.callSites)\n        : annotatePlaceholderLines(functionDetails.callSites),\n    [fileInfo?.content, functionDetails.callSites]\n  );\n\n  return {\n    data: {\n      fetchError,\n      openAiSuggestions,\n      isLoadingCode: isFetching,\n      unit: functionDetails.unit,\n      githubUrl: fileInfo?.URL ? buildGithubUrlForFunction(fileInfo.URL, functionDetails.startLine) : undefined,\n      snippetLines: snippetLines.map((annotatedLine) => ({ ...annotatedLine, line: annotatedLine.line ?? '???' })),\n      allLines: allLines.map((annotateLine) => ({ ...annotateLine, line: annotateLine.line ?? '???' })),\n      noCodeAvailable: Boolean(fetchError) || !allLines.some((line) => line.line),\n    },\n    actions: {\n      setOpenAiSuggestions,\n    },\n  };\n}\n","import { useQuery } from '@tanstack/react-query';\n\nimport { DataSourceProxyClientBuilder } from '../../../../../../../infrastructure/series/http/DataSourceProxyClientBuilder';\nimport { PrivateVcsClient } from '../../GitHubContextProvider/infrastructure/PrivateVcsClient';\n\ntype FetchParams = {\n  enabled: boolean;\n  dataSourceUid: string;\n  repository: string;\n  gitRef: string;\n  localPath: string;\n  rootPath: string;\n};\n\ntype FetchResponse = {\n  isFetching: boolean;\n  error: Error | null;\n  fileInfo?: {\n    content: string;\n    URL: string;\n  };\n};\n\nexport function useFetchVCSFile({\n  enabled,\n  dataSourceUid,\n  repository,\n  gitRef,\n  localPath,\n  rootPath,\n}: FetchParams): FetchResponse {\n  const privateVcsClient = DataSourceProxyClientBuilder.build(dataSourceUid, PrivateVcsClient);\n  const { isFetching, error, data } = useQuery({\n    enabled: Boolean(enabled && localPath),\n    queryKey: ['vcs-file', repository, gitRef, localPath, rootPath],\n    queryFn: () =>\n      privateVcsClient\n        .getFile(repository, gitRef, localPath, rootPath)\n        .then((code) => ({\n          content: code.content,\n          URL: code.URL,\n        }))\n        .then((json) => ({ URL: json.URL, content: atob(json.content) })),\n  });\n\n  return {\n    isFetching,\n    error: privateVcsClient.isAbortError(error) ? null : error,\n    fileInfo: data,\n  };\n}\n","import { getValueFormat, ValueFormatter } from '@grafana/data';\n\ntype FormatUnit = 'nanoseconds' | 'microseconds' | 'milliseconds' | 'seconds' | 'count' | string;\n\nexport function buildUnitFormatter(unit: FormatUnit): ValueFormatter {\n  switch (unit) {\n    case 'nanoseconds':\n      return getValueFormat('ns');\n    case 'microseconds':\n      return getValueFormat('µs');\n    case 'milliseconds':\n      return getValueFormat('ms');\n    case 'seconds':\n      return getValueFormat('s');\n    case 'count':\n      return getValueFormat('short');\n    default:\n      return getValueFormat(unit);\n  }\n}\n","import { css, cx } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { LinkButton, Spinner, useStyles2 } from '@grafana/ui';\nimport React from 'react';\n\nimport { AIButton } from '../../../../../../../components/SceneAiPanel/components/AiButton/AIButton';\nimport { buildUnitFormatter } from '../../../domain/buildUnitFormatter';\nimport { CodeLine } from '../domain/useCodeContainer';\n\ntype CodeProps = {\n  lines: CodeLine[];\n  unit: string;\n  githubUrl?: string;\n  isLoadingCode: boolean;\n  noCodeAvailable: boolean;\n  onOptimizeCodeClick: () => void;\n};\n\nexport const Code = ({ lines, unit, githubUrl, isLoadingCode, noCodeAvailable, onOptimizeCodeClick }: CodeProps) => {\n  const styles = useStyles2(getStyles);\n\n  const fmt = buildUnitFormatter(unit);\n  const formatValue = (n: number): string => {\n    if (n <= 0) {\n      return '.';\n    }\n\n    const formatted = fmt(n);\n    if (!formatted.suffix) {\n      return formatted.text;\n    }\n    return formatted.text + formatted.suffix;\n  };\n\n  // TODO: memoize\n  // Trim common indent prefixes from each line, if possible. This prevents us\n  // from rendering deeply indented code where the user would have to\n  // immediately scroll right to read the code.\n  trimIndentPrefix(lines);\n\n  // TODO: move to useCodeContainer()?\n  const [sumSelf, sumTotal] = lines.reduce(\n    ([accSelf, accTotal], { flat, cum }) => [accSelf + flat, accTotal + cum],\n    [0, 0]\n  );\n\n  return (\n    <div data-testid=\"function-details-code-container\">\n      <div className={styles.container}>\n        <div className={styles.header}>\n          <div className={styles.breakdownLabel}>\n            <h6>Breakdown per line</h6>\n            <span>\n              {isLoadingCode && <Spinner inline />}\n              {!isLoadingCode && noCodeAvailable && '(file information unavailable)'}\n            </span>\n          </div>\n\n          <div className={styles.buttons}>\n            <LinkButton\n              disabled={Boolean(isLoadingCode || !githubUrl)}\n              href={githubUrl}\n              target=\"_blank\"\n              icon=\"github\"\n              fill=\"text\"\n            >\n              View on GitHub\n            </LinkButton>\n\n            <AIButton\n              onClick={onOptimizeCodeClick}\n              disabled={isLoadingCode || noCodeAvailable}\n              interactionName=\"g_pyroscope_app_optimize_code_clicked\"\n            >\n              Optimize Code\n            </AIButton>\n          </div>\n        </div>\n      </div>\n\n      <pre className={styles.codeBlock} data-testid=\"function-details-code\">\n        <div className={cx(styles.highlighted, styles.codeBlockHeader)}>\n          {formatLine('Total:', formatValue(sumSelf), formatValue(sumTotal), ' (self, total)')}\n        </div>\n        {lines.map(({ line, number, cum: total, flat: self }) => (\n          <div key={line + number + total + self} className={self + total > 0 ? styles.highlighted : ''}>\n            {\n              // The space after `number` is relevant. It aligns the line\n              // number with the `Total:` header to mimic the pprof tool.\n              formatLine(`${number} `, formatValue(self), formatValue(total), line)\n            }\n          </div>\n        ))}\n      </pre>\n    </div>\n  );\n};\n\nconst formatLine = (lineNumber: string, self: string, total: string, rest?: string): string => {\n  // The length of each column is important. In order for tabs to render to\n  // their full width, the length of all the column widths must be one less than\n  // a multiple of 8.\n  const cols = lineNumber.padStart(7, ' ') + self.padStart(12, ' ') + total.padStart(12, ' ');\n\n  if (!rest) {\n    return cols;\n  }\n  return `${cols} ${rest}`;\n};\n\nconst trimIndentPrefix = (lines: CodeLine[]) => {\n  if (lines.length === 0) {\n    return;\n  }\n\n  let commonPrefix = getIndentPrefix(lines[0].line);\n  for (let i = 1; i < lines.length; i++) {\n    const { line } = lines[i];\n    if (line.trim() === '') {\n      // Don't count blank lines or lines with only whitespace.\n      continue;\n    }\n\n    const prefix = getIndentPrefix(line);\n    commonPrefix = longestCommonPrefix(commonPrefix, prefix);\n  }\n\n  if (!commonPrefix) {\n    // No common prefixes were found.\n    return;\n  }\n\n  // Trim the common prefix.\n  for (let i = 0; i < lines.length; i++) {\n    lines[i].line = lines[i].line.substring(commonPrefix.length);\n  }\n};\n\nconst getIndentPrefix = (text: string): string => {\n  const matches = text.match(/^[ \\t]*/);\n  return matches?.[0] ?? '';\n};\n\nconst longestCommonPrefix = (a: string, b: string): string => {\n  let prefixLen = 0;\n  for (let i = 0; i < Math.min(a.length, b.length); i++) {\n    if (a[i] !== b[i]) {\n      break;\n    }\n\n    prefixLen++;\n  }\n  return a.substring(0, prefixLen);\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  container: css`\n    display: flex;\n    flex-direction: row;\n    align-items: flex-start;\n    width: 100%;\n  `,\n  header: css`\n    display: flex;\n    justify-content: space-between;\n    align-items: end;\n    width: 100%;\n  `,\n  breakdownLabel: css`\n    & > h6 {\n      display: inline-block;\n      margin-top: ${theme.spacing(1)};\n    }\n\n    & > span {\n      margin-left: ${theme.spacing(1)};\n      font-size: ${theme.typography.bodySmall.fontSize};\n    }\n\n    & > svg {\n      margin-left: ${theme.spacing(1)};\n    }\n  `,\n  buttons: css`\n    display: flex;\n    flex-wrap: no-wrap;\n  `,\n  codeBlock: css`\n    position: relative;\n    min-height: 240px;\n    font-size: 12px;\n    overflow-x: auto;\n    white-space: pre;\n    color: ${theme.colors.text.secondary};\n  `,\n  highlighted: css`\n    color: ${theme.colors.text.maxContrast};\n  `,\n  codeBlockHeader: css`\n    margin-bottom: 8px;\n  `,\n});\n","import { displayError } from '@shared/domain/displayStatus';\nimport { HttpClientError } from '@shared/infrastructure/http/HttpClientError';\nimport React from 'react';\n\nimport { FunctionDetails } from '../../domain/types/FunctionDetails';\nimport { AiSuggestionsPanel } from '../AiSuggestionsPanel/AiSuggestionsPanel';\nimport { useCodeContainer } from './domain/useCodeContainer';\nimport { Code } from './ui/Code';\n\ntype CodeContainerProps = {\n  dataSourceUid: string;\n  functionDetails: FunctionDetails;\n};\n\nexport function CodeContainer({ dataSourceUid, functionDetails }: CodeContainerProps) {\n  const { data, actions } = useCodeContainer(dataSourceUid, functionDetails);\n\n  if (data.fetchError && (data.fetchError as HttpClientError)?.response?.status !== 404) {\n    displayError(data.fetchError, ['Failed to fetch file information!', (data.fetchError as Error).message]);\n  }\n\n  return (\n    <>\n      <Code\n        lines={data.snippetLines}\n        unit={data.unit}\n        githubUrl={data.githubUrl}\n        isLoadingCode={data.isLoadingCode}\n        noCodeAvailable={data.noCodeAvailable}\n        onOptimizeCodeClick={() => {\n          actions.setOpenAiSuggestions(true);\n          document.getElementById('ai-suggestions-panel')?.scrollIntoView({\n            behavior: 'smooth',\n          });\n        }}\n      />\n      <h6 id=\"ai-suggestions-panel\" style={{ height: 0, marginBottom: 0 }}></h6>\n      {data.openAiSuggestions ? (\n        <AiSuggestionsPanel\n          suggestionPromptInputs={{\n            functionDetails: functionDetails,\n            lines: data.allLines,\n          }}\n        />\n      ) : null}\n    </>\n  );\n}\n","import { css } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, Icon, Spinner, useStyles2 } from '@grafana/ui';\nimport React from 'react';\n\nimport { useGitHubContext } from './GitHubContextProvider/useGitHubContext';\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  ellipsis: css`\n    color: ${theme.colors.primary.text};\n    text-overflow: ellipsis;\n    overflow: hidden;\n    direction: rtl;\n    white-space: nowrap;\n  `,\n});\n\ntype GitHubRepositoryProps = {\n  enableIntegration: boolean;\n  repository: {\n    name: string;\n    commitUrl: string;\n    commitName: string;\n  };\n};\n\nexport const GitHubRepository = ({ enableIntegration, repository }: GitHubRepositoryProps) => {\n  const styles = useStyles2(getStyles);\n  const { isLoginInProgress, isLoggedIn, login } = useGitHubContext();\n\n  if (!enableIntegration) {\n    return <>-</>;\n  }\n\n  // enableIntegration=true\n  if (isLoginInProgress) {\n    return (\n      <>\n        <Spinner />\n        <span>Connecting to GitHub...</span>\n      </>\n    );\n  }\n\n  // enableIntegration=true, isLoginInProgress=false\n  if (!isLoggedIn) {\n    return (\n      <Button\n        icon=\"github\"\n        variant=\"primary\"\n        onClick={login}\n        tooltip=\"Once connected, the GitHub code will be accessible only from this browser session.\"\n        tooltipPlacement=\"top\"\n      >\n        Connect to {repository.name}\n      </Button>\n    );\n  }\n\n  // enableIntegration=true, isLoginInProgress=false, isLoggedIn=true\n  return (\n    <>\n      <Icon name=\"github\" size=\"lg\" />\n      <a className={styles.ellipsis} href={repository.commitUrl} target=\"_blank\" rel=\"noreferrer\" title=\"View commit\">\n        <Icon name=\"external-link-alt\" />\n        &nbsp;\n        {repository.commitName}\n      </a>\n    </>\n  );\n};\n","import { Commit, FunctionDetails } from './types/FunctionDetails';\n\nexport type CommitWithSamples = Commit & {\n  samples: {\n    unit: string;\n    current: number;\n    total: number;\n  };\n};\n\nexport function getCommitsWithSamples(functionsDetails: FunctionDetails[], totalSamples: number): CommitWithSamples[] {\n  const commits = functionsDetails.map((details) => ({\n    ...details.commit,\n    samples: {\n      unit: details.unit ?? 'count',\n      current: Array.from(details.callSites.values()).reduce((acc, { cum }) => acc + cum, 0),\n      total: totalSamples,\n    },\n  }));\n\n  return commits;\n}\n","export const GITHUB_URL = 'https://github.com/';\n\nexport const isGitHubRepository = (repositoryUrl: string): boolean => repositoryUrl.startsWith(GITHUB_URL);\n","import { GITHUB_URL } from './isGitHubRepository';\nimport { FunctionVersion } from './types/FunctionDetails';\n\nexport function getRepositoryDetails(isGitHub: boolean, functionVersion?: FunctionVersion) {\n  if (!functionVersion?.repository) {\n    return null;\n  }\n\n  const url = functionVersion.repository;\n  const name = url.replace(GITHUB_URL, '');\n  const gitRef = functionVersion.git_ref;\n\n  return {\n    isGitHub,\n    url,\n    name,\n    commitUrl: gitRef ? `${url}/commit/${gitRef}` : url,\n    commitName: gitRef ? `${name}@${gitRef.substring(0, 7)}` : name,\n  };\n}\n","import { Function, Line, Location, Mapping, PprofProfile, Sample } from '@shared/types/PprofProfile';\n\nimport { PLACEHOLDER_COMMIT_DATA } from '../components/GitHubContextProvider/infrastructure/PrivateVcsClient';\nimport { CallSiteProps, FunctionDetails } from './types/FunctionDetails';\n\nconst buildDetails = (profile: PprofProfile, func: Function, mapping?: Mapping) => {\n  let version;\n\n  try {\n    version = mapping ? JSON.parse(profile.stringTable[Number(mapping.buildId)]) : undefined;\n  } catch {}\n\n  return {\n    name: profile.stringTable[Number(func.name)],\n    version,\n    startLine: !Number.isNaN(Number(func.startLine)) ? Number(func.startLine) : undefined,\n    fileName: profile.stringTable[Number(func.filename)],\n    callSites: new Map<number, CallSiteProps>(),\n    unit: profile.stringTable[Number(profile.sampleType[0].unit)],\n    commit: PLACEHOLDER_COMMIT_DATA,\n  };\n};\n\n// sums up the value for a particular callsite\nfunction addCallSiteValue(details: FunctionDetails, line: Line, value: number, index: number): FunctionDetails {\n  const lineNumber = Number(line.line);\n  const callSite = details.callSites.get(lineNumber) || {\n    line: Number(line.line),\n    flat: 0,\n    cum: 0,\n  };\n\n  // if the function we're interested in is at the leaf node (index=0), we have its flat value...\n  const flat = index === 0 ? value : 0; // value of the location itself\n\n  // ...if not, that's its cum value\n  // locations above the leaf node don't contribute to the sample value (their self is 0)\n  // this is what the API returns\n  const cum = value; // value of the location plus all its descendants\n\n  callSite.flat += flat;\n  callSite.cum += cum;\n\n  details.callSites.set(lineNumber, callSite);\n\n  return details;\n}\n\n// This reimplements functionality simliar to the upstream project:\n// https://github.com/google/pprof/blob/997b0b79cac0f8c2f2566c506212de67a6edc5ff/internal/report/source.go#L318\nfunction convertSample(\n  fnName: string,\n  profile: PprofProfile,\n  locations: Map<string, Location>,\n  functions: Map<string, Function>,\n  mappings: Map<string, Mapping>,\n  sample: Sample,\n  versions: Map<string, FunctionDetails>\n) {\n  const locationIdSet = new Set();\n\n  sample.locationId.forEach((locationId, index) => {\n    const location = locations.get(locationId);\n    if (!location) {\n      return;\n    }\n\n    location.line.forEach((line) => {\n      const func = functions.get(line.functionId);\n      if (!func) {\n        return;\n      }\n\n      if (profile.stringTable[Number(func.name)] !== fnName) {\n        return;\n      }\n\n      // https://github.com/google/pprof/blob/main/doc/README.md#details\n      if (locationIdSet.has(locationId)) {\n        return;\n      }\n\n      locationIdSet.add(locationId);\n\n      const details = versions.get(location.mappingId) || buildDetails(profile, func, mappings.get(location.mappingId));\n\n      versions.set(location.mappingId, addCallSiteValue(details, line, Number(sample.value[0]), index));\n    });\n  });\n}\n\nexport function convertPprofToFunctionDetails(fnName: string, profile: PprofProfile): FunctionDetails[] {\n  const versions = new Map<string, FunctionDetails>();\n\n  const locations = new Map(profile.location?.map((l) => [l.id, l]));\n  const functions = new Map(profile.function?.map((f) => [f.id, f]));\n  const mappings = new Map(profile.mapping?.map((m) => [m.id, m]));\n\n  profile.sample\n    // Sometimes a sample may not have a stack trace associated with it. This\n    // may be a bug in the Pyroscope API or it may be an idiosyncrasy of the pprof format.\n    // While it may cause some counting errors, let's skip these for now.\n    ?.filter((sample) => sample.locationId !== undefined)\n    .forEach((sample) => convertSample(fnName, profile, locations, functions, mappings, sample, versions));\n\n  return Array.from(versions.values());\n}\n","import { DataSourceProxyClientBuilder } from '../../../../../infrastructure/series/http/DataSourceProxyClientBuilder';\nimport { PrivateVcsClient } from '../components/GitHubContextProvider/infrastructure/PrivateVcsClient';\nimport { FunctionDetails, FunctionVersion } from '../domain/types/FunctionDetails';\n\nexport async function fetchCommitsInfo(\n  dataSourceUid: string,\n  functionsDetails: FunctionDetails[],\n  defaultFunctionVersion: FunctionVersion\n): Promise<FunctionDetails[]> {\n  const privateVcsClient = DataSourceProxyClientBuilder.build(dataSourceUid, PrivateVcsClient);\n\n  const commits = functionsDetails.map((details) => ({\n    repositoryUrl: details?.version?.repository || defaultFunctionVersion.repository,\n    gitRef: details?.version?.git_ref || defaultFunctionVersion.git_ref,\n    rootPath: details?.version?.root_path || defaultFunctionVersion.root_path,\n  }));\n\n  // TODO: extract to its own hook and simplify useSceneFunctionDetailsPanel()?\n  const commitsInfo = await privateVcsClient.getCommits(commits);\n\n  commitsInfo.forEach((commit, i) => {\n    functionsDetails[i].commit = commit;\n  });\n\n  return functionsDetails;\n}\n","import { FunctionDetails } from '../../domain/types/FunctionDetails';\n\nexport const getTotalSum = (fd: FunctionDetails): number =>\n  Array.from(fd.callSites.values()).reduce((acc, { cum }) => acc + cum, 0);\n","import { FunctionDetails } from '../../domain/types/FunctionDetails';\nimport { getTotalSum } from './getTotalSum';\n\nexport const sortByTotal = (a: FunctionDetails, b: FunctionDetails) => getTotalSum(b) - getTotalSum(a);\n","import { TimeRange } from '@grafana/data';\nimport { parseQuery } from '@shared/domain/url-params/parseQuery';\nimport { useQuery } from '@tanstack/react-query';\nimport { useMemo } from 'react';\n\nimport { DataSourceProxyClientBuilder } from '../../../../../infrastructure/series/http/DataSourceProxyClientBuilder';\nimport { PprofApiClient } from '../../../infrastructure/PprofApiClient';\nimport { PLACEHOLDER_COMMIT_DATA } from '../components/GitHubContextProvider/infrastructure/PrivateVcsClient';\nimport { useGitHubContext } from '../components/GitHubContextProvider/useGitHubContext';\nimport { convertPprofToFunctionDetails } from '../domain/convertPprofToFunctionDetails';\nimport { useFunctionVersion } from '../domain/FunctionVersionContext';\nimport { FunctionDetails, FunctionVersion } from '../domain/types/FunctionDetails';\nimport { fetchCommitsInfo } from './fetchCommitsInfo';\nimport { sortByTotal } from './helpers/sortByTotal';\n\ntype FetchParams = {\n  dataSourceUid: string;\n  query: string;\n  timeRange: TimeRange;\n  stackTrace: string[];\n};\n\ntype FetchResponse = {\n  isFetching: boolean;\n  error: Error | null;\n  functionsDetails: FunctionDetails[];\n};\n\n// We don't expect more than 500 nodes after the selected node.\n// This will avoid downloading too much data by removing leaf nodes.\n// TODO: This could be a setting in the UI.\nconst MAX_NODES = 500;\n\nconst DEFAULT_FUNCTION_VERSION: FunctionVersion = {\n  repository: '',\n  git_ref: 'HEAD',\n  root_path: '',\n};\n\n// eslint-disable-next-line sonarjs/cognitive-complexity\nexport function useFetchFunctionsDetails({ dataSourceUid, query, timeRange, stackTrace }: FetchParams): FetchResponse {\n  const { profileMetricId, labelsSelector, serviceId } = parseQuery(query);\n  const [start, end] = [timeRange.from.unix(), timeRange.to.unix()];\n  const { isLoggedIn: isGitHubLogged } = useGitHubContext();\n\n  const pprofApiClient = DataSourceProxyClientBuilder.build(dataSourceUid, PprofApiClient);\n\n  // Get the default function version for the service including provided overrides\n  const { functionVersion: defaultFunctionVersion } = useFunctionVersion(\n    dataSourceUid,\n    serviceId,\n    DEFAULT_FUNCTION_VERSION\n  );\n\n  const {\n    isFetching,\n    error: queryError,\n    data,\n  } = useQuery({\n    enabled: Boolean(profileMetricId && labelsSelector && stackTrace.length > 0 && start > 0 && end > 0),\n    // eslint-disable-next-line @tanstack/query/exhaustive-deps\n    queryKey: [\n      'function-details',\n      profileMetricId,\n      labelsSelector,\n      start,\n      end,\n      stackTrace,\n      isGitHubLogged,\n      defaultFunctionVersion,\n    ],\n    queryFn: async () => {\n      const pprof = await pprofApiClient.selectMergeProfileJson({\n        profileMetricId,\n        labelsSelector,\n        start,\n        end,\n        stackTrace,\n        maxNodes: MAX_NODES,\n      });\n\n      const functionsDetails = convertPprofToFunctionDetails(stackTrace[stackTrace.length - 1], pprof).sort(\n        sortByTotal\n      );\n\n      return isGitHubLogged\n        ? fetchCommitsInfo(dataSourceUid, functionsDetails, defaultFunctionVersion || DEFAULT_FUNCTION_VERSION)\n        : functionsDetails;\n    },\n  });\n\n  const functionsDetails = useMemo(\n    () =>\n      data?.length\n        ? data\n        : [\n            {\n              name: stackTrace.at(-1) as string,\n              startLine: undefined,\n              fileName: '',\n              callSites: new Map(),\n              unit: '',\n              commit: PLACEHOLDER_COMMIT_DATA,\n            },\n          ],\n    [data, stackTrace]\n  );\n\n  return {\n    isFetching,\n    error: pprofApiClient.isAbortError(queryError) ? null : queryError,\n    functionsDetails,\n  };\n}\n","// Array reprsenting one minute, hour, day, week, month, etc in seconds\nconst CUTOFFS = [60, 3600, 86400, 86400 * 7, 86400 * 30, 86400 * 365, Infinity];\n\n// Array equivalent to the above but in the string representation of the units\nconst UNITS: Intl.RelativeTimeFormatUnit[] = ['second', 'minute', 'hour', 'day', 'week', 'month', 'year'];\n\n// Intl.RelativeTimeFormat do its magic\nconst RTF = new Intl.RelativeTimeFormat('en-US', { numeric: 'auto' });\n\n/**\n * Convert a date to a relative time string, such as \"a minute ago\", \"in 2 hours\", \"yesterday\", \"3 months ago\", etc.\n *\n * Adapted from https://www.builder.io/blog/relative-time\n */\nexport function getRelativeTimeString(date: Date): string {\n  const timeMs = date.getTime();\n\n  // Get the amount of seconds between the given date and now\n  const deltaSeconds = Math.round((timeMs - Date.now()) / 1000);\n\n  // Grab the ideal cutoff unit\n  const unitIndex = CUTOFFS.findIndex((cutoff) => cutoff > Math.abs(deltaSeconds));\n\n  // Get the divisor to divide from the seconds. E.g. if our unit is \"day\" our divisor\n  // is one day in seconds, so we can divide our seconds by this to get the # of days\n  const divisor = unitIndex ? CUTOFFS[unitIndex - 1] : 1;\n\n  // Intl.RelativeTimeFormat do its magic\n  return RTF.format(Math.floor(deltaSeconds / divisor), UNITS[unitIndex]);\n}\n","import { getRelativeTimeString } from './getRelativeTimeString';\n\nconst DTF = new Intl.DateTimeFormat('en-US', {\n  year: 'numeric',\n  month: 'long',\n  day: '2-digit',\n});\n\nexport function formatCommitDate(commitDate?: Date) {\n  return commitDate ? `${DTF.format(commitDate)} (${getRelativeTimeString(commitDate)})` : '?';\n}\n","import { css } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport React from 'react';\n\nimport { buildUnitFormatter } from '../domain/buildUnitFormatter';\nimport { formatCommitDate } from '../domain/formatCommitDate';\nimport { CommitWithSamples } from '../domain/getCommitsWithSamples';\nimport { getCommitShortMessage, getCommitShortSha } from './CommitSelect';\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  container: css`\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-start;\n  `,\n  firstLine: css`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    gap: 1em;\n  `,\n  sha: css`\n    font-family: monospace;\n  `,\n  sample: css`\n    font-size: 12px;\n  `,\n  secondLine: css`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    font-size: 12px;\n    color: ${theme.colors.text.secondary};\n  `,\n  avatar: css`\n    display: inline-block;\n    margin-right: 4px;\n    border-radius: 50%;\n    background: grey;\n    width: 16px;\n    height: 16px;\n  `,\n  message: css`\n    font-size: 12px;\n    color: ${theme.colors.text.secondary};\n  `,\n});\n\ntype CommitOptionProps = {\n  commit: CommitWithSamples;\n};\n\nexport function CommitOption({ commit }: CommitOptionProps) {\n  const styles = useStyles2(getStyles);\n\n  const { author, samples } = commit;\n\n  const commitAuthor = author.login;\n  const commitAuthorAvatarUrl = author.avatarURL;\n\n  const total = buildUnitFormatter(samples.unit)(samples.current);\n  const samplePercent = Math.round((samples.current / samples.total) * 100);\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.firstLine}>\n        <span className={styles.sha}>{getCommitShortSha(commit.sha)}</span>\n        <span className={styles.sample}>\n          {total.text}\n          {total.suffix} ({samplePercent}%)\n        </span>\n      </div>\n\n      <div className={styles.secondLine}>\n        {commitAuthorAvatarUrl && <img className={styles.avatar} src={commitAuthorAvatarUrl} alt={commitAuthor} />}\n        <span>\n          {commitAuthor} on {formatCommitDate(commit.date)}\n        </span>\n      </div>\n\n      <span className={styles.message}>{getCommitShortMessage(commit.message)}</span>\n    </div>\n  );\n}\n","import { css } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport React from 'react';\n\nimport { Commit } from '../domain/types/FunctionDetails';\nimport { getCommitShortMessage, getCommitShortSha } from './CommitSelect';\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  container: css`\n    display: flex;\n    flex-direction: row;\n    justify-content: flex-start;\n    align-items: center;\n    gap: 1em;\n  `,\n  sha: css`\n    font-family: monospace;\n  `,\n  message: css`\n    color: ${theme.colors.text.secondary};\n  `,\n});\n\ntype CommitOptionSelectedProps = {\n  commit: Commit;\n};\n\nexport function CommitOptionSelected({ commit }: CommitOptionSelectedProps) {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.container}>\n      <span className={styles.sha}>{getCommitShortSha(commit.sha)}</span>\n      <div className={styles.message}>\n        <span>{getCommitShortMessage(commit.message)}</span>\n      </div>\n    </div>\n  );\n}\n","import { SelectableValue } from '@grafana/data';\nimport { FormatOptionLabelMeta, Select } from '@grafana/ui';\nimport React from 'react';\n\nimport { PLACEHOLDER_COMMIT_DATA } from '../components/GitHubContextProvider/infrastructure/PrivateVcsClient';\nimport { CommitWithSamples } from '../domain/getCommitsWithSamples';\nimport { CommitOption } from './CommitOption';\nimport { CommitOptionSelected } from './CommitOptionSelected';\n\ntype CommitSelectProps = {\n  commits: CommitWithSamples[];\n  selectedCommit: CommitWithSamples;\n  onChange: (commit: CommitWithSamples) => void;\n};\n\nexport function CommitSelect({ commits, selectedCommit, onChange }: CommitSelectProps) {\n  return (\n    <Select\n      options={commits.map((commit) => ({\n        label: commit.sha,\n        value: commit,\n      }))}\n      value={{\n        label: selectedCommit.sha,\n        value: selectedCommit,\n      }}\n      hideSelectedOptions\n      isSearchable={false}\n      noOptionsMessage=\"No commits found\"\n      formatOptionLabel={formatOption}\n      onChange={(item) => {\n        if (item.value) {\n          onChange(item.value);\n        }\n      }}\n    />\n  );\n}\n\nfunction formatOption(\n  item: SelectableValue<CommitWithSamples>,\n  formatOptionMeta: FormatOptionLabelMeta<CommitWithSamples>\n) {\n  const { value: commit } = item;\n\n  if (!commit) {\n    return null;\n  }\n\n  const isSelected = formatOptionMeta.selectValue[0]?.value === commit;\n\n  return isSelected ? <CommitOptionSelected commit={commit} /> : <CommitOption commit={commit} />;\n}\n\nexport const getCommitShortSha = (sha: string): string => {\n  return sha === PLACEHOLDER_COMMIT_DATA.sha ? sha : sha.substring(0, 7);\n};\n\nexport const getCommitShortMessage = (message: string): string => {\n  return message.split('\\n')[0];\n};\n","import { Alert, Icon, TextLink } from '@grafana/ui';\nimport React from 'react';\n\ntype GitHubIntegrationBannerProps = {\n  onDismiss: () => void;\n};\n\nexport const GitHubIntegrationBanner = ({ onDismiss }: GitHubIntegrationBannerProps) => {\n  return (\n    <Alert severity=\"info\" title=\"Integrate with Github\" buttonContent=\"Dismiss\" onRemove={onDismiss}>\n      <p>\n        This language supports integration with <Icon name=\"github\" /> GitHub.\n      </p>\n      <p>\n        To activate this feature, you will need to add two new labels when sending profiles{' '}\n        <code>service_repository</code> and <code>service_git_ref</code>.{' '}\n      </p>\n      <p>\n        They should respectively be set to the full repository GitHub URL and the current{' '}\n        <TextLink href=\"https://docs.github.com/en/rest/git/refs?apiVersion=2022-11-28#about-git-references\" external>\n          git ref\n        </TextLink>{' '}\n        of the running service.\n      </p>\n      <Icon name=\"document-info\" />{' '}\n      <TextLink\n        href=\"https://grafana.com/docs/grafana-cloud/monitor-applications/profiles/pyroscope-github-integration/\"\n        external\n      >\n        Learn more\n      </TextLink>\n    </Alert>\n  );\n};\n","import { Spinner } from '@grafana/ui';\nimport React, { memo } from 'react';\n\ntype InlineSpinnerProps = {\n  isLoading: boolean;\n  children: React.ReactNode;\n};\n\nfunction InlineSpinnerComponent({ isLoading, children }: InlineSpinnerProps) {\n  return isLoading ? <Spinner inline /> : <>{children}</>;\n}\n\nexport const InlineSpinner = memo(InlineSpinnerComponent);\n","import { DataSourcePicker } from '@grafana/runtime';\nimport { Alert, Button, ConfirmButton, Field, Input, Modal, Stack, Text } from '@grafana/ui';\nimport React from 'react';\nimport { useForm } from 'react-hook-form';\n\nimport { FunctionVersionOrigin } from '../domain/FunctionVersionContext';\nimport { FunctionVersion } from '../domain/types/FunctionDetails';\n\ntype Props = {\n  serviceName: string;\n  datasourceName: string;\n  datasourceUid: string;\n  version?: FunctionVersion;\n  functionVersionOrigin?: FunctionVersionOrigin;\n  saveOverrides: (datasourceUid: string, serviceName: string, version: FunctionVersion) => void;\n  deleteOverride: (datasourceUid: string, serviceName: string) => void;\n  deleteAllOverrides: () => void;\n};\n\nexport const OverrideRepositoryDetailsButton = (props: Props) => {\n  const { serviceName, version, datasourceUid, saveOverrides, functionVersionOrigin } = props;\n  const [open, setOpen] = React.useState(false);\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    reset,\n  } = useForm<FunctionVersion>({ mode: 'onChange' });\n\n  const onSubmit = (data: FunctionVersion) => {\n    saveOverrides(datasourceUid, serviceName, {\n      repository: data.repository,\n      git_ref: data.git_ref || 'HEAD',\n      root_path: data.root_path || '',\n    });\n    setOpen(false);\n  };\n\n  return (\n    <>\n      <Button\n        aria-label=\"override repository settings\"\n        variant=\"secondary\"\n        fill=\"text\"\n        size=\"sm\"\n        icon=\"pen\"\n        onClick={() => {\n          setOpen(true);\n          reset(version);\n        }}\n      >\n        {functionVersionOrigin === FunctionVersionOrigin.USER ? (\n          <Text element=\"span\" color=\"secondary\">\n            (user set)\n          </Text>\n        ) : (\n          ''\n        )}\n      </Button>\n      {open && (\n        <Modal\n          title={\n            functionVersionOrigin === FunctionVersionOrigin.USER\n              ? 'Edit repository details override'\n              : 'Add new repository details override'\n          }\n          isOpen={open}\n          onDismiss={() => setOpen(false)}\n        >\n          <form onSubmit={handleSubmit(onSubmit)}>\n            <Alert severity=\"info\" title=\"Github Integration labels\">\n              <p>\n                To activate GitHub Integration feature, you will need to add two new labels when sending profiles:\n                <code>service_repository</code> and <code>service_git_ref</code>.\n              </p>\n              <p>\n                For debugging purposes, you can manually provide repository details using this form. The custom value is\n                saved in your browser local storage for given data source and service name.\n              </p>\n            </Alert>\n\n            <Field label=\"Data source\">\n              <DataSourcePicker current={datasourceUid} disabled={true}></DataSourcePicker>\n            </Field>\n            <Field label=\"Service name\">\n              <Input disabled={true} value={serviceName}></Input>\n            </Field>\n\n            <Field\n              label=\"service_repository (repository URL) - required\"\n              invalid={!!errors.repository}\n              error={errors?.repository?.message?.toString()}\n            >\n              <Input\n                {...register('repository', { required: 'Repository name is required' })}\n                placeholder=\"Enter GitHub repo name, https://github.com/org/repo\"\n              />\n            </Field>\n            <Field\n              label=\"service_git_ref (commit reference)\"\n              invalid={!!errors.git_ref}\n              error={errors?.git_ref?.message?.toString()}\n            >\n              <Input {...register('git_ref')} placeholder=\"HEAD\" />\n            </Field>\n            <Field label=\"Path to root\">\n              <Input {...register('root_path')} placeholder=\"Enter root path\" />\n            </Field>\n\n            <Stack direction=\"row\">\n              <Button type=\"submit\">{functionVersionOrigin === FunctionVersionOrigin.USER ? 'Edit' : 'Add'}</Button>\n              {functionVersionOrigin === FunctionVersionOrigin.USER && (\n                <Button\n                  type=\"button\"\n                  variant=\"destructive\"\n                  onClick={() => {\n                    props.deleteOverride(datasourceUid, serviceName);\n                    reset();\n                    setOpen(false);\n                  }}\n                >\n                  Delete override\n                </Button>\n              )}\n              <ConfirmButton\n                confirmVariant=\"destructive\"\n                confirmText=\"Remove all\"\n                onConfirm={() => {\n                  props.deleteAllOverrides();\n                  reset();\n                  setOpen(false);\n                }}\n              >\n                Remove all overrides\n              </ConfirmButton>\n            </Stack>\n          </form>\n        </Modal>\n      )}\n    </>\n  );\n};\n","import { css } from '@emotion/css';\nimport { GrafanaTheme2, TimeRange } from '@grafana/data';\nimport { SceneComponentProps, sceneGraph, SceneObjectBase, SceneObjectState } from '@grafana/scenes';\nimport { IconButton, InlineLabel, TextLink, Tooltip, useStyles2 } from '@grafana/ui';\nimport { displaySuccess } from '@shared/domain/displayStatus';\nimport { userStorage } from '@shared/infrastructure/userStorage';\nimport { DomainHookReturnValue } from '@shared/types/DomainHookReturnValue';\nimport { InlineBanner } from '@shared/ui/InlineBanner';\nimport { Panel } from '@shared/ui/Panel/Panel';\nimport React, { useMemo, useState } from 'react';\n\nimport { useBuildPyroscopeQuery } from '../../../../domain/useBuildPyroscopeQuery';\nimport { ProfilesDataSourceVariable } from '../../../../domain/variables/ProfilesDataSourceVariable';\nimport { getSceneVariableValue } from '../../../../helpers/getSceneVariableValue';\nimport { CodeContainer } from './components/CodeContainer/CodeContainer';\nimport { GitHubRepository } from './components/GitHubRepository';\nimport { formatFileName } from './domain/formatFileName';\nimport { useFunctionVersion } from './domain/FunctionVersionContext';\nimport { CommitWithSamples, getCommitsWithSamples } from './domain/getCommitsWithSamples';\nimport { getRepositoryDetails } from './domain/getRepositoryDetails';\nimport { isGitHubRepository } from './domain/isGitHubRepository';\nimport { FunctionDetails, FunctionVersion } from './domain/types/FunctionDetails';\nimport { StackTrace } from './domain/types/StackTrace';\nimport { useFetchFunctionsDetails } from './infrastructure/useFetchFunctionsDetails';\nimport { CommitSelect } from './ui/CommitSelect';\nimport { GitHubIntegrationBanner } from './ui/GitHubIntegrationBanner';\nimport { InlineSpinner } from './ui/InlineSpinner';\nimport { OverrideRepositoryDetailsButton } from './ui/OverrideRepositoryDetailsButton';\n\ninterface SceneFunctionDetailsPanelState extends SceneObjectState {}\n\nexport class SceneFunctionDetailsPanel extends SceneObjectBase<SceneFunctionDetailsPanelState> {\n  static LABEL_WIDTH = 16;\n\n  constructor() {\n    super({ key: 'function-details-panel' });\n  }\n\n  // eslint-disable-next-line sonarjs/cognitive-complexity\n  useSceneFunctionDetailsPanel = (stackTrace: StackTrace, timeRange: TimeRange): DomainHookReturnValue => {\n    const dataSourceUid = sceneGraph.findByKeyAndType(this, 'dataSource', ProfilesDataSourceVariable).useState()\n      .value as string;\n    const dataSourceName = sceneGraph.findByKeyAndType(this, 'dataSource', ProfilesDataSourceVariable).useState()\n      .text as string;\n    const serviceName = getSceneVariableValue(this, 'serviceName');\n    const query = useBuildPyroscopeQuery(this, 'filters');\n\n    const {\n      functionsDetails,\n      error: fetchFunctionDetailsError,\n      isFetching,\n    } = useFetchFunctionsDetails({ dataSourceUid, query, timeRange, stackTrace });\n\n    const { saveOverride, deleteOverride, functionVersion, deleteAllOverrides, functionVersionOrigin } =\n      useFunctionVersion(dataSourceUid, serviceName, functionsDetails[0].version);\n\n    const [prevFunctionsDetails, setPrevFunctionsDetails] = useState<FunctionDetails[]>();\n    const [currentFunctionDetails, setCurrentFunctionDetails] = useState<FunctionDetails>(functionsDetails[0]);\n    const [isGitHubBannerDismissed, setIsGitHubBannerDismissed] = useState(\n      userStorage.has(userStorage.KEYS.GITHUB_INTEGRATION)\n    );\n\n    if (functionsDetails && prevFunctionsDetails !== functionsDetails) {\n      setPrevFunctionsDetails(functionsDetails);\n\n      if (currentFunctionDetails !== functionsDetails[0]) {\n        setCurrentFunctionDetails(functionsDetails[0]);\n      }\n    }\n\n    const isGitHubRepo = isGitHubRepository(functionVersion?.repository || '');\n    const isGitHubSupported = currentFunctionDetails?.fileName?.endsWith('.go');\n    const shouldDisplayGitHubBanner = !isGitHubBannerDismissed && !isGitHubRepo && isGitHubSupported;\n\n    // TODO: massage in useFetchFunctionsDetails?\n    const totalSamples = useMemo(\n      () =>\n        functionsDetails\n          .map((details) => Array.from(details.callSites.values()).reduce((acc, { cum }) => acc + cum, 0))\n          .reduce((acc, total) => acc + total, 0),\n      [functionsDetails]\n    );\n    const commits = getCommitsWithSamples(functionsDetails, totalSamples);\n    const selectedCommit = commits.find(({ sha }) => sha === currentFunctionDetails?.commit?.sha);\n\n    return {\n      data: {\n        serviceName,\n        dataSourceName,\n        isLoading: isFetching,\n        fetchFunctionDetailsError,\n        functionDetails: {\n          ...currentFunctionDetails,\n          version: { ...currentFunctionDetails?.version, ...functionVersion },\n        },\n        functionVersionOrigin,\n        // TODO: massage in useFetchFunctionsDetails?\n        repository: getRepositoryDetails(isGitHubRepo, functionVersion),\n        commits,\n        selectedCommit,\n        isGitHubSupported,\n        shouldDisplayGitHubBanner,\n        dataSourceUid,\n      },\n      actions: {\n        deleteFunctionOverride(datasourceUid: string, serviceName: string) {\n          deleteOverride(datasourceUid, serviceName);\n        },\n        deleteFunctionAllOverrides() {\n          deleteAllOverrides();\n        },\n        saveFunctionDetails(datasourceUid: string, serviceName: string, o: FunctionVersion) {\n          saveOverride(datasourceUid, serviceName, o);\n        },\n        selectCommit(selectedCommit: CommitWithSamples) {\n          const details = functionsDetails.find(({ commit }) => commit.sha === selectedCommit.sha);\n          setCurrentFunctionDetails(details as FunctionDetails);\n        },\n        async copyFilePathToClipboard() {\n          try {\n            if (currentFunctionDetails?.fileName) {\n              await navigator.clipboard.writeText(currentFunctionDetails.fileName);\n              displaySuccess(['File path copied to clipboard!']);\n            }\n          } catch {}\n        },\n        dismissGitHubBanner() {\n          userStorage.set(userStorage.KEYS.GITHUB_INTEGRATION, {});\n          setIsGitHubBannerDismissed(true);\n        },\n      },\n    };\n  };\n\n  static Component = ({\n    model,\n    timeRange,\n    stackTrace,\n    onClose,\n  }: SceneComponentProps<SceneFunctionDetailsPanel> & {\n    timeRange: TimeRange;\n    stackTrace: StackTrace;\n    onClose: () => void;\n  }) => {\n    const styles = useStyles2(getStyles);\n    const { data, actions } = model.useSceneFunctionDetailsPanel(stackTrace, timeRange);\n\n    return (\n      <Panel\n        className={styles.sidePanel}\n        title=\"Function Details\"\n        isLoading={false}\n        headerActions={<IconButton name=\"times-circle\" variant=\"secondary\" aria-label=\"close\" onClick={onClose} />}\n        dataTestId=\"function-details-panel\"\n      >\n        <div className={styles.content}>\n          {data.fetchFunctionDetailsError && (\n            <InlineBanner\n              severity=\"error\"\n              title=\"Error while fetching function details!\"\n              error={data.fetchFunctionDetailsError}\n            />\n          )}\n\n          <div className={styles.container}>\n            <div className={styles.row} data-testid=\"row-function-name\">\n              <InlineLabel width={SceneFunctionDetailsPanel.LABEL_WIDTH}>Function name</InlineLabel>\n              <Tooltip content={data.functionDetails.name} placement=\"top\">\n                <span className={styles.textValue}>{data.functionDetails.name}</span>\n              </Tooltip>\n            </div>\n\n            <div className={styles.row} data-testid=\"row-start-line\">\n              <InlineLabel\n                tooltip=\"The line where this function definition starts\"\n                width={SceneFunctionDetailsPanel.LABEL_WIDTH}\n              >\n                Start line\n              </InlineLabel>\n              <span className={styles.textValue}>\n                <InlineSpinner isLoading={data.isLoading}>\n                  {data.functionDetails.startLine !== undefined ? data.functionDetails.startLine : '-'}\n                </InlineSpinner>\n              </span>\n            </div>\n\n            <div className={styles.row} data-testid=\"row-file-path\">\n              <InlineLabel\n                tooltip=\"File path where that function is defined\"\n                width={SceneFunctionDetailsPanel.LABEL_WIDTH}\n              >\n                File\n              </InlineLabel>\n              <InlineSpinner isLoading={data.isLoading}>\n                {data.functionDetails.fileName ? (\n                  <>\n                    <Tooltip content={data.functionDetails.fileName} placement=\"top\">\n                      {/* adding LRM to prevent ellipsis with RTL to fail when the file name starts with non-alpha chars (e.g. \"$\")  */}\n                      <span className={styles.textValue}>&lrm;{formatFileName(data.functionDetails.fileName)}</span>\n                    </Tooltip>\n                    <IconButton\n                      name=\"clipboard-alt\"\n                      tooltip=\"Copy to clipboard\"\n                      onClick={actions.copyFilePathToClipboard}\n                    />\n                  </>\n                ) : (\n                  '-'\n                )}\n              </InlineSpinner>\n            </div>\n\n            {data.shouldDisplayGitHubBanner && (\n              <div className={styles.row} data-testid=\"row-github-banner\">\n                <GitHubIntegrationBanner onDismiss={actions.dismissGitHubBanner} />\n              </div>\n            )}\n\n            <div className={styles.row} data-testid=\"row-repository\">\n              <InlineLabel\n                tooltip=\"The repository configured for the selected service\"\n                width={SceneFunctionDetailsPanel.LABEL_WIDTH}\n              >\n                Repository\n              </InlineLabel>\n              <InlineSpinner isLoading={data.isLoading}>\n                {data.repository ? (\n                  data.repository.isGitHub ? (\n                    <GitHubRepository enableIntegration={data.isGitHubSupported} repository={data.repository} />\n                  ) : (\n                    <TextLink href={data.repository.url} external>\n                      {data.repository.url}\n                    </TextLink>\n                  )\n                ) : (\n                  '-'\n                )}\n              </InlineSpinner>\n              {!data.isLoading && (\n                <OverrideRepositoryDetailsButton\n                  serviceName={data.serviceName}\n                  datasourceName={data.dataSourceName}\n                  datasourceUid={data.dataSourceUid}\n                  version={data.functionDetails.version}\n                  functionVersionOrigin={data.functionVersionOrigin}\n                  saveOverrides={actions.saveFunctionDetails}\n                  deleteAllOverrides={actions.deleteFunctionAllOverrides}\n                  deleteOverride={actions.deleteFunctionOverride}\n                />\n              )}\n            </div>\n\n            <div className={styles.row} data-testid=\"row-commit\">\n              <InlineLabel\n                width={SceneFunctionDetailsPanel.LABEL_WIDTH}\n                tooltip=\"The version of the application (commit) where the function is defined. Use the dropdown menu to target a specific commit.\"\n              >\n                Commit\n              </InlineLabel>\n              <InlineSpinner isLoading={data.isLoading}>\n                <CommitSelect\n                  commits={data.commits}\n                  selectedCommit={data.selectedCommit}\n                  onChange={actions.selectCommit}\n                />\n              </InlineSpinner>\n            </div>\n          </div>\n\n          <CodeContainer dataSourceUid={data.dataSourceUid} functionDetails={data.functionDetails} />\n        </div>\n      </Panel>\n    );\n  };\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  sidePanel: css`\n    flex: 1 0 50%;\n    margin-left: 8px;\n    max-width: calc(50% - 4px);\n  `,\n  title: css`\n    margin: -4px 0 4px 0;\n  `,\n  content: css`\n    padding: ${theme.spacing(1)};\n  `,\n  container: css`\n    width: 100%;\n    display: flex;\n    flex-direction: column;\n    align-items: flex-start;\n  `,\n  row: css`\n    width: 100%;\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    padding-bottom: 10px;\n    > * {\n      margin-right: 10px !important;\n    }\n  `,\n  textValue: css`\n    // hack to have the ellipsis appear at the start of the string\n    direction: rtl;\n    text-overflow: ellipsis;\n    overflow: hidden;\n    white-space: nowrap;\n  `,\n});\n","// when using direction=rtl, the first / is ending up at the end of the string\n// so we add a / at the end of the string to make it look better\nexport const formatFileName = (fileName: string): string =>\n  fileName?.[0] === '/' ? fileName.substring(1) + '/' : fileName;\n","import { css } from '@emotion/css';\nimport { Button, Tooltip, useStyles2 } from '@grafana/ui';\nimport React from 'react';\n\ntype Props = {\n  spanSelector: string;\n  removeSpanSelector: () => void;\n};\n\nexport function SpanSelectorLabel(props: Props) {\n  const { spanSelector, removeSpanSelector } = props;\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.container}>\n      <Tooltip content={`You have added a span selector to the flamegraph query (${spanSelector}).`} placement=\"top\">\n        <span>Span selector added</span>\n      </Tooltip>\n      <Button\n        size=\"md\"\n        fill=\"text\"\n        variant=\"secondary\"\n        icon=\"times\"\n        tooltip={`Remove span selector from query`}\n        tooltipPlacement=\"top\"\n        onClick={() => {\n          removeSpanSelector();\n        }}\n      />\n    </div>\n  );\n}\n\nconst getStyles = () => ({\n  container: css`\n    padding: 0 4px;\n  `,\n});\n","import { css } from '@emotion/css';\nimport { useAssistant } from '@grafana/assistant';\nimport { createTheme, GrafanaTheme2, LoadingState, TimeRange } from '@grafana/data';\nimport { FlameGraph, Props as FlameGraphProps } from '@grafana/flamegraph';\nimport { SceneComponentProps, SceneObjectBase, SceneObjectState, SceneQueryRunner } from '@grafana/scenes';\nimport { Spinner, useStyles2, useTheme2 } from '@grafana/ui';\nimport { displayWarning } from '@shared/domain/displayStatus';\nimport { useMaxNodesFromUrl } from '@shared/domain/url-params/useMaxNodesFromUrl';\nimport { useToggleSidePanel } from '@shared/domain/useToggleSidePanel';\nimport { getProfileMetric, ProfileMetricId } from '@shared/infrastructure/profile-metrics/getProfileMetric';\nimport { featureToggles } from '@shared/infrastructure/settings/featureToggles';\nimport { useFetchPluginSettings } from '@shared/infrastructure/settings/useFetchPluginSettings';\nimport { DomainHookReturnValue } from '@shared/types/DomainHookReturnValue';\nimport { InlineBanner } from '@shared/ui/InlineBanner';\nimport { Panel } from '@shared/ui/Panel/Panel';\nimport { PyroscopeLogo } from '@shared/ui/PyroscopeLogo';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { Unsubscribable } from 'rxjs';\n\nimport { useBuildPyroscopeQuery } from '../../domain/useBuildPyroscopeQuery';\nimport { getSceneVariableValue } from '../../helpers/getSceneVariableValue';\nimport { buildFlameGraphQueryRunner } from '../../infrastructure/flame-graph/buildFlameGraphQueryRunner';\nimport { PYROSCOPE_DATA_SOURCE } from '../../infrastructure/pyroscope-data-sources';\nimport { AIButton } from '../SceneAiPanel/components/AiButton/AIButton';\nimport { SceneAiPanel } from '../SceneAiPanel/SceneAiPanel';\nimport { useCreateRecordingRulesMenu } from '../SceneCreateMetricModal/domain/useMenuOption';\nimport { SceneCreateRecordingRuleModal } from '../SceneCreateMetricModal/SceneCreateRecordingRuleModal';\nimport { SceneExportMenu } from './components/SceneExportMenu/SceneExportMenu';\nimport { useGitHubIntegration } from './components/SceneFunctionDetailsPanel/domain/useGitHubIntegration';\nimport { SceneFunctionDetailsPanel } from './components/SceneFunctionDetailsPanel/SceneFunctionDetailsPanel';\nimport { RemoveSpanSelector } from './domain/events/RemoveSpanSelector';\nimport { SpanSelectorLabel } from './SpanSelectorLabel';\n\ninterface SceneFlameGraphState extends SceneObjectState {\n  $data: SceneQueryRunner;\n  lastTimeRange?: TimeRange;\n  exportMenu: SceneExportMenu;\n  aiPanel: SceneAiPanel;\n  functionDetailsPanel: SceneFunctionDetailsPanel;\n  createRecordingRuleModal: SceneCreateRecordingRuleModal;\n}\n\n// I've tried to use a SplitLayout for the body without any success (left: flame graph, right: explain flame graph content)\n// without success: the flame graph dimensions are set in runtime and do not change when the user resizes the layout\nexport class SceneFlameGraph extends SceneObjectBase<SceneFlameGraphState> {\n  constructor() {\n    super({\n      key: 'flame-graph',\n      $data: new SceneQueryRunner({\n        datasource: PYROSCOPE_DATA_SOURCE,\n        queries: [],\n      }),\n      lastTimeRange: undefined,\n      exportMenu: new SceneExportMenu(),\n      aiPanel: new SceneAiPanel(),\n      functionDetailsPanel: new SceneFunctionDetailsPanel(),\n      createRecordingRuleModal: new SceneCreateRecordingRuleModal(),\n    });\n\n    this.addActivationHandler(this.onActivate.bind(this));\n  }\n\n  onActivate() {\n    let dataSubscription: Unsubscribable | undefined;\n\n    const stateSubscription = this.subscribeToState((newState, prevState) => {\n      if (newState.$data === prevState.$data) {\n        return;\n      }\n\n      if (dataSubscription) {\n        dataSubscription.unsubscribe();\n      }\n\n      dataSubscription = newState.$data?.subscribeToState((newDataState) => {\n        if (newDataState.data?.state === LoadingState.Done) {\n          this.setState({ lastTimeRange: newDataState.data.timeRange });\n        }\n      });\n    });\n\n    return () => {\n      stateSubscription.unsubscribe();\n      dataSubscription?.unsubscribe();\n    };\n  }\n\n  buildTitle() {\n    const serviceName = getSceneVariableValue(this, 'serviceName');\n    const profileMetricId = getSceneVariableValue(this, 'profileMetricId');\n    const profileMetricType = getProfileMetric(profileMetricId as ProfileMetricId).type;\n\n    return (\n      <>\n        <PyroscopeLogo size=\"small\" />\n        Flame graph for {serviceName} ({profileMetricType})\n      </>\n    );\n  }\n\n  useSceneFlameGraph = (spanSelector: string): DomainHookReturnValue => {\n    const { isLight } = useTheme2();\n    const getTheme = useMemo(() => () => createTheme({ colors: { mode: isLight ? 'light' : 'dark' } }), [isLight]);\n\n    const [maxNodes] = useMaxNodesFromUrl();\n    const { settings, error: isFetchingSettingsError } = useFetchPluginSettings();\n    const { $data, lastTimeRange, exportMenu, aiPanel, functionDetailsPanel, createRecordingRuleModal } =\n      this.useState();\n\n    if (isFetchingSettingsError) {\n      displayWarning([\n        'Error while retrieving the plugin settings!',\n        'Some features might not work as expected (e.g. collapsed flame graphs). Please try to reload the page, sorry for the inconvenience.',\n      ]);\n    }\n\n    useEffect(() => {\n      if (maxNodes) {\n        this.setState({\n          $data: buildFlameGraphQueryRunner({ maxNodes, spanSelector }),\n        });\n      }\n    }, [maxNodes, spanSelector]);\n\n    const $dataState = $data.useState();\n    const loadingState = $dataState?.data?.state;\n\n    const fetchProfileError =\n      loadingState === LoadingState.Error\n        ? ($dataState?.data?.errors?.[0] as Error) || new Error('Unknown error!')\n        : null;\n\n    const isFetchingProfileData = loadingState === LoadingState.Loading;\n    const profileData = $dataState?.data?.series?.[0];\n    const hasProfileData = Number(profileData?.length) > 1;\n\n    const query = useBuildPyroscopeQuery(this, 'filters');\n\n    return {\n      data: {\n        title: this.buildTitle(),\n        isLoading: isFetchingProfileData,\n        isFetchingProfileData,\n        hasProfileData,\n        profileData,\n        spanSelector,\n        fetchProfileError,\n        settings,\n        export: {\n          menu: exportMenu,\n          query,\n          timeRange: lastTimeRange,\n        },\n        ai: {\n          panel: aiPanel,\n          fetchParams: [{ query, timeRange: lastTimeRange }],\n        },\n        gitHub: {\n          panel: functionDetailsPanel,\n          timeRange: lastTimeRange,\n        },\n        recordingRules: {\n          modal: createRecordingRuleModal,\n        },\n      },\n      actions: {\n        getTheme,\n      },\n    };\n  };\n\n  removeSpanSelector() {\n    this.publishEvent(new RemoveSpanSelector({}), true);\n  }\n\n  static Component = ({ model }: SceneComponentProps<SceneFlameGraph>) => {\n    const styles = useStyles2(getStyles);\n\n    const spanSelector = getSceneVariableValue(model, 'spanSelector');\n    const { data, actions } = model.useSceneFlameGraph(spanSelector);\n    const sidePanel = useToggleSidePanel();\n    const gitHubIntegration = useGitHubIntegration(sidePanel);\n\n    const { settings } = useFetchPluginSettings();\n\n    const [recordingRulesModalState, setRecordingRulesModalState] = useState<{\n      isOpen: boolean;\n      functionName?: string;\n    }>({ isOpen: false });\n\n    const recordingRulesMenu = useCreateRecordingRulesMenu((functionName?: string) => {\n      setRecordingRulesModalState({ isOpen: true, functionName });\n    });\n\n    // Do not show AI button if the assistant integration is enabled to avoid having two AI buttons in the UI\n    // For debugging purposes and comparing both you can use localStorage flag grafana-pyroscope-app.forceShowAiButton\n    const [isAvailable] = useAssistant();\n    const hideAIButton =\n      featureToggles.grafanaAssistantInProfilesDrilldown &&\n      isAvailable &&\n      !localStorage.getItem('grafana-pyroscope-app.forceShowAIButton');\n\n    const isAiButtonDisabled = data.isLoading || !data.hasProfileData;\n\n    useEffect(() => {\n      if (isAiButtonDisabled) {\n        sidePanel.close();\n      }\n    }, [isAiButtonDisabled, sidePanel]);\n\n    const panelTitle = useMemo(\n      () => (\n        <>\n          {data.title}\n          {data.isLoading && <Spinner inline className={styles.spinner} />}\n        </>\n      ),\n      [data.isLoading, data.title, styles.spinner]\n    );\n\n    const extraContextMenuButtons: FlameGraphProps['getExtraContextMenuButtons'] = (clickedItemData, data) => {\n      const ghButtons = gitHubIntegration.actions.getExtraFlameGraphMenuItems(clickedItemData, data);\n      const recordingRulesButtons =\n        settings?.enableMetricsFromProfiles && featureToggles.metricsFromProfiles\n          ? recordingRulesMenu.actions.getExtraFlameGraphMenuItems(clickedItemData, data)\n          : [];\n\n      return [...ghButtons, ...recordingRulesButtons];\n    };\n\n    return (\n      <div className={styles.flex}>\n        <Panel\n          dataTestId=\"flame-graph-panel\"\n          className={styles.flamegraphPanel}\n          title={panelTitle}\n          isLoading={data.isLoading}\n          headerActions={\n            <>\n              {spanSelector && (\n                <SpanSelectorLabel spanSelector={spanSelector} removeSpanSelector={() => model.removeSpanSelector()} />\n              )}\n              {!hideAIButton && (\n                <AIButton\n                  disabled={isAiButtonDisabled || sidePanel.isOpen('ai')}\n                  onClick={() => sidePanel.open('ai')}\n                  interactionName=\"g_pyroscope_app_explain_flamegraph_clicked\"\n                >\n                  Explain Flame Graph\n                </AIButton>\n              )}\n            </>\n          }\n        >\n          {data.fetchProfileError && (\n            <InlineBanner severity=\"error\" title=\"Error while loading profile data!\" error={data.fetchProfileError} />\n          )}\n\n          {!data.fetchProfileError && (\n            <FlameGraph\n              data={data.profileData as any}\n              disableCollapsing={!data.settings?.collapsedFlamegraphs}\n              getTheme={actions.getTheme as any}\n              getExtraContextMenuButtons={extraContextMenuButtons}\n              extraHeaderElements={\n                <data.export.menu.Component\n                  model={data.export.menu}\n                  query={data.export.query}\n                  timeRange={data.export.timeRange}\n                />\n              }\n              keepFocusOnDataChange\n            />\n          )}\n        </Panel>\n\n        {sidePanel.isOpen('ai') && (\n          <data.ai.panel.Component model={data.ai.panel} fetchParams={data.ai.fetchParams} onClose={sidePanel.close} />\n        )}\n\n        {sidePanel.isOpen('function-details') && (\n          <data.gitHub.panel.Component\n            model={data.gitHub.panel}\n            timeRange={data.gitHub.timeRange}\n            stackTrace={gitHubIntegration.data.stacktrace}\n            onClose={sidePanel.close}\n          />\n        )}\n\n        <data.recordingRules.modal.Component\n          model={data.recordingRules.modal}\n          isModalOpen={recordingRulesModalState.isOpen}\n          functionName={recordingRulesModalState.functionName}\n          onDismiss={() => setRecordingRulesModalState({ isOpen: false })}\n          onCreated={() => {\n            setRecordingRulesModalState({ isOpen: false });\n          }}\n        />\n      </div>\n    );\n  };\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  flex: css`\n    display: flex;\n  `,\n  flamegraphPanel: css`\n    min-width: 0;\n    flex-grow: 1;\n  `,\n  spinner: css`\n    margin-left: ${theme.spacing(1)};\n  `,\n});\n","import { IconName } from '@grafana/data';\nimport { Props as FlameGraphProps } from '@grafana/flamegraph';\nimport { DomainHookReturnValue } from '@shared/types/DomainHookReturnValue';\nimport { useCallback } from 'react';\n\nexport function useCreateRecordingRulesMenu(setModalOpen: (functionName?: string) => void): DomainHookReturnValue {\n  const getExtraFlameGraphMenuItems: FlameGraphProps['getExtraContextMenuButtons'] = useCallback(\n    ({ item, label }: any) => {\n      return [\n        {\n          label: 'Create recording rule',\n          icon: 'download-alt' as IconName,\n          onClick: () => setModalOpen(label === 'total' && item.level === 0 ? undefined : label),\n        },\n      ];\n    },\n    [setModalOpen]\n  );\n\n  return {\n    data: {},\n    actions: {\n      getExtraFlameGraphMenuItems,\n    },\n  };\n}\n","import { css } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { SceneComponentProps, sceneGraph, SceneObjectBase, SceneObjectState } from '@grafana/scenes';\nimport { useStyles2 } from '@grafana/ui';\nimport React from 'react';\n\nimport { FavAction } from '../../domain/actions/FavAction';\nimport { SelectAction } from '../../domain/actions/SelectAction';\nimport { FiltersVariable } from '../../domain/variables/FiltersVariable/FiltersVariable';\nimport { ProfileMetricVariable } from '../../domain/variables/ProfileMetricVariable';\nimport { ServiceNameVariable } from '../../domain/variables/ServiceNameVariable/ServiceNameVariable';\nimport { GridItemData } from '../SceneByVariableRepeaterGrid/types/GridItemData';\nimport { SceneMainServiceTimeseries } from '../SceneMainServiceTimeseries';\nimport { SceneFlameGraph } from './SceneFlameGraph';\n\ninterface SceneExploreServiceFlameGraphState extends SceneObjectState {\n  mainTimeseries: SceneMainServiceTimeseries;\n  body: SceneFlameGraph;\n}\n\nexport class SceneExploreServiceFlameGraph extends SceneObjectBase<SceneExploreServiceFlameGraphState> {\n  constructor({ item }: { item?: GridItemData }) {\n    super({\n      key: 'explore-service-flame-graph',\n      mainTimeseries: new SceneMainServiceTimeseries({\n        item,\n        headerActions: (item) => [new SelectAction({ type: 'view-labels', item }), new FavAction({ item })],\n      }),\n      body: new SceneFlameGraph(),\n    });\n\n    this.addActivationHandler(this.onActivate.bind(this, item));\n  }\n\n  onActivate(item?: GridItemData) {\n    if (item) {\n      this.initVariables(item);\n    }\n\n    const profileMetricVariable = sceneGraph.findByKeyAndType(this, 'profileMetricId', ProfileMetricVariable);\n\n    profileMetricVariable.setState({ query: ProfileMetricVariable.QUERY_SERVICE_NAME_DEPENDENT });\n    profileMetricVariable.update(true);\n\n    return () => {\n      profileMetricVariable.setState({ query: ProfileMetricVariable.QUERY_DEFAULT });\n      profileMetricVariable.update(true);\n    };\n  }\n\n  initVariables(item: GridItemData) {\n    const { serviceName, profileMetricId, filters } = item.queryRunnerParams;\n\n    if (serviceName) {\n      const serviceNameVariable = sceneGraph.findByKeyAndType(this, 'serviceName', ServiceNameVariable);\n      serviceNameVariable.changeValueTo(serviceName);\n    }\n\n    if (profileMetricId) {\n      const profileMetricVariable = sceneGraph.findByKeyAndType(this, 'profileMetricId', ProfileMetricVariable);\n      profileMetricVariable.changeValueTo(profileMetricId);\n    }\n\n    if (filters) {\n      const filtersVariable = sceneGraph.findByKeyAndType(this, 'filters', FiltersVariable);\n      filtersVariable.setState({ filters });\n    }\n  }\n\n  // see SceneProfilesExplorer\n  getVariablesAndGridControls() {\n    return {\n      variables: [\n        sceneGraph.findByKeyAndType(this, 'serviceName', ServiceNameVariable),\n        sceneGraph.findByKeyAndType(this, 'profileMetricId', ProfileMetricVariable),\n        sceneGraph.findByKeyAndType(this, 'filters', FiltersVariable),\n      ],\n      gridControls: [],\n    };\n  }\n\n  static Component({ model }: SceneComponentProps<SceneExploreServiceFlameGraph>) {\n    const styles = useStyles2(getStyles); // eslint-disable-line react-hooks/rules-of-hooks\n    const { mainTimeseries, body } = model.useState();\n\n    // we use CSS here and Scenes Flex layout because we encountered a problem where the Flamegraph would not respect each panel width,\n    // resulting in a cropped flame graph when opening the side panel\n    return (\n      <div className={styles.flex}>\n        <div className={styles.mainTimeseries}>\n          <mainTimeseries.Component model={mainTimeseries} />\n        </div>\n        <body.Component model={body} />\n      </div>\n    );\n  }\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  flex: css`\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n    gap: ${theme.spacing(1)};\n  `,\n  mainTimeseries: css`\n    height: ${SceneMainServiceTimeseries.MIN_HEIGHT}px;\n  `,\n});\n","import { SceneObject, SceneVariable } from '@grafana/scenes';\nimport { displaySuccess } from '@shared/domain/displayStatus';\nimport { reportInteraction } from '@shared/domain/reportInteraction';\nimport { logger } from '@shared/infrastructure/tracking/logger';\nimport { useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { PLUGIN_BASE_URL, ROUTES } from 'src/constants';\nimport { getSceneVariableValue } from 'src/pages/ProfilesExplorerView/helpers/getSceneVariableValue';\n\nimport { ProfilesDataSourceVariable } from '../../../../domain/variables/ProfilesDataSourceVariable';\nimport { ExplorationType } from '../../SceneProfilesExplorer';\nimport { HeaderProps } from '../Header';\nimport { builsShareableUrl } from './builsShareableUrl';\n\nasync function onClickShareLink() {\n  reportInteraction('g_pyroscope_app_share_link_clicked');\n\n  try {\n    await navigator.clipboard.writeText(builsShareableUrl().toString());\n\n    displaySuccess(['Link copied to clipboard!']);\n  } catch (error) {\n    logger.error(error as Error, { info: 'Error while creating the shareable link!' });\n  }\n}\n\nexport function useHeader({ explorationType, controls, body, $variables, onChangeExplorationType }: HeaderProps) {\n  const [timePickerControl, refreshPickerControl] =\n    explorationType === ExplorationType.DIFF_FLAME_GRAPH ? [] : (controls as [SceneObject, SceneObject]);\n\n  const dataSourceVariable = $variables.state.variables[0] as ProfilesDataSourceVariable;\n\n  const bodySceneObject = body?.state.primary as any;\n\n  if (typeof bodySceneObject.getVariablesAndGridControls !== 'function') {\n    throw new Error(\n      `Error while rendering \"${bodySceneObject.constructor.name}\": the \"getVariablesAndGridControls\" method is missing! Please implement it.`\n    );\n  }\n\n  const { variables: sceneVariables, gridControls } = bodySceneObject.getVariablesAndGridControls() as {\n    variables: SceneVariable[];\n    gridControls: SceneObject[];\n  };\n\n  const dataSourceUid = dataSourceVariable.useState().value as string;\n\n  const navigate = useNavigate();\n\n  const explorationTypeHasServiceName =\n    explorationType !== ExplorationType.ALL_SERVICES && explorationType !== ExplorationType.FAVORITES;\n\n  const serviceName = explorationTypeHasServiceName ? getSceneVariableValue($variables, 'serviceName') : undefined;\n\n  return {\n    data: {\n      explorationType,\n      dataSourceVariable,\n      timePickerControl,\n      refreshPickerControl,\n      sceneVariables,\n      gridControls,\n      body,\n      dataSourceUid,\n      serviceName,\n    },\n    actions: {\n      onChangeExplorationType,\n      onClickShareLink,\n      onClickRecordingRules: useCallback(() => {\n        reportInteraction('g_pyroscope_app_open_recording_rules_view');\n\n        navigate(`${PLUGIN_BASE_URL}${ROUTES.RECORDING_RULES}`, { state: { referrer: window.location.href } });\n      }, [navigate]),\n      onClickAdHoc: useCallback(() => {\n        reportInteraction('g_pyroscope_app_upload_ad_hoc_clicked');\n\n        navigate(`${PLUGIN_BASE_URL}${ROUTES.ADHOC}`, { state: { referrer: window.location.href } });\n      }, [navigate]),\n      onClickUserSettings: useCallback(() => {\n        reportInteraction('g_pyroscope_app_user_settings_clicked');\n\n        navigate(`${PLUGIN_BASE_URL}${ROUTES.SETTINGS}`, { state: { referrer: window.location.href } });\n      }, [navigate]),\n    },\n  };\n}\n","import { dateMath } from '@grafana/data';\n\nimport { getDefaultTimeRange } from '../../../..//domain/buildTimeRange';\n\nexport function builsShareableUrl(): URL {\n  const shareableUrl = new URL(window.location.toString());\n  const { searchParams } = shareableUrl;\n\n  if (!searchParams.get('from')) {\n    searchParams.set('from', getDefaultTimeRange().from);\n  }\n  if (!searchParams.get('to')) {\n    searchParams.set('to', getDefaultTimeRange().to);\n  }\n\n  ['from', 'to', 'from-2', 'to-2', 'from-3', 'to-3', 'diffFrom', 'diffTo', 'diffFrom-2', 'diffTo-2'].forEach((name) => {\n    const value = searchParams.get(name);\n    if (value) {\n      searchParams.set(name, String(dateMath.parse(value)!.valueOf()));\n    }\n  });\n\n  return shareableUrl;\n}\n","import { css, cx } from '@emotion/css';\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { Button, useStyles2 } from '@grafana/ui';\nimport { noOp } from '@shared/domain/noOp';\nimport React, { Fragment } from 'react';\n\ntype ExplorationTypeSelectorProps = {\n  options: Array<SelectableValue<string>>;\n  value: string;\n  onChange: (newValue: string) => void;\n};\n\nexport function ExplorationTypeSelector({ options, value, onChange }: ExplorationTypeSelectorProps) {\n  const styles = useStyles2(getStyles);\n\n  const activeIndex = options.findIndex((o) => o.value === value);\n\n  const getButtonVariant = (currentIndex: number) => {\n    if (activeIndex === options.length - 1) {\n      // \"Favorites\" is the last option, so in this case we don't want all the previous buttons to be active\n      return currentIndex === activeIndex ? 'primary' : 'secondary';\n    }\n\n    return currentIndex <= activeIndex ? 'primary' : 'secondary';\n  };\n\n  return (\n    <div className={styles.explorationTypeContainer} data-testid=\"exploration-types\">\n      <div className={styles.label}>Exploration</div>\n\n      <div className={styles.breadcrumb}>\n        {options.map((option, i) => {\n          const isActive = value === option.value;\n          const variant = getButtonVariant(i);\n          const isPrimary = variant === 'primary';\n          const extraClasses = [isActive && 'active', isPrimary && 'primary'];\n\n          return (\n            <Fragment key={option.value}>\n              <Button\n                className={cx(styles.button, ...extraClasses)}\n                variant={variant}\n                size=\"sm\"\n                aria-label={option.label}\n                icon={option.icon as any}\n                onClick={isActive ? noOp : () => onChange(option.value as string)}\n                tooltip={option.description}\n                tooltipPlacement=\"top\"\n                data-testid={isActive ? 'is-active' : undefined}\n              >\n                {option.label}\n              </Button>\n\n              {/* add a connection only for buttons before \"Diff flame graph\" and \"Favorites\" */}\n              {i < options.length - 3 && (\n                <div\n                  className={\n                    activeIndex !== options.length - 1 && i <= activeIndex - 1\n                      ? cx(styles.arrow, 'arrow', ...extraClasses)\n                      : styles.arrow\n                  }\n                />\n              )}\n            </Fragment>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  explorationTypeContainer: css`\n    display: flex;\n    align-items: center;\n  `,\n  label: css`\n    display: flex;\n    gap: 2px;\n    align-items: center;\n    font-size: 14px;\n    margin-right: ${theme.spacing(1)};\n\n    ${theme.breakpoints.down('xxl')} {\n      display: none;\n    }\n  `,\n  breadcrumb: css`\n    display: flex;\n    align-items: center;\n    height: 32px;\n    line-height: 32px;\n\n    .active {\n      background-color: ${theme.colors.primary.main};\n    }\n\n    .arrow.primary {\n      background-color: ${theme.colors.primary.main};\n    }\n\n    & button.primary:not(.active),\n    & .arrow.primary:not(.active) {\n      opacity: 0.7;\n    }\n\n    & button.primary:not(.active):hover {\n      opacity: 1;\n      background-color: ${theme.colors.primary.main};\n    }\n  `,\n  button: css`\n    height: 27px;\n    line-height: 27px;\n    border-radius: 15px;\n\n    &:hover {\n      border-color: ${theme.colors.primary.main};\n    }\n\n    &.active:hover {\n      cursor: default;\n      background-color: ${theme.colors.primary.main};\n    }\n\n    &:nth-last-child(2) {\n      margin-left: ${theme.spacing(1)};\n    }\n\n    &:nth-last-child(1) {\n      margin-left: ${theme.spacing(2)};\n    }\n  `,\n  arrow: css`\n    background-color: ${theme.colors.text.disabled};\n    width: 10px;\n    height: 2px;\n  `,\n});\n","import { css, cx } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useChromeHeaderHeight, usePluginComponent } from '@grafana/runtime';\nimport { Dropdown, ErrorBoundary, Field, Icon, IconButton, Menu, useStyles2 } from '@grafana/ui';\nimport { featureToggles } from '@shared/infrastructure/settings/featureToggles';\nimport { useFetchPluginSettings } from '@shared/infrastructure/settings/useFetchPluginSettings';\nimport { PluginInfo } from '@shared/ui/PluginInfo';\nimport React from 'react';\n\nimport { GiveFeedbackButton } from '../../GiveFeedbackButton';\nimport { SceneProfilesExplorer, SceneProfilesExplorerState } from '../SceneProfilesExplorer';\nimport { useHeader } from './domain/useHeader';\nimport { ExplorationTypeSelector } from './ui/ExplorationTypeSelector';\n\nexport type HeaderProps = {\n  explorationType: SceneProfilesExplorerState['explorationType'];\n  controls: SceneProfilesExplorerState['controls'];\n  body: SceneProfilesExplorerState['body'];\n  $variables: SceneProfilesExplorerState['$variables'];\n  onChangeExplorationType: (explorationType: string) => void;\n  onCreateRecordingRule: () => void;\n};\n\nexport function Header(props: HeaderProps) {\n  const chromeHeaderHeight = useChromeHeaderHeight?.();\n  const styles = useStyles2(getStyles, chromeHeaderHeight ?? 0);\n\n  const { data, actions } = useHeader(props);\n\n  const { settings } = useFetchPluginSettings();\n\n  const {\n    explorationType,\n    dataSourceVariable,\n    timePickerControl,\n    refreshPickerControl,\n    sceneVariables,\n    gridControls,\n    serviceName,\n  } = data;\n\n  type InsightsLauncherProps = {\n    dataSourceUid: string;\n    serviceName?: string;\n  };\n  const { component: InsightsLauncher } = usePluginComponent<InsightsLauncherProps>(\n    'grafana-o11yinsights-app/insights-launcher/v1'\n  );\n\n  const metricsFromProfilesMenu = (\n    <Menu>\n      <Menu.Item\n        ariaLabel=\"View recording rules\"\n        label=\"View recording rules\"\n        onClick={actions.onClickRecordingRules}\n      />\n      <Menu.Item ariaLabel=\"Add recording rule\" label=\"Add recording rule\" onClick={props.onCreateRecordingRule} />\n    </Menu>\n  );\n\n  return (\n    <div className={styles.header} data-testid=\"allControls\">\n      <GiveFeedbackButton />\n\n      <div className={styles.appControls} data-testid=\"appControls\">\n        <div className={styles.appControlsLeft}>\n          <ExplorationTypeSelector\n            options={SceneProfilesExplorer.EXPLORATION_TYPE_OPTIONS}\n            value={explorationType as string}\n            onChange={actions.onChangeExplorationType}\n          />\n        </div>\n\n        <div className={styles.appControlsRight}>\n          {InsightsLauncher && (\n            <ErrorBoundary>\n              {({ error }) =>\n                error ? undefined : (\n                  <InsightsLauncher dataSourceUid={dataSourceVariable.getValueText()} serviceName={serviceName} />\n                )\n              }\n            </ErrorBoundary>\n          )}\n\n          {timePickerControl && (\n            <timePickerControl.Component key={timePickerControl.state.key} model={timePickerControl} />\n          )}\n          {refreshPickerControl && (\n            <refreshPickerControl.Component key={refreshPickerControl.state.key} model={refreshPickerControl} />\n          )}\n\n          <div className={styles.appMiscButtons}>\n            {settings?.enableMetricsFromProfiles && featureToggles.metricsFromProfiles && (\n              <>\n                <Dropdown overlay={metricsFromProfilesMenu}>\n                  <IconButton name=\"gf-prometheus\" tooltip=\"Recording rules\" aria-label=\"Recording rules\" />\n                </Dropdown>\n              </>\n            )}\n\n            <IconButton name=\"upload\" tooltip=\"Upload ad hoc profiles\" onClick={actions.onClickAdHoc} />\n\n            <IconButton name=\"cog\" tooltip=\"View/edit tenant settings\" onClick={actions.onClickUserSettings} />\n\n            <IconButton\n              name=\"share-alt\"\n              tooltip=\"Copy shareable link to the clipboard\"\n              onClick={actions.onClickShareLink}\n            />\n\n            <PluginInfo />\n          </div>\n        </div>\n      </div>\n\n      <div id={`scene-controls-${explorationType}`} className={styles.sceneControls} data-testid=\"sceneControls\">\n        <Field\n          label={dataSourceVariable.state.label}\n          className={cx(styles.sceneVariable, dataSourceVariable.state.name)}\n          data-testid={dataSourceVariable.state.name}\n        >\n          <dataSourceVariable.Component model={dataSourceVariable} />\n        </Field>\n\n        {sceneVariables.map((variable) => (\n          <Field\n            key={variable.state.name}\n            label={\n              variable.state.label === 'Filters' ? (\n                <div className={styles.sceneVariableLabel}>\n                  <Icon name=\"filter\" className={styles.icon} />\n                  {variable.state.label}\n                </div>\n              ) : (\n                variable.state.label\n              )\n            }\n            className={cx(styles.sceneVariable, variable.state.name)}\n            data-testid={variable.state.name}\n          >\n            <variable.Component model={variable} />\n          </Field>\n        ))}\n\n        {gridControls.map((control) => (\n          <Field key={control.state.key} id={control.state.key} className={styles.gridControl} label=\"\">\n            <control.Component model={control} />\n          </Field>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2, chromeHeaderHeight: number) => ({\n  header: css`\n    background-color: ${theme.colors.background.canvas};\n    position: sticky;\n    top: ${chromeHeaderHeight}px;\n    z-index: 1;\n    padding-bottom: ${theme.spacing(2)};\n  `,\n  appControls: css`\n    display: flex;\n    padding: ${theme.spacing(1)} 0;\n    justify-content: space-between;\n    gap: ${theme.spacing(2)};\n  `,\n  appControlsLeft: css`\n    display: flex;\n    gap: ${theme.spacing(1)};\n  `,\n  appControlsRight: css`\n    display: flex;\n    gap: ${theme.spacing(1)};\n  `,\n  appMiscButtons: css`\n    display: flex;\n    align-items: center;\n    gap: 4px;\n    border: 1px solid ${theme.colors.border.weak};\n    background-color: ${theme.colors.background.secondary};\n    height: 32px;\n    padding: 0 ${theme.spacing(1)};\n\n    & svg {\n      width: 18px;\n      height: 18px;\n    }\n  `,\n  sceneControls: css`\n    display: flex;\n    flex-wrap: wrap;\n    gap: ${theme.spacing(1)};\n    padding: 0;\n    margin-top: 20px;\n  `,\n  sceneVariable: css`\n    display: flex;\n    margin-bottom: 0;\n\n    & #dataSource {\n      width: ${theme.spacing(32)};\n    }\n\n    &.filters {\n      flex-grow: 1;\n    }\n\n    &.compare-presets {\n      margin-left: auto;\n      text-align: right;\n    }\n  `,\n  sceneVariableLabel: css`\n    font-size: 12px;\n    font-weight: 500;\n    line-height: 15px;\n    height: 15px;\n    margin-bottom: 4px;\n    color: ${theme.colors.text.primary};\n    max-width: 480px;\n  `,\n  icon: css`\n    display: inline-block;\n    margin-right: 4px;\n  `,\n  gridControl: css`\n    margin-bottom: 0;\n\n    &#quick-filter {\n      flex: 1;\n      min-width: 112px;\n    }\n  `,\n});\n","import { css } from '@emotion/css';\nimport {\n  EmbeddedSceneState,\n  getUrlSyncManager,\n  SceneComponentProps,\n  sceneGraph,\n  SceneObject,\n  SceneObjectBase,\n  SceneObjectUrlSyncConfig,\n  SceneObjectUrlValues,\n  SceneRefreshPicker,\n  SceneTimePicker,\n  SceneTimeRange,\n  sceneUtils,\n  SceneVariableSet,\n  SplitLayout,\n} from '@grafana/scenes';\nimport { useStyles2 } from '@grafana/ui';\nimport { displayError } from '@shared/domain/displayStatus';\nimport { prepareHistoryEntry } from '@shared/domain/prepareHistoryEntry';\nimport { reportInteraction } from '@shared/domain/reportInteraction';\nimport { DomainHookReturnValue } from '@shared/types/DomainHookReturnValue';\nimport React, { useState } from 'react';\n\nimport { SceneExploreAllServices } from '../../components/SceneExploreAllServices/SceneExploreAllServices';\nimport { SceneExploreFavorites } from '../../components/SceneExploreFavorites/SceneExploreFavorites';\nimport { SceneExploreServiceLabels } from '../../components/SceneExploreServiceLabels/SceneExploreServiceLabels';\nimport { SceneExploreServiceProfileTypes } from '../../components/SceneExploreServiceProfileTypes/SceneExploreServiceProfileTypes';\nimport { getDefaultTimeRange } from '../../domain/buildTimeRange';\nimport { EventViewDiffFlameGraph } from '../../domain/events/EventViewDiffFlameGraph';\nimport { EventViewServiceFlameGraph } from '../../domain/events/EventViewServiceFlameGraph';\nimport { EventViewServiceLabels } from '../../domain/events/EventViewServiceLabels';\nimport { EventViewServiceProfiles } from '../../domain/events/EventViewServiceProfiles';\nimport { FiltersVariable } from '../../domain/variables/FiltersVariable/FiltersVariable';\nimport { GroupByVariable } from '../../domain/variables/GroupByVariable/GroupByVariable';\nimport { ProfileMetricVariable } from '../../domain/variables/ProfileMetricVariable';\nimport { ProfilesDataSourceVariable } from '../../domain/variables/ProfilesDataSourceVariable';\nimport { ServiceNameVariable } from '../../domain/variables/ServiceNameVariable/ServiceNameVariable';\nimport { SpanSelectorVariable } from '../../domain/variables/SpanSelectorVariable';\nimport { FavoritesDataSource } from '../../infrastructure/favorites/FavoritesDataSource';\nimport { LabelsDataSource } from '../../infrastructure/labels/LabelsDataSource';\nimport { SeriesDataSource } from '../../infrastructure/series/SeriesDataSource';\nimport { SceneLayoutSwitcher } from '../SceneByVariableRepeaterGrid/components/SceneLayoutSwitcher';\nimport { SceneNoDataSwitcher } from '../SceneByVariableRepeaterGrid/components/SceneNoDataSwitcher';\nimport { ScenePanelTypeSwitcher } from '../SceneByVariableRepeaterGrid/components/ScenePanelTypeSwitcher';\nimport { SceneQuickFilter } from '../SceneByVariableRepeaterGrid/components/SceneQuickFilter';\nimport { GridItemData } from '../SceneByVariableRepeaterGrid/types/GridItemData';\nimport { SceneCreateRecordingRuleModal } from '../SceneCreateMetricModal/SceneCreateRecordingRuleModal';\nimport { SceneExploreDiffFlameGraph } from '../SceneExploreDiffFlameGraph/SceneExploreDiffFlameGraph';\nimport { GitHubContextProvider } from '../SceneExploreServiceFlameGraph/components/SceneFunctionDetailsPanel/components/GitHubContextProvider/GitHubContextProvider';\nimport { FunctionVersionProvider } from '../SceneExploreServiceFlameGraph/components/SceneFunctionDetailsPanel/domain/FunctionVersionContext';\nimport { RemoveSpanSelector } from '../SceneExploreServiceFlameGraph/domain/events/RemoveSpanSelector';\nimport { SceneExploreServiceFlameGraph } from '../SceneExploreServiceFlameGraph/SceneExploreServiceFlameGraph';\nimport { Header } from './components/Header';\n\nexport interface SceneProfilesExplorerState extends Partial<EmbeddedSceneState> {\n  $timeRange: SceneTimeRange;\n  $variables: SceneVariableSet;\n  gridControls: Array<SceneObject & { key?: string }>;\n  explorationType?: ExplorationType;\n  body?: SplitLayout;\n  createRecordingRuleModal: SceneCreateRecordingRuleModal;\n}\n\nexport enum ExplorationType {\n  ALL_SERVICES = 'all',\n  PROFILE_TYPES = 'profiles',\n  LABELS = 'labels',\n  FLAME_GRAPH = 'flame-graph',\n  DIFF_FLAME_GRAPH = 'diff-flame-graph',\n  FAVORITES = 'favorites',\n}\n\nexport class SceneProfilesExplorer extends SceneObjectBase<SceneProfilesExplorerState> {\n  static EXPLORATION_TYPE_OPTIONS = [\n    {\n      value: ExplorationType.ALL_SERVICES,\n      label: 'All services',\n      description: 'Overview of all services, for any given profile type',\n    },\n    {\n      value: ExplorationType.PROFILE_TYPES,\n      label: 'Profile types',\n      description: 'Overview of all the profile types for a single service',\n    },\n    {\n      value: ExplorationType.LABELS,\n      label: 'Labels',\n      description: 'Single service label exploration and filtering',\n    },\n    {\n      value: ExplorationType.FLAME_GRAPH,\n      label: 'Flame graph',\n      description: 'Single service flame graph',\n    },\n    {\n      value: ExplorationType.DIFF_FLAME_GRAPH,\n      label: 'Diff flame graph',\n      description: 'Compare the differences between two flame graphs',\n    },\n    {\n      value: ExplorationType.FAVORITES,\n      label: 'Favorites',\n      description: 'Overview of favorited visualizations',\n      icon: 'favorite',\n    },\n  ];\n\n  static DEFAULT_EXPLORATION_TYPE = SceneProfilesExplorer.EXPLORATION_TYPE_OPTIONS[0].value;\n\n  protected _urlSync = new SceneObjectUrlSyncConfig(this, { keys: ['explorationType'] });\n\n  constructor() {\n    super({\n      key: 'profiles-explorer',\n      explorationType: undefined,\n      body: undefined,\n      $timeRange: new SceneTimeRange(getDefaultTimeRange()),\n      $variables: new SceneVariableSet({\n        // in order to sync with the URL and...\n        // ...because of a limitation of the Scenes library, we have to create them now, once, and not every time we set a new exploration type\n        // also, we prevent re-creating all variables when switching exploration type, which would lead to unecessary work and layout shifts in the UI\n        // (because values would be empty before loading, then populated after fetched)\n        // see setExplorationType() for dynamic updates\n        variables: [\n          new ProfilesDataSourceVariable(),\n          new ServiceNameVariable(),\n          new ProfileMetricVariable(),\n          new FiltersVariable({ key: 'filters' }),\n          new FiltersVariable({ key: 'filtersBaseline' }),\n          new FiltersVariable({ key: 'filtersComparison' }),\n          new GroupByVariable(),\n          new SpanSelectorVariable(),\n        ],\n      }),\n      createRecordingRuleModal: new SceneCreateRecordingRuleModal(),\n      controls: [new SceneTimePicker({ isOnCanvas: true }), new SceneRefreshPicker({ isOnCanvas: true })],\n      // these scenes also sync with the URL so...\n      // ...because of a limitation of the Scenes library, we have to create them now, once, and not every time we set a new exploration type\n      gridControls: [\n        new SceneQuickFilter({ placeholder: '' }),\n        new ScenePanelTypeSwitcher(),\n        new SceneLayoutSwitcher(),\n        new SceneNoDataSwitcher(),\n      ],\n    });\n\n    getUrlSyncManager().initSync(this);\n\n    this.registerRuntimeDataSources();\n\n    this.addActivationHandler(this.onActivate.bind(this));\n  }\n\n  onActivate() {\n    const varSub = this.subscribeToVariableChanges();\n    const eventsSub = this.subscribeToEvents();\n\n    if (!this.state.explorationType) {\n      this.setExplorationType({\n        type: SceneProfilesExplorer.DEFAULT_EXPLORATION_TYPE,\n      });\n    }\n\n    return () => {\n      eventsSub.unsubscribe();\n      varSub.unsubscribe();\n    };\n  }\n\n  getUrlState() {\n    return {\n      explorationType: this.state.explorationType,\n    };\n  }\n\n  updateFromUrl(values: SceneObjectUrlValues) {\n    if (typeof values.explorationType === 'string' && values.explorationType !== this.state.explorationType) {\n      const type = values.explorationType as ExplorationType;\n      this.setExplorationType({\n        type: Object.values(ExplorationType).includes(type) ? type : SceneProfilesExplorer.DEFAULT_EXPLORATION_TYPE,\n      });\n    }\n  }\n\n  registerRuntimeDataSources() {\n    // wrapped in a try-catch to prevent error when registered twice, which can easily happen if we go back & forth to the Profiles Explorer page\n    try {\n      sceneUtils.registerRuntimeDataSource({ dataSource: new SeriesDataSource() });\n      sceneUtils.registerRuntimeDataSource({ dataSource: new FavoritesDataSource() });\n      sceneUtils.registerRuntimeDataSource({ dataSource: new LabelsDataSource() });\n    } catch (error) {\n      const { message } = error as Error;\n\n      if (!/A runtime data source with uid (.+) has already been registered/.test(message)) {\n        displayError(error as Error, [\n          'Fail to register all the runtime data sources!',\n          'The application cannot work as expected, please try reloading the page or if the problem persists, contact your organization admin.',\n        ]);\n      }\n    }\n  }\n\n  subscribeToVariableChanges() {\n    const dataSourceSub = sceneGraph\n      .findByKeyAndType(this, 'dataSource', ProfilesDataSourceVariable)\n      .subscribeToState((newState, prevState) => {\n        if (newState.value && newState.value !== prevState.value) {\n          FiltersVariable.resetAll(this);\n          this.resetSpanSelector();\n        }\n      });\n\n    const serviceNameSub = sceneGraph\n      .findByKeyAndType(this, 'serviceName', ServiceNameVariable)\n      .subscribeToState((newState, prevState) => {\n        if (newState.value && newState.value !== prevState.value) {\n          FiltersVariable.resetAll(this);\n          // This is to prevent removing the span selector if the previous service name was not correct\n          // This way a user can still select the service name for selected span in case there's a mismatch\n          // in the service name that was provided from the trace\n          if (newState.options.some((option) => option.value === prevState.value)) {\n            this.resetSpanSelector();\n          }\n        }\n      });\n\n    const profileTypeSub = sceneGraph\n      .findByKeyAndType(this, 'profileMetricId', ProfileMetricVariable)\n      .subscribeToState((newState, prevState) => {\n        if (newState.value && newState.value !== prevState.value) {\n          this.resetSpanSelector();\n        }\n      });\n\n    const filtersSub = sceneGraph\n      .findByKeyAndType(this, 'filters', FiltersVariable)\n      .subscribeToState((newState, prevState) => {\n        if (JSON.stringify(newState.filters) !== JSON.stringify(prevState.filters)) {\n          this.resetSpanSelector();\n        }\n      });\n\n    return {\n      unsubscribe() {\n        serviceNameSub.unsubscribe();\n        dataSourceSub.unsubscribe();\n        filtersSub.unsubscribe();\n        profileTypeSub.unsubscribe();\n      },\n    };\n  }\n\n  subscribeToEvents() {\n    const profilesSub = this.subscribeToEvent(EventViewServiceProfiles, (event) => {\n      this.setExplorationType({\n        type: ExplorationType.PROFILE_TYPES,\n        comesFromUserAction: true,\n        item: event.payload.item,\n      });\n    });\n\n    const labelsSub = this.subscribeToEvent(EventViewServiceLabels, (event) => {\n      this.setExplorationType({\n        type: ExplorationType.LABELS,\n        comesFromUserAction: true,\n        item: event.payload.item,\n      });\n    });\n\n    const flameGraphSub = this.subscribeToEvent(EventViewServiceFlameGraph, (event) => {\n      this.setExplorationType({\n        type: ExplorationType.FLAME_GRAPH,\n        comesFromUserAction: true,\n        item: event.payload.item,\n      });\n    });\n\n    const diffFlameGraphSub = this.subscribeToEvent(EventViewDiffFlameGraph, (event) => {\n      const { useAncestorTimeRange, clearDiffRange, baselineFilters, comparisonFilters } = event.payload;\n\n      this.setExplorationType({\n        type: ExplorationType.DIFF_FLAME_GRAPH,\n        comesFromUserAction: true,\n        bodySceneOptions: {\n          useAncestorTimeRange,\n          clearDiffRange,\n          baselineFilters,\n          comparisonFilters,\n        },\n      });\n    });\n\n    const removeSpanSelectorSub = this.subscribeToEvent(RemoveSpanSelector, () => {\n      this.resetSpanSelector();\n    });\n\n    return {\n      unsubscribe() {\n        diffFlameGraphSub.unsubscribe();\n        flameGraphSub.unsubscribe();\n        labelsSub.unsubscribe();\n        profilesSub.unsubscribe();\n        removeSpanSelectorSub.unsubscribe();\n      },\n    };\n  }\n\n  setExplorationType({\n    type,\n    comesFromUserAction,\n    item,\n    bodySceneOptions,\n  }: {\n    type: ExplorationType;\n    comesFromUserAction?: boolean;\n    item?: GridItemData;\n    bodySceneOptions?: Record<string, any>;\n  }) {\n    if (comesFromUserAction) {\n      prepareHistoryEntry();\n      this.resetVariables(type);\n    }\n\n    this.setState({\n      explorationType: type,\n      body: this.buildBodyScene(type, item, bodySceneOptions),\n    });\n  }\n\n  resetSpanSelector() {\n    sceneGraph.findByKeyAndType(this, 'spanSelector', SpanSelectorVariable).reset();\n  }\n\n  resetVariables(nextExplorationType: string) {\n    sceneGraph.findByKeyAndType(this, 'quick-filter', SceneQuickFilter).reset();\n    sceneGraph.findByKeyAndType(this, 'groupBy', GroupByVariable).changeValueTo(GroupByVariable.DEFAULT_VALUE);\n    sceneGraph.findByKeyAndType(this, 'panel-type-switcher', ScenePanelTypeSwitcher).reset();\n    this.resetSpanSelector();\n\n    // preserve existing filters only when switching to \"Labels\", \"Flame graph\" or \"Diff flame graph\"\n    // if not, they will be added to the queries without any notice on the UI\n    if (\n      ![ExplorationType.LABELS, ExplorationType.FLAME_GRAPH, ExplorationType.DIFF_FLAME_GRAPH].includes(\n        nextExplorationType as ExplorationType\n      )\n    ) {\n      sceneGraph.findByKeyAndType(this, 'filters', FiltersVariable).reset();\n    }\n  }\n\n  buildBodyScene(explorationType: ExplorationType, item?: GridItemData, bodySceneOptions?: Record<string, any>) {\n    let primary;\n\n    switch (explorationType) {\n      case ExplorationType.PROFILE_TYPES:\n        primary = new SceneExploreServiceProfileTypes({ item });\n        break;\n\n      case ExplorationType.LABELS:\n        primary = new SceneExploreServiceLabels({ item });\n        break;\n\n      case ExplorationType.FLAME_GRAPH:\n        primary = new SceneExploreServiceFlameGraph({ item });\n        break;\n\n      case ExplorationType.DIFF_FLAME_GRAPH:\n        primary = new SceneExploreDiffFlameGraph(bodySceneOptions || {});\n        break;\n\n      case ExplorationType.FAVORITES:\n        primary = new SceneExploreFavorites();\n        break;\n\n      case ExplorationType.ALL_SERVICES:\n      default:\n        primary = new SceneExploreAllServices();\n    }\n\n    return new SplitLayout({\n      direction: 'column',\n      primary,\n    });\n  }\n\n  onChangeExplorationType = (explorationType: string) => {\n    reportInteraction('g_pyroscope_app_exploration_type_clicked', { explorationType });\n\n    this.setExplorationType({\n      type: explorationType as ExplorationType,\n      comesFromUserAction: true,\n    });\n  };\n\n  useProfilesExplorer = (): DomainHookReturnValue => {\n    const { explorationType, controls, body, $variables } = this.useState();\n\n    const dataSourceVariable = $variables.state.variables[0] as ProfilesDataSourceVariable;\n    const dataSourceUid = dataSourceVariable.useState().value as string;\n\n    return {\n      data: {\n        explorationType,\n        controls,\n        body,\n        $variables,\n        dataSourceUid,\n      },\n      actions: {\n        onChangeExplorationType: this.onChangeExplorationType,\n      },\n    };\n  };\n\n  static Component({ model }: SceneComponentProps<SceneProfilesExplorer>) {\n    const styles = useStyles2(getStyles); // eslint-disable-line react-hooks/rules-of-hooks\n\n    const { data, actions } = model.useProfilesExplorer();\n    const { explorationType, controls, body, $variables, dataSourceUid } = data;\n\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const [recordingRulesModalState, setRecordingRulesModalState] = useState<{\n      isOpen: boolean;\n      functionName?: string;\n    }>({ isOpen: false });\n    const { createRecordingRuleModal } = model.useState();\n\n    return (\n      <FunctionVersionProvider>\n        <GitHubContextProvider dataSourceUid={dataSourceUid}>\n          <Header\n            explorationType={explorationType}\n            controls={controls}\n            body={body}\n            $variables={$variables}\n            onChangeExplorationType={actions.onChangeExplorationType}\n            onCreateRecordingRule={() => {\n              setRecordingRulesModalState({ isOpen: true });\n            }}\n          />\n\n          <div className={styles.body} data-testid=\"sceneBody\">\n            {body && <body.Component model={body} />}\n          </div>\n\n          <SceneCreateRecordingRuleModal.Component\n            model={createRecordingRuleModal}\n            isModalOpen={recordingRulesModalState.isOpen}\n            functionName={recordingRulesModalState.functionName}\n            onDismiss={() => setRecordingRulesModalState({ isOpen: false })}\n            onCreated={() => {\n              setRecordingRulesModalState({ isOpen: false });\n            }}\n          />\n        </GitHubContextProvider>\n      </FunctionVersionProvider>\n    );\n  }\n}\n\nconst getStyles = () => ({\n  body: css`\n    position: relative;\n    z-index: 0;\n    background: transparent;\n  `,\n});\n","import { useReportPageInitialized } from '@shared/infrastructure/tracking/useReportPageInitialized';\nimport React, { useMemo } from 'react';\n\nimport { SceneProfilesExplorer } from './components/SceneProfilesExplorer/SceneProfilesExplorer';\n\nexport default function ProfilesExplorerView() {\n  const sceneProfilesExplorer = useMemo(() => new SceneProfilesExplorer(), []);\n  useReportPageInitialized('explore');\n\n  return <sceneProfilesExplorer.Component model={sceneProfilesExplorer} />;\n}\n","import { ConfirmModal, IconButton } from '@grafana/ui';\nimport { RecordingRuleViewModel } from '@shared/types/RecordingRuleViewModel';\nimport React from 'react';\n\ntype Props = {\n  rule: RecordingRuleViewModel;\n  confirm: () => void;\n};\n\nexport function DeleteRecordingRuleButton({ rule, confirm }: Props) {\n  const [isOpen, setIsOpen] = React.useState(false);\n  return (\n    <>\n      <IconButton\n        name=\"trash-alt\"\n        onClick={() => setIsOpen(true)}\n        variant=\"destructive\"\n        aria-label=\"Delete recording rule\"\n      />\n      <ConfirmModal\n        isOpen={isOpen}\n        title={'Delete recording rule'}\n        body={`Are you sure you want to delete ${rule.metricName} recording rule?`}\n        confirmText=\"Yes\"\n        onConfirm={() => {\n          confirm();\n          setIsOpen(false);\n        }}\n        onDismiss={() => setIsOpen(false)}\n      />\n    </>\n  );\n}\n","import { displayError, displaySuccess } from '@shared/domain/displayStatus';\nimport { useFetchRecordingRules } from '@shared/infrastructure/recording-rules/useFetchRecordingRules';\nimport { RecordingRuleViewModel } from '@shared/types/RecordingRuleViewModel';\n\nexport function useRecordingRulesView() {\n  const { recordingRules, error: fetchError, remove, isFetching } = useFetchRecordingRules();\n\n  return {\n    data: {\n      recordingRules,\n      fetchError,\n      isFetching,\n    },\n    actions: {\n      async removeRecordingRule(rule: RecordingRuleViewModel) {\n        try {\n          await remove(rule);\n          displaySuccess([`Recording rule ${rule.metricName} deleted!`]);\n        } catch (e) {\n          displayError(e as Error, [`Failed to delete recording rule ${rule.metricName}.`]);\n        }\n      },\n    },\n  };\n}\n","import { css } from '@emotion/css';\nimport { Column, EmptyState, Icon, InteractiveTable, TagList, Text, Tooltip, useStyles2 } from '@grafana/ui';\nimport { BackButton } from '@shared/components/Common/BackButton';\nimport { HttpClientError } from '@shared/infrastructure/http/HttpClientError';\nimport { getProfileMetric, ProfileMetricId } from '@shared/infrastructure/profile-metrics/getProfileMetric';\nimport { RecordingRuleViewModel } from '@shared/types/RecordingRuleViewModel';\nimport { PageTitle } from '@shared/ui/PageTitle';\nimport React from 'react';\n\nimport { EmptyLoadingPage } from '../../app/components/Onboarding/ui/EmptyLoadingPage';\nimport { DeleteRecordingRuleButton } from './DeleteRecordingRuleButton';\nimport { useRecordingRulesView } from './domain/useRecordingRulesView';\n\nexport default function RecordingRulesView() {\n  const styles = useStyles2(getStyles);\n  const { data, actions } = useRecordingRulesView();\n  const { recordingRules } = data;\n\n  if (data.isFetching) {\n    return <EmptyLoadingPage />;\n  }\n\n  const columns: Array<Column<RecordingRuleViewModel>> = [\n    {\n      id: 'metricName',\n      header: 'Name',\n      sortType: 'alphanumeric',\n    },\n    {\n      id: 'serviceName',\n      header: 'Service Name',\n      sortType: 'alphanumeric',\n      cell: (props) => {\n        const rule: RecordingRuleViewModel = props.row.original;\n        return (\n          rule.serviceName || (\n            <Text element=\"span\" color=\"secondary\">\n              All services\n            </Text>\n          )\n        );\n      },\n    },\n    {\n      id: 'profileType',\n      header: 'Profile Type',\n      sortType: 'alphanumeric',\n    },\n    {\n      id: 'functionName',\n      header: 'Function Name',\n      sortType: 'alphanumeric',\n      cell: (props) => {\n        const rule: RecordingRuleViewModel = props.row.original;\n        return (\n          rule.functionName || (\n            <Text element=\"span\" color=\"secondary\">\n              Total (all functions)\n            </Text>\n          )\n        );\n      },\n    },\n    {\n      id: 'groupBy',\n      header: 'Labels',\n      cell: (props) => {\n        // Exclude hidden labels.\n        const rule: RecordingRuleViewModel = props.row.original;\n        const labels = rule.groupBy?.filter((label: string) => !label.match(/^__\\S+__$/));\n\n        if (!labels || labels.length === 0) {\n          return (\n            <Text element=\"span\" color=\"secondary\">\n              None\n            </Text>\n          );\n        }\n\n        return <TagList className={styles.tagList} displayMax={4} tags={labels} />;\n      },\n    },\n    {\n      id: 'actions',\n      header: 'Actions',\n      disableGrow: true,\n      cell: (props) => {\n        const rule: RecordingRuleViewModel = props.row.original;\n        if (rule.readonly) {\n          return (\n            <Tooltip content=\"This rule is provisioned with tenant settings and cannot be deleted.\">\n              <Icon name=\"info-circle\" />\n            </Tooltip>\n          );\n        } else {\n          return <DeleteRecordingRuleButton rule={rule} confirm={() => actions.removeRecordingRule(rule)} />;\n        }\n      },\n    },\n  ];\n\n  const formattedRules = (recordingRules || []).map((rule) => {\n    const profileType = getProfileMetric(rule.profileType as ProfileMetricId);\n    return {\n      ...rule,\n      profileType: `${profileType.group}/${profileType.type}`,\n    };\n  });\n\n  const isEmpty = !formattedRules || formattedRules.length === 0;\n\n  let component = null;\n\n  if (data.fetchError) {\n    component = <RecordingRulesViewError error={data.fetchError} />;\n  } else if (isEmpty) {\n    component = (\n      <EmptyState message={'No recording rules'} variant=\"not-found\" button={<BackButton />}>\n        Open a flame graph, click on the &quot;total&quot; block at the top and select &quot;Create recording rule&quot;\n        from the context menu to define a new rule.\n      </EmptyState>\n    );\n  } else {\n    component = (\n      <div>\n        <InteractiveTable\n          className={css({ marginBottom: '32px' })}\n          columns={columns}\n          pageSize={10}\n          data={formattedRules || []}\n          getRowId={(rule) => rule.id}\n        ></InteractiveTable>\n        <BackButton />\n      </div>\n    );\n  }\n\n  return (\n    <>\n      <PageTitle title=\"Recording rules\" />\n      {component}\n    </>\n  );\n}\n\nconst getStyles = () => ({\n  tagList: css`\n    flex-direction: row;\n    justify-content: start;\n  `,\n});\n\nfunction RecordingRulesViewError({ error }: { error: HttpClientError }) {\n  let errorMessage = 'Error while retrieving recording rules';\n  if (error.response?.status === 404) {\n    errorMessage = 'This feature requires Pyroscope with recording_rules flag enabled.';\n  } else if (error.message) {\n    errorMessage = error.message;\n  }\n  return (\n    <EmptyState message=\"Error while retrieving recording rules\" variant=\"not-found\" button={<BackButton />}>\n      {errorMessage}\n    </EmptyState>\n  );\n}\n","import { displayError, displaySuccess } from '@shared/domain/displayStatus';\nimport { useMaxNodesFromUrl } from '@shared/domain/url-params/useMaxNodesFromUrl';\nimport { DEFAULT_SETTINGS, PluginSettings } from '@shared/infrastructure/settings/PluginSettings';\nimport { useFetchPluginSettings } from '@shared/infrastructure/settings/useFetchPluginSettings';\nimport { useEffect, useState } from 'react';\n\nexport function useUISettingsView() {\n  const { settings, error: fetchError, mutate } = useFetchPluginSettings();\n  const setMaxNodes = useMaxNodesFromUrl()[1];\n  const [currentSettings, setCurrentSettings] = useState<PluginSettings>(settings ?? DEFAULT_SETTINGS);\n\n  useEffect(() => {\n    if (settings) {\n      setCurrentSettings(settings);\n    }\n  }, [settings]);\n\n  return {\n    data: {\n      ...currentSettings,\n      fetchError,\n    },\n    actions: {\n      toggleCollapsedFlamegraphs() {\n        setCurrentSettings((s) => ({\n          ...s,\n          collapsedFlamegraphs: !s.collapsedFlamegraphs,\n        }));\n      },\n      updateMaxNodes(event: React.ChangeEvent<HTMLInputElement>) {\n        setCurrentSettings((s) => ({\n          ...s,\n          maxNodes: Number(event.target.value),\n        }));\n      },\n      toggleEnableFlameGraphDotComExport() {\n        setCurrentSettings((s) => ({\n          ...s,\n          enableFlameGraphDotComExport: !s.enableFlameGraphDotComExport,\n        }));\n      },\n      toggleEnableFunctionDetails() {\n        setCurrentSettings((s) => ({\n          ...s,\n          enableFunctionDetails: !s.enableFunctionDetails,\n        }));\n      },\n      toggleEnableMetricsFromProfiles() {\n        setCurrentSettings((s) => ({\n          ...s,\n          enableMetricsFromProfiles: !s.enableMetricsFromProfiles,\n        }));\n      },\n      async saveSettings() {\n        setMaxNodes(currentSettings.maxNodes);\n\n        try {\n          await mutate(currentSettings);\n\n          displaySuccess(['Plugin settings successfully saved!']);\n        } catch (error) {\n          displayError(error as Error, [\n            'Error while saving the plugin settings!',\n            'Please try again later, sorry for the inconvenience.',\n          ]);\n        }\n      },\n    },\n  };\n}\n","import { css } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { FieldSet, InlineField, InlineFieldRow, InlineSwitch, Input, useStyles2 } from '@grafana/ui';\nimport { displayError } from '@shared/domain/displayStatus';\nimport { featureToggles } from '@shared/infrastructure/settings/featureToggles';\nimport React from 'react';\n\nimport { useUISettingsView } from './domain/useUISettingsView';\n\nexport function UISettingsView({ children }: { children: React.ReactNode }) {\n  const styles = useStyles2(getStyles);\n  const { data, actions } = useUISettingsView();\n\n  if (data.fetchError) {\n    displayError(data.fetchError, [\n      'Error while retrieving the plugin settings!',\n      'Please try to reload the page, sorry for the inconvenience.',\n    ]);\n  }\n\n  function onSubmit(event: React.FormEvent) {\n    event.preventDefault();\n    actions.saveSettings();\n  }\n\n  return (\n    <form className={styles.settingsForm} onSubmit={onSubmit}>\n      <FieldSet label=\"Flame graph\" data-testid=\"flamegraph-settings\">\n        <InlineFieldRow>\n          <InlineField label=\"Collapsed flame graphs\" labelWidth={24}>\n            <InlineSwitch\n              label=\"Toggle collapsed flame graphs\"\n              name=\"collapsed-flamegraphs\"\n              value={data.collapsedFlamegraphs}\n              onChange={actions.toggleCollapsedFlamegraphs}\n            />\n          </InlineField>\n        </InlineFieldRow>\n        <InlineFieldRow>\n          <InlineField label=\"Maximum number of nodes\" tooltip=\"\" labelWidth={24}>\n            <Input name=\"max-nodes\" type=\"number\" min=\"1\" value={data.maxNodes} onChange={actions.updateMaxNodes} />\n          </InlineField>\n        </InlineFieldRow>\n      </FieldSet>\n      <FieldSet label=\"Function details\" data-testid=\"function-details-settings\">\n        <InlineFieldRow>\n          <InlineField\n            label=\"Enable function details\"\n            labelWidth={24}\n            tooltip={\n              <div className={styles.tooltip}>\n                <p>\n                  The function details feature enables mapping of resource usage to lines of source code. If the GitHub\n                  integration is configured, then the source code will be downloaded from GitHub.\n                </p>\n                <p>\n                  <a\n                    href=\"https://grafana.com/docs/grafana-cloud/monitor-applications/profiles/pyroscope-github-integration/\"\n                    target=\"_blank\"\n                    rel=\"noreferrer noopener\"\n                  >\n                    Learn more\n                  </a>\n                </p>\n              </div>\n            }\n            interactive\n          >\n            <InlineSwitch\n              label=\"Toggle function details\"\n              name=\"function-details-feature\"\n              value={data.enableFunctionDetails}\n              onChange={actions.toggleEnableFunctionDetails}\n            />\n          </InlineField>\n        </InlineFieldRow>\n      </FieldSet>\n\n      {featureToggles.metricsFromProfiles && (\n        <FieldSet label=\"Experimental features\" data-testid=\"experimental-features\">\n          <InlineFieldRow>\n            <InlineField\n              label=\"Metrics from profiles\"\n              tooltip=\"Allows creating Prometheus recording rules from profiles\"\n              labelWidth={24}\n            >\n              <InlineSwitch\n                label=\"Enable metrics from profiles\"\n                name=\"metrics-from-profiles\"\n                value={data.enableMetricsFromProfiles}\n                onChange={actions.toggleEnableMetricsFromProfiles}\n              />\n            </InlineField>\n          </InlineFieldRow>\n        </FieldSet>\n      )}\n\n      {children}\n    </form>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  settingsForm: css`\n    & > fieldset {\n      border: 0 none;\n      border-bottom: 1px solid ${theme.colors.border.weak};\n      padding-left: 0;\n    }\n\n    & > fieldset > legend {\n      font-size: ${theme.typography.h4.fontSize};\n    }\n  `,\n  buttons: css`\n    display: flex;\n    gap: ${theme.spacing(1)};\n    margin-top: ${theme.spacing(3)};\n  `,\n  tooltip: css`\n    p {\n      margin: ${theme.spacing(1)};\n    }\n\n    a {\n      color: ${theme.colors.text.link};\n    }\n\n    em {\n      font-style: normal;\n      font-weight: ${theme.typography.fontWeightBold};\n    }\n  `,\n});\n","import { usePluginComponents } from '@grafana/runtime';\n\nconst SETTINGS_EXTENSION_POINT_ID = 'grafana-pyroscope-app/settings/v1';\n\nexport type SettingsExtensionProps = {\n  datasourceUid: string; // the datasource uid currently in use, extensions might not use it\n  backButton: React.ReactNode; // the back button component\n};\n\ntype UseSettingsExtensionsResult<Props = {}> = {\n  components: Array<React.ComponentType<Props>>;\n  isLoading: boolean;\n};\n\nexport function useSettingsExtensions(): UseSettingsExtensionsResult<SettingsExtensionProps> {\n  return usePluginComponents<SettingsExtensionProps>({\n    extensionPointId: SETTINGS_EXTENSION_POINT_ID,\n  });\n}\n","import { useMaxNodesFromUrl } from '@shared/domain/url-params/useMaxNodesFromUrl';\nimport { useRef, useState } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\n\nimport { PLUGIN_BASE_URL, ROUTES } from '../../../constants';\nimport { useSettingsExtensions } from './useSettingsExtensions';\n\nexport function useSettingsView() {\n  const [maxNodesFromUrl] = useMaxNodesFromUrl();\n  const [activeTab, setActiveTab] = useState(0);\n\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  const referrerRef = useRef(location.state?.referrer);\n\n  const { components, isLoading } = useSettingsExtensions();\n\n  return {\n    data: {\n      activeTab,\n      components,\n      isLoading,\n    },\n    actions: {\n      setActiveTab(tab: number) {\n        setActiveTab(tab);\n      },\n      goBack() {\n        if (!referrerRef.current) {\n          navigate(`${PLUGIN_BASE_URL}${ROUTES.EXPLORE}`);\n          return;\n        }\n\n        const backUrl = new URL(referrerRef.current);\n\n        // when calling saveSettings() above, the new maxNodes value is set and the URL search parameter is updated (see useMaxNodesFromUrl.ts)\n        if (maxNodesFromUrl) {\n          backUrl.searchParams.set('maxNodes', String(maxNodesFromUrl));\n        }\n\n        navigate(`${backUrl.pathname}${backUrl.search}`);\n      },\n    },\n  };\n}\n","import { css } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, Space, Tab, TabsBar, useStyles2 } from '@grafana/ui';\nimport { BackButton } from '@shared/components/Common/BackButton';\nimport { ApiClient } from '@shared/infrastructure/http/ApiClient';\nimport { useReportPageInitialized } from '@shared/infrastructure/tracking/useReportPageInitialized';\nimport { PageTitle } from '@shared/ui/PageTitle';\nimport React from 'react';\n\nimport { UISettingsView } from './components/UISettingsView/UISettingsView';\nimport { useSettingsView } from './domain/useSettingsView';\n\ninterface ComponentWithMeta {\n  meta?: {\n    title: string;\n  };\n}\n\nexport default function SettingsView() {\n  const styles = useStyles2(getStyles);\n  const { data, actions } = useSettingsView();\n\n  useReportPageInitialized('settings');\n\n  if (data.isLoading) {\n    return <div>Loading...</div>;\n  }\n\n  // Define the build in tabs\n  const builtInTabs = [\n    {\n      // Standard UI settings tab\n      title: 'UI Settings',\n      content: (\n        <UISettingsView>\n          <div className={styles.buttons}>\n            <Button variant=\"primary\" type=\"submit\">\n              Save settings\n            </Button>\n            <BackButton onClick={actions.goBack} />\n          </div>\n        </UISettingsView>\n      ),\n    },\n  ];\n\n  const pyroscopeDataSource = ApiClient.selectDefaultDataSource();\n  const pluginProps = {\n    datasourceUid: pyroscopeDataSource.uid,\n    backButton: (\n      <div className={styles.buttons}>\n        <BackButton onClick={actions.goBack} />\n      </div>\n    ),\n  };\n  const pluginTabs = data.components.map((Component) => {\n    // get title from plugin meta (works in Grafana 11.6+)\n    const title = (Component as ComponentWithMeta).meta?.title || 'Unknown Extension';\n\n    return {\n      title: title,\n      content: <Component {...pluginProps} />,\n    };\n  });\n\n  const allTabs = [...builtInTabs, ...pluginTabs];\n\n  return (\n    <>\n      <PageTitle title=\"Profiles settings (tenant)\" />\n      {/* if there is only one tab, don't render tab bar */}\n      {allTabs.length > 1 && (\n        <>\n          <TabsBar>\n            {allTabs.map((tab, index) => (\n              <Tab\n                key={`settings-tab-${index}`}\n                label={tab.title}\n                active={data.activeTab === index}\n                onChangeTab={() => actions.setActiveTab(index)}\n              />\n            ))}\n          </TabsBar>\n          <Space v={2} />\n        </>\n      )}\n      {allTabs[data.activeTab].content}\n    </>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  buttons: css`\n    display: flex;\n    gap: ${theme.spacing(1)};\n    margin-top: ${theme.spacing(3)};\n  `,\n});\n","import React from 'react';\nimport { Navigate, Routes as ReactRouterRoutes, Route } from 'react-router-dom';\n\nimport { PLUGIN_BASE_URL, ROUTES } from '../constants';\nimport AdHocView from '../pages/AdHocView/AdHocView';\nimport GitHubCallback from '../pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/components/SceneFunctionDetailsPanel/ui/GitHubCallbackView';\nimport ProfilesExplorerView from '../pages/ProfilesExplorerView/ProfilesExplorerView';\nimport RecordingRulesView from '../pages/RecordingRulesView/RecordingRulesView';\nimport SettingsView from '../pages/SettingsView/SettingsView';\n\nexport function Routes() {\n  return (\n    <ReactRouterRoutes>\n      <Route path={ROUTES.EXPLORE} element={<ProfilesExplorerView />} />\n      <Route path={ROUTES.ADHOC} element={<AdHocView />} />\n      <Route path={ROUTES.SETTINGS} element={<SettingsView />} />\n      <Route path={ROUTES.RECORDING_RULES} element={<RecordingRulesView />} />\n      <Route path={ROUTES.GITHUB_CALLBACK} element={<GitHubCallback />} />\n      {/* Default Route */}\n      <Route path=\"/*\" element={<Navigate to={`${PLUGIN_BASE_URL}${ROUTES.EXPLORE}`} replace />} />\n    </ReactRouterRoutes>\n  );\n}\n","import { PageLayoutType } from '@grafana/data';\nimport { PluginPage } from '@grafana/runtime';\nimport { InlineBanner } from '@shared/ui/InlineBanner';\nimport { PageTitle } from '@shared/ui/PageTitle';\nimport React from 'react';\n\nexport function ErrorPage({ error }: { error: Error }) {\n  return (\n    <PluginPage layout={PageLayoutType.Canvas}>\n      <div className=\"pyroscope-app\">\n        <PageTitle title=\"Grafana Profiles Drilldown\" />\n\n        <InlineBanner\n          severity=\"error\"\n          title=\"Fatal error!\"\n          message=\"Please try reloading the page or, if the problem persists, contact your organization admin. Sorry for the inconvenience.\"\n          error={error}\n          errorContext={{ handheldBy: 'React error boundary' }}\n        />\n      </div>\n    </PluginPage>\n  );\n}\n","import { css } from '@emotion/css';\nimport { GrafanaTheme2, PageLayoutType } from '@grafana/data';\nimport { PluginPage } from '@grafana/runtime';\nimport { ErrorBoundary, useStyles2 } from '@grafana/ui';\nimport { queryClient } from '@shared/infrastructure/react-query/queryClient';\nimport { initFaro } from '@shared/infrastructure/tracking/faro/faro';\nimport { QueryClientProvider } from '@tanstack/react-query';\nimport React, { useState } from 'react';\n\nimport { Onboarding } from './components/Onboarding/Onboarding';\nimport { Routes } from './Routes';\nimport { ErrorPage } from './ui/ErrorPage';\n\ninitFaro();\n\nexport function App() {\n  const styles = useStyles2(getStyles);\n  const [error, setError] = useState<Error>();\n\n  if (error) {\n    return <ErrorPage error={error} />;\n  }\n\n  return (\n    <ErrorBoundary onError={setError}>\n      {() => (\n        <QueryClientProvider client={queryClient}>\n          <Onboarding>\n            <div className={styles.pageContainer}>\n              <PluginPage layout={PageLayoutType.Custom}>\n                <div className=\"pyroscope-app\">\n                  <Routes />\n                </div>\n              </PluginPage>\n            </div>\n          </Onboarding>\n        </QueryClientProvider>\n      )}\n    </ErrorBoundary>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  pageContainer: css`\n    display: flex;\n    flex-direction: column;\n    padding: ${theme.spacing(1)} ${theme.spacing(2)} ${theme.spacing(2)} ${theme.spacing(2)};\n    flex-basis: 100%;\n    flex-grow: 1;\n  `,\n});\n","import { Environment, getEnvironment } from '../getEnvironment';\nimport { FARO_ENVIRONMENTS } from './faro-environments';\n\nexport type FaroEnvironment = { environment: Environment; appName: string; faroUrl: string };\n\nexport function getFaroEnvironment() {\n  const environment = getEnvironment();\n\n  if (!environment || !FARO_ENVIRONMENTS.has(environment)) {\n    return;\n  }\n\n  return FARO_ENVIRONMENTS.get(environment) as FaroEnvironment;\n}\n"],"names":["queryClient","QueryClient","defaultOptions","queries","networkMode","retry","refetchOnWindowFocus","PYROSCOPE_APP_ID","plugin","PLUGIN_BASE_URL","ROUTES","GIT_COMMIT","MATCHERS","regExp","environment","getEnvironment","window","location","host","found","find","test","FARO_ENVIRONMENTS","Map","appName","faroUrl","faro","getFaro","methodName","args","this","console","logger","trace","api","pushLog","level","LogLevel","TRACE","debug","DEBUG","info","INFO","log","LOG","warn","WARN","error","context","pushError","constructor","userStorage","has","itemName","hasOwnProperty","get","JSON","parse","getItem","set","value","setItem","stringify","localStorage","KEYS","SETTINGS","GITHUB_INTEGRATION","PROFILES_EXPLORER","noOp","HttpClientError","Error","response","responseJson","message","status","statusText","super","reason","HttpClient","fetch","pathname","options","abortController","AbortController","signal","fullUrl","baseUrl","headers","defaultHeaders","fullOptions","ok","json","catch","isAbortError","abort","DOMException","name","Object","freeze","ApiClient","getPyroscopeDataSources","values","config","datasources","filter","ds","type","selectDefaultDataSource","pyroscopeDataSources","uidFromUrl","URL","href","searchParams","uidFromLocalStorage","dataSource","defaultDataSource","uid","jsonData","overridesDefault","isDefault","getBaseUrl","pyroscopeDataSource","appSubUrl","at","toString","String","bootData","user","orgId","statsApiClient","method","body","hasIngestedData","dataIngested","oldestProfileTime","Number","newestProfileTime","useOnboarding","isModalClosed","setIsModalClosed","useState","pyroscopeDataSourcesCount","length","isFetching","stats","enabled","data","refetch","useQuery","placeholderData","queryKey","queryFn","useFetchTenantStats","hasNoUserData","shouldShowLoadingPage","shouldShowOnboardingPage","shouldShowNoDataSourceBanner","actions","closeModal","getStyles","theme","row","css","display","flexDirection","justifyContent","alignItems","headerColumn","minWidth","column","tooltip","color","colors","text","secondary","fontSize","typography","bodySmall","contentWithIcon","styleMixins","mediaUp","v1","breakpoints","sm","formatSize","size","formattedValueToString","getValueFormat","formatCount","count","QueryAnalysisTooltip","props","styles","useStyles2","totalBytesInTimeRange","queryImpact","queryAnalysisTooltip","useMemo","div","data-testid","className","undefined","totalQueriedSeries","deduplicationNeeded","Divider","queryScopes","map","s","i","key","strong","componentType","componentCount","blockCount","seriesCount","profileCount","sampleCount","indexBytes","profileBytes","symbolBytes","Toggletip","content","fitContent","span","IconButton","aria-label","PyroscopeLogoComponent","img","cx","logo","src","PyroscopeLogo","React","pluginCommitSha","pluginCommitURL","buildInfo","grafanaBuildInfo","InfoMenuHeader","meta","version","updated","usePluginContext","menuHeader","h5","subTitle","InfoMenu","isDev","shortCommitSha","slice","Menu","header","Item","label","icon","onClick","open","disabled","edition","env","commit","PluginInfo","Dropdown","overlay","placement","title","spacing","PageTitleComponent","queryAnalysis","fullTitle","Helmet","titleContainer","Stack","h1","infoArea","h2","PageTitle","memo","EmptyLoadingPage","PluginPage","layout","PageLayoutType","Canvas","Icon","link","StyledLink","children","a","target","rel","NoDataSourcePage","Alert","severity","useOnboardingModal","instances","then","useFetchInstances","settingsUrl","setSettingsUrl","isCloud","orgSlug","hpInstanceId","newSettingsUrl","onboardingRow","background","onboardingParagraph","onboardingPanel","onboardingPanelHeader","onboardingPanelImage","hero","heroTitles","heroImage","onboardingPanelNumber","color2","color3","onboardingPanelNumberSpan","onboardingPanelDescription","subtitle","OnboardingModal","HeroImage","h3","ReduceCosts","p","DecreaseLatency","ResolveIncidents","br","onboardingPage","primary","closeButton","pageNav","OnboardingPage","onCloseModal","Custom","button","Onboarding","BackButton","callback","history","back","Button","variant","PROFILES_EXPLORER_PAGE_NAME","EXPLORE","getCurrentPage","split","pop","getMetaProperties","appRelease","apps","appVersion","page","view","URLSearchParams","search","reportInteraction","interactionName","grafanaReportInteraction","useReportPageInitialized","initialized","setInitialized","useEffect","container","AdHocColumns","left","right","displayError","msgs","reduce","acc","msg","handheldBy","getAppEvents","publish","AppEvents","alertError","payload","displayWarning","alertWarning","displaySuccess","alertSuccess","adHocProfileClient","profileId","profileType","id","profile_type","profileTypes","profile","flamebearerProfile","uploadSingle","file","_readProfileFile","uploadDiff","Promise","resolve","reject","fileReader","FileReader","addEventListener","fileContent","base64Content","stripBase64Prefix","result","readAsDataURL","DEFAULT_PROFILE_DATA","useUploadFile","isLoading","setIsLoading","profileData","setProfileData","removeFile","useCallback","processFile","selectProfileType","option","includes","prevData","accept","multiple","onError","AdHocFileDropZone","onFileDropped","onFileRemove","onDropAccepted","files","FileDropzone","flamegraphDotComApiClient","upload","btoa","fileTypeData","units","metadata","spyName","CompareTarget","DATETIME_FORMATTER","Intl","DateTimeFormat","year","month","day","hour12","hour","minute","second","format","date","parts","formatToParts","dateForExportFilename","timeRange","from","Date","Math","round","unix","to","getTimeRange","fromKey","toKey","BASELINE","raw","dateTimeParse","getExportFilename","timeRanges","COMPARISON","join","useExportMenu","enableFlameGraphDotComExport","uploadToFlamegraphDotCom","customExportName","dlLink","document","createElement","url","appendChild","click","removeChild","shouldDisplayFlamegraphDotCom","Boolean","downloadPng","filename","querySelector","toBlob","blob","saveAs","downloadJson","dataStr","encodeURIComponent","ExportMenu","ExportDataComponent","fill","ExportData","getNodes","names","diff","nodes","itemOffset","push","offset","val","self","selfRight","valRight","valTotal","offsetRight","offsetTotal","FlameGraphComponent","vertical","collapsedFlamegraphs","getExtraContextMenuButtons","showAnalyzeWithAssistant","isLight","useTheme2","dataFrame","levels","unit","nodeLevels","node","currentNodeStart","n","prevLevel","prevLevelOffset","prevLevelNode","parentNodeStart","parentNodeEnd","stack","labelValues","levelValues","selfValues","valueValues","selfRightValues","valueRightValues","shift","unshift","valueUnit","fields","FieldType","string","frame","preferredVisualisationType","createDataFrame","flamebearerToDataFrameDTO","flamebearer","GrafanaFlameGraph","disableCollapsing","extraHeaderElements","getTheme","createTheme","mode","keepFocusOnDataChange","FlameGraph","flamegraph","AdHocFlameGraph","selectorContainer","AdHocProfileTypeSelector","onChange","setOption","_onChange","o","InlineFieldRow","InlineField","Select","width","spinner","AdHocSpinner","Spinner","AdHocSingleComponent","fileType","AdHocSingle","AdHocComparison","tabContent","AdHocTabs","activeTabIndex","setActiveTabIndex","TabsBar","Tab","active","onChangeTab","TabContent","AdHocView","loadingIcon","main","loadingMessage","h4","fullScreenModal","GitHubCallbackView","isModalOpen","setIsModalOpen","Modal","isOpen","onDismiss","close","closeOnEscape","closeOnBackdropClick","prepareHistoryEntry","pushState","EventTimeseriesDataReceived","BusEventWithPayload","FilterKind","OperatorKind","FilterPartKind","SuggestionKind","DataSourceProxyClient","dataSourceUid","LabelsApiClient","queryToMatchers","query","labelsIndex","indexOf","substring","fetchLabels","_post","matchers","start","end","fetchLabelValues","labelId","MemoryCacheClient","buildCacheKey","arg","store","delete","invariant","check","AbstractRepository","setApiClient","apiClient","setCacheClient","cacheClient","cancel","LabelsRepository","parseLabelsResponse","Array","isArray","Set","isNotMetaLabelOrServiceName","parseLabelValuesResponse","assertParams","listLabels","cacheParams","labelsFromCacheP","labels","fetchP","listLabelValues","labelValuesFromCacheP","labelsRepository","areFiltersEqual","newFilters","previousFilters","newFiltersWithoutPartial","partial","previousFiltersWithoutPartial","every","attribute","operator","IsEmptyFilter","buildIsEmptyFilter","filtersToQuery","filters","labelsList","in","serviceNameLabel","match","replace","getLastFilter","isMultipleValuesOperator","isPartialFilter","isEditingOperatorMode","currentOperator","newOperator","isSwitchingOperatorMode","filterUnderEdition","parseRawFilters","rawFilters","matches","matchAll","LABELS_REGEX","REGEX_CHARS_REGEX","queryToFilters","rawLabels","nanoid","v","trim","toggleCompleteFilters","updateFiltersAndQuery","isQueryUpToDate","inputParams","cancelAllLoad","setFilterAttribute","assign","event","editFilterAttribute","filterId","setFilterOperator","editFilterOperator","newEdition","previousOperator","part","setFilterValue","editFilterValue","removeFilter","removeLastFilter","lastFilter","concat","setEdition","changeInputParams","activateFilters","getFilterUnderEdition","guards","shouldSuggestAttributes","shouldSuggestOperators","shouldSuggestValues","isEditing","shouldSuggestValuesAfterOperatorEdition","shouldNotSuggestValuesAfterOperatorEdition","hasPartialFilter","shouldEditAttribute","shouldEditOperator","shouldEditValue","operatorsRepository","list","description","isPrivateLabel","startsWith","handleError","services","publicLabels","privateLabels","forEach","fetchOperators","targetFilter","suggestions","autoSuggestProxy","always","cond","MESSAGES","FILTER_ADD","SELECT_LABEL","SELECT_OPERATOR","SELECT_VALUE","SELECT_VALUES","TYPE_VALUE","LOADING","ERROR_LOAD","SUGGESTIONS_NONE","SUGGESTIONS_DISABLED","isRegexOperator","idle","entry","placeholder","allowCustomValue","defaultContext","on","START_INPUT","EDIT_FILTER","REMOVE_FILTER","REMOVE_LAST_FILTER","CHANGE_INPUT_PARAMS","EXECUTE_QUERY","loadLabels","isVisible","invoke","onDone","items","some","DISCARD_SUGGESTIONS","displayLabels","SELECT_SUGGESTION","loadLabelValues","displayLabelValues","targetOperator","noOptionsMessage","loadOperators","displayOperators","initial","predictableActionArguments","states","buildStateMachine","initialContext","stateMachine","createMachine","actor","interpret","localeCompare","Collator","sensitivity","compare","placeSelectedValuesFirst","b","aIsSelected","bIsSelected","MultipleEditionSelect","selection","onCloseMenu","defaultValue","selectionValues","selectionLabels","setValues","sortedOptions","sort","newValues","onInternalCloseMenu","MultiSelect","editionSelect","closeMenuOnSelect","hideSelectedOptions","backspaceRemovesValue","autoFocus","invalid","SingleEditionInput","onFocus","onBlur","inputRef","useRef","setInvalid","current","focus","Input","ref","onKeyUp","e","code","SingleEditionSelect","ChicletAttributeOperator","onRemove","chiclet","inactiveChiclet","Tag","chicletAttribute","chicletOperator","tabIndex","chicletRemoveButton","ChicletAttributeOperatorValue","Tooltip","chicletValue","PartialChiclet","partialChiclet","colorIndex","activeBackgroundColor","inactiveBorderColor","maxContrast","ChicletComponent","TypeError","Chiclet","prevProps","nextProps","chicletsList","editChicletContainer","ChicletsListComponent","onClickChiclet","onRemoveChiclet","onChangeSingleSuggestion","onCloseSingleSuggestionsMenu","onCloseMultipleSuggestionsMenu","ChicletsList","select","SingleSelect","onKeyDown","setIsOpen","setTimeout","useEnsureIsOpenHack","DisabledSelect","MultipleSelect","onInternalKeyDown","queryBuilder","controls","executeButton","QueryBuilderComponent","internalProps","onChangeQuery","send","setInternalProps","subscribe","stop","useStateMachine","useChicletHandlers","onSingleSelectKeyDown","onCloseSingleMenu","onMultipleSelectKeyDown","onCloseMultipleMenu","queryBuilderId","suggestion","previousSuggestionsIsVisible","state","usePrevious","blur","useSelectHandlers","onClickExecute","autoExecute","onTransition","off","QueryBuilder","getProfileMetric","profileMetricId","PROFILE_METRICS","group","PYROSCOPE_DATA_SOURCE","PYROSCOPE_SERIES_DATA_SOURCE","PYROSCOPE_FAVORITES_DATA_SOURCE","PYROSCOPE_LABELS_DATA_SOURCE","ProfileMetricVariable","QueryVariable","onActivate","setState","DEFAULT_VALUE","update","force","loading","lastValueFrom","getValueOptions","buildCascaderOptions","optionsMap","profileMetric","nameSpaceServices","datasource","QUERY_DEFAULT","refresh","VariableRefresh","onTimeRangeChanged","onSelect","newValue","skipUrlSync","changeValueTo","bind","addActivationHandler","QUERY_SERVICE_NAME_DEPENDENT","Component","model","cascaderOptions","iconError","Cascader","separator","displayAllSelectedLevels","initialValue","changeOnSelect","ServiceNameVariable","serviceName","serviceNameFromStorage","subscribeToState","newState","prevState","storage","selectNewValue","QUERY_PROFILE_METRIC_DEPENDENT","serviceNames","sortedServiceNames","rootElements","hierarchy","serviceId","currentPath","previousPath","isComplete","parent","buildServiceNameCascaderOptions","useBuildPyroscopeQuery","sceneObject","filterKey","sceneGraph","findByKeyAndType","filterExpression","FiltersVariable","ProfilesDataSourceVariable","DataSourceVariable","pluginId","convertPyroscopeToVariableFilter","searchForFilter","filtersWithoutFound","f","addToFilters","filterToAdd","includeLabelValue","filterForInclude","foundValues","add","excludeLabelValue","filterForExclude","clearLabelValue","filterForClear","filteredValues","isFilterValid","AdHocFiltersVariable","reset","resetAll","dataSourceSub","unsubscribe","expressionBuilder","operators","uniq","getSceneVariableValue","variableName","lookupVariable","getValue","PanelType","ScenePanelTypeSwitcher","SceneObjectBase","getUrlState","panelType","updateFromUrl","stateUpdate","DEFAULT_PANEL_TYPE","_urlSync","SceneObjectUrlSyncConfig","keys","OPTIONS","RadioButtonGroup","fullWidth","getColorByIndex","index","visTheme","theme2","visualization","getColorByName","palette","getSeriesLabelFieldName","metricField","getSeriesStatsValue","series","displayName","parseQuery","labelsSelector","m","withPreventInvalidQuery","queryRunner","profileTypeId","labelSelector","refId","buildErrorData","interpolate","errorMsg","LoadingState","errors","buildTimeSeriesQueryRunner","groupBy","limit","annotations","completeFilters","selector","SceneQueryRunner","queryType","addRefId","source","pipe","d","merge","addStats","totalSeriesCount","maxValue","NEGATIVE_INFINITY","allValuesSum","field","SceneLabelValuesBarGauge","item","sub","$data","Done","getConfig","publishEvent","max","groupByLabel","queryRunnerParams","reduceOptions","calcs","orientation","VizOrientation","Horizontal","displayMode","BarGaugeDisplayMode","Gradient","valueMode","BarGaugeValueMode","Text","showUnfilled","sizing","BarGaugeSizing","Manual","titleSize","valueSize","namePlacement","BarGaugeNamePlacement","Top","minVizHeight","maxVizHeight","legend","showLegend","fieldConfig","defaults","min","thresholds","ThresholdsMode","Percentage","steps","overrides","getOverrides","startColorIndex","matcher","FieldMatcherID","byFrameRefID","properties","fixedColor","headerActions","PanelBuilders","bargauge","setTitle","setData","SceneDataTransformer","transformations","setHeaderActions","build","formatSingleSeriesDisplayName","metricFieldUnit","isRateCalculated","rateCalculated","custom","isRateCalculatedByBackend","displayValue","displayLabel","valueField","displayFormatted","maxValueFormatted","suffix","SceneLabelValuesHistogram","legendPlacement","TooltipDisplayMode","Single","SortOrder","None","LegendDisplayMode","List","lineWidth","histogram","SceneLabelValuesTable","cardinality","unitValue","filterable","cellOptions","table","DataTransformerID","reducers","labelsToFields","filterFieldsByName","exclude","renameByRegex","regex","renamePattern","sortBy","desc","computeRoundedTimeRange","floor","valueOf","pLimit","LabelsDataSource","RuntimeDataSource","other","getParams","scopedVars","range","__sceneObject","labelName","metricFindQuery","_","isActive","variable","labelsWithValuesAndCount","all","sortedLabels","testDatasource","MAX_TIMESERIES_LABEL_VALUES","getProfileMetricLabel","SCALE_TYPES","scaleDistribution","ScaleDistribution","Linear","Log","SceneTimeseriesMenu","buildMenuItems","addToInvestigationLink","scaleType","menuItems","subMenu","onClickScaleOption","iconClassName","onClickExplore","existingAddToInvestigationItem","scale","getAncestor","SceneLabelValuesTimeseries","changeScale","exploreUrl","rawTimeRange","exploreState","toURLRange","panelsState","subUrl","urlUtil","renderUrl","panes","schemaVersion","getExploreUrl","getInterpolatedQuery","timeseries","nonInterpolatedQuery","entries","useGetInvestigationPluginLinkContext","parsedQuery","titleParts","origin","logoPath","useUpdateMenuItems","extensionPointId","pluginLinks","usePluginLinks","links","useGetPluginExtensionLink","VizPanelMenu","dataSub","handleDataStateChange","profileMetricSub","subscribeToProfileMetricChanges","retainPreviousAnnotations","updateBodyConfig","displayAllValues","getAllValuesConfig","handleProfileMetricChange","currentData","buildDescription","fillOpacity","gradientMode","GraphGradientMode","Opacity","pointSize","updateItem","partialItem","updatedItem","isEqual","runQueries","axisLabel","clearFieldConfigCache","setMenu","vizPanelBuilder","BARGAUGE","TABLE","HISTOGRAM","TIMESERIES","throttleInterval","mousePosition","setMousePosition","x","y","updateMousePosition","throttle","clientX","clientY","removeEventListener","GrotNotFound","height","show404","useMousePosition","SVG","isDark","dark404","light404","svg","xPos","yPos","innerWidth","innerHeight","heightRatio","widthRatio","rotation","getIntermediateValue","translation","transform","transformOrigin","transition","ratio","EmptyState","Box","paddingY","direction","gap","SceneEmptyState","SceneErrorState","LayoutType","SceneLayoutSwitcher","DEFAULT_LAYOUT","SceneNoDataSwitcher","hideNoData","InlineSwitch","showLabel","checked","SceneQuickFilter","setPlaceholder","setResultsCount","resultsCount","searchText","DEFAULT_SEARCH_TEXT","clearSearchText","DEBOUNCE_DELAY","prefix","FavoritesDataSource","getAllFavorites","favorites","areFavoritesEqual","f1","f2","exists","favorite","addFavorite","removeFavorite","textParts","interpolateQueryRunnerVariables","interpolatedParams","clone","parsedFilters","uniqBy","FavAction","isFav","isStored","buildFavorite","skipVariablesInterpolation","_variableDependency","VariableDependencyConfig","variableNames","onReferencedVariableValueChanged","favAfterClick","favedButton","notFavedbutton","tooltipPlacement","sortFavGridItems","aIsFav","bIsFav","GRID_AUTO_ROWS","SceneByVariableRepeaterGrid","buildGridItemKey","getGridColumnsTemplate","ROWS","variableSub","renderGridItems","refreshSub","subscribeToRefreshClick","quickFilterSub","subscribeToQuickFilterChange","layoutChangeSub","subscribeToLayoutChange","hideNoDataSub","subscribeToHideNoDataChange","filtersSub","subscribeToFiltersChange","originalRefresh","never","onClickRefresh","refreshButton","setAttribute","removeAttribute","quickFilter","debounce","layoutSwitcher","onChangeState","templateColumns","noDataSwitcher","filtersVariable","buildItemsData","mapOptionToItem","variableValues","filterItems","sortItemsFn","shouldRenderItems","newItems","forceRender","renderErrorState","renderEmptyState","gridItems","vizPanel","setupHideNoData","SceneCSSGridItem","autoRows","subscribeToEvent","gridItem","gridItemKey","grid","SceneCSSGridLayout","filteredChildren","c","quickFilterScene","regexes","t","r","RegExp","isLazy","$behaviors","behaviors","sync","DashboardCursorSync","Crosshair","EventExpandPanel","EventSelectLabel","EventViewServiceFlameGraph","EventViewServiceLabels","EventViewServiceProfiles","Events","ariaLabel","EventConstructor","SelectAction","buildEvent","lookup","selectButton","SceneExploreAllServices","getVariablesAndGridControls","variables","gridControls","$variables","SceneVariableSet","SceneDrawer","Drawer","closeOnMaskClick","onClose","FavoriteVariable","SceneExploreFavorites","expandPanelSub","openExpandedPanelDrawer","drawer","GroupBySelector","mainLabels","onRefresh","labelSelectorRequiredWidth","setLabelSelectorRequiredWidth","availableWidth","setAvailableWidth","useHorizontalLabelSelector","controlsContainer","useResizeObserver","onResize","element","clientWidth","mainOptions","otherOptions","textWidth","measureText","Field","selected","isClearable","GroupByVariable","RefreshPicker","noIntervalPicker","isOnCanvas","onIntervalChanged","findCurrentOption","parsedValue","MAX_MAIN_LABELS","groupByOptions","groupByErrorContainer","getMainLabels","SceneMainServiceTimeseries","supportGroupBy","initVariables","buildTimeseries","subscribeToGroupByStateChanges","timeseriesItem","buildTitle","groupByVariable","_subs","onGroupByChanged","resetTimeseries","resetFilters","MIN_HEIGHT","EventViewDiffFlameGraph","EventSelectForCompare","CompareAction","checkboxRef","showTooltip","setShowTooltip","closest","onMouseEnter","onMouseLeave","show","tooltipAnchor","Checkbox","checkbox","StatsPanel","itemStats","statsDescription","compareActionChecks","onChangeCompareTarget","total","inline","style","compareActions","canvas","border","weak","SceneStatsPanel","SceneGroupByLabels","getCompare","updateCompareActions","getStatsDescription","baselineItem","comparisonItem","getStats","updateStats","compareTarget","WIDTH_IN_PIXELS","SceneLabelValuePanel","buildPanelKey","statsPanel","timeseriesPanel","timeseriesSub","isSelected","buildLabelValuesGridQueryRunner","SceneLabelValuesGrid","subscribeOnceToDataChange","groupBySub","subscribeToGroupByChange","Loading","refetchData","labelValue","loadingState","buildVizPanel","marginBottom","EventClearLabelFromFilters","EventExcludeLabelFromFilters","EventIncludeLabelInFilters","FilterButtonsComponent","include","onInclude","onExclude","onClear","isIncludeSelected","isExcludeSelected","getStatus","aria-selected","includeButton","excludeButton","FilterButtons","shape","radius","default","IncludeExcludeAction","CompareControls","onClickCompare","onClickClear","compareIsDisabled","hasSelection","arial-label","compareButton","clearButton","clearButtonActive","medium","initVariablesAndControls","renderBody","panelEventsSub","subscribeToPanelEvents","panelTypeChangeSub","selectLabelSub","selectLabel","selectForCompareSub","selectForCompare","includeFilterSub","includeLabelValueInFilters","excludeFilterSub","excludeLabelValueFromFilters","clearFilterSub","clearLabelValueFromFilters","subscribeToPanelTypeChange","switchToLabelNamesGrid","switchToLabelValuesGrid","buildSceneLabelNamesGrid","clearCompare","buildSceneLabelValuesGrid","groupByValue","filterToInclude","filterToExclude","filterToClear","updateStatsPanels","statsPanels","findAllObjects","panel","onClickCompareButton","baselineFilters","comparisonFilters","useAncestorTimeRange","clearDiffRange","onClickClearCompareButton","groupByVariableValue","SceneProfilesExplorer","sceneControls","wrap","control","SceneExploreServiceLabels","profileMetricVariable","timeseriesTitle","SceneFlexLayout","SceneFlexItem","minHeight","SceneExploreServiceProfileTypes","buildTimeRange","getDefaultTimeRange","SpanSelectorVariable","CustomVariable","formatSeriesToProfileMetrics","pyroscopeSeries","profileMetricsMap","profileMetrics","formatSeriesToServices","servicesSet","DataSourceProxyClientBuilder","ApiClientClass","cacheKey","cachedInstance","cache","clientInstance","findServiceNameAndProfileMetricId","formatSeriesResponse","labelsSet","serviceProfileMetrics","profileMetricServices","SeriesApiClient","labelNames","seriesRepository","responseFromCacheP","SeriesDataSource","fetchSeries","file_types_v1_types","fileDesc","file_settings_v1_recording_rules","StacktraceFilterSchema","messageDesc","StacktraceFilterFunctionNameSchema","MetricType","recordingRulesApiClient","rules","rule","functionName","stacktraceFilter","metricName","readonly","provisioned","mapRuleToRecordingRuleViewModel","create","requestBody","metricType","TOTAL","remove","useFetchRecordingRules","useQueryClient","mutateAsync","mutate","useMutation","mutationFn","invalidateQueries","recordingRules","useCreateRecordingRule","fetchError","save","METRIC_NAME_PREFIX","SceneCreateRecordingRuleModal","onCreated","setOptions","explorationType","ExplorationType","ALL_SERVICES","FAVORITES","useCurrentServiceName","filterQuery","register","handleSubmit","formState","useForm","shouldUnregister","onSubmit","form","MetricNameErrorComponent","alignContent","fontFamily","input","paddingLeft","required","pattern","Controller","render","opt","toggleAllOptions","hidden","ButtonRow","ul","errorList","li","EventEnableSyncTimeRanges","EventSyncRefresh","EventSyncTimeRanges","SceneTimePickerWithoutSync","SceneTimePicker","hidePicker","timeZone","getTimeZone","timeRangeState","TimeRangePicker","onTimeRangeChange","fiscalYearStartMonth","onMoveBackward","onMoveForward","onZoom","onChangeTimeZone","onTimeZoneChange","onChangeFiscalYearStartMonth","isSynced","INTERVAL_STRING_REGEX","parseUrlParam","utcValue","toUtc","isValid","toISOString","epoch","parseInt","isNaN","RangeAnnotation","MutableDataFrame","addRange","isRegion","time","boolean","addField","TimeRangeWithAnnotationsMode","TIMERANGE_NIL","dateTime","SceneTimeRangeWithAnnotations","omit","getAncestorTimeRange","getTimeseries","updateTimeseriesAnnotation","VizPanel","annotationTimeRange","annotationColor","annotationTitle","annotation","timeEnd","setAnnotationTimeRange","updateTimeseries","nullifyAnnotationTimeRange","diffFrom","diffTo","buildAnnotationTimeRange","delay","hasDelay","dateMath","evaluateTimeRange","UNSAFE_nowDelay","EventSwitchTimerangeSelectionMode","TimerangeSelectionMode","SwitchTimeRangeSelectionModeAction","newMode","dl","dt","dd","buildCompareTimeSeriesQueryRunner","BASELINE_COLORS","COLOR","Color","OVERLAY","alpha","COMPARISON_COLORS","SceneComparePanel","$timeRange","setDiffRange","findByKey","buildTimeseriesTitle","eventSub","subscribeToEvents","buildTimeSeriesPanel","buildSeriesOverrides","configureTimeRange","getProperLabel","formatTotalValue","labelMatch","displayUnit","safeDisplayUnit","formattedValue","ANNOTATIONS","getDiffRange","$annotationTimeRange","switchSub","FLAMEGRAPH","DEFAULT","annotationTimeRangeSub","timeRangeSyncEnabled","timeRangeSub","updateTitle","syncStepSizeWithSibling","useDiffTimeRange","applyPreset","setTimeRange","newTimeRange","isSame","$diffTimeRange","newAnnotationTimeRange","autoSelectDiffRange","selectWholeRange","subtract","newTitle","toggleTimeRangeSync","refreshTimeseries","myData","siblingPanel","getSiblingPanel","siblingData","getSiblingData","performStepSynchronization","parentState","comparisonPanel","baselinePanel","myStep","extractStepDuration","siblingStep","abs","targetStep","lastSyncedStepSec","updateQueryStep","timeField","times","targetStepSec","updatedQueries","step","SceneTimeRange","timePicker","refreshPicker","SceneRefreshPicker","onClickTimeRangeSync","enable","panelHeader","h6","colorCircle","timeControls","syncButton","shade","useToggleSidePanel","openPanelId","setOpenPanelId","onOpenHandler","setOnOpenHandler","onOpen","handler","panelId","DEFAULT_SETTINGS","maxNodes","enableFunctionDetails","enableMetricsFromProfiles","SettingsApiClient","setting","settings","PLUGIN_SETTING_NAME","newSettings","useSettingsApiClient","useFetchPluginSettings","settingsApiClient","InlineBanner","errorContext","DelayRender","shouldRender","setShouldRender","PanelMenu","menu","dragClassCancel","menuButtonClass","onVisibleChange","onOpenMenu","testId","selectors","components","Panels","Panel","handleVisibility","ToolbarButton","iconSize","narrow","HoverWidget","dragClass","draggableRef","e2eSelectors","onPointerDown","setPointerCapture","pointerId","onPointerUp","releasePointerCapture","menuOpen","setMenuOpen","top","square","draggable","dragIcon","draggableIcon","untitled","menuButton","visibility","opacity","position","zIndex","boxSizing","borderRadius","boxShadow","shadows","z1","cursor","down","fontStyle","padding","TitleItem","forwardRef","rest","linkItem","headerHeight","getFocusStyles","outline","outlineOffset","transitionTimingFunction","transitionDuration","transitionProperty","PanelDescription","interactive","panelDescription","dangerouslySetInnerHTML","__html","whiteSpace","wordWrap","PanelStatus","buttonStyles","GrafanaPanelBox","titleItems","hoverHeader","hoverHeaderOffset","statusMessage","statusMessageOnClick","onCancelQuery","setWidth","childrenContainerRef","offsetWidth","hasHeader","getHeaderHeight","contentStyle","getContentStyle","headerStyles","containerStyles","backgroundColor","testid","headerContent","Streaming","streaming","pointer","rightAligned","rightActions","itemsRenderer","loadingBarContainer","LoadingBar","errorContainerFloating","headerContainer","menuItem","renderer","toRender","toArray","gridSize","borderColor","action","overflow","flexGrow","marginRight","success","textOverflow","fontWeight","hiddenMenu","marginLeft","panelWrap","dataTestId","AIButton","isEnabled","openai","useFetchLlmPluginStatus","aiButton","onClickSearchTerm","searchInputElement","valueSetter","getOwnPropertyDescriptor","prototypeValueSetter","getPrototypeOf","call","setNativeValue","textContent","dispatchEvent","Event","bubbles","MARKDOWN_OPTIONS","component","searchLink","AiReply","reply","messages","role","Markdown","hr","textarea","sendButton","FollowUpForm","question","onChangeInput","onClickSend","setQuestion","questionToSend","useFollowUpForm","TextArea","shiftKey","prompts","system","empty","single","profiles","anton","buildPrompts","systemPrompt","userPrompt","ProfileApiClient","params","until","SceneAiPanel","validateFetchParams","isDiff","fetchParams","useSceneAiPanel","validationError","profileApiClient","flatMap","useFetchDotProfiles","llmError","setReply","replyHasStarted","setReplyHasStarted","replyHasFinished","setReplyHasFinished","setMessages","setError","subscription","setSubscription","sendMessages","messagesToSend","next","complete","askFollowupQuestion","messagesToAdd","hasStarted","hasFinished","useOpenAiChatCompletions","shouldDisplayReply","shouldDisplayFollowUpForm","submitFollowupQuestion","sidePanel","retryButton","EventDiffAutoSelect","EventDiffChoosePreset","useMaxNodesFromUrl","pushNewUrl","navigate","useNavigate","useLocation","newParams","newSearchParams","useUrlSearchParams","setMaxNodes","newMaxNodes","hasMaxNodes","useSetDefaultMaxNodes","DiffProfileApiClient","leftQuery","leftFrom","leftTimeRange","leftUntil","rightQuery","rightFrom","rightTimeRange","rightUntil","useFetchDiffProfile","baselineTimeRange","baselineQuery","comparisonTimeRange","comparisonQuery","diffProfileApiClient","previousData","MissingSelectionsBanner","onClickAutoSelect","onClickChoosePreset","onOpenLearnHow","isCollapseOpen","setIsCollapseOpen","infoMsg","textButton","Collapse","collapsible","collapse","onToggle","collapseContent","ol","alt","SceneDiffFlameGraph","profileMetricType","aiPanel","useSceneDiffFlameGraph","useDiffTimeRanges","fetchSettingsError","isDiffQueryEnabled","fetchProfileError","noProfileDataAvailable","numTicks","shouldDisplayFlamegraph","hasMissingSelections","ai","wholeRange","isAiButtonDisabled","panelTitle","flex","flamegraphPanel","FEEDBACK_FORM_URL","GiveFeedbackButton","wrapper","feedback","paddingTop","alignSelf","ScenePresetsPicker","openSelect","isSelectOpen","closeSelect","presetsContainer","PRESETS","onChangePreset","onOpenSelect","onCloseSelect","onClickSave","baseline","comparison","syncYAxis","maxima","cloneDeep","updateTimeseriesAxis","SceneExploreDiffFlameGraph","locationService","presetsPicker","targetPanel","syncTimeRanges","columns","VcsClient","githubLogin","authorizationCode","githubApp","GitSessionCookie","isUserTokenExpired","biasMs","now","expiry","getTime","decode","decoded","atob","isLegacy","tryDecode","oauthTokenMetadata","GITHUB_SESSION_COOKIE_NAME","InternalGitSessionCookieManager","getCookie","syncCookieWithBrowser","sessionCookie","setCookie","cookie","rawCookie","getCookieFromJar","deleteLegacyCookie","deleteCookie","jar","ck","gitSessionCookieManager","POPUP_WIDTH","POPUP_HEIGHT","openLoginPopup","clientId","nonce","callbackUrl","oauthURL","clientID","str","endsWith","redirectUri","GITHUB_CALLBACK","redirect_uri","buildGitHubAuthURL","outerWidth","screenX","outerHeight","screenY","vcsClient","privateVcsClient","externalWindow","setExternalWindow","callbackURL","authFromUrl","urlSearchParams","stateValue","usePollGitHubPopup","setSessionCookie","checkPopup","closed","tryGetWindowSearchParams","DEFAULT_GITHUB_CONTEXT","isLoginInProgress","isLoggedIn","isSessionExpired","login","GitHubContext","createContext","PLACEHOLDER_COMMIT_DATA","sha","author","avatarURL","PrivateVcsClient","repositoryUrl","gitRef","localPath","rootPath","postWithRefresh","repositoryURL","commits","getCommit","refreshSession","path","isRefreshing","queueRequest","sessionManager","BIAS_MS","flushQueue","post","pendingQueue","err","fromCharCode","crypto","getRandomValues","Uint8Array","SESSION_DATA_SOURCE_KEY","GitHubContextProvider","setIsLoginInProgress","nextValue","useGithubSessionCookie","sessionStorage","newIsLoginInProgress","Provider","FunctionVersionOrigin","FunctionVersionContext","FunctionVersionProvider","setOverrides","useLocalStorage","saveOverride","datasourceUid","deleteOverride","deleteAllOverrides","getFunctionVersion","defaultVersion","overriddenVersion","functionVersionOrigin","functionVersion","useFunctionVersion","useContext","useFunctionVersionContext","RemoveSpanSelector","featureToggles","metricsFromProfiles","grafanaAssistantInProfilesDrilldown","buildFlameGraphQueryRunner","spanSelector","PprofRequest","Message","profile_typeID","label_selector","max_nodes","PprofApiClient","buildPprofRequest","encode","finish","selectMergeProfile","Blob","selectMergeProfileJson","stackTrace","stackTraceSelector","call_site","dateString","SceneExportMenu","fetchFlamebearerProfile","fetchPprofProfile","pprofApiClient","Response","stream","pipeThrough","CompressionStream","useSceneExportMenu","downloadPprof","useGitHubContext","useGitHubIntegration","isFunctionDetailsEnabled","stacktrace","setStacktrace","getExtraFlameGraphMenuItems","levelItem","dp","getDisplayProcessor","idx","itemIndexes","parents","buildStackTrace","buildSuggestionPrompts","functionDetails","lines","line","cum","codeInfoToAnnotatedCode","useAiSuggestionsPanel","suggestionPromptInputs","useOpenAiSuggestions","AiSuggestionsPanel","VERTICAL_LINES_PADDING","buildGithubUrlForFunction","startLine","newUrl","org","repo","useCodeContainer","openAiSuggestions","setOpenAiSuggestions","fileInfo","repository","getFile","useFetchVCSFile","fileName","git_ref","root_path","snippetLines","allLines","callSitesMap","callSites","annotatedLines","lineNumber","callSite","number","flat","firstLineIndex","lastLineIndex","annotateLines","annotatedSnippet","annotatePlaceholderLines","isLoadingCode","githubUrl","annotatedLine","annotateLine","noCodeAvailable","buildUnitFormatter","Code","onOptimizeCodeClick","fmt","formatValue","formatted","trimIndentPrefix","sumSelf","sumTotal","accSelf","accTotal","breakdownLabel","buttons","LinkButton","pre","codeBlock","highlighted","codeBlockHeader","formatLine","cols","padStart","commonPrefix","getIndentPrefix","longestCommonPrefix","prefixLen","CodeContainer","getElementById","scrollIntoView","behavior","ellipsis","GitHubRepository","enableIntegration","commitUrl","commitName","getCommitsWithSamples","functionsDetails","totalSamples","details","samples","GITHUB_URL","getRepositoryDetails","isGitHub","buildDetails","func","mapping","stringTable","buildId","sampleType","convertSample","fnName","locations","functions","mappings","sample","versions","locationIdSet","locationId","functionId","mappingId","addCallSiteValue","fetchCommitsInfo","defaultFunctionVersion","getCommits","getTotalSum","fd","sortByTotal","DEFAULT_FUNCTION_VERSION","useFetchFunctionsDetails","isGitHubLogged","queryError","pprof","l","function","convertPprofToFunctionDetails","CUTOFFS","Infinity","UNITS","RTF","RelativeTimeFormat","numeric","DTF","formatCommitDate","commitDate","timeMs","deltaSeconds","unitIndex","findIndex","cutoff","divisor","getRelativeTimeString","firstLine","secondLine","avatar","CommitOption","commitAuthor","commitAuthorAvatarUrl","samplePercent","getCommitShortSha","getCommitShortMessage","CommitOptionSelected","CommitSelect","selectedCommit","isSearchable","formatOptionLabel","formatOption","formatOptionMeta","selectValue","GitHubIntegrationBanner","buttonContent","TextLink","external","InlineSpinnerComponent","InlineSpinner","OverrideRepositoryDetailsButton","saveOverrides","setOpen","USER","DataSourcePicker","ConfirmButton","confirmVariant","confirmText","onConfirm","SceneFunctionDetailsPanel","useSceneFunctionDetailsPanel","currentFunctionDetails","dataSourceName","fetchFunctionDetailsError","prevFunctionsDetails","setPrevFunctionsDetails","setCurrentFunctionDetails","isGitHubBannerDismissed","setIsGitHubBannerDismissed","isGitHubRepo","isGitHubSupported","shouldDisplayGitHubBanner","deleteFunctionOverride","deleteFunctionAllOverrides","saveFunctionDetails","selectCommit","copyFilePathToClipboard","navigator","clipboard","writeText","dismissGitHubBanner","LABEL_WIDTH","InlineLabel","textValue","datasourceName","SpanSelectorLabel","removeSpanSelector","SceneFlameGraph","dataSubscription","stateSubscription","newDataState","lastTimeRange","exportMenu","functionDetailsPanel","createRecordingRuleModal","useSceneFlameGraph","$dataState","isFetchingSettingsError","isFetchingProfileData","hasProfileData","export","gitHub","modal","gitHubIntegration","recordingRulesModalState","setRecordingRulesModalState","recordingRulesMenu","setModalOpen","isAvailable","useAssistant","hideAIButton","clickedItemData","SceneExploreServiceFlameGraph","mainTimeseries","onClickShareLink","shareableUrl","builsShareableUrl","ExplorationTypeSelector","activeIndex","explorationTypeContainer","breadcrumb","currentIndex","extraClasses","Fragment","arrow","Header","chromeHeaderHeight","useChromeHeaderHeight","onChangeExplorationType","timePickerControl","refreshPickerControl","DIFF_FLAME_GRAPH","dataSourceVariable","bodySceneObject","sceneVariables","onClickRecordingRules","RECORDING_RULES","referrer","onClickAdHoc","ADHOC","onClickUserSettings","useHeader","InsightsLauncher","usePluginComponent","metricsFromProfilesMenu","onCreateRecordingRule","appControls","appControlsLeft","EXPLORATION_TYPE_OPTIONS","appControlsRight","ErrorBoundary","getValueText","appMiscButtons","sceneVariable","sceneVariableLabel","gridControl","varSub","subscribeToVariableChanges","eventsSub","setExplorationType","DEFAULT_EXPLORATION_TYPE","registerRuntimeDataSources","sceneUtils","registerRuntimeDataSource","resetSpanSelector","serviceNameSub","profileTypeSub","profilesSub","comesFromUserAction","labelsSub","flameGraphSub","diffFlameGraphSub","bodySceneOptions","removeSpanSelectorSub","resetVariables","buildBodyScene","nextExplorationType","SplitLayout","useProfilesExplorer","getUrlSyncManager","initSync","ProfilesExplorerView","sceneProfilesExplorer","DeleteRecordingRuleButton","confirm","ConfirmModal","useRecordingRulesView","removeRecordingRule","RecordingRulesView","sortType","cell","original","TagList","tagList","displayMax","tags","disableGrow","formattedRules","isEmpty","RecordingRulesViewError","InteractiveTable","pageSize","getRowId","errorMessage","useUISettingsView","currentSettings","setCurrentSettings","toggleCollapsedFlamegraphs","updateMaxNodes","toggleEnableFlameGraphDotComExport","toggleEnableFunctionDetails","toggleEnableMetricsFromProfiles","saveSettings","UISettingsView","settingsForm","preventDefault","FieldSet","labelWidth","fontWeightBold","SETTINGS_EXTENSION_POINT_ID","useSettingsView","maxNodesFromUrl","activeTab","setActiveTab","referrerRef","usePluginComponents","tab","goBack","backUrl","SettingsView","builtInTabs","pluginProps","backButton","allTabs","Space","Routes","ReactRouterRoutes","Route","GitHubCallback","Navigate","ErrorPage","App","QueryClientProvider","client","pageContainer","faroEnvironment","getFaroEnvironment","userEmail","email","grafanaVersion","instance","initializeFaro","app","release","namespace","instrumentations","getWebInstrumentations","captureConsole","isolate","beforeSend","initFaro"],"sourceRoot":""}